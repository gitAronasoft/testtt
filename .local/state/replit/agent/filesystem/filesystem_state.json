{"file_contents":{"replit.md":{"content":"# VideoHub - Video Management Platform\n\n## Overview\n\nVideoHub is a comprehensive video management platform designed for creators, viewers, and administrators. The platform enables video content monetization, user management, and analytics tracking. It features a multi-role architecture with distinct interfaces for admins, creators, and viewers, each with tailored functionality for their specific needs.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Pure HTML/CSS/JavaScript**: Client-side implementation using vanilla JavaScript modules for maintainability\n- **Bootstrap 5**: CSS framework for responsive design and UI components\n- **Font Awesome**: Icon library for consistent iconography\n- **Chart.js**: Data visualization library for analytics dashboards\n- **Modular JavaScript**: Organized into separate modules (auth.js, admin.js, creator.js, viewer.js, payment.js, common.js)\n\n### Multi-Role User Interface\n- **Landing Page**: Marketing-focused homepage with user registration/login\n- **Admin Panel**: User management, video moderation, system analytics with dark theme and left sidebar navigation\n- **Creator Studio**: Video upload, earnings tracking, content analytics with green theme and left sidebar navigation  \n- **Viewer Interface**: Dashboard, video browsing, purchasing, playback with primary blue theme and unified navigation with dashboard and left sidebar structure\n\n### Authentication & Authorization\n- **Role-based Access Control**: Three distinct user types (admin, creator, viewer)\n- **Demo Authentication**: Hardcoded credentials for demonstration purposes\n- **Session Management**: Client-side session handling with localStorage\n- **Email Verification**: Mock email verification workflow for user onboarding\n\n### Video Management System\n- **Content Organization**: Categorized video library with metadata (title, description, price, duration)\n- **Monetization**: Pay-per-video model with earnings tracking\n- **Video Player**: HTML5 video player with custom controls and playback features\n- **Content Moderation**: Admin tools for video approval and management\n\n### Payment Processing\n- **Mock Payment System**: Simulated payment processing for demonstration\n- **Multiple Payment Methods**: Support for cards, PayPal, and mobile wallets\n- **Transaction Management**: Purchase history and earnings tracking\n- **Demo Mode**: Simplified payment flow for testing and demonstration\n\n### Analytics & Reporting\n- **Multi-dashboard Analytics**: Separate analytics views for admins and creators\n- **Performance Metrics**: View counts, engagement rates, earnings data\n- **Chart Visualizations**: Interactive charts using Chart.js library\n- **Real-time Updates**: Dynamic data updates for dashboard metrics\n\n## External Dependencies\n\n### Frontend Libraries\n- **Bootstrap 5.3.0**: UI framework and responsive grid system\n- **Font Awesome 6.0.0**: Icon font library for consistent iconography\n- **Chart.js**: JavaScript charting library for analytics visualizations\n\n### Content Delivery\n- **Bootstrap CDN**: External CSS and JavaScript delivery\n- **Font Awesome CDN**: Icon font delivery\n- **Chart.js CDN**: Analytics library delivery\n\n### Mock Services\n- **Placeholder Images**: Via.placeholder.com for demo video thumbnails\n- **Demo Payment Processing**: Simulated payment workflows\n- **Mock Video Content**: Placeholder video files and metadata\n\n### Architecture Considerations\n- **Static File Hosting**: Designed for deployment on static hosting platforms\n- **No Backend Dependencies**: Pure client-side implementation for simplicity\n- **Scalable Structure**: Modular design allows for future backend integration\n- **Cross-browser Compatibility**: Standard HTML5/CSS3/ES6 features\n- **Consistent UI/UX**: All user interfaces now follow consistent sidebar navigation pattern\n- **Unified Branding**: Consistent VideoHub branding across all user panels (VideoHub Admin, VideoHub Creator, VideoHub Viewer)","size_bytes":4009},"assets/css/styles.css":{"content":"/* VideoHub - Custom Styles */\n\n/* Global Variables */\n:root {\n    --primary-color: #0d6efd;\n    --secondary-color: #6c757d;\n    --success-color: #198754;\n    --danger-color: #dc3545;\n    --warning-color: #ffc107;\n    --info-color: #0dcaf0;\n    --light-color: #f8f9fa;\n    --dark-color: #212529;\n    --border-radius: 0.375rem;\n    --box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n    --box-shadow-lg: 0 1rem 3rem rgba(0, 0, 0, 0.175);\n}\n\n/* General Styles */\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n    line-height: 1.6;\n    color: #212529;\n}\n\n.auth-bg {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n}\n\n/* Hero Section */\n.hero-section {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #0056b3 100%);\n    border-radius: var(--border-radius);\n}\n\n.bg-gradient {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #0056b3 100%);\n}\n\n/* Cards */\n.card {\n    border: none;\n    box-shadow: var(--box-shadow);\n    border-radius: var(--border-radius);\n    transition: all 0.3s ease;\n}\n\n.card:hover {\n    box-shadow: var(--box-shadow-lg);\n    transform: translateY(-2px);\n}\n\n.card-header {\n    background-color: #f8f9fa;\n    border-bottom: 1px solid #dee2e6;\n    font-weight: 600;\n}\n\n/* Border Left Colors for Cards */\n.border-left-primary {\n    border-left: 0.25rem solid var(--primary-color) !important;\n}\n\n.border-left-success {\n    border-left: 0.25rem solid var(--success-color) !important;\n}\n\n.border-left-info {\n    border-left: 0.25rem solid var(--info-color) !important;\n}\n\n.border-left-warning {\n    border-left: 0.25rem solid var(--warning-color) !important;\n}\n\n/* Sidebar */\n.sidebar {\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 100;\n    padding: 48px 0 0;\n    box-shadow: inset -1px 0 0 rgba(0, 0, 0, 0.1);\n}\n\n.sidebar .nav-link {\n    color: #333;\n    padding: 0.75rem 1rem;\n    border-radius: 0;\n    transition: all 0.3s ease;\n}\n\n.sidebar .nav-link:hover {\n    color: var(--primary-color);\n    background-color: rgba(0, 0, 0, 0.05);\n}\n\n.sidebar .nav-link.active {\n    color: var(--primary-color);\n    background-color: rgba(13, 110, 253, 0.1);\n    border-right: 3px solid var(--primary-color);\n}\n\n/* Video Thumbnails */\n.video-thumbnail {\n    position: relative;\n    overflow: hidden;\n    border-radius: var(--border-radius);\n    background-color: #000;\n    aspect-ratio: 16/9;\n}\n\n.video-thumbnail img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    transition: transform 0.3s ease;\n}\n\n.video-thumbnail:hover img {\n    transform: scale(1.05);\n}\n\n.video-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    color: white;\n}\n\n.video-thumbnail:hover .video-overlay {\n    opacity: 1;\n}\n\n.video-duration {\n    position: absolute;\n    bottom: 8px;\n    right: 8px;\n    background: rgba(0, 0, 0, 0.8);\n    color: white;\n    padding: 2px 6px;\n    border-radius: 3px;\n    font-size: 0.75rem;\n}\n\n.video-price {\n    position: absolute;\n    top: 8px;\n    left: 8px;\n    background: var(--success-color);\n    color: white;\n    padding: 4px 8px;\n    border-radius: var(--border-radius);\n    font-size: 0.75rem;\n    font-weight: 600;\n}\n\n/* Video Player Styles */\n.video-player-body {\n    background-color: #000;\n    color: #fff;\n}\n\n.video-player-container {\n    background-color: #000;\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n.video-wrapper {\n    position: relative;\n    width: 100%;\n    height: 0;\n    padding-bottom: 56.25%; /* 16:9 aspect ratio */\n    background-color: #000;\n}\n\n.video-player {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n    outline: none;\n}\n\n.video-loading-overlay,\n.video-error-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.8);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    z-index: 10;\n}\n\n/* Modal Video Player Styles */\n#videoPlayerModal .modal-xl {\n    max-width: 95%;\n}\n\n#videoPlayerModal .video-wrapper {\n    height: 400px;\n    padding-bottom: 0;\n}\n\n#videoPlayerModal .video-player {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.related-video-item {\n    cursor: pointer;\n    padding: 8px;\n    border-radius: 4px;\n    transition: background-color 0.2s;\n}\n\n.related-video-item:hover {\n    background-color: #f8f9fa;\n}\n\n.cursor-pointer {\n    cursor: pointer;\n}\n\n.custom-video-controls {\n    background: rgba(255, 255, 255, 0.1);\n    padding: 1rem;\n    border-radius: 0 0 var(--border-radius) var(--border-radius);\n}\n\n/* Video Cards */\n.video-card {\n    transition: all 0.3s ease;\n    border: none;\n    box-shadow: var(--box-shadow);\n}\n\n.video-card:hover {\n    box-shadow: var(--box-shadow-lg);\n    transform: translateY(-5px);\n}\n\n.video-card .card-body {\n    padding: 1rem;\n}\n\n.video-title {\n    font-size: 1rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n    color: #212529;\n    text-decoration: none;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n.video-title:hover {\n    color: var(--primary-color);\n}\n\n.video-creator {\n    color: #6c757d;\n    font-size: 0.875rem;\n    margin-bottom: 0.5rem;\n}\n\n.video-stats {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 0.75rem;\n    color: #6c757d;\n}\n\n/* Authentication Forms */\n.auth-card {\n    border: none;\n    box-shadow: var(--box-shadow-lg);\n    border-radius: var(--border-radius);\n}\n\n/* Password Strength Indicator */\n.password-strength {\n    margin-top: 0.5rem;\n}\n\n.strength-bar {\n    height: 4px;\n    background-color: #e9ecef;\n    border-radius: 2px;\n    transition: background-color 0.3s ease;\n}\n\n.strength-bar.weak {\n    background-color: var(--danger-color);\n}\n\n.strength-bar.fair {\n    background-color: var(--warning-color);\n}\n\n.strength-bar.good {\n    background-color: var(--info-color);\n}\n\n.strength-bar.strong {\n    background-color: var(--success-color);\n}\n\n/* Buttons */\n.btn {\n    border-radius: var(--border-radius);\n    font-weight: 500;\n    transition: all 0.3s ease;\n}\n\n.btn:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.btn-group .btn:hover {\n    transform: none;\n}\n\n/* Tables */\n.table th {\n    border-top: none;\n    font-weight: 600;\n    color: #495057;\n    background-color: #f8f9fa;\n}\n\n.table-responsive {\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n/* Pagination */\n.pagination .page-link {\n    border-radius: var(--border-radius);\n    margin: 0 2px;\n    border: 1px solid #dee2e6;\n    color: #495057;\n}\n\n.pagination .page-item.active .page-link {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n/* Form Controls */\n.form-control:focus,\n.form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);\n}\n\n/* Alerts */\n.alert {\n    border: none;\n    border-radius: var(--border-radius);\n}\n\n/* Demo Notice */\n.demo-notice {\n    border-radius: 0;\n}\n\n/* Loading States */\n.loading-spinner {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border: 3px solid rgba(255, 255, 255, 0.3);\n    border-radius: 50%;\n    border-top-color: #fff;\n    animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n/* Chart Container */\n.chart-container {\n    position: relative;\n    height: 400px;\n}\n\n/* Progress Bars */\n.progress {\n    height: 8px;\n    border-radius: 4px;\n    background-color: #e9ecef;\n}\n\n.progress-bar {\n    border-radius: 4px;\n    transition: width 0.3s ease;\n}\n\n/* Modals */\n.modal-content {\n    border: none;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow-lg);\n}\n\n.modal-header {\n    border-bottom: 1px solid #dee2e6;\n}\n\n.modal-footer {\n    border-top: 1px solid #dee2e6;\n}\n\n/* User Avatar */\n.user-avatar {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    object-fit: cover;\n}\n\n/* Comments */\n.comment-item {\n    border-bottom: 1px solid #e9ecef;\n    padding: 1rem 0;\n}\n\n.comment-item:last-child {\n    border-bottom: none;\n}\n\n.comment-avatar {\n    width: 48px;\n    height: 48px;\n    border-radius: 50%;\n    background-color: #e9ecef;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: #6c757d;\n}\n\n/* Related Videos */\n.related-videos-container {\n    max-height: 400px;\n    overflow-y: auto;\n}\n\n.related-video-item {\n    display: flex;\n    align-items: flex-start;\n    padding: 0.75rem;\n    margin-bottom: 0.5rem;\n    border-radius: 8px;\n    text-decoration: none;\n    color: inherit;\n    transition: all 0.3s ease;\n    background-color: #f8f9fa;\n    border: 1px solid #e9ecef;\n}\n\n.related-video-item:hover {\n    background-color: #e9ecef;\n    color: inherit;\n    transform: translateY(-1px);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.related-video-item:last-child {\n    margin-bottom: 0;\n}\n\n.related-video-thumbnail {\n    width: 80px;\n    height: 45px;\n    background-color: #000;\n    border-radius: 6px;\n    margin-right: 0.75rem;\n    flex-shrink: 0;\n    object-fit: cover;\n    position: relative;\n}\n\n.related-video-thumbnail::after {\n    content: '\\f04b';\n    font-family: 'Font Awesome 6 Free';\n    font-weight: 900;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: white;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    font-size: 12px;\n}\n\n.related-video-item:hover .related-video-thumbnail::after {\n    opacity: 1;\n}\n\n.related-video-info {\n    flex: 1;\n    min-width: 0;\n}\n\n.related-video-title {\n    font-size: 0.85rem;\n    font-weight: 600;\n    margin-bottom: 0.25rem;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    line-height: 1.3;\n    color: #212529;\n}\n\n.related-video-creator {\n    font-size: 0.75rem;\n    color: #6c757d;\n    margin-bottom: 0.125rem;\n}\n\n.related-video-duration {\n    font-size: 0.7rem;\n    color: #28a745;\n    font-weight: 500;\n}\n\n/* Enhanced Modal Sidebar */\n#videoPlayerModal .modal-xl .col-lg-4 {\n    border-left: 2px solid #e9ecef;\n}\n\n#videoPlayerModal .progress {\n    background-color: #e9ecef;\n    border-radius: 10px;\n}\n\n#videoPlayerModal .progress-bar {\n    border-radius: 10px;\n    background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);\n}\n\n#videoPlayerModal .form-control {\n    resize: none;\n    transition: all 0.3s ease;\n}\n\n#videoPlayerModal .form-control:focus {\n    border-color: #007bff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    background-color: white;\n}\n\n/* Custom scrollbar for related videos */\n.related-videos-container::-webkit-scrollbar {\n    width: 6px;\n}\n\n.related-videos-container::-webkit-scrollbar-track {\n    background: #f1f1f1;\n    border-radius: 3px;\n}\n\n.related-videos-container::-webkit-scrollbar-thumb {\n    background: #c1c1c1;\n    border-radius: 3px;\n}\n\n.related-videos-container::-webkit-scrollbar-thumb:hover {\n    background: #a8a8a8;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .sidebar {\n        position: static;\n        height: auto;\n        padding: 0;\n    }\n    \n    .video-wrapper {\n        padding-bottom: 75%; /* Adjust for mobile */\n    }\n    \n    .custom-video-controls .row {\n        flex-direction: column;\n        gap: 1rem;\n    }\n    \n    .video-stats {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 0.5rem;\n    }\n    \n    .related-video-item {\n        flex-direction: column;\n        text-align: center;\n    }\n    \n    .related-video-thumbnail {\n        width: 100%;\n        height: auto;\n        margin-right: 0;\n        margin-bottom: 0.5rem;\n    }\n}\n\n/* Dark Theme Support */\n@media (prefers-color-scheme: dark) {\n    .video-player-body {\n        background-color: #121212;\n        color: #ffffff;\n    }\n    \n    .video-player-body .card {\n        background-color: #1e1e1e;\n        color: #ffffff;\n    }\n    \n    .video-player-body .card-header {\n        background-color: #2d2d2d;\n        border-bottom-color: #404040;\n    }\n}\n\n/* Print Styles */\n@media print {\n    .navbar,\n    .sidebar,\n    .btn,\n    .modal {\n        display: none !important;\n    }\n    \n    .container-fluid {\n        margin: 0;\n        padding: 0;\n    }\n    \n    .card {\n        box-shadow: none;\n        border: 1px solid #dee2e6;\n    }\n}\n\n/* Accessibility */\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n/* Focus styles for keyboard navigation */\n.btn:focus,\n.form-control:focus,\n.form-select:focus {\n    outline: 2px solid var(--primary-color);\n    outline-offset: 2px;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .card {\n        border: 2px solid #000;\n    }\n    \n    .btn {\n        border-width: 2px;\n    }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}\n","size_bytes":13459},"assets/js/admin.js":{"content":"/**\n * VideoHub Admin Panel Module\n * Handles admin dashboard functionality, user management, video moderation, and analytics\n */\n\nclass AdminManager {\n    constructor() {\n        this.users = [];\n        this.videos = [];\n        this.analytics = {};\n        this.init();\n    }\n\n    init() {\n        this.loadMockData();\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n        this.initializeCharts();\n    }\n\n    loadMockData() {\n        // Mock users data\n        this.users = [\n            {\n                id: 1,\n                firstName: 'John',\n                lastName: 'Creator',\n                email: 'john.creator@email.com',\n                type: 'creator',\n                status: 'active',\n                joinDate: '2024-01-15',\n                videosCount: 12,\n                earnings: '$2,340'\n            },\n            {\n                id: 2,\n                firstName: 'Jane',\n                lastName: 'Viewer',\n                email: 'jane.viewer@email.com',\n                type: 'viewer',\n                status: 'active',\n                joinDate: '2024-02-08',\n                videosCount: 0,\n                earnings: '$0'\n            },\n            {\n                id: 3,\n                firstName: 'Mike',\n                lastName: 'Producer',\n                email: 'mike.producer@email.com',\n                type: 'creator',\n                status: 'active',\n                joinDate: '2024-01-22',\n                videosCount: 8,\n                earnings: '$1,890'\n            },\n            {\n                id: 4,\n                firstName: 'Sarah',\n                lastName: 'Student',\n                email: 'sarah.student@email.com',\n                type: 'viewer',\n                status: 'inactive',\n                joinDate: '2024-03-01',\n                videosCount: 0,\n                earnings: '$0'\n            }\n        ];\n\n        // Mock videos data\n        this.videos = [\n            {\n                id: 1,\n                title: 'JavaScript Advanced Concepts',\n                creator: 'John Creator',\n                duration: '45:30',\n                uploadDate: '2024-03-10',\n                views: 1234,\n                price: '$19.99',\n                status: 'published',\n                category: 'technology',\n                thumbnail: 'https://via.placeholder.com/300x169/007bff/ffffff?text=JS+Advanced'\n            },\n            {\n                id: 2,\n                title: 'React Hooks Tutorial',\n                creator: 'John Creator',\n                duration: '32:15',\n                uploadDate: '2024-03-08',\n                views: 856,\n                price: '$14.99',\n                status: 'published',\n                category: 'technology',\n                thumbnail: 'https://via.placeholder.com/300x169/28a745/ffffff?text=React+Hooks'\n            },\n            {\n                id: 3,\n                title: 'Business Strategy Fundamentals',\n                creator: 'Mike Producer',\n                duration: '28:45',\n                uploadDate: '2024-03-12',\n                views: 234,\n                price: '$24.99',\n                status: 'pending',\n                category: 'business',\n                thumbnail: 'https://via.placeholder.com/300x169/ffc107/000000?text=Business+Strategy'\n            }\n        ];\n    }\n\n    bindEvents() {\n        // User management events\n        const saveUserBtn = document.getElementById('saveUser');\n        if (saveUserBtn) {\n            saveUserBtn.addEventListener('click', this.handleSaveUser.bind(this));\n        }\n\n        const updateUserBtn = document.getElementById('updateUser');\n        if (updateUserBtn) {\n            updateUserBtn.addEventListener('click', this.handleUpdateUser.bind(this));\n        }\n\n        // Video management events\n        const approveVideoBtn = document.getElementById('approveVideo');\n        if (approveVideoBtn) {\n            approveVideoBtn.addEventListener('click', this.handleApproveVideo.bind(this));\n        }\n\n        const rejectVideoBtn = document.getElementById('rejectVideo');\n        if (rejectVideoBtn) {\n            rejectVideoBtn.addEventListener('click', this.handleRejectVideo.bind(this));\n        }\n\n        const flagVideoBtn = document.getElementById('flagVideo');\n        if (flagVideoBtn) {\n            flagVideoBtn.addEventListener('click', this.handleFlagVideo.bind(this));\n        }\n\n        // Filter events\n        const applyFiltersBtn = document.getElementById('applyFilters');\n        if (applyFiltersBtn) {\n            applyFiltersBtn.addEventListener('click', this.handleApplyFilters.bind(this));\n        }\n\n        // Profile form events\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', this.handleProfileUpdate.bind(this));\n        }\n\n        const passwordForm = document.getElementById('passwordForm');\n        if (passwordForm) {\n            passwordForm.addEventListener('submit', this.handlePasswordChange.bind(this));\n        }\n\n        // System settings\n        const systemSettingsForm = document.getElementById('systemSettingsForm');\n        if (systemSettingsForm) {\n            systemSettingsForm.addEventListener('submit', this.handleSystemSettings.bind(this));\n        }\n\n        // Backup\n        const startBackupBtn = document.getElementById('startBackup');\n        if (startBackupBtn) {\n            startBackupBtn.addEventListener('click', this.handleStartBackup.bind(this));\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        switch (currentPage) {\n            case 'users.html':\n                this.loadUsersPage();\n                break;\n            case 'videos.html':\n                this.loadVideosPage();\n                break;\n            case 'analytics.html':\n                this.loadAnalyticsPage();\n                break;\n            case 'dashboard.html':\n                this.loadDashboardPage();\n                break;\n        }\n    }\n\n    loadUsersPage() {\n        this.renderUsersTable();\n    }\n\n    loadVideosPage() {\n        this.renderVideosGrid();\n    }\n\n    loadDashboardPage() {\n        this.updateDashboardStats();\n    }\n\n    loadAnalyticsPage() {\n        this.loadAnalyticsCharts();\n    }\n\n    renderUsersTable() {\n        const tbody = document.querySelector('#usersTable tbody');\n        if (!tbody) return;\n\n        tbody.innerHTML = '';\n        \n        this.users.forEach(user => {\n            const row = document.createElement('tr');\n            row.innerHTML = `\n                <td>${user.id}</td>\n                <td>${user.firstName} ${user.lastName}</td>\n                <td>${user.email}</td>\n                <td><span class=\"badge bg-${this.getUserTypeBadgeColor(user.type)}\">${user.type}</span></td>\n                <td><span class=\"badge bg-${this.getStatusBadgeColor(user.status)}\">${user.status}</span></td>\n                <td>${user.joinDate}</td>\n                <td>\n                    <button class=\"btn btn-sm btn-outline-primary me-1\" onclick=\"adminManager.editUser(${user.id})\">\n                        <i class=\"fas fa-edit\"></i>\n                    </button>\n                    <button class=\"btn btn-sm btn-outline-danger\" onclick=\"adminManager.deleteUser(${user.id})\">\n                        <i class=\"fas fa-trash\"></i>\n                    </button>\n                    <button class=\"btn btn-sm btn-outline-info\" onclick=\"adminManager.viewUserDetails(${user.id})\">\n                        <i class=\"fas fa-eye\"></i>\n                    </button>\n                </td>\n            `;\n            tbody.appendChild(row);\n        });\n    }\n\n    renderVideosGrid() {\n        const grid = document.getElementById('videosGrid');\n        if (!grid) return;\n\n        grid.innerHTML = '';\n        \n        this.videos.forEach(video => {\n            const col = document.createElement('div');\n            col.className = 'col-lg-4 col-md-6 mb-4';\n            col.innerHTML = `\n                <div class=\"card video-card h-100\">\n                    <div class=\"video-thumbnail\">\n                        <img src=\"${video.thumbnail}\" class=\"card-img-top\" alt=\"${video.title}\">\n                        <div class=\"video-duration\">${video.duration}</div>\n                        <div class=\"video-price\">${video.price}</div>\n                        <div class=\"video-overlay\">\n                            <i class=\"fas fa-play fa-2x\"></i>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <h6 class=\"card-title\">${video.title}</h6>\n                        <p class=\"card-text video-creator\">By ${video.creator}</p>\n                        <div class=\"video-stats\">\n                            <small class=\"text-muted\">\n                                <i class=\"fas fa-eye me-1\"></i>${video.views} views\n                            </small>\n                            <span class=\"badge bg-${this.getStatusBadgeColor(video.status)}\">${video.status}</span>\n                        </div>\n                    </div>\n                    <div class=\"card-footer\">\n                        <div class=\"btn-group w-100\" role=\"group\">\n                            <button class=\"btn btn-sm btn-outline-primary\" onclick=\"adminManager.viewVideoDetails(${video.id})\">\n                                <i class=\"fas fa-eye\"></i>\n                            </button>\n                            <button class=\"btn btn-sm btn-outline-success\" onclick=\"adminManager.approveVideo(${video.id})\">\n                                <i class=\"fas fa-check\"></i>\n                            </button>\n                            <button class=\"btn btn-sm btn-outline-danger\" onclick=\"adminManager.rejectVideo(${video.id})\">\n                                <i class=\"fas fa-times\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `;\n            grid.appendChild(col);\n        });\n    }\n\n    updateDashboardStats() {\n        // Update summary cards would happen here if they exist\n        console.log('Dashboard stats updated');\n    }\n\n    initializeCharts() {\n        // Dashboard Charts\n        this.initUserRegistrationChart();\n        this.initUserTypesChart();\n        \n        // Analytics Charts\n        this.initRevenueChart();\n        this.initVideoUploadChart();\n        this.initCategoriesChart();\n        this.initUserDistributionChart();\n    }\n\n    initUserRegistrationChart() {\n        const ctx = document.getElementById('userRegistrationChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                datasets: [{\n                    label: 'New Users',\n                    data: [12, 19, 13, 25, 22, 30],\n                    borderColor: '#007bff',\n                    backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                    tension: 0.4\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n\n    initUserTypesChart() {\n        const ctx = document.getElementById('userTypesChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Viewers', 'Creators', 'Admins'],\n                datasets: [{\n                    data: [70, 25, 5],\n                    backgroundColor: ['#007bff', '#28a745', '#dc3545']\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n\n    initRevenueChart() {\n        const ctx = document.getElementById('revenueChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                datasets: [{\n                    label: 'Revenue ($)',\n                    data: [3200, 4100, 3800, 5200, 4800, 5600],\n                    backgroundColor: '#28a745',\n                    borderColor: '#1e7e34',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        ticks: {\n                            callback: function(value) {\n                                return '$' + value;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    initVideoUploadChart() {\n        const ctx = document.getElementById('videoUploadChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],\n                datasets: [{\n                    label: 'Videos Uploaded',\n                    data: [8, 12, 15, 10],\n                    borderColor: '#ffc107',\n                    backgroundColor: 'rgba(255, 193, 7, 0.1)',\n                    tension: 0.4\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n\n    initCategoriesChart() {\n        const ctx = document.getElementById('categoriesChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Technology', 'Education', 'Business', 'Design'],\n                datasets: [{\n                    data: [35, 30, 20, 15],\n                    backgroundColor: ['#007bff', '#28a745', '#ffc107', '#dc3545']\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n\n    initUserDistributionChart() {\n        const ctx = document.getElementById('userDistributionChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Viewers', 'Creators'],\n                datasets: [{\n                    data: [78, 22],\n                    backgroundColor: ['#17a2b8', '#6f42c1']\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false\n            }\n        });\n    }\n\n    loadAnalyticsCharts() {\n        // Load all analytics charts\n        this.initRevenueChart();\n        this.initVideoUploadChart();\n        this.initCategoriesChart();\n        this.initUserDistributionChart();\n    }\n\n    // User Management Methods\n    handleSaveUser() {\n        const formData = {\n            firstName: document.getElementById('firstName').value,\n            lastName: document.getElementById('lastName').value,\n            email: document.getElementById('email').value,\n            userType: document.getElementById('userType').value,\n            status: document.getElementById('status').value\n        };\n\n        if (this.validateUserForm(formData)) {\n            // Add new user\n            const newUser = {\n                id: this.users.length + 1,\n                ...formData,\n                type: formData.userType,\n                joinDate: new Date().toISOString().split('T')[0],\n                videosCount: 0,\n                earnings: '$0'\n            };\n\n            this.users.push(newUser);\n            this.renderUsersTable();\n            \n            // Close modal and show success\n            const modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));\n            modal.hide();\n            this.showSuccess('User added successfully!');\n            \n            // Reset form\n            document.getElementById('addUserForm').reset();\n        }\n    }\n\n    handleUpdateUser() {\n        const userId = document.getElementById('editUserId').value;\n        const formData = {\n            firstName: document.getElementById('editFirstName').value,\n            lastName: document.getElementById('editLastName').value,\n            email: document.getElementById('editEmail').value,\n            type: document.getElementById('editUserType').value,\n            status: document.getElementById('editStatus').value\n        };\n\n        if (this.validateUserForm(formData)) {\n            // Update user\n            const userIndex = this.users.findIndex(u => u.id == userId);\n            if (userIndex !== -1) {\n                this.users[userIndex] = { ...this.users[userIndex], ...formData };\n                this.renderUsersTable();\n                \n                // Close modal and show success\n                const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));\n                modal.hide();\n                this.showSuccess('User updated successfully!');\n            }\n        }\n    }\n\n    editUser(userId) {\n        const user = this.users.find(u => u.id === userId);\n        if (user) {\n            // Populate edit form\n            document.getElementById('editUserId').value = user.id;\n            document.getElementById('editFirstName').value = user.firstName;\n            document.getElementById('editLastName').value = user.lastName;\n            document.getElementById('editEmail').value = user.email;\n            document.getElementById('editUserType').value = user.type;\n            document.getElementById('editStatus').value = user.status;\n            \n            // Show modal\n            const modal = new bootstrap.Modal(document.getElementById('editUserModal'));\n            modal.show();\n        }\n    }\n\n    deleteUser(userId) {\n        if (confirm('Are you sure you want to delete this user?')) {\n            this.users = this.users.filter(u => u.id !== userId);\n            this.renderUsersTable();\n            this.showSuccess('User deleted successfully!');\n        }\n    }\n\n    viewUserDetails(userId) {\n        const user = this.users.find(u => u.id === userId);\n        if (user) {\n            alert(`User Details:\\nName: ${user.firstName} ${user.lastName}\\nEmail: ${user.email}\\nType: ${user.type}\\nStatus: ${user.status}`);\n        }\n    }\n\n    // Video Management Methods\n    viewVideoDetails(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (video) {\n            // Populate modal with video details\n            document.getElementById('modalVideoTitle').textContent = video.title;\n            document.getElementById('modalVideoCreator').textContent = video.creator;\n            document.getElementById('modalVideoDuration').textContent = video.duration;\n            document.getElementById('modalVideoDate').textContent = video.uploadDate;\n            document.getElementById('modalVideoViews').textContent = video.views;\n            document.getElementById('modalVideoPrice').textContent = video.price;\n            document.getElementById('modalVideoStatus').innerHTML = `<span class=\"badge bg-${this.getStatusBadgeColor(video.status)}\">${video.status}</span>`;\n            document.getElementById('modalVideoThumbnail').src = video.thumbnail;\n            document.getElementById('modalVideoDescription').textContent = 'This is a sample description for the video content.';\n            \n            // Show modal\n            const modal = new bootstrap.Modal(document.getElementById('videoDetailsModal'));\n            modal.show();\n        }\n    }\n\n    handleApproveVideo() {\n        this.showSuccess('Video approved successfully!');\n        const modal = bootstrap.Modal.getInstance(document.getElementById('videoDetailsModal'));\n        modal.hide();\n    }\n\n    handleRejectVideo() {\n        this.showSuccess('Video rejected!');\n        const modal = bootstrap.Modal.getInstance(document.getElementById('videoDetailsModal'));\n        modal.hide();\n    }\n\n    handleFlagVideo() {\n        this.showWarning('Video flagged for review!');\n        const modal = bootstrap.Modal.getInstance(document.getElementById('videoDetailsModal'));\n        modal.hide();\n    }\n\n    approveVideo(videoId) {\n        const videoIndex = this.videos.findIndex(v => v.id === videoId);\n        if (videoIndex !== -1) {\n            this.videos[videoIndex].status = 'published';\n            this.renderVideosGrid();\n            this.showSuccess('Video approved and published!');\n        }\n    }\n\n    rejectVideo(videoId) {\n        if (confirm('Are you sure you want to reject this video?')) {\n            const videoIndex = this.videos.findIndex(v => v.id === videoId);\n            if (videoIndex !== -1) {\n                this.videos[videoIndex].status = 'rejected';\n                this.renderVideosGrid();\n                this.showSuccess('Video rejected!');\n            }\n        }\n    }\n\n    // Settings and Profile Methods\n    handleProfileUpdate(e) {\n        e.preventDefault();\n        this.showSuccess('Profile updated successfully!');\n    }\n\n    handlePasswordChange(e) {\n        e.preventDefault();\n        const currentPassword = document.getElementById('currentPassword').value;\n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmNewPassword').value;\n\n        if (newPassword !== confirmPassword) {\n            this.showError('Passwords do not match!');\n            return;\n        }\n\n        if (newPassword.length < 8) {\n            this.showError('Password must be at least 8 characters long!');\n            return;\n        }\n\n        this.showSuccess('Password changed successfully!');\n        e.target.reset();\n    }\n\n    handleSystemSettings(e) {\n        e.preventDefault();\n        this.showSuccess('System settings saved successfully!');\n    }\n\n    handleStartBackup() {\n        const includeVideos = document.getElementById('includeVideos').checked;\n        const modal = bootstrap.Modal.getInstance(document.getElementById('backupModal'));\n        modal.hide();\n        \n        this.showSuccess('Backup started! You will be notified when complete.');\n    }\n\n    handleApplyFilters() {\n        // Apply filters to current view\n        this.showInfo('Filters applied!');\n    }\n\n    // Utility Methods\n    validateUserForm(formData) {\n        if (!formData.firstName.trim()) {\n            this.showError('First name is required!');\n            return false;\n        }\n        if (!formData.lastName.trim()) {\n            this.showError('Last name is required!');\n            return false;\n        }\n        if (!formData.email.trim()) {\n            this.showError('Email is required!');\n            return false;\n        }\n        if (!formData.userType) {\n            this.showError('User type is required!');\n            return false;\n        }\n        return true;\n    }\n\n    getUserTypeBadgeColor(type) {\n        const colors = {\n            admin: 'danger',\n            creator: 'success',\n            viewer: 'primary'\n        };\n        return colors[type] || 'secondary';\n    }\n\n    getStatusBadgeColor(status) {\n        const colors = {\n            active: 'success',\n            inactive: 'warning',\n            suspended: 'danger',\n            published: 'success',\n            pending: 'warning',\n            rejected: 'danger',\n            flagged: 'danger'\n        };\n        return colors[status] || 'secondary';\n    }\n\n    showSuccess(message) {\n        this.showToast(message, 'success');\n    }\n\n    showError(message) {\n        this.showToast(message, 'danger');\n    }\n\n    showWarning(message) {\n        this.showToast(message, 'warning');\n    }\n\n    showInfo(message) {\n        this.showToast(message, 'info');\n    }\n\n    showToast(message, type = 'info') {\n        // Use the common toast functionality\n        if (window.showToast) {\n            window.showToast(message, type);\n        } else {\n            console.log(`${type.toUpperCase()}: ${message}`);\n        }\n    }\n}\n\n// Initialize admin manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.adminManager = new AdminManager();\n});\n","size_bytes":24947},"assets/js/auth.js":{"content":"/**\n * VideoHub Authentication Module\n * Handles user registration, login, password reset, and email verification\n */\n\nclass AuthManager {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n    }\n\n    bindEvents() {\n        // Login form\n        const loginForm = document.getElementById('loginForm');\n        if (loginForm) {\n            loginForm.addEventListener('submit', this.handleLogin.bind(this));\n        }\n\n        // Signup form\n        const signupForm = document.getElementById('signupForm');\n        if (signupForm) {\n            signupForm.addEventListener('submit', this.handleSignup.bind(this));\n        }\n\n        // Forgot password form\n        const forgotPasswordForm = document.getElementById('forgotPasswordForm');\n        if (forgotPasswordForm) {\n            forgotPasswordForm.addEventListener('submit', this.handleForgotPassword.bind(this));\n        }\n\n        // Set password form\n        const setPasswordForm = document.getElementById('setPasswordForm');\n        if (setPasswordForm) {\n            setPasswordForm.addEventListener('submit', this.handleSetPassword.bind(this));\n        }\n\n        // Email verification actions\n        const verifyButton = document.getElementById('verifyButton');\n        if (verifyButton) {\n            verifyButton.addEventListener('click', this.handleEmailVerification.bind(this));\n        }\n\n        const resendEmail = document.getElementById('resendEmail');\n        if (resendEmail) {\n            resendEmail.addEventListener('click', this.handleResendEmail.bind(this));\n        }\n\n        // Password strength checker\n        const newPasswordInput = document.getElementById('newPassword');\n        if (newPasswordInput) {\n            newPasswordInput.addEventListener('input', this.checkPasswordStrength.bind(this));\n        }\n\n        // Password toggle\n        const togglePassword = document.getElementById('togglePassword');\n        if (togglePassword) {\n            togglePassword.addEventListener('click', this.togglePasswordVisibility.bind(this));\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        // Handle demo login prefill\n        this.setupDemoLogin();\n        \n        // Handle URL parameters for verification\n        this.handleUrlParameters();\n    }\n\n    setupDemoLogin() {\n        const demoButtons = document.querySelectorAll('.demo-login-btn');\n        demoButtons.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const userType = e.target.dataset.userType;\n                this.prefillDemoCredentials(userType);\n            });\n        });\n    }\n\n    prefillDemoCredentials(userType) {\n        const emailInput = document.getElementById('email');\n        const passwordInput = document.getElementById('password');\n        \n        if (!emailInput || !passwordInput) return;\n\n        const credentials = {\n            admin: { email: 'admin@videohub.com', password: 'admin123' },\n            creator: { email: 'creator@videohub.com', password: 'creator123' },\n            viewer: { email: 'viewer@videohub.com', password: 'viewer123' }\n        };\n\n        if (credentials[userType]) {\n            emailInput.value = credentials[userType].email;\n            passwordInput.value = credentials[userType].password;\n        }\n    }\n\n    handleUrlParameters() {\n        const urlParams = new URLSearchParams(window.location.search);\n        const email = urlParams.get('email');\n        const token = urlParams.get('token');\n\n        if (email) {\n            const userEmailSpan = document.getElementById('userEmail');\n            if (userEmailSpan) {\n                userEmailSpan.textContent = email;\n            }\n        }\n\n        if (token) {\n            // Auto-verify if token is present\n            setTimeout(() => {\n                this.handleEmailVerification();\n            }, 1000);\n        }\n    }\n\n    async handleLogin(e) {\n        e.preventDefault();\n        \n        const email = document.getElementById('email').value;\n        const password = document.getElementById('password').value;\n        const rememberMe = document.getElementById('rememberMe').checked;\n\n        try {\n            this.showLoading('Signing in...');\n            \n            // Simulate API call\n            await this.delay(1500);\n            \n            // Demo authentication\n            const userType = this.getUserTypeFromEmail(email);\n            \n            if (userType) {\n                // Store user session\n                this.setUserSession({\n                    email: email,\n                    userType: userType,\n                    rememberMe: rememberMe\n                });\n\n                this.showSuccess('Login successful! Redirecting...');\n                \n                // Redirect based on user type\n                setTimeout(() => {\n                    this.redirectToUserDashboard(userType);\n                }, 1000);\n            } else {\n                throw new Error('Invalid credentials');\n            }\n            \n        } catch (error) {\n            this.showError('Invalid email or password. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleSignup(e) {\n        e.preventDefault();\n        \n        const formData = {\n            firstName: document.getElementById('firstName').value,\n            lastName: document.getElementById('lastName').value,\n            email: document.getElementById('email').value,\n            userType: document.getElementById('userType').value,\n            password: document.getElementById('password').value,\n            confirmPassword: document.getElementById('confirmPassword').value,\n            agreeTerms: document.getElementById('agreeTerms').checked\n        };\n\n        try {\n            // Validate form\n            this.validateSignupForm(formData);\n            \n            this.showLoading('Creating your account...');\n            \n            // Simulate API call\n            await this.delay(2000);\n            \n            this.showSuccess('Account created successfully! Please check your email for verification.');\n            \n            // Redirect to email verification\n            setTimeout(() => {\n                window.location.href = `email-verification.html?email=${encodeURIComponent(formData.email)}`;\n            }, 1500);\n            \n        } catch (error) {\n            this.showError(error.message);\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleForgotPassword(e) {\n        e.preventDefault();\n        \n        const email = document.getElementById('email').value;\n\n        try {\n            this.showLoading('Sending reset link...');\n            \n            // Simulate API call\n            await this.delay(1500);\n            \n            // Hide form and show success message\n            document.getElementById('emailForm').style.display = 'none';\n            document.getElementById('successMessage').classList.remove('d-none');\n            \n        } catch (error) {\n            this.showError('Failed to send reset email. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleEmailVerification() {\n        try {\n            this.showLoading('Verifying email...');\n            \n            // Simulate API call\n            await this.delay(1500);\n            \n            // Hide pending verification and show success\n            document.getElementById('pendingVerification').style.display = 'none';\n            document.getElementById('verificationSuccess').classList.remove('d-none');\n            \n        } catch (error) {\n            this.showError('Verification failed. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleResendEmail() {\n        try {\n            this.showLoading('Resending verification email...');\n            \n            // Simulate API call\n            await this.delay(1000);\n            \n            this.showSuccess('Verification email sent successfully!');\n            \n        } catch (error) {\n            this.showError('Failed to resend email. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleSetPassword(e) {\n        e.preventDefault();\n        \n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n\n        try {\n            // Validate passwords\n            if (newPassword !== confirmPassword) {\n                throw new Error('Passwords do not match');\n            }\n            \n            if (!this.isPasswordStrong(newPassword)) {\n                throw new Error('Password does not meet strength requirements');\n            }\n            \n            this.showLoading('Setting password...');\n            \n            // Simulate API call\n            await this.delay(1500);\n            \n            this.showSuccess('Password set successfully! You can now log in.');\n            \n            // Redirect to login\n            setTimeout(() => {\n                window.location.href = 'login.html';\n            }, 1500);\n            \n        } catch (error) {\n            this.showError(error.message);\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    validateSignupForm(formData) {\n        if (!formData.firstName.trim()) {\n            throw new Error('First name is required');\n        }\n        \n        if (!formData.lastName.trim()) {\n            throw new Error('Last name is required');\n        }\n        \n        if (!this.isValidEmail(formData.email)) {\n            throw new Error('Please enter a valid email address');\n        }\n        \n        if (!formData.userType) {\n            throw new Error('Please select an account type');\n        }\n        \n        if (formData.password.length < 8) {\n            throw new Error('Password must be at least 8 characters long');\n        }\n        \n        if (formData.password !== formData.confirmPassword) {\n            throw new Error('Passwords do not match');\n        }\n        \n        if (!formData.agreeTerms) {\n            throw new Error('You must agree to the Terms of Service');\n        }\n    }\n\n    checkPasswordStrength(e) {\n        const password = e.target.value;\n        const strengthBars = document.querySelectorAll('.strength-bar');\n        const strengthText = document.getElementById('strengthText');\n        \n        if (!strengthBars.length || !strengthText) return;\n\n        const strength = this.calculatePasswordStrength(password);\n        \n        // Reset all bars\n        strengthBars.forEach(bar => {\n            bar.className = 'strength-bar';\n        });\n        \n        // Fill bars based on strength\n        for (let i = 0; i < strength.score; i++) {\n            strengthBars[i].classList.add(strength.class);\n        }\n        \n        strengthText.textContent = strength.text;\n        strengthText.className = `text-${strength.class}`;\n    }\n\n    calculatePasswordStrength(password) {\n        let score = 0;\n        let feedback = [];\n        \n        if (password.length >= 8) score++;\n        if (/[a-z]/.test(password)) score++;\n        if (/[A-Z]/.test(password)) score++;\n        if (/[0-9]/.test(password)) score++;\n        if (/[^A-Za-z0-9]/.test(password)) score++;\n        \n        const strengthLevels = {\n            0: { class: 'muted', text: 'Enter a password' },\n            1: { class: 'danger', text: 'Very weak' },\n            2: { class: 'warning', text: 'Weak' },\n            3: { class: 'info', text: 'Fair' },\n            4: { class: 'success', text: 'Good' },\n            5: { class: 'success', text: 'Strong' }\n        };\n        \n        return { score, ...strengthLevels[score] };\n    }\n\n    isPasswordStrong(password) {\n        return password.length >= 8 && \n               /[a-z]/.test(password) && \n               /[A-Z]/.test(password) && \n               /[0-9]/.test(password);\n    }\n\n    togglePasswordVisibility() {\n        const passwordInput = document.getElementById('newPassword');\n        const toggleButton = document.getElementById('togglePassword');\n        \n        if (passwordInput.type === 'password') {\n            passwordInput.type = 'text';\n            toggleButton.innerHTML = '<i class=\"fas fa-eye-slash\"></i>';\n        } else {\n            passwordInput.type = 'password';\n            toggleButton.innerHTML = '<i class=\"fas fa-eye\"></i>';\n        }\n    }\n\n    getUserTypeFromEmail(email) {\n        if (email.includes('admin@')) return 'admin';\n        if (email.includes('creator@')) return 'creator';\n        if (email.includes('viewer@')) return 'viewer';\n        return null;\n    }\n\n    redirectToUserDashboard(userType) {\n        const dashboardUrls = {\n            admin: '../admin/dashboard.html',\n            creator: '../creator/dashboard.html',\n            viewer: '../viewer/browse.html'\n        };\n        \n        window.location.href = dashboardUrls[userType];\n    }\n\n    setUserSession(userData) {\n        const sessionData = {\n            ...userData,\n            timestamp: new Date().toISOString()\n        };\n        \n        if (userData.rememberMe) {\n            localStorage.setItem('userSession', JSON.stringify(sessionData));\n        } else {\n            sessionStorage.setItem('userSession', JSON.stringify(sessionData));\n        }\n    }\n\n    getUserSession() {\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n        \n        const session = localSession || sessionSession;\n        return session ? JSON.parse(session) : null;\n    }\n\n    clearUserSession() {\n        localStorage.removeItem('userSession');\n        sessionStorage.removeItem('userSession');\n    }\n\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    showLoading(message = 'Loading...') {\n        // Create or update loading indicator\n        let loader = document.getElementById('globalLoader');\n        if (!loader) {\n            loader = document.createElement('div');\n            loader.id = 'globalLoader';\n            loader.className = 'position-fixed top-50 start-50 translate-middle';\n            loader.style.zIndex = '9999';\n            document.body.appendChild(loader);\n        }\n        \n        loader.innerHTML = `\n            <div class=\"bg-white p-4 rounded shadow text-center\">\n                <div class=\"spinner-border text-primary mb-2\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div>${message}</div>\n            </div>\n        `;\n        loader.style.display = 'block';\n    }\n\n    hideLoading() {\n        const loader = document.getElementById('globalLoader');\n        if (loader) {\n            loader.style.display = 'none';\n        }\n    }\n\n    showSuccess(message) {\n        this.showToast(message, 'success');\n    }\n\n    showError(message) {\n        this.showToast(message, 'danger');\n    }\n\n    showToast(message, type = 'info') {\n        // Create toast container if it doesn't exist\n        let toastContainer = document.getElementById('toastContainer');\n        if (!toastContainer) {\n            toastContainer = document.createElement('div');\n            toastContainer.id = 'toastContainer';\n            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';\n            toastContainer.style.zIndex = '9999';\n            document.body.appendChild(toastContainer);\n        }\n\n        // Create toast element\n        const toastId = 'toast-' + Date.now();\n        const toastElement = document.createElement('div');\n        toastElement.id = toastId;\n        toastElement.className = `toast align-items-center text-bg-${type} border-0`;\n        toastElement.setAttribute('role', 'alert');\n        toastElement.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">${message}</div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        `;\n\n        toastContainer.appendChild(toastElement);\n\n        // Initialize and show toast\n        const toast = new bootstrap.Toast(toastElement, {\n            autohide: true,\n            delay: 5000\n        });\n        toast.show();\n\n        // Remove toast element after it's hidden\n        toastElement.addEventListener('hidden.bs.toast', () => {\n            toastElement.remove();\n        });\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n}\n\n// Initialize authentication manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new AuthManager();\n});\n\n// Export for other modules\nwindow.AuthManager = AuthManager;\n","size_bytes":16937},"assets/js/common.js":{"content":"/**\n * VideoHub Common Utilities Module\n * Shared functionality and utilities used across all modules\n */\n\nclass CommonUtils {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.setupGlobalErrorHandler();\n        this.setupToastContainer();\n        this.bindCommonEvents();\n        this.checkUserSession();\n    }\n\n    setupGlobalErrorHandler() {\n        window.addEventListener('error', (event) => {\n            console.error('Global error:', event.error);\n            this.showToast('An unexpected error occurred. Please try again.', 'danger');\n        });\n\n        window.addEventListener('unhandledrejection', (event) => {\n            console.error('Unhandled promise rejection:', event.reason);\n            this.showToast('An unexpected error occurred. Please try again.', 'danger');\n        });\n    }\n\n    setupToastContainer() {\n        if (!document.getElementById('toastContainer')) {\n            const toastContainer = document.createElement('div');\n            toastContainer.id = 'toastContainer';\n            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';\n            toastContainer.style.zIndex = '9999';\n            document.body.appendChild(toastContainer);\n        }\n    }\n\n    bindCommonEvents() {\n        // Handle logout links\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('a[href*=\"login.html\"]') && e.target.textContent.includes('Logout')) {\n                e.preventDefault();\n                this.handleLogout();\n            }\n        });\n\n        // Handle demo mode notifications\n        this.showDemoModeNotification();\n    }\n\n    showDemoModeNotification() {\n        if (window.location.pathname.includes('admin/') || \n            window.location.pathname.includes('creator/') || \n            window.location.pathname.includes('viewer/')) {\n            \n            setTimeout(() => {\n                this.showToast('You are in demo mode. All data and actions are simulated.', 'info', 8000);\n            }, 2000);\n        }\n    }\n\n    checkUserSession() {\n        const session = this.getUserSession();\n        if (session && this.isSessionExpired(session)) {\n            this.clearUserSession();\n            if (!window.location.pathname.includes('auth/')) {\n                this.showToast('Your session has expired. Please log in again.', 'warning');\n                setTimeout(() => {\n                    window.location.href = '/auth/login.html';\n                }, 2000);\n            }\n        }\n    }\n\n    // Session Management\n    getUserSession() {\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n        \n        const session = localSession || sessionSession;\n        return session ? JSON.parse(session) : null;\n    }\n\n    setUserSession(userData) {\n        const sessionData = {\n            ...userData,\n            timestamp: new Date().toISOString(),\n            expires: new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString() // 24 hours\n        };\n        \n        if (userData.rememberMe) {\n            localStorage.setItem('userSession', JSON.stringify(sessionData));\n        } else {\n            sessionStorage.setItem('userSession', JSON.stringify(sessionData));\n        }\n    }\n\n    clearUserSession() {\n        localStorage.removeItem('userSession');\n        sessionStorage.removeItem('userSession');\n    }\n\n    isSessionExpired(session) {\n        if (!session.expires) return false;\n        return new Date() > new Date(session.expires);\n    }\n\n    handleLogout() {\n        this.clearUserSession();\n        this.showToast('Logged out successfully!', 'success');\n        setTimeout(() => {\n            window.location.href = '/auth/login.html';\n        }, 1000);\n    }\n\n    // Toast Notifications\n    showToast(message, type = 'info', delay = 5000) {\n        const toastContainer = document.getElementById('toastContainer');\n        if (!toastContainer) return;\n\n        const toastId = 'toast-' + Date.now();\n        const toastElement = document.createElement('div');\n        toastElement.id = toastId;\n        toastElement.className = `toast align-items-center text-bg-${type} border-0`;\n        toastElement.setAttribute('role', 'alert');\n        \n        const iconMap = {\n            success: 'fas fa-check-circle',\n            danger: 'fas fa-exclamation-circle',\n            warning: 'fas fa-exclamation-triangle',\n            info: 'fas fa-info-circle'\n        };\n\n        toastElement.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">\n                    <i class=\"${iconMap[type] || iconMap.info} me-2\"></i>\n                    ${message}\n                </div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        `;\n\n        toastContainer.appendChild(toastElement);\n\n        const toast = new bootstrap.Toast(toastElement, {\n            autohide: true,\n            delay: delay\n        });\n        toast.show();\n\n        toastElement.addEventListener('hidden.bs.toast', () => {\n            toastElement.remove();\n        });\n    }\n\n    // Loading States\n    showLoading(message = 'Loading...', target = null) {\n        const loaderId = 'loader-' + Date.now();\n        const loader = document.createElement('div');\n        loader.id = loaderId;\n        loader.className = 'position-absolute top-50 start-50 translate-middle';\n        loader.style.zIndex = '9999';\n        loader.innerHTML = `\n            <div class=\"bg-white p-4 rounded shadow text-center\">\n                <div class=\"spinner-border text-primary mb-2\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div>${message}</div>\n            </div>\n        `;\n\n        if (target) {\n            target.style.position = 'relative';\n            target.appendChild(loader);\n        } else {\n            loader.className = 'position-fixed top-50 start-50 translate-middle';\n            document.body.appendChild(loader);\n        }\n\n        return loaderId;\n    }\n\n    hideLoading(loaderId = null) {\n        if (loaderId) {\n            const loader = document.getElementById(loaderId);\n            if (loader) loader.remove();\n        } else {\n            // Remove all loaders\n            document.querySelectorAll('[id^=\"loader-\"]').forEach(loader => {\n                loader.remove();\n            });\n        }\n    }\n\n    // Form Validation\n    validateEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    validatePassword(password) {\n        return {\n            length: password.length >= 8,\n            uppercase: /[A-Z]/.test(password),\n            lowercase: /[a-z]/.test(password),\n            number: /[0-9]/.test(password),\n            special: /[^A-Za-z0-9]/.test(password)\n        };\n    }\n\n    sanitizeInput(input) {\n        const div = document.createElement('div');\n        div.textContent = input;\n        return div.innerHTML;\n    }\n\n    // Date and Time Utilities\n    formatDate(date, format = 'short') {\n        const d = new Date(date);\n        const options = {\n            short: { year: 'numeric', month: 'short', day: 'numeric' },\n            long: { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' },\n            time: { hour: '2-digit', minute: '2-digit' }\n        };\n        return d.toLocaleDateString('en-US', options[format] || options.short);\n    }\n\n    formatDuration(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n\n        if (hours > 0) {\n            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        }\n        return `${minutes}:${secs.toString().padStart(2, '0')}`;\n    }\n\n    timeAgo(date) {\n        const now = new Date();\n        const past = new Date(date);\n        const diff = now - past;\n\n        const seconds = Math.floor(diff / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        const weeks = Math.floor(days / 7);\n        const months = Math.floor(days / 30);\n        const years = Math.floor(days / 365);\n\n        if (years > 0) return `${years} year${years > 1 ? 's' : ''} ago`;\n        if (months > 0) return `${months} month${months > 1 ? 's' : ''} ago`;\n        if (weeks > 0) return `${weeks} week${weeks > 1 ? 's' : ''} ago`;\n        if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;\n        if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n        if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n        return 'Just now';\n    }\n\n    // URL and Navigation Utilities\n    getQueryParam(param) {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get(param);\n    }\n\n    setQueryParam(param, value) {\n        const url = new URL(window.location);\n        url.searchParams.set(param, value);\n        window.history.pushState({}, '', url);\n    }\n\n    removeQueryParam(param) {\n        const url = new URL(window.location);\n        url.searchParams.delete(param);\n        window.history.pushState({}, '', url);\n    }\n\n    // Local Storage Utilities\n    setLocalData(key, data) {\n        try {\n            localStorage.setItem(key, JSON.stringify(data));\n            return true;\n        } catch (error) {\n            console.error('Error saving to localStorage:', error);\n            return false;\n        }\n    }\n\n    getLocalData(key) {\n        try {\n            const data = localStorage.getItem(key);\n            return data ? JSON.parse(data) : null;\n        } catch (error) {\n            console.error('Error reading from localStorage:', error);\n            return null;\n        }\n    }\n\n    removeLocalData(key) {\n        try {\n            localStorage.removeItem(key);\n            return true;\n        } catch (error) {\n            console.error('Error removing from localStorage:', error);\n            return false;\n        }\n    }\n\n    // Network Utilities\n    async makeRequest(url, options = {}) {\n        const defaultOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const mergedOptions = { ...defaultOptions, ...options };\n        \n        try {\n            const response = await fetch(url, mergedOptions);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error('Request failed:', error);\n            throw error;\n        }\n    }\n\n    // File Utilities\n    formatFileSize(bytes) {\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        if (bytes === 0) return '0 Bytes';\n        const i = Math.floor(Math.log(bytes) / Math.log(1024));\n        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    }\n\n    isValidImageFile(file) {\n        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n        return validTypes.includes(file.type);\n    }\n\n    isValidVideoFile(file) {\n        const validTypes = ['video/mp4', 'video/avi', 'video/mov', 'video/wmv', 'video/webm'];\n        return validTypes.includes(file.type);\n    }\n\n    // Animation Utilities\n    fadeIn(element, duration = 300) {\n        element.style.opacity = '0';\n        element.style.display = 'block';\n        \n        let start = null;\n        const animate = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            element.style.opacity = Math.min(progress / duration, 1);\n            \n            if (progress < duration) {\n                requestAnimationFrame(animate);\n            }\n        };\n        \n        requestAnimationFrame(animate);\n    }\n\n    fadeOut(element, duration = 300) {\n        let start = null;\n        const animate = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            element.style.opacity = Math.max(1 - (progress / duration), 0);\n            \n            if (progress < duration) {\n                requestAnimationFrame(animate);\n            } else {\n                element.style.display = 'none';\n            }\n        };\n        \n        requestAnimationFrame(animate);\n    }\n\n    // Utility Functions\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n\n    throttle(func, limit) {\n        let inThrottle;\n        return function() {\n            const args = arguments;\n            const context = this;\n            if (!inThrottle) {\n                func.apply(context, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Currency Formatting\n    formatCurrency(amount, currency = 'USD') {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: currency\n        }).format(amount);\n    }\n\n    // Number Formatting\n    formatNumber(number) {\n        return new Intl.NumberFormat('en-US').format(number);\n    }\n\n    // Copy to Clipboard\n    async copyToClipboard(text) {\n        try {\n            await navigator.clipboard.writeText(text);\n            this.showToast('Copied to clipboard!', 'success');\n            return true;\n        } catch (error) {\n            console.error('Failed to copy:', error);\n            this.showToast('Failed to copy to clipboard', 'danger');\n            return false;\n        }\n    }\n\n    // Device Detection\n    isMobile() {\n        return window.innerWidth <= 768;\n    }\n\n    isTablet() {\n        return window.innerWidth > 768 && window.innerWidth <= 1024;\n    }\n\n    isDesktop() {\n        return window.innerWidth > 1024;\n    }\n\n    // Event Emitter\n    createEventEmitter() {\n        const events = {};\n        \n        return {\n            on(event, callback) {\n                if (!events[event]) events[event] = [];\n                events[event].push(callback);\n            },\n            \n            emit(event, data) {\n                if (events[event]) {\n                    events[event].forEach(callback => callback(data));\n                }\n            },\n            \n            off(event, callback) {\n                if (events[event]) {\n                    events[event] = events[event].filter(cb => cb !== callback);\n                }\n            }\n        };\n    }\n}\n\n// Global Toast Function\nwindow.showToast = function(message, type = 'info', delay = 5000) {\n    if (window.commonUtils) {\n        window.commonUtils.showToast(message, type, delay);\n    } else {\n        console.log(`${type.toUpperCase()}: ${message}`);\n    }\n};\n\n// Initialize common utilities when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.commonUtils = new CommonUtils();\n});\n\n// Export for other modules\nwindow.CommonUtils = CommonUtils;\n","size_bytes":15718},"assets/js/creator.js":{"content":"/**\n * VideoHub Creator Module\n * Handles creator dashboard functionality, video management, analytics, and earnings\n */\n\nclass CreatorManager {\n    constructor() {\n        this.videos = [];\n        this.analytics = {};\n        this.earnings = {};\n        this.init();\n    }\n\n    init() {\n        this.loadMockData();\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n        this.initializeCharts();\n    }\n\n    loadMockData() {\n        // Mock videos data\n        this.videos = [\n            {\n                id: 1,\n                title: 'JavaScript Advanced Concepts',\n                description: 'Deep dive into advanced JavaScript concepts including closures, prototypes, and async programming.',\n                price: 19.99,\n                category: 'technology',\n                duration: '45:30',\n                uploadDate: '2024-03-10',\n                views: 1234,\n                likes: 89,\n                status: 'published',\n                thumbnail: 'https://via.placeholder.com/300x169/007bff/ffffff?text=JS+Advanced',\n                earnings: 342.50\n            },\n            {\n                id: 2,\n                title: 'React Hooks Tutorial',\n                description: 'Complete guide to React Hooks with practical examples and best practices.',\n                price: 14.99,\n                category: 'technology',\n                duration: '32:15',\n                uploadDate: '2024-03-08',\n                views: 856,\n                likes: 67,\n                status: 'published',\n                thumbnail: 'https://via.placeholder.com/300x169/28a745/ffffff?text=React+Hooks',\n                earnings: 234.80\n            },\n            {\n                id: 3,\n                title: 'Node.js Best Practices',\n                description: 'Learn industry best practices for building scalable Node.js applications.',\n                price: 24.99,\n                category: 'technology',\n                duration: '38:20',\n                uploadDate: '2024-03-12',\n                views: 567,\n                likes: 45,\n                status: 'pending',\n                thumbnail: 'https://via.placeholder.com/300x169/ffc107/000000?text=Node.js+Best',\n                earnings: 0\n            }\n        ];\n\n        // Mock earnings data\n        this.earnings = {\n            total: 2340.50,\n            thisMonth: 456.75,\n            availableForPayout: 1234.25,\n            transactions: [\n                {\n                    id: 1,\n                    date: '2024-03-15',\n                    video: 'JavaScript Advanced Concepts',\n                    buyer: 'john.doe@email.com',\n                    amount: 19.99,\n                    commission: 2.00,\n                    earnings: 17.99\n                },\n                {\n                    id: 2,\n                    date: '2024-03-14',\n                    video: 'React Hooks Tutorial',\n                    buyer: 'jane.smith@email.com',\n                    amount: 14.99,\n                    commission: 1.50,\n                    earnings: 13.49\n                }\n            ]\n        };\n    }\n\n    bindEvents() {\n        // Video upload events\n        const uploadVideoBtn = document.getElementById('uploadVideo');\n        if (uploadVideoBtn) {\n            uploadVideoBtn.addEventListener('click', this.handleVideoUpload.bind(this));\n        }\n\n        const updateVideoBtn = document.getElementById('updateVideo');\n        if (updateVideoBtn) {\n            updateVideoBtn.addEventListener('click', this.handleVideoUpdate.bind(this));\n        }\n\n        // Earnings events\n        const submitPayoutBtn = document.getElementById('submitPayout');\n        if (submitPayoutBtn) {\n            submitPayoutBtn.addEventListener('click', this.handlePayoutRequest.bind(this));\n        }\n\n        const payoutMethodSelect = document.getElementById('payoutMethod');\n        if (payoutMethodSelect) {\n            payoutMethodSelect.addEventListener('change', this.handlePayoutMethodChange.bind(this));\n        }\n\n        // Profile events\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', this.handleProfileUpdate.bind(this));\n        }\n\n        const passwordForm = document.getElementById('passwordForm');\n        if (passwordForm) {\n            passwordForm.addEventListener('submit', this.handlePasswordChange.bind(this));\n        }\n\n        const contentPreferencesForm = document.getElementById('contentPreferencesForm');\n        if (contentPreferencesForm) {\n            contentPreferencesForm.addEventListener('submit', this.handleContentPreferences.bind(this));\n        }\n\n        const notificationForm = document.getElementById('notificationForm');\n        if (notificationForm) {\n            notificationForm.addEventListener('submit', this.handleNotificationSettings.bind(this));\n        }\n\n        // Filter events\n        const applyFiltersBtn = document.getElementById('applyFilters');\n        if (applyFiltersBtn) {\n            applyFiltersBtn.addEventListener('click', this.handleApplyFilters.bind(this));\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        switch (currentPage) {\n            case 'videos.html':\n                this.loadVideosPage();\n                break;\n            case 'analytics.html':\n                this.loadAnalyticsPage();\n                break;\n            case 'earnings.html':\n                this.loadEarningsPage();\n                break;\n            case 'dashboard.html':\n                this.loadDashboardPage();\n                break;\n        }\n    }\n\n    loadDashboardPage() {\n        this.updateDashboardStats();\n    }\n\n    loadVideosPage() {\n        this.renderVideosGrid();\n    }\n\n    loadAnalyticsPage() {\n        this.loadAnalyticsCharts();\n        this.loadTopVideosTable();\n    }\n\n    loadEarningsPage() {\n        this.loadEarningsCharts();\n        this.loadTopEarningVideos();\n        this.loadRecentTransactions();\n    }\n\n    updateDashboardStats() {\n        // Update dashboard metrics if elements exist\n        const totalVideos = this.videos.length;\n        const totalViews = this.videos.reduce((sum, video) => sum + video.views, 0);\n        const totalEarnings = this.earnings.total;\n        \n        console.log('Dashboard updated:', { totalVideos, totalViews, totalEarnings });\n    }\n\n    renderVideosGrid() {\n        const grid = document.getElementById('videosGrid');\n        if (!grid) return;\n\n        grid.innerHTML = '';\n        \n        this.videos.forEach(video => {\n            const col = document.createElement('div');\n            col.className = 'col-lg-4 col-md-6 mb-4';\n            col.innerHTML = `\n                <div class=\"card video-card h-100\">\n                    <div class=\"video-thumbnail\">\n                        <img src=\"${video.thumbnail}\" class=\"card-img-top\" alt=\"${video.title}\">\n                        <div class=\"video-duration\">${video.duration}</div>\n                        <div class=\"video-price\">$${video.price}</div>\n                        <div class=\"video-overlay\">\n                            <i class=\"fas fa-play fa-2x\"></i>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <h6 class=\"card-title\">${video.title}</h6>\n                        <p class=\"card-text small text-muted\">${video.description.substring(0, 100)}...</p>\n                        <div class=\"video-stats\">\n                            <small class=\"text-muted\">\n                                <i class=\"fas fa-eye me-1\"></i>${video.views} views\n                                <i class=\"fas fa-thumbs-up me-1 ms-2\"></i>${video.likes} likes\n                            </small>\n                            <span class=\"badge bg-${this.getStatusBadgeColor(video.status)}\">${video.status}</span>\n                        </div>\n                    </div>\n                    <div class=\"card-footer\">\n                        <div class=\"btn-group w-100\" role=\"group\">\n                            <button class=\"btn btn-sm btn-outline-primary\" onclick=\"creatorManager.editVideo(${video.id})\" title=\"Edit\">\n                                <i class=\"fas fa-edit\"></i>\n                            </button>\n                            <button class=\"btn btn-sm btn-outline-info\" onclick=\"creatorManager.viewAnalytics(${video.id})\" title=\"Analytics\">\n                                <i class=\"fas fa-chart-bar\"></i>\n                            </button>\n                            <button class=\"btn btn-sm btn-outline-success\" onclick=\"creatorManager.viewEarnings(${video.id})\" title=\"Earnings\">\n                                <i class=\"fas fa-dollar-sign\"></i>\n                            </button>\n                            <button class=\"btn btn-sm btn-outline-danger\" onclick=\"creatorManager.deleteVideo(${video.id})\" title=\"Delete\">\n                                <i class=\"fas fa-trash\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `;\n            grid.appendChild(col);\n        });\n    }\n\n    initializeCharts() {\n        // Dashboard Charts\n        this.initViewsChart();\n        this.initRevenueSourcesChart();\n        \n        // Analytics Charts\n        this.initViewsOverTimeChart();\n        this.initTrafficSourcesChart();\n        this.initDemographicsChart();\n        this.initDeviceChart();\n        \n        // Earnings Charts\n        this.initEarningsChart();\n        this.initCategoryRevenueChart();\n    }\n\n    initViewsChart() {\n        const ctx = document.getElementById('viewsChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                datasets: [{\n                    label: 'Views',\n                    data: [65, 89, 120, 81, 156, 155, 140],\n                    borderColor: '#007bff',\n                    backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                    tension: 0.4\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n\n    initRevenueSourcesChart() {\n        const ctx = document.getElementById('revenueSourcesChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Direct Sales', 'Referrals', 'Promotions'],\n                datasets: [{\n                    data: [60, 30, 10],\n                    backgroundColor: ['#28a745', '#007bff', '#ffc107']\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n\n    initViewsOverTimeChart() {\n        const ctx = document.getElementById('viewsOverTimeChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],\n                datasets: [{\n                    label: 'Views',\n                    data: [450, 620, 890, 750],\n                    borderColor: '#007bff',\n                    backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                    tension: 0.4\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n\n    initTrafficSourcesChart() {\n        const ctx = document.getElementById('trafficSourcesChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Direct', 'Search', 'Social', 'Referral'],\n                datasets: [{\n                    data: [40, 25, 20, 15],\n                    backgroundColor: ['#007bff', '#28a745', '#ffc107', '#dc3545']\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n\n    initDemographicsChart() {\n        const ctx = document.getElementById('demographicsChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: ['18-24', '25-34', '35-44', '45-54', '55+'],\n                datasets: [{\n                    label: 'Viewers',\n                    data: [23, 35, 25, 12, 5],\n                    backgroundColor: '#007bff'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n\n    initDeviceChart() {\n        const ctx = document.getElementById('deviceChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Desktop', 'Mobile', 'Tablet'],\n                datasets: [{\n                    data: [55, 35, 10],\n                    backgroundColor: ['#007bff', '#28a745', '#ffc107']\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n\n    initEarningsChart() {\n        const ctx = document.getElementById('earningsChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                datasets: [{\n                    label: 'Earnings ($)',\n                    data: [320, 410, 380, 520, 480, 560],\n                    backgroundColor: '#28a745',\n                    borderColor: '#1e7e34',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        ticks: {\n                            callback: function(value) {\n                                return '$' + value;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    initCategoryRevenueChart() {\n        const ctx = document.getElementById('categoryRevenueChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Technology', 'Education', 'Business'],\n                datasets: [{\n                    data: [60, 25, 15],\n                    backgroundColor: ['#007bff', '#28a745', '#ffc107']\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n\n    loadAnalyticsCharts() {\n        this.initViewsOverTimeChart();\n        this.initTrafficSourcesChart();\n        this.initDemographicsChart();\n        this.initDeviceChart();\n    }\n\n    loadTopVideosTable() {\n        const tbody = document.getElementById('topVideosTable');\n        if (!tbody) return;\n\n        tbody.innerHTML = '';\n        \n        const sortedVideos = [...this.videos].sort((a, b) => b.views - a.views);\n        \n        sortedVideos.forEach(video => {\n            const row = document.createElement('tr');\n            row.innerHTML = `\n                <td>${video.title}</td>\n                <td>${video.views.toLocaleString()}</td>\n                <td>${video.duration}</td>\n                <td>${Math.round(Math.random() * 30 + 60)}%</td>\n                <td>${video.likes}</td>\n                <td>$${video.earnings.toFixed(2)}</td>\n                <td>${video.uploadDate}</td>\n            `;\n            tbody.appendChild(row);\n        });\n    }\n\n    loadEarningsCharts() {\n        this.initEarningsChart();\n        this.initCategoryRevenueChart();\n    }\n\n    loadTopEarningVideos() {\n        const tbody = document.getElementById('topEarningVideos');\n        if (!tbody) return;\n\n        tbody.innerHTML = '';\n        \n        const sortedVideos = [...this.videos].sort((a, b) => b.earnings - a.earnings);\n        \n        sortedVideos.forEach(video => {\n            const purchases = Math.floor(video.earnings / video.price) || 0;\n            const row = document.createElement('tr');\n            row.innerHTML = `\n                <td>${video.title}</td>\n                <td>$${video.price.toFixed(2)}</td>\n                <td>${purchases}</td>\n                <td>$${video.earnings.toFixed(2)}</td>\n                <td>${video.uploadDate}</td>\n                <td><span class=\"badge bg-${this.getStatusBadgeColor(video.status)}\">${video.status}</span></td>\n            `;\n            tbody.appendChild(row);\n        });\n    }\n\n    loadRecentTransactions() {\n        const tbody = document.getElementById('recentTransactions');\n        if (!tbody) return;\n\n        tbody.innerHTML = '';\n        \n        this.earnings.transactions.forEach(transaction => {\n            const row = document.createElement('tr');\n            row.innerHTML = `\n                <td>${transaction.date}</td>\n                <td>${transaction.video}</td>\n                <td>${transaction.buyer}</td>\n                <td>$${transaction.amount.toFixed(2)}</td>\n                <td>$${transaction.commission.toFixed(2)}</td>\n                <td class=\"text-success\">$${transaction.earnings.toFixed(2)}</td>\n            `;\n            tbody.appendChild(row);\n        });\n    }\n\n    // Video Management Methods\n    handleVideoUpload() {\n        const formData = {\n            title: document.getElementById('videoTitle').value,\n            description: document.getElementById('videoDescription').value,\n            price: parseFloat(document.getElementById('videoPrice').value),\n            category: document.getElementById('videoCategory').value\n        };\n\n        if (this.validateVideoForm(formData)) {\n            // Create new video\n            const newVideo = {\n                id: this.videos.length + 1,\n                ...formData,\n                duration: '00:00',\n                uploadDate: new Date().toISOString().split('T')[0],\n                views: 0,\n                likes: 0,\n                status: 'pending',\n                thumbnail: `https://via.placeholder.com/300x169/6c757d/ffffff?text=${encodeURIComponent(formData.title)}`,\n                earnings: 0\n            };\n\n            this.videos.push(newVideo);\n            this.renderVideosGrid();\n            \n            // Close modal and show success\n            const modal = bootstrap.Modal.getInstance(document.getElementById('uploadVideoModal'));\n            modal.hide();\n            this.showSuccess('Video uploaded successfully! It will be reviewed before publishing.');\n            \n            // Reset form\n            document.getElementById('uploadVideoForm').reset();\n        }\n    }\n\n    handleVideoUpdate() {\n        const videoId = document.getElementById('editVideoId').value;\n        const formData = {\n            title: document.getElementById('editVideoTitle').value,\n            description: document.getElementById('editVideoDescription').value,\n            price: parseFloat(document.getElementById('editVideoPrice').value),\n            category: document.getElementById('editVideoCategory').value\n        };\n\n        if (this.validateVideoForm(formData)) {\n            // Update video\n            const videoIndex = this.videos.findIndex(v => v.id == videoId);\n            if (videoIndex !== -1) {\n                this.videos[videoIndex] = { ...this.videos[videoIndex], ...formData };\n                this.renderVideosGrid();\n                \n                // Close modal and show success\n                const modal = bootstrap.Modal.getInstance(document.getElementById('editVideoModal'));\n                modal.hide();\n                this.showSuccess('Video updated successfully!');\n            }\n        }\n    }\n\n    editVideo(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (video) {\n            // Populate edit form\n            document.getElementById('editVideoId').value = video.id;\n            document.getElementById('editVideoTitle').value = video.title;\n            document.getElementById('editVideoDescription').value = video.description;\n            document.getElementById('editVideoPrice').value = video.price;\n            document.getElementById('editVideoCategory').value = video.category;\n            \n            // Show modal\n            const modal = new bootstrap.Modal(document.getElementById('editVideoModal'));\n            modal.show();\n        }\n    }\n\n    deleteVideo(videoId) {\n        if (confirm('Are you sure you want to delete this video?')) {\n            this.videos = this.videos.filter(v => v.id !== videoId);\n            this.renderVideosGrid();\n            this.showSuccess('Video deleted successfully!');\n        }\n    }\n\n    viewAnalytics(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (video) {\n            alert(`Analytics for \"${video.title}\":\\nViews: ${video.views}\\nLikes: ${video.likes}\\nStatus: ${video.status}`);\n        }\n    }\n\n    viewEarnings(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (video) {\n            const purchases = Math.floor(video.earnings / video.price) || 0;\n            alert(`Earnings for \"${video.title}\":\\nPurchases: ${purchases}\\nEarnings: $${video.earnings.toFixed(2)}`);\n        }\n    }\n\n    // Earnings Methods\n    handlePayoutRequest() {\n        const amount = parseFloat(document.getElementById('payoutAmount').value);\n        const method = document.getElementById('payoutMethod').value;\n        const details = document.getElementById('accountDetails').value;\n\n        if (amount < 50) {\n            this.showError('Minimum payout amount is $50.00');\n            return;\n        }\n\n        if (amount > this.earnings.availableForPayout) {\n            this.showError('Amount exceeds available balance');\n            return;\n        }\n\n        if (!method) {\n            this.showError('Please select a payout method');\n            return;\n        }\n\n        if (!details.trim()) {\n            this.showError('Please provide account details');\n            return;\n        }\n\n        // Process payout request\n        const modal = bootstrap.Modal.getInstance(document.getElementById('payoutModal'));\n        modal.hide();\n        this.showSuccess(`Payout request of $${amount.toFixed(2)} submitted successfully!`);\n        \n        // Reset form\n        document.getElementById('payoutForm').reset();\n    }\n\n    handlePayoutMethodChange() {\n        const method = document.getElementById('payoutMethod').value;\n        const detailsDiv = document.getElementById('payoutDetails');\n        \n        if (method) {\n            detailsDiv.style.display = 'block';\n            const placeholder = this.getPayoutPlaceholder(method);\n            document.getElementById('accountDetails').placeholder = placeholder;\n        } else {\n            detailsDiv.style.display = 'none';\n        }\n    }\n\n    getPayoutPlaceholder(method) {\n        const placeholders = {\n            paypal: 'Enter your PayPal email address',\n            bank: 'Enter your bank account details (routing number, account number)',\n            crypto: 'Enter your cryptocurrency wallet address'\n        };\n        return placeholders[method] || 'Enter your account details';\n    }\n\n    // Profile and Settings Methods\n    handleProfileUpdate(e) {\n        e.preventDefault();\n        this.showSuccess('Profile updated successfully!');\n    }\n\n    handlePasswordChange(e) {\n        e.preventDefault();\n        const currentPassword = document.getElementById('currentPassword').value;\n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmNewPassword').value;\n\n        if (newPassword !== confirmPassword) {\n            this.showError('Passwords do not match!');\n            return;\n        }\n\n        if (newPassword.length < 8) {\n            this.showError('Password must be at least 8 characters long!');\n            return;\n        }\n\n        this.showSuccess('Password changed successfully!');\n        e.target.reset();\n    }\n\n    handleContentPreferences(e) {\n        e.preventDefault();\n        this.showSuccess('Content preferences saved successfully!');\n    }\n\n    handleNotificationSettings(e) {\n        e.preventDefault();\n        this.showSuccess('Notification settings updated successfully!');\n    }\n\n    handleApplyFilters() {\n        this.showInfo('Filters applied successfully!');\n    }\n\n    // Utility Methods\n    validateVideoForm(formData) {\n        if (!formData.title.trim()) {\n            this.showError('Video title is required!');\n            return false;\n        }\n        if (formData.price < 0) {\n            this.showError('Price cannot be negative!');\n            return false;\n        }\n        if (!formData.category) {\n            this.showError('Category is required!');\n            return false;\n        }\n        return true;\n    }\n\n    getStatusBadgeColor(status) {\n        const colors = {\n            published: 'success',\n            pending: 'warning',\n            rejected: 'danger',\n            draft: 'secondary'\n        };\n        return colors[status] || 'secondary';\n    }\n\n    showSuccess(message) {\n        this.showToast(message, 'success');\n    }\n\n    showError(message) {\n        this.showToast(message, 'danger');\n    }\n\n    showInfo(message) {\n        this.showToast(message, 'info');\n    }\n\n    showToast(message, type = 'info') {\n        // Use the common toast functionality\n        if (window.showToast) {\n            window.showToast(message, type);\n        } else {\n            console.log(`${type.toUpperCase()}: ${message}`);\n        }\n    }\n}\n\n// Initialize creator manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.creatorManager = new CreatorManager();\n});\n","size_bytes":27240},"assets/js/payment.js":{"content":"/**\n * VideoHub Payment Module\n * Handles payment processing, validation, and transaction management\n */\n\nclass PaymentManager {\n    constructor() {\n        this.currentTransaction = null;\n        this.paymentMethods = [];\n        this.init();\n    }\n\n    init() {\n        this.loadPaymentMethods();\n        this.bindEvents();\n        this.setupDemoMode();\n    }\n\n    loadPaymentMethods() {\n        // Mock payment methods\n        this.paymentMethods = [\n            {\n                id: 'card',\n                name: 'Credit/Debit Card',\n                icon: 'fas fa-credit-card',\n                enabled: true,\n                processingFee: 0.99\n            },\n            {\n                id: 'paypal',\n                name: 'PayPal',\n                icon: 'fab fa-paypal',\n                enabled: true,\n                processingFee: 0.50\n            },\n            {\n                id: 'apple_pay',\n                name: 'Apple Pay',\n                icon: 'fab fa-apple',\n                enabled: false,\n                processingFee: 0.30\n            },\n            {\n                id: 'google_pay',\n                name: 'Google Pay',\n                icon: 'fab fa-google',\n                enabled: false,\n                processingFee: 0.30\n            }\n        ];\n    }\n\n    bindEvents() {\n        // Payment method selection\n        document.addEventListener('change', (e) => {\n            if (e.target.name === 'paymentMethod') {\n                this.handlePaymentMethodChange(e.target.value);\n            }\n        });\n\n        // Payment form submission\n        document.addEventListener('submit', (e) => {\n            if (e.target.id === 'paymentForm') {\n                e.preventDefault();\n                this.processPayment();\n            }\n        });\n\n        // Card input formatting\n        document.addEventListener('input', (e) => {\n            if (e.target.id === 'cardNumber') {\n                this.formatCardNumber(e.target);\n            }\n            if (e.target.id === 'expiryDate') {\n                this.formatExpiryDate(e.target);\n            }\n            if (e.target.id === 'cvv') {\n                this.formatCVV(e.target);\n            }\n        });\n\n        // Real-time validation\n        document.addEventListener('blur', (e) => {\n            if (e.target.classList.contains('payment-input')) {\n                this.validateField(e.target);\n            }\n        });\n    }\n\n    setupDemoMode() {\n        // Add demo mode notification to payment forms\n        const paymentForms = document.querySelectorAll('.payment-form, #paymentForm');\n        paymentForms.forEach(form => {\n            if (!form.querySelector('.demo-notice')) {\n                const demoNotice = document.createElement('div');\n                demoNotice.className = 'alert alert-info demo-notice';\n                demoNotice.innerHTML = `\n                    <i class=\"fas fa-info-circle me-2\"></i>\n                    <strong>Demo Mode:</strong> No real payments will be processed. Use test card: 4242 4242 4242 4242\n                `;\n                form.insertBefore(demoNotice, form.firstChild);\n            }\n        });\n    }\n\n    // Payment Processing Methods\n    async processPayment() {\n        const paymentData = this.collectPaymentData();\n        \n        if (!this.validatePaymentData(paymentData)) {\n            return;\n        }\n\n        try {\n            this.showPaymentProcessing();\n            \n            // Simulate payment processing\n            const result = await this.simulatePaymentProcessing(paymentData);\n            \n            if (result.success) {\n                this.handlePaymentSuccess(result);\n            } else {\n                this.handlePaymentError(result.error);\n            }\n            \n        } catch (error) {\n            this.handlePaymentError('Payment processing failed. Please try again.');\n        } finally {\n            this.hidePaymentProcessing();\n        }\n    }\n\n    async simulatePaymentProcessing(paymentData) {\n        // Simulate API call delay\n        await this.delay(2000 + Math.random() * 2000);\n        \n        // Simulate different payment outcomes\n        const random = Math.random();\n        \n        if (random < 0.85) {\n            // Success (85% chance)\n            return {\n                success: true,\n                transactionId: this.generateTransactionId(),\n                amount: paymentData.amount,\n                currency: paymentData.currency,\n                paymentMethod: paymentData.paymentMethod,\n                timestamp: new Date().toISOString()\n            };\n        } else if (random < 0.95) {\n            // Decline (10% chance)\n            return {\n                success: false,\n                error: 'Payment declined. Please check your payment details or try a different payment method.'\n            };\n        } else {\n            // Error (5% chance)\n            return {\n                success: false,\n                error: 'Payment processing error. Please try again later.'\n            };\n        }\n    }\n\n    collectPaymentData() {\n        const form = document.getElementById('paymentForm') || document.querySelector('.payment-form');\n        if (!form) return null;\n\n        const paymentMethod = form.querySelector('input[name=\"paymentMethod\"]:checked')?.value || 'card';\n        const amount = parseFloat(form.querySelector('#amount')?.value || document.getElementById('purchasePrice')?.textContent || 0);\n        \n        const data = {\n            paymentMethod: paymentMethod,\n            amount: amount,\n            currency: 'USD',\n            processingFee: this.getProcessingFee(paymentMethod),\n            total: amount + this.getProcessingFee(paymentMethod)\n        };\n\n        // Collect payment method specific data\n        if (paymentMethod === 'card') {\n            data.card = {\n                number: form.querySelector('#cardNumber')?.value?.replace(/\\s/g, '') || '',\n                expiryDate: form.querySelector('#expiryDate')?.value || '',\n                cvv: form.querySelector('#cvv')?.value || '',\n                holderName: form.querySelector('#cardHolderName')?.value || ''\n            };\n        } else if (paymentMethod === 'paypal') {\n            data.paypal = {\n                email: form.querySelector('#paypalEmail')?.value || ''\n            };\n        }\n\n        return data;\n    }\n\n    validatePaymentData(data) {\n        if (!data) {\n            this.showPaymentError('Please fill in all required fields.');\n            return false;\n        }\n\n        if (!data.amount || data.amount <= 0) {\n            this.showPaymentError('Invalid payment amount.');\n            return false;\n        }\n\n        if (data.paymentMethod === 'card') {\n            return this.validateCardData(data.card);\n        } else if (data.paymentMethod === 'paypal') {\n            return this.validatePayPalData(data.paypal);\n        }\n\n        return true;\n    }\n\n    validateCardData(card) {\n        if (!this.validateCardNumber(card.number)) {\n            this.showPaymentError('Please enter a valid card number.');\n            return false;\n        }\n\n        if (!this.validateExpiryDate(card.expiryDate)) {\n            this.showPaymentError('Please enter a valid expiry date.');\n            return false;\n        }\n\n        if (!this.validateCVV(card.cvv)) {\n            this.showPaymentError('Please enter a valid CVV.');\n            return false;\n        }\n\n        if (!card.holderName.trim()) {\n            this.showPaymentError('Please enter the cardholder name.');\n            return false;\n        }\n\n        return true;\n    }\n\n    validatePayPalData(paypal) {\n        if (!this.validateEmail(paypal.email)) {\n            this.showPaymentError('Please enter a valid PayPal email address.');\n            return false;\n        }\n        return true;\n    }\n\n    // Card Validation Methods\n    validateCardNumber(cardNumber) {\n        // Remove spaces and check if it's numeric\n        const cleaned = cardNumber.replace(/\\s/g, '');\n        \n        if (!/^\\d+$/.test(cleaned) || cleaned.length < 13 || cleaned.length > 19) {\n            return false;\n        }\n\n        // Luhn algorithm\n        return this.luhnCheck(cleaned);\n    }\n\n    luhnCheck(cardNumber) {\n        let sum = 0;\n        let isEven = false;\n        \n        for (let i = cardNumber.length - 1; i >= 0; i--) {\n            let digit = parseInt(cardNumber.charAt(i));\n            \n            if (isEven) {\n                digit *= 2;\n                if (digit > 9) {\n                    digit -= 9;\n                }\n            }\n            \n            sum += digit;\n            isEven = !isEven;\n        }\n        \n        return sum % 10 === 0;\n    }\n\n    validateExpiryDate(expiryDate) {\n        if (!/^\\d{2}\\/\\d{2}$/.test(expiryDate)) {\n            return false;\n        }\n\n        const [month, year] = expiryDate.split('/').map(num => parseInt(num, 10));\n        const currentDate = new Date();\n        const currentYear = currentDate.getFullYear() % 100;\n        const currentMonth = currentDate.getMonth() + 1;\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (year < currentYear || (year === currentYear && month < currentMonth)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    validateCVV(cvv) {\n        return /^\\d{3,4}$/.test(cvv);\n    }\n\n    validateEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    // Card Type Detection\n    detectCardType(cardNumber) {\n        const cleaned = cardNumber.replace(/\\s/g, '');\n        \n        const cardTypes = {\n            visa: /^4/,\n            mastercard: /^5[1-5]/,\n            amex: /^3[47]/,\n            discover: /^6(?:011|5)/,\n            dinersclub: /^3[0689]/,\n            jcb: /^35/\n        };\n\n        for (const [type, pattern] of Object.entries(cardTypes)) {\n            if (pattern.test(cleaned)) {\n                return type;\n            }\n        }\n\n        return 'unknown';\n    }\n\n    // Input Formatting Methods\n    formatCardNumber(input) {\n        let value = input.value.replace(/\\s/g, '').replace(/[^0-9]/gi, '');\n        const matches = value.match(/\\d{4,16}/g);\n        const match = matches && matches[0] || '';\n        const parts = [];\n\n        for (let i = 0, len = match.length; i < len; i += 4) {\n            parts.push(match.substring(i, i + 4));\n        }\n\n        if (parts.length) {\n            input.value = parts.join(' ');\n        } else {\n            input.value = value;\n        }\n\n        // Update card type icon\n        this.updateCardTypeIcon(input, value);\n    }\n\n    formatExpiryDate(input) {\n        let value = input.value.replace(/\\D/g, '');\n        \n        if (value.length >= 2) {\n            value = value.substring(0, 2) + '/' + value.substring(2, 4);\n        }\n        \n        input.value = value;\n    }\n\n    formatCVV(input) {\n        input.value = input.value.replace(/\\D/g, '').substring(0, 4);\n    }\n\n    updateCardTypeIcon(input, cardNumber) {\n        const cardType = this.detectCardType(cardNumber);\n        const iconElement = input.parentNode.querySelector('.card-type-icon');\n        \n        if (iconElement) {\n            const icons = {\n                visa: 'fab fa-cc-visa',\n                mastercard: 'fab fa-cc-mastercard',\n                amex: 'fab fa-cc-amex',\n                discover: 'fab fa-cc-discover',\n                dinersclub: 'fab fa-cc-diners-club',\n                jcb: 'fab fa-cc-jcb',\n                unknown: 'fas fa-credit-card'\n            };\n            \n            iconElement.className = `card-type-icon ${icons[cardType] || icons.unknown}`;\n        }\n    }\n\n    // Payment Method Management\n    handlePaymentMethodChange(method) {\n        this.showPaymentMethodForm(method);\n        this.updatePaymentSummary(method);\n    }\n\n    showPaymentMethodForm(method) {\n        // Hide all payment forms\n        const forms = document.querySelectorAll('.payment-method-form');\n        forms.forEach(form => form.style.display = 'none');\n\n        // Show selected payment method form\n        const selectedForm = document.getElementById(`${method}Form`);\n        if (selectedForm) {\n            selectedForm.style.display = 'block';\n        }\n    }\n\n    updatePaymentSummary(method) {\n        const processingFee = this.getProcessingFee(method);\n        const amount = parseFloat(document.getElementById('purchasePrice')?.textContent || 0);\n        const total = amount + processingFee;\n\n        const processingFeeElement = document.querySelector('.processing-fee');\n        const totalElement = document.querySelector('.total-amount');\n\n        if (processingFeeElement) {\n            processingFeeElement.textContent = `$${processingFee.toFixed(2)}`;\n        }\n\n        if (totalElement) {\n            totalElement.textContent = `$${total.toFixed(2)}`;\n        }\n    }\n\n    getProcessingFee(method) {\n        const paymentMethod = this.paymentMethods.find(pm => pm.id === method);\n        return paymentMethod ? paymentMethod.processingFee : 0.99;\n    }\n\n    // UI State Management\n    showPaymentProcessing() {\n        const submitButton = document.querySelector('#paymentForm button[type=\"submit\"], .payment-submit');\n        if (submitButton) {\n            submitButton.disabled = true;\n            submitButton.innerHTML = `\n                <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\n                Processing...\n            `;\n        }\n\n        // Show processing overlay\n        this.showProcessingOverlay();\n    }\n\n    hidePaymentProcessing() {\n        const submitButton = document.querySelector('#paymentForm button[type=\"submit\"], .payment-submit');\n        if (submitButton) {\n            submitButton.disabled = false;\n            submitButton.innerHTML = `\n                <i class=\"fas fa-credit-card me-2\"></i>Complete Payment\n            `;\n        }\n\n        this.hideProcessingOverlay();\n    }\n\n    showProcessingOverlay() {\n        const overlay = document.createElement('div');\n        overlay.id = 'paymentProcessingOverlay';\n        overlay.className = 'payment-processing-overlay';\n        overlay.innerHTML = `\n            <div class=\"processing-content\">\n                <div class=\"spinner-border text-primary mb-3\" role=\"status\">\n                    <span class=\"visually-hidden\">Processing...</span>\n                </div>\n                <h5>Processing Payment</h5>\n                <p class=\"text-muted\">Please do not refresh or close this page</p>\n            </div>\n        `;\n        document.body.appendChild(overlay);\n    }\n\n    hideProcessingOverlay() {\n        const overlay = document.getElementById('paymentProcessingOverlay');\n        if (overlay) {\n            overlay.remove();\n        }\n    }\n\n    // Payment Result Handling\n    handlePaymentSuccess(result) {\n        this.currentTransaction = result;\n        \n        // Store transaction for receipt\n        this.storeTransaction(result);\n        \n        // Show success message\n        this.showPaymentSuccess(result);\n        \n        // Trigger success callback if available\n        if (window.onPaymentSuccess) {\n            window.onPaymentSuccess(result);\n        }\n        \n        // Redirect or update UI\n        setTimeout(() => {\n            this.redirectAfterPayment(result);\n        }, 3000);\n    }\n\n    handlePaymentError(error) {\n        this.showPaymentError(error);\n        \n        // Trigger error callback if available\n        if (window.onPaymentError) {\n            window.onPaymentError(error);\n        }\n    }\n\n    showPaymentSuccess(result) {\n        window.commonUtils?.showToast(`Payment successful! Transaction ID: ${result.transactionId}`, 'success', 8000);\n        \n        // Update modal content if in modal\n        const modal = document.querySelector('.modal.show');\n        if (modal) {\n            this.showSuccessInModal(modal, result);\n        }\n    }\n\n    showSuccessInModal(modal, result) {\n        const modalBody = modal.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.innerHTML = `\n                <div class=\"text-center\">\n                    <i class=\"fas fa-check-circle fa-5x text-success mb-4\"></i>\n                    <h4 class=\"text-success\">Payment Successful!</h4>\n                    <p class=\"text-muted mb-4\">Your purchase has been completed successfully.</p>\n                    <div class=\"card bg-light\">\n                        <div class=\"card-body\">\n                            <div class=\"row text-start\">\n                                <div class=\"col-6\"><strong>Transaction ID:</strong></div>\n                                <div class=\"col-6\">${result.transactionId}</div>\n                                <div class=\"col-6\"><strong>Amount:</strong></div>\n                                <div class=\"col-6\">$${result.amount.toFixed(2)}</div>\n                                <div class=\"col-6\"><strong>Date:</strong></div>\n                                <div class=\"col-6\">${new Date(result.timestamp).toLocaleDateString()}</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }\n\n        const modalFooter = modal.querySelector('.modal-footer');\n        if (modalFooter) {\n            modalFooter.innerHTML = `\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"window.location.reload()\">\n                    Continue\n                </button>\n            `;\n        }\n    }\n\n    showPaymentError(error) {\n        window.commonUtils?.showToast(error, 'danger', 8000);\n    }\n\n    // Transaction Management\n    storeTransaction(transaction) {\n        const transactions = this.getStoredTransactions();\n        transactions.push(transaction);\n        localStorage.setItem('videohub_transactions', JSON.stringify(transactions));\n    }\n\n    getStoredTransactions() {\n        const stored = localStorage.getItem('videohub_transactions');\n        return stored ? JSON.parse(stored) : [];\n    }\n\n    getTransaction(transactionId) {\n        const transactions = this.getStoredTransactions();\n        return transactions.find(t => t.transactionId === transactionId);\n    }\n\n    redirectAfterPayment(result) {\n        // Default redirect logic\n        const currentPage = window.location.pathname;\n        \n        if (currentPage.includes('browse.html')) {\n            // Refresh browse page to update purchased status\n            window.location.reload();\n        } else if (currentPage.includes('purchases.html')) {\n            // Refresh purchases page\n            window.location.reload();\n        } else {\n            // Go to purchases page\n            window.location.href = 'purchases.html';\n        }\n    }\n\n    // Field Validation\n    validateField(field) {\n        const fieldType = field.id || field.name;\n        let isValid = true;\n        let errorMessage = '';\n\n        switch (fieldType) {\n            case 'cardNumber':\n                isValid = this.validateCardNumber(field.value);\n                errorMessage = 'Please enter a valid card number';\n                break;\n            case 'expiryDate':\n                isValid = this.validateExpiryDate(field.value);\n                errorMessage = 'Please enter a valid expiry date (MM/YY)';\n                break;\n            case 'cvv':\n                isValid = this.validateCVV(field.value);\n                errorMessage = 'Please enter a valid CVV';\n                break;\n            case 'cardHolderName':\n                isValid = field.value.trim().length >= 2;\n                errorMessage = 'Please enter the cardholder name';\n                break;\n            case 'paypalEmail':\n                isValid = this.validateEmail(field.value);\n                errorMessage = 'Please enter a valid email address';\n                break;\n        }\n\n        this.updateFieldValidation(field, isValid, errorMessage);\n        return isValid;\n    }\n\n    updateFieldValidation(field, isValid, errorMessage) {\n        field.classList.remove('is-valid', 'is-invalid');\n        \n        // Remove existing feedback\n        const existingFeedback = field.parentNode.querySelector('.invalid-feedback');\n        if (existingFeedback) {\n            existingFeedback.remove();\n        }\n\n        if (field.value.trim() === '') {\n            // Don't show validation for empty fields unless they've been focused\n            return;\n        }\n\n        if (isValid) {\n            field.classList.add('is-valid');\n        } else {\n            field.classList.add('is-invalid');\n            \n            // Add error feedback\n            const feedback = document.createElement('div');\n            feedback.className = 'invalid-feedback';\n            feedback.textContent = errorMessage;\n            field.parentNode.appendChild(feedback);\n        }\n    }\n\n    // Utility Methods\n    generateTransactionId() {\n        const timestamp = Date.now().toString();\n        const random = Math.random().toString(36).substr(2, 5).toUpperCase();\n        return `TXN_${timestamp}_${random}`;\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Public API Methods\n    initializePayment(options = {}) {\n        this.currentTransaction = null;\n        \n        // Set up payment form with options\n        if (options.amount) {\n            const amountElement = document.getElementById('amount');\n            if (amountElement) {\n                amountElement.value = options.amount;\n            }\n        }\n\n        if (options.currency) {\n            this.currency = options.currency;\n        }\n\n        // Initialize default payment method\n        const defaultMethod = options.defaultMethod || 'card';\n        const methodRadio = document.querySelector(`input[name=\"paymentMethod\"][value=\"${defaultMethod}\"]`);\n        if (methodRadio) {\n            methodRadio.checked = true;\n            this.handlePaymentMethodChange(defaultMethod);\n        }\n    }\n\n    getPaymentMethods() {\n        return this.paymentMethods.filter(method => method.enabled);\n    }\n\n    setPaymentCallback(onSuccess, onError) {\n        window.onPaymentSuccess = onSuccess;\n        window.onPaymentError = onError;\n    }\n}\n\n// CSS for payment processing overlay\nconst paymentStyles = `\n    .payment-processing-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: 9999;\n    }\n\n    .processing-content {\n        background: white;\n        padding: 2rem;\n        border-radius: 0.5rem;\n        text-align: center;\n        max-width: 300px;\n    }\n\n    .card-type-icon {\n        position: absolute;\n        right: 10px;\n        top: 50%;\n        transform: translateY(-50%);\n        font-size: 1.2rem;\n        color: #6c757d;\n    }\n\n    .payment-method-form {\n        display: none;\n        margin-top: 1rem;\n    }\n\n    .payment-method-form.active {\n        display: block;\n    }\n\n    .payment-input {\n        position: relative;\n    }\n`;\n\n// Inject styles\nconst styleSheet = document.createElement('style');\nstyleSheet.textContent = paymentStyles;\ndocument.head.appendChild(styleSheet);\n\n// Initialize payment manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.paymentManager = new PaymentManager();\n});\n\n// Export for other modules\nwindow.PaymentManager = PaymentManager;\n","size_bytes":23524},"assets/js/viewer.js":{"content":"/**\n * VideoHub Viewer Module\n * Handles viewer functionality including browsing, purchasing, and watching videos\n */\n\nclass ViewerManager {\n    constructor() {\n        this.videos = [];\n        this.purchases = [];\n        this.favorites = [];\n        this.currentVideo = null;\n        this.player = null;\n        this.init();\n    }\n\n    init() {\n        this.loadMockData();\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n        this.initializePlayer();\n    }\n\n    loadMockData() {\n        // Mock available videos for browsing\n        this.videos = [\n            {\n                id: 1,\n                title: 'JavaScript Advanced Concepts',\n                description: 'Deep dive into advanced JavaScript concepts including closures, prototypes, and async programming. Learn how to write more efficient and maintainable code.',\n                creator: 'John Creator',\n                creatorId: 1,\n                duration: '45:30',\n                price: 19.99,\n                category: 'technology',\n                rating: 4.8,\n                views: 1234,\n                likes: 89,\n                uploadDate: '2024-03-10',\n                thumbnail: 'https://via.placeholder.com/400x225/007bff/ffffff?text=JS+Advanced',\n                featured: true,\n                tags: ['javascript', 'programming', 'advanced']\n            },\n            {\n                id: 2,\n                title: 'React Hooks Complete Guide',\n                description: 'Complete guide to React Hooks with practical examples and best practices. Master useState, useEffect, and custom hooks.',\n                creator: 'Jane Developer',\n                creatorId: 2,\n                duration: '32:15',\n                price: 14.99,\n                category: 'technology',\n                rating: 4.6,\n                views: 856,\n                likes: 67,\n                uploadDate: '2024-03-08',\n                thumbnail: 'https://via.placeholder.com/400x225/28a745/ffffff?text=React+Hooks',\n                featured: true,\n                tags: ['react', 'hooks', 'frontend']\n            },\n            {\n                id: 3,\n                title: 'Business Strategy Fundamentals',\n                description: 'Learn the fundamental principles of business strategy and how to apply them in real-world scenarios.',\n                creator: 'Mike Producer',\n                creatorId: 3,\n                duration: '28:45',\n                price: 24.99,\n                category: 'business',\n                rating: 4.5,\n                views: 567,\n                likes: 45,\n                uploadDate: '2024-03-12',\n                thumbnail: 'https://via.placeholder.com/400x225/ffc107/000000?text=Business+Strategy',\n                featured: false,\n                tags: ['business', 'strategy', 'management']\n            },\n            {\n                id: 4,\n                title: 'UI/UX Design Principles',\n                description: 'Master the essential principles of user interface and user experience design.',\n                creator: 'Sarah Designer',\n                creatorId: 4,\n                duration: '52:10',\n                price: 29.99,\n                category: 'design',\n                rating: 4.9,\n                views: 789,\n                likes: 102,\n                uploadDate: '2024-03-05',\n                thumbnail: 'https://via.placeholder.com/400x225/6f42c1/ffffff?text=UI%2FUX+Design',\n                featured: true,\n                tags: ['design', 'ui', 'ux']\n            },\n            {\n                id: 5,\n                title: 'Python for Data Science',\n                description: 'Complete introduction to Python programming for data science applications.',\n                creator: 'Dr. Analytics',\n                creatorId: 5,\n                duration: '67:30',\n                price: 34.99,\n                category: 'education',\n                rating: 4.7,\n                views: 423,\n                likes: 58,\n                uploadDate: '2024-03-01',\n                thumbnail: 'https://via.placeholder.com/400x225/17a2b8/ffffff?text=Python+Data+Science',\n                featured: false,\n                tags: ['python', 'data-science', 'programming']\n            }\n        ];\n\n        // Mock purchased videos\n        this.purchases = [\n            {\n                id: 1,\n                videoId: 1,\n                video: this.videos[0],\n                purchaseDate: '2024-03-15',\n                price: 19.99,\n                transactionId: 'TXN_' + Date.now(),\n                status: 'completed',\n                watchProgress: 75,\n                lastWatched: '2024-03-16',\n                favorite: true\n            },\n            {\n                id: 2,\n                videoId: 2,\n                video: this.videos[1],\n                purchaseDate: '2024-03-14',\n                price: 14.99,\n                transactionId: 'TXN_' + (Date.now() - 86400000),\n                status: 'completed',\n                watchProgress: 45,\n                lastWatched: '2024-03-15',\n                favorite: false\n            }\n        ];\n\n        // Mock favorites\n        this.favorites = [1, 4];\n    }\n\n    bindEvents() {\n        // Search functionality\n        const searchBtn = document.getElementById('searchBtn');\n        const searchInput = document.getElementById('searchInput');\n        if (searchBtn && searchInput) {\n            searchBtn.addEventListener('click', this.handleSearch.bind(this));\n            searchInput.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter') this.handleSearch();\n            });\n        }\n\n        // Filter events\n        const applyFiltersBtn = document.getElementById('applyFilters');\n        if (applyFiltersBtn) {\n            applyFiltersBtn.addEventListener('click', this.handleApplyFilters.bind(this));\n        }\n\n        // View toggle\n        const viewToggle = document.getElementById('viewToggle');\n        if (viewToggle) {\n            viewToggle.addEventListener('click', this.toggleView.bind(this));\n        }\n\n        const gridViewBtn = document.getElementById('gridView');\n        const listViewBtn = document.getElementById('listView');\n        if (gridViewBtn && listViewBtn) {\n            gridViewBtn.addEventListener('click', () => this.setView('grid'));\n            listViewBtn.addEventListener('click', () => this.setView('list'));\n        }\n\n        // Purchase events\n        const purchaseFromPreviewBtn = document.getElementById('purchaseFromPreview');\n        const confirmPurchaseBtn = document.getElementById('confirmPurchase');\n        if (purchaseFromPreviewBtn) {\n            purchaseFromPreviewBtn.addEventListener('click', this.handlePurchaseFromPreview.bind(this));\n        }\n        if (confirmPurchaseBtn) {\n            confirmPurchaseBtn.addEventListener('click', this.handleConfirmPurchase.bind(this));\n        }\n\n        // Profile form events\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', this.handleProfileUpdate.bind(this));\n        }\n\n        const passwordForm = document.getElementById('passwordForm');\n        if (passwordForm) {\n            passwordForm.addEventListener('submit', this.handlePasswordChange.bind(this));\n        }\n\n        const preferencesForm = document.getElementById('preferencesForm');\n        if (preferencesForm) {\n            preferencesForm.addEventListener('submit', this.handlePreferencesUpdate.bind(this));\n        }\n\n        const notificationForm = document.getElementById('notificationForm');\n        if (notificationForm) {\n            notificationForm.addEventListener('submit', this.handleNotificationUpdate.bind(this));\n        }\n\n        // Video player events\n        this.bindVideoPlayerEvents();\n\n        // Share functionality\n        const shareBtn = document.getElementById('shareBtn');\n        const copyUrlBtn = document.getElementById('copyUrl');\n        if (shareBtn) {\n            shareBtn.addEventListener('click', this.handleShare.bind(this));\n        }\n        if (copyUrlBtn) {\n            copyUrlBtn.addEventListener('click', this.handleCopyUrl.bind(this));\n        }\n\n        // Load more videos\n        const loadMoreBtn = document.getElementById('loadMore');\n        if (loadMoreBtn) {\n            loadMoreBtn.addEventListener('click', this.handleLoadMore.bind(this));\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        switch (currentPage) {\n            case 'dashboard.html':\n                this.loadDashboardPage();\n                break;\n            case 'browse.html':\n                this.loadBrowsePage();\n                break;\n            case 'purchases.html':\n                this.loadPurchasesPage();\n                break;\n            case 'profile.html':\n                this.loadProfilePage();\n                break;\n            case 'video-player.html':\n                this.loadVideoPlayerPage();\n                break;\n        }\n    }\n\n    loadDashboardPage() {\n        this.renderPurchaseStats();\n        this.renderRecentPurchases();\n        this.renderFeaturedVideos();\n        this.renderContinueWatching();\n        this.initializeDashboardCharts();\n    }\n\n    loadBrowsePage() {\n        this.renderFeaturedVideos();\n        this.renderVideosGrid();\n        this.updateVideoCount();\n    }\n\n    loadPurchasesPage() {\n        this.renderPurchaseStats();\n        this.renderRecentPurchases();\n        this.renderPurchasedVideos();\n    }\n\n    loadProfilePage() {\n        this.loadProfileData();\n    }\n\n    loadVideoPlayerPage() {\n        this.loadCurrentVideo();\n        this.loadVideoComments();\n        this.loadRelatedVideos();\n    }\n\n    renderFeaturedVideos() {\n        const container = document.getElementById('featuredVideos');\n        if (!container) return;\n\n        const featuredVideos = this.videos.filter(video => video.featured);\n        container.innerHTML = '';\n\n        featuredVideos.forEach(video => {\n            const col = document.createElement('div');\n            col.className = 'col-lg-4 col-md-6 mb-4';\n            col.innerHTML = this.createVideoCard(video, true);\n            container.appendChild(col);\n        });\n    }\n\n    renderVideosGrid() {\n        const container = document.getElementById('videosGrid');\n        if (!container) return;\n\n        container.innerHTML = '';\n\n        this.videos.forEach(video => {\n            const col = document.createElement('div');\n            col.className = 'col-lg-3 col-md-4 col-sm-6 mb-4';\n            col.innerHTML = this.createVideoCard(video);\n            container.appendChild(col);\n        });\n    }\n\n    createVideoCard(video, featured = false) {\n        const isPurchased = this.purchases.some(p => p.videoId === video.id);\n        const isFavorite = this.favorites.includes(video.id);\n\n        return `\n            <div class=\"card video-card h-100\">\n                <div class=\"video-thumbnail\">\n                    <img src=\"${video.thumbnail}\" class=\"card-img-top\" alt=\"${video.title}\">\n                    <div class=\"video-duration\">${video.duration}</div>\n                    <div class=\"video-price\">${isPurchased ? 'Owned' : '$' + video.price.toFixed(2)}</div>\n                    <div class=\"video-overlay\" onclick=\"viewerManager.${isPurchased ? 'playVideo' : 'showVideoPreview'}(${video.id})\">\n                        <i class=\"fas fa-${isPurchased ? 'play' : 'eye'} fa-2x\"></i>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <h6 class=\"video-title\">${video.title}</h6>\n                    <p class=\"video-creator\">By ${video.creator}</p>\n                    <div class=\"video-stats\">\n                        <small class=\"text-muted\">\n                            <i class=\"fas fa-eye me-1\"></i>${video.views.toLocaleString()} views\n                            <i class=\"fas fa-star me-1 ms-2\"></i>${video.rating}\n                        </small>\n                        <div class=\"video-actions\">\n                            <button class=\"btn btn-sm ${isFavorite ? 'btn-warning' : 'btn-outline-warning'}\" \n                                    onclick=\"viewerManager.toggleFavorite(${video.id})\" title=\"Add to favorites\">\n                                <i class=\"fas fa-heart\"></i>\n                            </button>\n                            ${!isPurchased ? `\n                                <button class=\"btn btn-sm btn-success ms-1\" \n                                        onclick=\"viewerManager.showPurchaseModal(${video.id})\" title=\"Purchase\">\n                                    <i class=\"fas fa-shopping-cart\"></i>\n                                </button>\n                            ` : `\n                                <button class=\"btn btn-sm btn-primary ms-1\" \n                                        onclick=\"viewerManager.playVideo(${video.id})\" title=\"Watch\">\n                                    <i class=\"fas fa-play\"></i>\n                                </button>\n                            `}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderPurchaseStats() {\n        const totalVideos = document.getElementById('totalVideos');\n        const totalSpent = document.getElementById('totalSpent');\n        const totalWatchTime = document.getElementById('totalWatchTime');\n        const favoriteVideos = document.getElementById('favoriteVideos');\n\n        if (totalVideos) totalVideos.textContent = this.purchases.length;\n        if (totalSpent) {\n            const total = this.purchases.reduce((sum, p) => sum + p.price, 0);\n            totalSpent.textContent = '$' + total.toFixed(2);\n        }\n        if (totalWatchTime) {\n            // Calculate total watch time based on progress\n            const totalMinutes = this.purchases.reduce((sum, p) => {\n                const videoDuration = this.parseDuration(p.video.duration);\n                return sum + (videoDuration * p.watchProgress / 100);\n            }, 0);\n            totalWatchTime.textContent = (totalMinutes / 60).toFixed(1) + ' hrs';\n        }\n        if (favoriteVideos) {\n            favoriteVideos.textContent = this.purchases.filter(p => p.favorite).length;\n        }\n    }\n\n    renderRecentPurchases() {\n        const container = document.getElementById('recentPurchases');\n        if (!container) return;\n\n        const recentPurchases = this.purchases.slice(0, 3);\n        container.innerHTML = '';\n\n        recentPurchases.forEach(purchase => {\n            const col = document.createElement('div');\n            col.className = 'col-md-4 mb-3';\n            col.innerHTML = this.createVideoCard(purchase.video);\n            container.appendChild(col);\n        });\n    }\n\n    renderPurchasedVideos() {\n        const gridContainer = document.getElementById('videosGrid');\n        const listContainer = document.getElementById('videosTableBody');\n\n        if (gridContainer) {\n            gridContainer.innerHTML = '';\n            this.purchases.forEach(purchase => {\n                const col = document.createElement('div');\n                col.className = 'col-lg-4 col-md-6 mb-4';\n                col.innerHTML = this.createPurchasedVideoCard(purchase);\n                gridContainer.appendChild(col);\n            });\n        }\n\n        if (listContainer) {\n            listContainer.innerHTML = '';\n            this.purchases.forEach(purchase => {\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>\n                        <div class=\"d-flex align-items-center\">\n                            <img src=\"${purchase.video.thumbnail}\" width=\"60\" height=\"34\" class=\"rounded me-3\" alt=\"${purchase.video.title}\">\n                            <div>\n                                <strong>${purchase.video.title}</strong><br>\n                                <small class=\"text-muted\">${purchase.video.duration}</small>\n                            </div>\n                        </div>\n                    </td>\n                    <td>${purchase.video.creator}</td>\n                    <td>${purchase.video.duration}</td>\n                    <td>${purchase.purchaseDate}</td>\n                    <td>$${purchase.price.toFixed(2)}</td>\n                    <td>\n                        <span class=\"badge bg-${purchase.watchProgress > 0 ? 'success' : 'secondary'}\">\n                            ${purchase.watchProgress > 0 ? 'Watched' : 'Unwatched'}\n                        </span>\n                    </td>\n                    <td>\n                        <div class=\"btn-group\" role=\"group\">\n                            <button class=\"btn btn-sm btn-primary\" onclick=\"viewerManager.playVideo(${purchase.videoId})\">\n                                <i class=\"fas fa-play\"></i>\n                            </button>\n                            <button class=\"btn btn-sm btn-outline-secondary\" onclick=\"viewerManager.showVideoOptions(${purchase.id})\">\n                                <i class=\"fas fa-ellipsis-v\"></i>\n                            </button>\n                        </div>\n                    </td>\n                `;\n                listContainer.appendChild(row);\n            });\n        }\n    }\n\n    createPurchasedVideoCard(purchase) {\n        return `\n            <div class=\"card video-card h-100\">\n                <div class=\"video-thumbnail\">\n                    <img src=\"${purchase.video.thumbnail}\" class=\"card-img-top\" alt=\"${purchase.video.title}\">\n                    <div class=\"video-duration\">${purchase.video.duration}</div>\n                    <div class=\"video-overlay\" onclick=\"viewerManager.playVideo(${purchase.videoId})\">\n                        <i class=\"fas fa-play fa-2x\"></i>\n                    </div>\n                    <div class=\"watch-progress\">\n                        <div class=\"progress\" style=\"height: 4px;\">\n                            <div class=\"progress-bar\" style=\"width: ${purchase.watchProgress}%\"></div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <h6 class=\"video-title\">${purchase.video.title}</h6>\n                    <p class=\"video-creator\">By ${purchase.video.creator}</p>\n                    <div class=\"video-stats\">\n                        <small class=\"text-muted\">\n                            Purchased: ${purchase.purchaseDate}<br>\n                            Progress: ${purchase.watchProgress}%\n                        </small>\n                    </div>\n                </div>\n                <div class=\"card-footer\">\n                    <div class=\"btn-group w-100\" role=\"group\">\n                        <button class=\"btn btn-sm btn-primary\" onclick=\"viewerManager.playVideo(${purchase.videoId})\">\n                            <i class=\"fas fa-play me-1\"></i>Watch\n                        </button>\n                        <button class=\"btn btn-sm btn-outline-secondary\" onclick=\"viewerManager.showVideoOptions(${purchase.id})\">\n                            <i class=\"fas fa-ellipsis-v\"></i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    showVideoPreview(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (!video) return;\n\n        // Populate preview modal\n        document.getElementById('previewTitle').textContent = 'Video Preview';\n        document.getElementById('previewVideoTitle').textContent = video.title;\n        document.getElementById('previewCreator').textContent = video.creator;\n        document.getElementById('previewDuration').textContent = video.duration;\n        document.getElementById('previewCategory').textContent = video.category;\n        document.getElementById('previewRating').innerHTML = this.createRatingStars(video.rating);\n        document.getElementById('previewPrice').textContent = video.price.toFixed(2);\n        document.getElementById('previewDescription').textContent = video.description;\n        document.getElementById('previewThumbnail').src = video.thumbnail;\n\n        // Store current video for purchase\n        this.currentVideo = video;\n\n        // Show modal\n        const modal = new bootstrap.Modal(document.getElementById('videoPreviewModal'));\n        modal.show();\n    }\n\n    showPurchaseModal(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (!video) return;\n\n        // Populate purchase modal\n        document.getElementById('purchaseVideoTitle').textContent = video.title;\n        document.getElementById('purchaseCreator').textContent = video.creator;\n        document.getElementById('purchasePrice').textContent = video.price.toFixed(2);\n        document.getElementById('totalPrice').textContent = (video.price + 0.99).toFixed(2);\n\n        // Store current video for purchase\n        this.currentVideo = video;\n\n        // Show modal\n        const modal = new bootstrap.Modal(document.getElementById('purchaseModal'));\n        modal.show();\n    }\n\n    handlePurchaseFromPreview() {\n        if (this.currentVideo) {\n            const previewModal = bootstrap.Modal.getInstance(document.getElementById('videoPreviewModal'));\n            previewModal.hide();\n            \n            setTimeout(() => {\n                this.showPurchaseModal(this.currentVideo.id);\n            }, 300);\n        }\n    }\n\n    handleConfirmPurchase() {\n        if (!this.currentVideo) return;\n\n        const loaderId = window.commonUtils.showLoading('Processing payment...');\n\n        // Simulate payment processing\n        setTimeout(() => {\n            // Add to purchases\n            const newPurchase = {\n                id: this.purchases.length + 1,\n                videoId: this.currentVideo.id,\n                video: this.currentVideo,\n                purchaseDate: new Date().toISOString().split('T')[0],\n                price: this.currentVideo.price,\n                transactionId: 'TXN_' + Date.now(),\n                status: 'completed',\n                watchProgress: 0,\n                lastWatched: null,\n                favorite: false\n            };\n\n            this.purchases.push(newPurchase);\n\n            // Hide purchase modal\n            const purchaseModal = bootstrap.Modal.getInstance(document.getElementById('purchaseModal'));\n            purchaseModal.hide();\n\n            window.commonUtils.hideLoading(loaderId);\n            window.commonUtils.showToast('Purchase successful! Starting video...', 'success');\n\n            // Update UI\n            this.renderVideosGrid();\n            \n            // Auto-play video after purchase\n            setTimeout(() => {\n                this.showVideoPlayerModal(this.currentVideo, newPurchase);\n            }, 500);\n\n            this.currentVideo = null;\n\n        }, 2000);\n    }\n\n    showVideoPlayerModal(video, purchase) {\n        if (!video || !purchase) return;\n\n        // Set video information\n        document.getElementById('modalVideoTitle').textContent = video.title;\n        document.getElementById('modalVideoTitleInfo').textContent = video.title;\n        document.getElementById('modalVideoCreator').textContent = video.creator;\n        document.getElementById('modalVideoViews').textContent = video.views.toLocaleString();\n        document.getElementById('modalVideoDate').textContent = window.commonUtils.formatDate(video.uploadDate);\n        document.getElementById('modalVideoDescription').textContent = video.description;\n        document.getElementById('modalLikeCount').textContent = video.likes;\n\n        // Set video source (demo)\n        const modalVideo = document.getElementById('modalVideo');\n        modalVideo.poster = video.thumbnail;\n        modalVideo.src = `https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4`;\n\n        // Update progress\n        this.updateModalWatchProgress(purchase.watchProgress);\n\n        // Bind modal video events\n        this.bindModalVideoEvents();\n\n        // Load related videos\n        this.loadModalRelatedVideos(video.id);\n\n        // Show modal\n        const modal = new bootstrap.Modal(document.getElementById('videoPlayerModal'));\n        modal.show();\n\n        this.currentVideo = video;\n        this.currentPurchase = purchase;\n    }\n\n    bindModalVideoEvents() {\n        const modalVideo = document.getElementById('modalVideo');\n        const modalLikeBtn = document.getElementById('modalLikeBtn');\n        const modalFavoriteBtn = document.getElementById('modalFavoriteBtn');\n        const modalShareBtn = document.getElementById('modalShareBtn');\n        const modalSaveNotes = document.getElementById('modalSaveNotes');\n\n        // Unbind existing events\n        modalVideo.removeEventListener('timeupdate', this.updateModalProgress.bind(this));\n        modalVideo.removeEventListener('loadedmetadata', this.updateModalDuration.bind(this));\n\n        // Bind new events\n        modalVideo.addEventListener('timeupdate', this.updateModalProgress.bind(this));\n        modalVideo.addEventListener('loadedmetadata', this.updateModalDuration.bind(this));\n\n        // Bind action buttons\n        if (modalLikeBtn) modalLikeBtn.onclick = () => this.toggleModalLike();\n        if (modalFavoriteBtn) modalFavoriteBtn.onclick = () => this.toggleModalFavorite();\n        if (modalShareBtn) modalShareBtn.onclick = () => this.handleModalShare();\n        if (modalSaveNotes) modalSaveNotes.onclick = () => this.saveModalNotes();\n    }\n\n    updateModalProgress() {\n        const modalVideo = document.getElementById('modalVideo');\n        if (!modalVideo) return;\n\n        const progress = (modalVideo.currentTime / modalVideo.duration) * 100;\n        this.updateModalWatchProgress(progress);\n\n        // Update time displays\n        document.getElementById('modalWatchedTime').textContent = this.formatTime(modalVideo.currentTime);\n        \n        // Update progress percentage\n        const progressPercent = document.getElementById('modalProgressPercent');\n        if (progressPercent) {\n            progressPercent.textContent = Math.round(progress) + '%';\n        }\n    }\n\n    updateModalDuration() {\n        const modalVideo = document.getElementById('modalVideo');\n        if (!modalVideo) return;\n        document.getElementById('modalTotalTime').textContent = this.formatTime(modalVideo.duration);\n    }\n\n    updateModalWatchProgress(progress) {\n        const progressBar = document.getElementById('modalWatchProgress');\n        if (progressBar) {\n            progressBar.style.width = Math.min(progress, 100) + '%';\n        }\n        \n        // Update progress percentage display\n        const progressPercent = document.getElementById('modalProgressPercent');\n        if (progressPercent) {\n            progressPercent.textContent = Math.round(Math.min(progress, 100)) + '%';\n        }\n    }\n\n    loadModalRelatedVideos(currentVideoId) {\n        const container = document.getElementById('modalRelatedVideos');\n        const countElement = document.getElementById('relatedVideosCount');\n        if (!container) return;\n\n        const relatedVideos = this.videos.filter(v => v.id !== currentVideoId).slice(0, 4);\n        container.innerHTML = '';\n        \n        if (countElement) {\n            countElement.textContent = relatedVideos.length;\n        }\n\n        relatedVideos.forEach(video => {\n            const isPurchased = this.purchases.some(p => p.videoId === video.id);\n            const videoItem = document.createElement('div');\n            videoItem.className = 'related-video-item cursor-pointer';\n            videoItem.innerHTML = `\n                <img src=\"${video.thumbnail}\" class=\"related-video-thumbnail\" alt=\"${video.title}\">\n                <div class=\"related-video-info\">\n                    <div class=\"related-video-title\">${video.title}</div>\n                    <div class=\"related-video-creator\">${video.creator}</div>\n                    <div class=\"related-video-duration\">${video.duration} ${isPurchased ? '• Owned' : '• $' + video.price.toFixed(2)}</div>\n                </div>\n            `;\n            \n            videoItem.addEventListener('click', () => {\n                if (isPurchased) {\n                    const purchase = this.purchases.find(p => p.videoId === video.id);\n                    this.showVideoPlayerModal(video, purchase);\n                } else {\n                    // Hide current modal and show purchase modal\n                    const currentModal = bootstrap.Modal.getInstance(document.getElementById('videoPlayerModal'));\n                    currentModal.hide();\n                    setTimeout(() => {\n                        this.showPurchaseModal(video.id);\n                    }, 300);\n                }\n            });\n            \n            container.appendChild(videoItem);\n        });\n\n        // Auto-save notes functionality\n        const notesTextarea = document.getElementById('modalVideoNotes');\n        if (notesTextarea) {\n            let saveTimeout;\n            notesTextarea.addEventListener('input', () => {\n                clearTimeout(saveTimeout);\n                saveTimeout = setTimeout(() => {\n                    this.autoSaveNotes();\n                }, 2000);\n            });\n        }\n    }\n\n    autoSaveNotes() {\n        if (!this.currentVideo) return;\n        const notes = document.getElementById('modalVideoNotes').value;\n        localStorage.setItem(`video_notes_${this.currentVideo.id}`, notes);\n        \n        // Show a subtle indication that notes are saved\n        const saveBtn = document.getElementById('modalSaveNotes');\n        if (saveBtn) {\n            const originalText = saveBtn.innerHTML;\n            saveBtn.innerHTML = '<i class=\"fas fa-check me-1\"></i>Saved';\n            saveBtn.classList.add('btn-success');\n            saveBtn.classList.remove('btn-outline-primary');\n            \n            setTimeout(() => {\n                saveBtn.innerHTML = originalText;\n                saveBtn.classList.remove('btn-success');\n                saveBtn.classList.add('btn-outline-primary');\n            }, 1500);\n        }\n    }\n\n    toggleModalLike() {\n        if (!this.currentVideo) return;\n        this.currentVideo.likes++;\n        document.getElementById('modalLikeCount').textContent = this.currentVideo.likes;\n        window.commonUtils.showToast('Video liked!', 'success');\n    }\n\n    toggleModalFavorite() {\n        if (!this.currentVideo) return;\n        this.toggleFavorite(this.currentVideo.id);\n    }\n\n    handleModalShare() {\n        if (!this.currentVideo) return;\n        const shareUrl = `${window.location.origin}/viewer/browse.html?video=${this.currentVideo.id}`;\n        window.commonUtils.copyToClipboard(shareUrl);\n        window.commonUtils.showToast('Video link copied to clipboard!', 'success');\n    }\n\n    saveModalNotes() {\n        const notes = document.getElementById('modalVideoNotes').value;\n        // Save notes to localStorage or send to server\n        localStorage.setItem(`video_notes_${this.currentVideo.id}`, notes);\n        window.commonUtils.showToast('Notes saved successfully!', 'success');\n    }\n\n    playVideo(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (!video) return;\n\n        // Check if purchased\n        const purchase = this.purchases.find(p => p.videoId === videoId);\n        if (!purchase) {\n            this.showPurchaseModal(videoId);\n            return;\n        }\n\n        // Show video in modal\n        this.showVideoPlayerModal(video, purchase);\n    }\n\n    initializePlayer() {\n        if (window.location.pathname.includes('video-player.html')) {\n            this.setupVideoPlayer();\n        }\n    }\n\n    setupVideoPlayer() {\n        const videoElement = document.getElementById('mainVideo');\n        if (!videoElement) return;\n\n        this.player = videoElement;\n        \n        // Bind video player events\n        this.bindVideoPlayerEvents();\n        \n        // Load video from URL parameter\n        const videoId = window.commonUtils.getQueryParam('video');\n        if (videoId) {\n            this.loadVideo(parseInt(videoId));\n        }\n    }\n\n    bindVideoPlayerEvents() {\n        const playPauseBtn = document.getElementById('playPauseBtn');\n        const muteBtn = document.getElementById('muteBtn');\n        const fullscreenBtn = document.getElementById('fullscreenBtn');\n        const playbackSpeed = document.getElementById('playbackSpeed');\n        const videoQuality = document.getElementById('videoQuality');\n\n        if (playPauseBtn) {\n            playPauseBtn.addEventListener('click', this.togglePlayPause.bind(this));\n        }\n\n        if (muteBtn) {\n            muteBtn.addEventListener('click', this.toggleMute.bind(this));\n        }\n\n        if (fullscreenBtn) {\n            fullscreenBtn.addEventListener('click', this.toggleFullscreen.bind(this));\n        }\n\n        if (playbackSpeed) {\n            playbackSpeed.addEventListener('change', this.changePlaybackSpeed.bind(this));\n        }\n\n        if (videoQuality) {\n            videoQuality.addEventListener('change', this.changeVideoQuality.bind(this));\n        }\n\n        // Video element events\n        if (this.player) {\n            this.player.addEventListener('timeupdate', this.updateProgress.bind(this));\n            this.player.addEventListener('loadedmetadata', this.updateDuration.bind(this));\n            this.player.addEventListener('play', this.onVideoPlay.bind(this));\n            this.player.addEventListener('pause', this.onVideoPause.bind(this));\n        }\n\n        // Comment events\n        const submitCommentBtn = document.getElementById('submitComment');\n        if (submitCommentBtn) {\n            submitCommentBtn.addEventListener('click', this.submitComment.bind(this));\n        }\n\n        // Video actions\n        const likeBtn = document.getElementById('likeBtn');\n        const favoriteBtn = document.getElementById('favoriteBtn');\n        const downloadBtn = document.getElementById('downloadBtn');\n\n        if (likeBtn) likeBtn.addEventListener('click', this.toggleLike.bind(this));\n        if (favoriteBtn) favoriteBtn.addEventListener('click', this.toggleVideoFavorite.bind(this));\n        if (downloadBtn) downloadBtn.addEventListener('click', this.downloadVideo.bind(this));\n    }\n\n    loadVideo(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        const purchase = this.purchases.find(p => p.videoId === videoId);\n\n        if (!video || !purchase) {\n            window.commonUtils.showToast('Video not found or not purchased', 'error');\n            return;\n        }\n\n        // Update video information\n        document.getElementById('videoTitle').textContent = video.title;\n        document.getElementById('videoCreator').textContent = video.creator;\n        document.getElementById('videoViews').textContent = video.views.toLocaleString();\n        document.getElementById('videoDate').textContent = window.commonUtils.formatDate(video.uploadDate);\n        document.getElementById('videoDuration').textContent = video.duration;\n        document.getElementById('videoCategory').textContent = video.category;\n        document.getElementById('videoPrice').textContent = video.price.toFixed(2);\n        document.getElementById('videoDescription').textContent = video.description;\n        document.getElementById('likeCount').textContent = video.likes;\n\n        // Set video source (demo)\n        this.player.poster = video.thumbnail;\n        this.player.src = `https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4`;\n\n        // Update progress\n        this.updateWatchProgress(purchase.watchProgress);\n\n        this.currentVideo = video;\n    }\n\n    togglePlayPause() {\n        if (!this.player) return;\n\n        if (this.player.paused) {\n            this.player.play();\n        } else {\n            this.player.pause();\n        }\n    }\n\n    toggleMute() {\n        if (!this.player) return;\n\n        this.player.muted = !this.player.muted;\n        const muteBtn = document.getElementById('muteBtn');\n        if (muteBtn) {\n            muteBtn.innerHTML = this.player.muted ? '<i class=\"fas fa-volume-mute\"></i>' : '<i class=\"fas fa-volume-up\"></i>';\n        }\n    }\n\n    toggleFullscreen() {\n        if (!this.player) return;\n\n        if (document.fullscreenElement) {\n            document.exitFullscreen();\n        } else {\n            this.player.requestFullscreen();\n        }\n    }\n\n    changePlaybackSpeed(e) {\n        if (!this.player) return;\n        this.player.playbackRate = parseFloat(e.target.value);\n    }\n\n    changeVideoQuality(e) {\n        // In a real implementation, this would switch video sources\n        window.commonUtils.showToast(`Video quality changed to ${e.target.value}`, 'info');\n    }\n\n    updateProgress() {\n        if (!this.player) return;\n\n        const progress = (this.player.currentTime / this.player.duration) * 100;\n        this.updateWatchProgress(progress);\n\n        // Update time displays\n        document.getElementById('watchedTime').textContent = this.formatTime(this.player.currentTime);\n    }\n\n    updateDuration() {\n        if (!this.player) return;\n        document.getElementById('totalTime').textContent = this.formatTime(this.player.duration);\n    }\n\n    updateWatchProgress(progress) {\n        const progressBar = document.getElementById('watchProgress');\n        if (progressBar) {\n            progressBar.style.width = progress + '%';\n        }\n    }\n\n    onVideoPlay() {\n        const playPauseBtn = document.getElementById('playPauseBtn');\n        if (playPauseBtn) {\n            playPauseBtn.innerHTML = '<i class=\"fas fa-pause\"></i>';\n        }\n    }\n\n    onVideoPause() {\n        const playPauseBtn = document.getElementById('playPauseBtn');\n        if (playPauseBtn) {\n            playPauseBtn.innerHTML = '<i class=\"fas fa-play\"></i>';\n        }\n    }\n\n    // Filter and Search Methods\n    handleSearch() {\n        const searchTerm = document.getElementById('searchInput').value.toLowerCase();\n        const filteredVideos = this.videos.filter(video => \n            video.title.toLowerCase().includes(searchTerm) ||\n            video.description.toLowerCase().includes(searchTerm) ||\n            video.creator.toLowerCase().includes(searchTerm) ||\n            video.tags.some(tag => tag.toLowerCase().includes(searchTerm))\n        );\n\n        this.renderFilteredVideos(filteredVideos);\n        this.updateVideoCount(filteredVideos.length);\n    }\n\n    handleApplyFilters() {\n        const category = document.getElementById('categoryFilter').value;\n        const priceRange = document.getElementById('priceFilter').value;\n        const duration = document.getElementById('durationFilter').value;\n        const sortBy = document.getElementById('sortBy').value;\n\n        let filteredVideos = [...this.videos];\n\n        // Apply category filter\n        if (category) {\n            filteredVideos = filteredVideos.filter(video => video.category === category);\n        }\n\n        // Apply price filter\n        if (priceRange) {\n            const [min, max] = priceRange.split('-').map(p => parseFloat(p) || Infinity);\n            filteredVideos = filteredVideos.filter(video => {\n                if (max === Infinity) return video.price >= min;\n                return video.price >= min && video.price <= max;\n            });\n        }\n\n        // Apply duration filter\n        if (duration) {\n            filteredVideos = filteredVideos.filter(video => {\n                const videoDuration = this.parseDuration(video.duration);\n                if (duration === '0-30') return videoDuration <= 30;\n                if (duration === '30-60') return videoDuration > 30 && videoDuration <= 60;\n                if (duration === '60+') return videoDuration > 60;\n                return true;\n            });\n        }\n\n        // Apply sorting\n        this.sortVideos(filteredVideos, sortBy);\n\n        this.renderFilteredVideos(filteredVideos);\n        this.updateVideoCount(filteredVideos.length);\n    }\n\n    sortVideos(videos, sortBy) {\n        switch (sortBy) {\n            case 'newest':\n                videos.sort((a, b) => new Date(b.uploadDate) - new Date(a.uploadDate));\n                break;\n            case 'popular':\n                videos.sort((a, b) => b.views - a.views);\n                break;\n            case 'price-low':\n                videos.sort((a, b) => a.price - b.price);\n                break;\n            case 'price-high':\n                videos.sort((a, b) => b.price - a.price);\n                break;\n            case 'rating':\n                videos.sort((a, b) => b.rating - a.rating);\n                break;\n        }\n    }\n\n    renderFilteredVideos(videos) {\n        const container = document.getElementById('videosGrid');\n        if (!container) return;\n\n        container.innerHTML = '';\n\n        if (videos.length === 0) {\n            container.innerHTML = `\n                <div class=\"col-12 text-center py-5\">\n                    <i class=\"fas fa-search fa-3x text-muted mb-3\"></i>\n                    <h4 class=\"text-muted\">No videos found</h4>\n                    <p class=\"text-muted\">Try adjusting your search or filters</p>\n                </div>\n            `;\n            return;\n        }\n\n        videos.forEach(video => {\n            const col = document.createElement('div');\n            col.className = 'col-lg-3 col-md-4 col-sm-6 mb-4';\n            col.innerHTML = this.createVideoCard(video);\n            container.appendChild(col);\n        });\n    }\n\n    updateVideoCount(count = null) {\n        const countElement = document.getElementById('videoCount');\n        if (countElement) {\n            const total = count !== null ? count : this.videos.length;\n            countElement.textContent = `${total} video${total !== 1 ? 's' : ''} found`;\n        }\n    }\n\n    toggleView() {\n        const currentView = document.getElementById('viewToggle').innerHTML.includes('fa-th') ? 'grid' : 'list';\n        this.setView(currentView === 'grid' ? 'list' : 'grid');\n    }\n\n    setView(view) {\n        const gridContainer = document.getElementById('videosGrid');\n        const listContainer = document.getElementById('videosList');\n        const gridViewBtn = document.getElementById('gridView');\n        const listViewBtn = document.getElementById('listView');\n\n        if (view === 'grid') {\n            if (gridContainer) gridContainer.classList.remove('d-none');\n            if (listContainer) listContainer.classList.add('d-none');\n            if (gridViewBtn) gridViewBtn.classList.add('active');\n            if (listViewBtn) listViewBtn.classList.remove('active');\n        } else {\n            if (gridContainer) gridContainer.classList.add('d-none');\n            if (listContainer) listContainer.classList.remove('d-none');\n            if (gridViewBtn) gridViewBtn.classList.remove('active');\n            if (listViewBtn) listViewBtn.classList.add('active');\n        }\n    }\n\n    // Profile and Settings Methods\n    handleProfileUpdate(e) {\n        e.preventDefault();\n        window.commonUtils.showToast('Profile updated successfully!', 'success');\n    }\n\n    handlePasswordChange(e) {\n        e.preventDefault();\n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n\n        if (newPassword !== confirmPassword) {\n            window.commonUtils.showToast('Passwords do not match!', 'danger');\n            return;\n        }\n\n        if (newPassword.length < 8) {\n            window.commonUtils.showToast('Password must be at least 8 characters long!', 'danger');\n            return;\n        }\n\n        window.commonUtils.showToast('Password changed successfully!', 'success');\n        e.target.reset();\n    }\n\n    handlePreferencesUpdate(e) {\n        e.preventDefault();\n        window.commonUtils.showToast('Preferences updated successfully!', 'success');\n    }\n\n    // Dashboard-specific Methods\n    renderContinueWatching() {\n        const container = document.getElementById('continueWatching');\n        if (!container) return;\n\n        // Filter purchases with incomplete progress\n        const continueWatchingVideos = this.purchases.filter(p => p.watchProgress < 100).slice(0, 4);\n        container.innerHTML = '';\n\n        if (continueWatchingVideos.length === 0) {\n            container.innerHTML = `\n                <div class=\"col-12 text-center py-4\">\n                    <i class=\"fas fa-play fa-3x text-muted mb-3\"></i>\n                    <p class=\"text-muted\">No videos in progress</p>\n                    <a href=\"browse.html\" class=\"btn btn-primary\">Start Watching</a>\n                </div>\n            `;\n            return;\n        }\n\n        continueWatchingVideos.forEach(purchase => {\n            const col = document.createElement('div');\n            col.className = 'col-lg-3 col-md-6 mb-3';\n            col.innerHTML = `\n                <div class=\"card video-card h-100\">\n                    <div class=\"video-thumbnail position-relative\">\n                        <img src=\"${purchase.video.thumbnail}\" class=\"card-img-top\" alt=\"${purchase.video.title}\">\n                        <div class=\"video-duration\">${purchase.video.duration}</div>\n                        <div class=\"video-progress\">\n                            <div class=\"progress\">\n                                <div class=\"progress-bar\" role=\"progressbar\" style=\"width: ${purchase.watchProgress}%\" \n                                     aria-valuenow=\"${purchase.watchProgress}\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                            </div>\n                        </div>\n                        <div class=\"video-overlay\" onclick=\"viewerManager.playVideo(${purchase.video.id})\">\n                            <i class=\"fas fa-play fa-2x\"></i>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <h6 class=\"card-title\">${purchase.video.title}</h6>\n                        <p class=\"card-text small text-muted\">${purchase.video.creator}</p>\n                        <div class=\"d-flex justify-content-between align-items-center\">\n                            <small class=\"text-muted\">${purchase.watchProgress}% complete</small>\n                            <button class=\"btn btn-sm btn-primary\" onclick=\"viewerManager.playVideo(${purchase.video.id})\">\n                                <i class=\"fas fa-play me-1\"></i>Continue\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `;\n            container.appendChild(col);\n        });\n    }\n\n    initializeDashboardCharts() {\n        this.initViewingActivityChart();\n        this.initCategoriesChart();\n    }\n\n    initViewingActivityChart() {\n        const ctx = document.getElementById('viewingActivityChart');\n        if (!ctx) return;\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n                datasets: [{\n                    label: 'Minutes Watched',\n                    data: [45, 62, 38, 85, 72, 96, 54],\n                    borderColor: '#007bff',\n                    backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                    tension: 0.4,\n                    fill: true\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        ticks: {\n                            callback: function(value) {\n                                return value + ' min';\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    initCategoriesChart() {\n        const ctx = document.getElementById('categoriesChart');\n        if (!ctx) return;\n\n        const categoryData = this.purchases.reduce((acc, purchase) => {\n            const category = purchase.video.category;\n            acc[category] = (acc[category] || 0) + 1;\n            return acc;\n        }, {});\n\n        new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: Object.keys(categoryData),\n                datasets: [{\n                    data: Object.values(categoryData),\n                    backgroundColor: [\n                        '#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1', '#17a2b8'\n                    ]\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom'\n                    }\n                }\n            }\n        });\n    }\n\n    handleNotificationUpdate(e) {\n        e.preventDefault();\n        window.commonUtils.showToast('Notification settings updated successfully!', 'success');\n    }\n\n    // Favorite and Social Methods\n    toggleFavorite(videoId) {\n        const index = this.favorites.indexOf(videoId);\n        if (index > -1) {\n            this.favorites.splice(index, 1);\n            window.commonUtils.showToast('Removed from favorites', 'info');\n        } else {\n            this.favorites.push(videoId);\n            window.commonUtils.showToast('Added to favorites', 'success');\n        }\n        this.renderVideosGrid();\n    }\n\n    toggleVideoFavorite() {\n        if (!this.currentVideo) return;\n        this.toggleFavorite(this.currentVideo.id);\n    }\n\n    toggleLike() {\n        if (!this.currentVideo) return;\n        // Simulate like toggle\n        this.currentVideo.likes++;\n        document.getElementById('likeCount').textContent = this.currentVideo.likes;\n        window.commonUtils.showToast('Video liked!', 'success');\n    }\n\n    handleShare() {\n        if (!this.currentVideo) return;\n\n        const shareUrl = `${window.location.origin}/viewer/browse.html?video=${this.currentVideo.id}`;\n        document.getElementById('shareUrl').value = shareUrl;\n\n        const modal = new bootstrap.Modal(document.getElementById('shareModal'));\n        modal.show();\n    }\n\n    handleCopyUrl() {\n        const shareUrl = document.getElementById('shareUrl').value;\n        window.commonUtils.copyToClipboard(shareUrl);\n    }\n\n    downloadVideo() {\n        window.commonUtils.showToast('Download feature coming soon!', 'info');\n    }\n\n    // Comments Methods\n    loadVideoComments() {\n        const commentsList = document.getElementById('commentsList');\n        if (!commentsList) return;\n\n        // Mock comments\n        const comments = [\n            {\n                id: 1,\n                user: 'John Doe',\n                comment: 'Great tutorial! Really helped me understand the concepts.',\n                time: '2 hours ago',\n                avatar: 'JD'\n            },\n            {\n                id: 2,\n                user: 'Jane Smith',\n                comment: 'Very detailed explanation. Thanks for sharing!',\n                time: '1 day ago',\n                avatar: 'JS'\n            }\n        ];\n\n        commentsList.innerHTML = '';\n        comments.forEach(comment => {\n            const commentDiv = document.createElement('div');\n            commentDiv.className = 'comment-item';\n            commentDiv.innerHTML = `\n                <div class=\"d-flex\">\n                    <div class=\"comment-avatar me-3\">\n                        ${comment.avatar}\n                    </div>\n                    <div class=\"flex-grow-1\">\n                        <div class=\"d-flex justify-content-between align-items-start\">\n                            <strong>${comment.user}</strong>\n                            <small class=\"text-muted\">${comment.time}</small>\n                        </div>\n                        <p class=\"mb-0\">${comment.comment}</p>\n                    </div>\n                </div>\n            `;\n            commentsList.appendChild(commentDiv);\n        });\n\n        document.getElementById('commentsCount').textContent = comments.length;\n    }\n\n    submitComment() {\n        const commentText = document.getElementById('commentText').value.trim();\n        if (!commentText) return;\n\n        // Simulate comment submission\n        window.commonUtils.showToast('Comment added successfully!', 'success');\n        document.getElementById('commentText').value = '';\n    }\n\n    loadRelatedVideos() {\n        const container = document.getElementById('relatedVideos');\n        if (!container) return;\n\n        const relatedVideos = this.videos.slice(0, 4);\n        container.innerHTML = '';\n\n        relatedVideos.forEach(video => {\n            const videoItem = document.createElement('a');\n            videoItem.href = `video-player.html?video=${video.id}`;\n            videoItem.className = 'related-video-item';\n            videoItem.innerHTML = `\n                <img src=\"${video.thumbnail}\" class=\"related-video-thumbnail\" alt=\"${video.title}\">\n                <div class=\"related-video-info\">\n                    <div class=\"related-video-title\">${video.title}</div>\n                    <div class=\"related-video-creator\">${video.creator}</div>\n                </div>\n            `;\n            container.appendChild(videoItem);\n        });\n    }\n\n    // Utility Methods\n    createRatingStars(rating) {\n        const fullStars = Math.floor(rating);\n        const hasHalfStar = rating % 1 !== 0;\n        let starsHtml = '';\n\n        for (let i = 0; i < fullStars; i++) {\n            starsHtml += '<i class=\"fas fa-star text-warning\"></i>';\n        }\n\n        if (hasHalfStar) {\n            starsHtml += '<i class=\"fas fa-star-half-alt text-warning\"></i>';\n        }\n\n        const emptyStars = 5 - Math.ceil(rating);\n        for (let i = 0; i < emptyStars; i++) {\n            starsHtml += '<i class=\"far fa-star text-warning\"></i>';\n        }\n\n        return `${starsHtml} <span class=\"ms-1\">${rating.toFixed(1)}</span>`;\n    }\n\n    parseDuration(duration) {\n        const parts = duration.split(':');\n        const minutes = parseInt(parts[0]);\n        const seconds = parseInt(parts[1]);\n        return minutes + (seconds / 60);\n    }\n\n    formatTime(seconds) {\n        const minutes = Math.floor(seconds / 60);\n        const secs = Math.floor(seconds % 60);\n        return `${minutes}:${secs.toString().padStart(2, '0')}`;\n    }\n\n    showVideoOptions(purchaseId) {\n        // Show video options modal\n        const modal = new bootstrap.Modal(document.getElementById('videoOptionsModal'));\n        modal.show();\n    }\n\n    handleLoadMore() {\n        window.commonUtils.showToast('Loading more videos...', 'info');\n        // Simulate loading more videos\n        setTimeout(() => {\n            window.commonUtils.showToast('All videos loaded!', 'success');\n        }, 1000);\n    }\n\n    loadProfileData() {\n        // Load and populate profile data\n        console.log('Profile data loaded');\n    }\n}\n\n// Initialize viewer manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.viewerManager = new ViewerManager();\n});\n","size_bytes":55390}}}