{"file_contents":{"index.php":{"content":"<?php\n/**\n * VideoHub Main Router\n * Routes requests to either API endpoints or static files\n * Supports deployment in subfolders\n */\n\n$request_uri = $_SERVER['REQUEST_URI'];\n$script_name = $_SERVER['SCRIPT_NAME'];\n\n// Get the base path (subfolder) where the app is deployed\n$base_path = dirname($script_name);\nif ($base_path === '/') {\n    $base_path = '';\n}\n\n// Remove base path from request URI to get relative path\n$relative_uri = $request_uri;\nif ($base_path && strpos($request_uri, $base_path) === 0) {\n    $relative_uri = substr($request_uri, strlen($base_path));\n}\n\n$path = parse_url($relative_uri, PHP_URL_PATH);\n\n// Handle API requests - check for /api anywhere in the path\nif (preg_match('/\\/api\\//', $path) || preg_match('/\\/api$/', $path)) {\n    // Extract the API path portion and forward to API router\n    if (preg_match('/.*\\/api(.*)/', $relative_uri, $matches)) {\n        $_SERVER['REQUEST_URI'] = $matches[1] ?: '/';\n    } else {\n        $_SERVER['REQUEST_URI'] = preg_replace('/.*\\/api/', '', $relative_uri);\n    }\n    require_once 'api/index.php';\n    return;\n}\n\n// Handle static files\n$file_path = __DIR__ . $path;\n\n// Default to index.html for root requests\nif ($path === '/') {\n    $file_path = __DIR__ . '/index.html';\n}\n\n// Serve static files if they exist\nif (file_exists($file_path) && is_file($file_path)) {\n    // Get file extension for proper MIME type\n    $extension = pathinfo($file_path, PATHINFO_EXTENSION);\n    \n    $mime_types = [\n        'html' => 'text/html',\n        'css' => 'text/css',\n        'js' => 'application/javascript',\n        'json' => 'application/json',\n        'png' => 'image/png',\n        'jpg' => 'image/jpeg',\n        'jpeg' => 'image/jpeg',\n        'gif' => 'image/gif',\n        'svg' => 'image/svg+xml'\n    ];\n    \n    if (isset($mime_types[$extension])) {\n        header('Content-Type: ' . $mime_types[$extension]);\n    }\n    \n    readfile($file_path);\n    return;\n}\n\n// 404 for non-existent files\nhttp_response_code(404);\necho '404 - File Not Found';\n?>","size_bytes":2015},"replit.md":{"content":"# VideoHub - Video Management Platform\n\n## Overview\n\nVideoHub is a comprehensive video management platform that enables video content monetization, user management, and analytics tracking. The system provides distinct interfaces for three user roles: administrators (platform management), creators (content upload and monetization), and viewers (content consumption and purchases). The platform features a role-based authentication system, payment processing, video streaming capabilities, and comprehensive analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Multi-Page Application (MPA)**: Traditional HTML pages with JavaScript modules for enhanced interactivity\n- **Role-Based UI Structure**: Separate interface directories for admin, creator, and viewer roles\n- **Modular JavaScript Architecture**: Component-based JS modules (AuthManager, APIService, NotificationManager, etc.)\n- **Bootstrap 5 Framework**: Responsive design with custom CSS theming and modal system\n- **Configuration-Based Deployment**: Flexible base path configuration for root domain or subfolder deployment\n\n### Authentication & Authorization\n- **Session-Based Authentication**: JWT tokens stored in localStorage/sessionStorage\n- **Role-Based Access Control (RBAC)**: Three distinct user roles with protected routes\n- **Multi-Step Registration**: Email verification followed by password setup\n- **Password Recovery Flow**: Email-based password reset with token validation\n- **Auth Guard System**: Route protection with automatic redirects based on user role\n\n### Backend Integration\n- **RESTful API Design**: Centralized APIService class handling all backend communications\n- **PHP Backend Expected**: API endpoints structured for PHP server-side implementation\n- **Configurable Base URLs**: Dynamic API URL construction based on deployment configuration\n- **Error Handling**: Comprehensive error management with user-friendly notifications\n\n### Data Management\n- **Client-Side State Management**: Global state management for cached data and loading states\n- **Local Storage Utilization**: User sessions and preferences stored client-side\n- **API Response Caching**: TTL-based caching system to prevent duplicate API calls\n- **Optimistic Updates**: Immediate UI updates with server synchronization\n\n### Video Handling\n- **YouTube Integration**: YouTube Data API v3 for video uploads and metadata management\n- **Embedded Player**: YouTube iframe player with custom controls and monetization\n- **Video Metadata**: Title, description, pricing, and analytics stored separately from video files\n- **Purchase System**: Pay-per-view model with transaction tracking\n\n### UI/UX Design Patterns\n- **Design System**: Consistent color palette with CSS custom properties\n- **Toast Notifications**: Non-intrusive user feedback system\n- **Modal Workflows**: Complex forms and video viewing in overlay modals\n- **Responsive Tables**: DataTables integration for data-heavy admin interfaces\n- **Loading States**: Skeleton loaders and progress indicators for better UX\n\n### Payment Processing\n- **Demo Payment System**: Simulated payment flows for development/testing\n- **Multiple Payment Methods**: Support for cards, PayPal, and digital wallets\n- **Transaction Management**: Purchase history and earnings tracking\n- **Processing Fees**: Configurable fee structure for different payment methods\n\n## External Dependencies\n\n### Frontend Libraries\n- **Bootstrap 5.3.0**: UI framework for responsive design and components\n- **Font Awesome 6.0.0**: Icon library for consistent iconography\n- **DataTables**: Advanced table functionality with sorting, filtering, and pagination\n- **Google Fonts (Inter)**: Typography system for modern, readable text\n\n### APIs and Services\n- **YouTube Data API v3**: Video upload, metadata management, and player embedding\n- **Google OAuth 2.0**: Authentication flow for YouTube integration\n- **Payment Gateway APIs**: Integration points for Stripe, PayPal, and other processors\n\n### Backend Requirements\n- **PHP Server**: Expected backend implementation for API endpoints\n- **Database System**: User management, video metadata, transactions, and analytics storage\n- **File Storage**: Video thumbnails, user avatars, and other media assets\n- **Email Service**: SMTP integration for verification emails and notifications\n\n### Development Tools\n- **CDN Dependencies**: External hosting for CSS/JS libraries to reduce bundle size\n- **HTTPS Required**: Secure connections needed for payment processing and OAuth flows\n- **Cross-Browser Compatibility**: Support for modern browsers with fallbacks for older versions\n\n## Recent Changes\n\n### August 2025\n- Successfully migrated VideoHub from Replit Agent to standard Replit environment\n- Fixed critical admin panel navigation issues preventing proper user detail page access\n- Replaced all alert/confirm dialogs with professional Bootstrap modal confirmations\n- Enhanced admin video page with comprehensive filtering, pagination, and search functionality\n- Removed dummy login credentials from authentication pages for security\n- Implemented robust error handling and API response validation for video data loading\n- Updated logout system to use confirmation modals across all user interfaces\n- Added proper null checking and type validation for improved stability\n\n### December 2024\n- Initial admin panel structure implementation\n- Basic video management interface setup\n- User authentication system foundation","size_bytes":5532},"api/index.php":{"content":"<?php\n/**\n * VideoHub API Router\n * Routes API requests to appropriate endpoints\n */\n\nrequire_once 'config/cors.php';\n\n// Get request path and method\n$request_uri = $_SERVER['REQUEST_URI'];\n$path = parse_url($request_uri, PHP_URL_PATH);\n$method = $_SERVER['REQUEST_METHOD'];\n\n// Handle subfolder deployments - remove any base path before /api\n$original_path = $path;\n$path = preg_replace('/.*\\/api/', '', $path);\n\n// If path is empty, set to root\nif (empty($path)) {\n    $path = '/';\n}\n\n// Subfolder deployment support completed\n\n// Route requests\nswitch (true) {\n    // Authentication endpoints\n    case preg_match('/^\\/auth/', $path):\n        require_once 'endpoints/auth.php';\n        break;\n        \n    // Users endpoints\n    case preg_match('/^\\/users/', $path):\n        require_once 'endpoints/users.php';\n        break;\n        \n    // Videos endpoints\n    case preg_match('/^\\/videos/', $path):\n        require_once 'endpoints/videos.php';\n        break;\n        \n    // Purchases endpoints\n    case preg_match('/^\\/purchases/', $path):\n        require_once 'endpoints/purchases.php';\n        break;\n        \n    // Creator endpoints\n    case preg_match('/^\\/creator/', $path):\n        require_once 'endpoints/creator.php';\n        break;\n        \n    // Metrics endpoints\n    case preg_match('/^\\/metrics/', $path):\n        require_once 'endpoints/metrics.php';\n        break;\n        \n    // Admin endpoints\n    case preg_match('/^\\/admin/', $path):\n        require_once 'endpoints/admin.php';\n        break;\n        \n    // Payment endpoints\n    case preg_match('/^\\/payments/', $path):\n        require_once 'endpoints/payments.php';\n        break;\n        \n    // Health check\n    case $path === '/' || $path === '/health':\n        http_response_code(200);\n        echo json_encode([\n            'success' => true,\n            'message' => 'VideoHub API is running',\n            'version' => '1.0.0',\n            'timestamp' => date('c')\n        ]);\n        break;\n        \n    // Default - not found\n    default:\n        http_response_code(404);\n        echo json_encode([\n            'success' => false,\n            'message' => 'Endpoint not found',\n            'path' => $path\n        ]);\n        break;\n}\n?>","size_bytes":2225},"api/youtube_tokens.php":{"content":"<?php\n/**\n * YouTube Tokens API for VideoHub\n * Handles OAuth tokens storage and refresh logic\n */\n\nrequire_once __DIR__ . '/config/cors.php';\nrequire_once __DIR__ . '/config/database.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Get request method and input\n$method = $_SERVER['REQUEST_METHOD'];\n$input = json_decode(file_get_contents('php://input'), true);\n\n// Client credentials (in production, store these securely)\n$clientId = '824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com';\n$clientSecret = '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';\n\ntry {\n    // Create youtube_tokens table if it doesn't exist\n    $createTableSQL = \"CREATE TABLE IF NOT EXISTS youtube_tokens (\n        id INT AUTO_INCREMENT PRIMARY KEY,  \n        access_token TEXT,\n        refresh_token TEXT,\n        expires_at DATETIME,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        UNIQUE KEY unique_user (user_id)\n    )\";\n    \n    try {\n        $db->exec($createTableSQL);\n    } catch (PDOException $e) {\n        // Table might already exist, continue\n        error_log(\"YouTube tokens table creation: \" . $e->getMessage());\n    }\n\n    switch ($method) {\n        case 'GET':\n            if (isset($_GET['action']) && $_GET['action'] === 'get_tokens') {\n                // Get tokens for current user (for demo, use user ID 7)              \n                \n                $stmt = $db->prepare(\"SELECT * FROM youtube_tokens ORDER BY updated_at DESC LIMIT 1\");\n                $stmt->execute();\n                $token = $stmt->fetch(PDO::FETCH_ASSOC);\n                \n                if ($token) {\n                    // Always return the token, even if expired, for simplified handling\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'tokens' => [\n                            'access_token' => $token['access_token'],\n                            'refresh_token' => $token['refresh_token'],\n                            'expires_at' => $token['expires_at']\n                        ],\n                        'message' => 'Tokens retrieved successfully'\n                    ]);\n                } else {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'No tokens found'\n                    ]);\n                }\n            }\n            break;\n            \n        case 'POST':\n            if ($input['action'] === 'save_tokens') {\n                // Save new tokens            \n                $accessToken = $input['access_token'];\n                $refreshToken = $input['refresh_token'];\n                $expiresIn = $input['expires_in'] ?? 3600; // Default 1 hour\n                \n                $expiresAt = date('Y-m-d H:i:s', time() + $expiresIn);\n                \n                // Insert or update tokens\n                $stmt = $db->prepare(\"\n                    INSERT INTO youtube_tokens (access_token, refresh_token, expires_at) \n                    VALUES (?, ?, ?, ?)\n                    ON DUPLICATE KEY UPDATE \n                    access_token = VALUES(access_token),\n                    refresh_token = VALUES(refresh_token),\n                    expires_at = VALUES(expires_at),\n                    updated_at = CURRENT_TIMESTAMP\n                \");\n                \n                if ($stmt->execute([$accessToken, $refreshToken, $expiresAt])) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Tokens saved successfully'\n                    ]);\n                } else {\n                    throw new Exception('Failed to save tokens');\n                }\n                \n            } elseif ($input['action'] === 'refresh_token') {\n                // Refresh access token\n                $refreshToken = $input['refresh_token'];\n                \n                // Make request to Google OAuth2 token endpoint\n                $tokenUrl = 'https://oauth2.googleapis.com/token';\n                $postData = [\n                    'client_id' => $clientId,\n                    'client_secret' => $clientSecret,\n                    'refresh_token' => $refreshToken,\n                    'grant_type' => 'refresh_token'\n                ];\n                \n                $ch = curl_init();\n                curl_setopt($ch, CURLOPT_URL, $tokenUrl);\n                curl_setopt($ch, CURLOPT_POST, true);\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n                curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                    'Content-Type: application/x-www-form-urlencoded'\n                ]);\n                \n                $response = curl_exec($ch);\n                $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n                curl_close($ch);\n                \n                if ($httpCode === 200) {\n                    $tokenData = json_decode($response, true);\n                    \n                    if (isset($tokenData['access_token'])) {                     \n                        $newAccessToken = $tokenData['access_token'];\n                        $expiresIn = $tokenData['expires_in'] ?? 3600;\n                        $expiresAt = date('Y-m-d H:i:s', time() + $expiresIn);\n                        \n                        // Update access token in database\n                        $stmt = $db->prepare(\"\n                            UPDATE youtube_tokens \n                            SET access_token = ?, expires_at = ?, updated_at = CURRENT_TIMESTAMP\");\n                        \n                        if ($stmt->execute([$newAccessToken, $expiresAt])) {\n                            http_response_code(200);\n                            echo json_encode([\n                                'success' => true,\n                                'tokens' => [\n                                    'access_token' => $newAccessToken,\n                                    'refresh_token' => $refreshToken,\n                                    'expires_at' => $expiresAt\n                                ]\n                            ]);\n                        } else {\n                            throw new Exception('Failed to update tokens in database');\n                        }\n                    } else {\n                        throw new Exception('Invalid response from Google OAuth2');\n                    }\n                } else {\n                    throw new Exception('Failed to refresh token: HTTP ' . $httpCode);\n                }\n                \n            } elseif ($input['action'] === 'clear_tokens') {\n                // Clear tokens (sign out)           \n                \n                $stmt = $db->prepare(\"DELETE FROM youtube_tokens\");\n                if ($stmt->execute()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Tokens cleared successfully'\n                    ]);\n                } else {\n                    throw new Exception('Failed to clear tokens');\n                }\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n    \n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => $e->getMessage()\n    ]);\n}\n?>","size_bytes":7859},"api/config/cors.php":{"content":"<?php\n/**\n * CORS Configuration for VideoHub API\n */\n\n// Allow cross-origin requests\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\");\nheader(\"Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With\");\n\n// Handle preflight OPTIONS requests\nif ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {\n    http_response_code(200);\n    exit();\n}\n\n// Set content type to JSON\nheader(\"Content-Type: application/json; charset=UTF-8\");\n?>","size_bytes":503},"api/config/database.php":{"content":"<?php\n/**\n * Database Configuration for VideoHub\n */\n\nclass Database {\n    private $host;\n    private $db_name;\n    private $username;\n    private $password;\n    public $conn;\n\n    public function __construct() {\n        // Use environment variables if available, fallback to original values\n        $this->host = getenv('DB_HOST') ?: 'srv637.hstgr.io';\n        $this->db_name = getenv('DB_NAME') ?: 'u742355347_youtube';\n        $this->username = getenv('DB_USERNAME') ?: 'u742355347_youtube';\n        $this->password = getenv('DB_PASSWORD') ?: 'Arona1@1@1@1';\n    }\n\n    public function getConnection() {\n        $this->conn = null;\n\n        try {\n            $this->conn = new PDO(\n                \"mysql:host=\" . $this->host . \";dbname=\" . $this->db_name . \";charset=utf8\",\n                $this->username,\n                $this->password\n            );\n\n            // Set PDO error mode to exception\n            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n            // Set default fetch mode to associative array\n            $this->conn->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);\n\n        } catch(PDOException $exception) {\n            error_log(\"Connection error: \" . $exception->getMessage());\n            throw new Exception(\"Database connection failed\");\n        }\n\n        return $this->conn;\n    }\n}\n?>","size_bytes":1363},"api/config/email.php":{"content":"<?php\n/**\n * Email Configuration for VideoHub\n */\n\n// SMTP Configuration\ndefine('SMTP_HOST', 'smtp-relay.sendinblue.com');\ndefine('SMTP_PORT', 587);\ndefine('SMTP_USERNAME', 'phpdevgmicro@gmail.com');\ndefine('SMTP_PASSWORD', 'N2DFZECX67YGBHRO');\ndefine('SMTP_FROM_EMAIL', 'phpdevgmicro@gmail.com');\ndefine('SMTP_FROM_NAME', 'Video Platform');\ndefine('SMTP_ENCRYPTION', 'tls');\n\n// Email templates\ndefine('VERIFICATION_EMAIL_SUBJECT', 'Verify Your Email - VideoHub');\ndefine('VERIFICATION_EMAIL_TEMPLATE', 'verification');\ndefine('PASSWORD_RESET_EMAIL_SUBJECT', 'Reset Your Password - VideoHub');\ndefine('PASSWORD_RESET_EMAIL_TEMPLATE', 'password_reset');\n\n// App configuration\ndefine('APP_URL', 'https://taleoftriumph.com/video-platform');\ndefine('VERIFICATION_TOKEN_EXPIRY', 24); // hours\n?>","size_bytes":791},"api/endpoints/admin.php":{"content":"<?php\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../models/User.php';\n\nheader('Content-Type: application/json');\n\n// Get database connection\n$database = new Database();\n$pdo = $database->getConnection();\n$user = new User($pdo);\n\ntry {\n    $method = $_SERVER['REQUEST_METHOD'];\n    $uri = $_SERVER['REQUEST_URI'];\n    \n    // Parse the URI to get the endpoint\n    $path = parse_url($uri, PHP_URL_PATH);\n    $pathSegments = explode('/', trim($path, '/'));\n    \n    // Get request data for POST/PUT requests\n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    \n    switch ($method) {\n        case 'GET':\n            if (end($pathSegments) === 'users') {\n                // Check if getting single user by ID\n                if (isset($_GET['id']) && !empty($_GET['id'])) {\n                    $user->id = $_GET['id'];\n                    if ($user->readOne()) {\n                        echo json_encode([\n                            'success' => true,\n                            'data' => [\n                                'id' => $user->id,\n                                'name' => $user->name,\n                                'email' => $user->email,\n                                'role' => $user->role,\n                                'status' => $user->status ?? 'active',\n                                'email_verified_at' => $user->email_verified_at,\n                                'created_at' => $user->created_at,\n                                'updated_at' => $user->updated_at,\n                                'joinDate' => date('M d, Y', strtotime($user->created_at)),\n                                'lastActive' => 'Recently',\n                                'email_verified' => $user->email_verified\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(404);\n                        echo json_encode(['success' => false, 'message' => 'User not found']);\n                    }\n                } else {\n                    // Get all users for admin panel (exclude admin users)\n                    $stmt = $pdo->query(\"\n                        SELECT \n                            id,\n                            name,\n                            email,\n                            role,\n                            COALESCE(status, 'active') as status,\n                            email_verified_at,\n                            email_verified,\n                            created_at,\n                            updated_at\n                        FROM users \n                        WHERE role IN ('creator', 'viewer')\n                        ORDER BY created_at DESC\n                    \");\n                    \n                    $users = $stmt->fetchAll(PDO::FETCH_ASSOC);\n                    \n                    // Format data for admin display\n                    foreach ($users as &$user) {\n                        $user['joinDate'] = date('M d, Y', strtotime($user['created_at']));\n                        $user['username'] = $user['name'];\n                        $user['user_type'] = $user['role'];\n                        $user['lastActive'] = 'Recently';\n                        $user['email_verified'] = $user['email_verified'];\n                    }\n                    \n                    echo json_encode([\n                        'success' => true,\n                        'data' => $users\n                    ]);\n                }\n            } elseif (end($pathSegments) === 'videos') {\n                // Get all videos for admin panel - use the same structure as /api/videos\n                $response = file_get_contents('http://localhost:5000/api/videos');\n                $videosData = json_decode($response, true);\n                \n                if ($videosData && isset($videosData['data']['videos'])) {\n                    $videos = $videosData['data']['videos'];\n                    \n                    // Format data for admin display\n                    foreach ($videos as &$video) {\n                        $video['creator_name'] = $video['creatorName'] ?? 'Unknown';\n                        $video['creator_email'] = ''; // Not available in current structure\n                        $video['upload_date'] = $video['uploadDate'] ?? date('M d, Y');\n                        $video['purchase_count'] = $video['views'] ?? 0;\n                        $video['views'] = $video['views'] ?? 0;\n                        $video['status'] = $video['status'] ?? 'active';\n                        $video['created_at'] = date('Y-m-d H:i:s');\n                        \n                        // Ensure thumbnail URL is properly formatted\n                        if (empty($video['thumbnail'])) {\n                            $video['thumbnail'] = 'https://via.placeholder.com/60x40/007bff/ffffff?text=Video';\n                        }\n                    }\n                    \n                    echo json_encode([\n                        'success' => true,\n                        'data' => $videos\n                    ]);\n                } else {\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Failed to load videos'\n                    ]);\n                }\n            } else {\n                http_response_code(404);\n                echo json_encode(['success' => false, 'message' => 'Endpoint not found']);\n            }\n            break;\n            \n        case 'POST':\n            if (end($pathSegments) === 'users') {\n                // Create new user\n                if (empty($data['name']) || empty($data['email']) || empty($data['role'])) {\n                    http_response_code(400);\n                    echo json_encode(['success' => false, 'message' => 'Name, email and role are required']);\n                    break;\n                }\n                \n                // Check if email already exists\n                $stmt = $pdo->prepare(\"SELECT id FROM users WHERE email = ?\");\n                $stmt->execute([$data['email']]);\n                if ($stmt->fetch()) {\n                    http_response_code(400);\n                    echo json_encode(['success' => false, 'message' => 'Email already exists']);\n                    break;\n                }\n                \n                $user->name = $data['name'];\n                $user->email = $data['email'];\n                $user->role = $data['role'];\n                $user->status = $data['status'] ?? 'active';\n                \n                if ($user->create()) {\n                    echo json_encode(['success' => true, 'message' => 'User created successfully', 'id' => $user->id]);\n                } else {\n                    http_response_code(500);\n                    echo json_encode(['success' => false, 'message' => 'Failed to create user']);\n                }\n            } else {\n                http_response_code(404);\n                echo json_encode(['success' => false, 'message' => 'Endpoint not found']);\n            }\n            break;\n            \n        case 'PUT':\n            if (end($pathSegments) === 'users') {\n                // Update user\n                if (empty($data['id'])) {\n                    http_response_code(400);\n                    echo json_encode(['success' => false, 'message' => 'User ID is required']);\n                    break;\n                }\n                \n                $user->id = $data['id'];\n                \n                // Check if user exists\n                if (!$user->readOne()) {\n                    http_response_code(404);\n                    echo json_encode(['success' => false, 'message' => 'User not found']);\n                    break;\n                }\n                \n                // Update fields if provided\n                $user->name = $data['name'] ?? $user->name;\n                $user->email = $data['email'] ?? $user->email;\n                $user->role = $data['role'] ?? $user->role;\n                $user->status = $data['status'] ?? $user->status;\n                \n                if ($user->update()) {\n                    echo json_encode(['success' => true, 'message' => 'User updated successfully']);\n                } else {\n                    http_response_code(500);\n                    echo json_encode(['success' => false, 'message' => 'Failed to update user']);\n                }\n            } else {\n                http_response_code(404);\n                echo json_encode(['success' => false, 'message' => 'Endpoint not found']);\n            }\n            break;\n            \n        case 'DELETE':\n            if (end($pathSegments) === 'users') {\n                // Delete user\n                if (empty($data['id'])) {\n                    http_response_code(400);\n                    echo json_encode(['success' => false, 'message' => 'User ID is required']);\n                    break;\n                }\n                \n                $user->id = $data['id'];\n                \n                if ($user->delete()) {\n                    echo json_encode(['success' => true, 'message' => 'User deleted successfully']);\n                } else {\n                    http_response_code(500);\n                    echo json_encode(['success' => false, 'message' => 'Failed to delete user']);\n                }\n            } else {\n                http_response_code(404);\n                echo json_encode(['success' => false, 'message' => 'Endpoint not found']);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode(['success' => false, 'message' => 'Method not allowed']);\n            break;\n    }\n    \n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode(['success' => false, 'message' => 'Server error: ' . $e->getMessage()]);\n}\n?>","size_bytes":9913},"api/endpoints/auth.php":{"content":"<?php\n/**\n * Authentication API Endpoints for VideoHub\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/User.php';\nrequire_once __DIR__ . '/../models/EmailVerification.php';\nrequire_once __DIR__ . '/../services/EmailService.php';\nrequire_once __DIR__ . '/../services/GoogleAuthService.php'; // Assuming GoogleAuthService is in this path\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Initialize objects\n$user = new User($db);\n$emailVerification = new EmailVerification($db);\n$emailService = new EmailService();\n$googleAuthService = new GoogleAuthService(); // Initialize GoogleAuthService\n\n// Ensure email_verified_at column exists\n$user->createEmailVerifiedColumnIfNotExists();\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n// Handle subfolder deployments - extract path after /api/auth\nif (preg_match('/.*\\/api\\/auth(.*)/', $path, $matches)) {\n    $auth_path = $matches[1] ?: '/';\n} else {\n    $auth_path = $path;\n}\n\n$path_parts = explode('/', trim($auth_path, '/'));\n\n// Subfolder-compatible path parsing completed\n\ntry {\n    switch ($method) {\n        case 'POST':\n            // Handle action-based requests (direct endpoint calls)\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n\n            if (isset($data['action'])) {\n                $action = $data['action'];\n\n                switch ($action) {\n                    case 'google-login':\n                        if (empty($data['credential'])) {\n                            http_response_code(400);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Google credential (token) is required'\n                            ]);\n                            exit;\n                        }\n\n                        // Verify Google JWT token\n                        $googleUserData = $googleAuthService->verifyGoogleToken($data['credential']);\n\n                        if (!$googleUserData || !isset($googleUserData['email'])) {\n                            http_response_code(401);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Invalid Google credential'\n                            ]);\n                            exit;\n                        }\n\n                        // Check if user already exists with this email\n                        $stmt = $db->prepare(\"SELECT id, name, email, role, email_verified_at, status FROM users WHERE email = ?\");\n                        $stmt->execute([$googleUserData['email']]);\n                        $existingUser = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                        $userName = $googleUserData['name'] ?? $googleUserData['email']; // Use name from Google or fallback to email\n                        $userEmail = $googleUserData['email'];\n                        $userVerified = $googleUserData['email_verified'] ?? false; // Google usually provides this\n                        $userPicture = $googleUserData['picture'] ?? null;\n\n                        if ($existingUser) {\n                            // Check if user is not revoked/banned\n                            $userStatus = $existingUser['status'] ?? 'active';\n                            if ($userStatus === 'revoked' || $userStatus === 'banned') {\n                                http_response_code(403);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'Your account has been suspended. Please contact support.'\n                                ]);\n                                exit;\n                            }\n                            \n                            // User exists, log them in\n                            $userId = $existingUser['id'];\n                            $userRole = $existingUser['role'];\n                            $emailVerified = $existingUser['email_verified_at'] !== null;\n\n                            // Update user if necessary (e.g., picture, name)\n                            // For simplicity, we'll just use existing user data and session\n                        } else {\n                            // User does not exist, create a new one\n                            $role = 'viewer'; // Default role for new users\n                            $hashedPassword = password_hash(bin2hex(random_bytes(16)), PASSWORD_DEFAULT); // Set a random password as it's not used for login\n\n                            $createUserStmt = $db->prepare(\"\n                                INSERT INTO users (name, email, password, role, email_verified_at) \n                                VALUES (?, ?, ?, ?, ?)\n                            \");\n\n                            // Set email_verified_at based on Google's verification status\n                            $verifiedAt = $userVerified ? date('Y-m-d H:i:s') : null;\n\n                            if ($createUserStmt->execute([$userName, $userEmail, $hashedPassword, $role, $verifiedAt])) {\n                                $userId = $db->lastInsertId();\n                                $emailVerified = $userVerified;\n                                $userRole = $role;\n                            } else {\n                                http_response_code(500);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'Failed to create user account from Google data'\n                                ]);\n                                exit;\n                            }\n                        }\n\n                        // Generate session token\n                        $token = bin2hex(random_bytes(32));\n\n                        // Store session in database\n                        try {\n                            $sessionStmt = $db->prepare(\"\n                                INSERT INTO user_sessions (user_id, token, expires_at) \n                                VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))\n                                ON DUPLICATE KEY UPDATE token = VALUES(token), expires_at = VALUES(expires_at)\n                            \");\n                            $sessionStmt->execute([$userId, $token]);\n                        } catch (PDOException $e) {\n                            // If sessions table doesn't exist, create it\n                            $db->exec(\"\n                                CREATE TABLE IF NOT EXISTS user_sessions (\n                                    id INT AUTO_INCREMENT PRIMARY KEY,\n                                    user_id INT NOT NULL,\n                                    token VARCHAR(255) NOT NULL UNIQUE,\n                                    expires_at DATETIME NOT NULL,\n                                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n                                )\n                            \");\n                            $sessionStmt = $db->prepare(\"\n                                INSERT INTO user_sessions (user_id, token, expires_at) \n                                VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))\n                            \");\n                            $sessionStmt->execute([$userId, $token]);\n                        }\n\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Google login successful',\n                            'data' => [\n                                'user' => [\n                                    'id' => $userId,\n                                    'name' => $userName,\n                                    'email' => $userEmail,\n                                    'role' => $userRole,\n                                    'email_verified' => $emailVerified\n                                ],\n                                'token' => $token\n                            ]\n                        ]);\n                        exit;\n\n                    case 'google-signup':\n                        if (empty($data['credential'])) {\n                            http_response_code(400);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Google credential (token) is required'\n                            ]);\n                            exit;\n                        }\n\n                        // Verify Google JWT token\n                        $googleUserData = $googleAuthService->verifyGoogleToken($data['credential']);\n\n                        if (!$googleUserData || !isset($googleUserData['email'])) {\n                            http_response_code(401);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Invalid Google credential'\n                            ]);\n                            exit;\n                        }\n\n                        $userName = $googleUserData['name'] ?? $googleUserData['email'];\n                        $userEmail = $googleUserData['email'];\n                        $userVerified = $googleUserData['email_verified'] ?? false;\n                        $userPicture = $googleUserData['picture'] ?? null;\n\n                        // Check if email already exists\n                        $stmt = $db->prepare(\"SELECT id FROM users WHERE email = ?\");\n                        $stmt->execute([$userEmail]);\n                        if ($stmt->fetch()) {\n                            http_response_code(400);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Email already registered. Please log in instead.'\n                            ]);\n                            exit;\n                        }\n\n                        // Create a new user\n                        $role = 'viewer'; // Default role for new users\n                        $hashedPassword = password_hash(bin2hex(random_bytes(16)), PASSWORD_DEFAULT); // Set a random password\n\n                        $createUserStmt = $db->prepare(\"\n                            INSERT INTO users (name, email, password, role, email_verified_at) \n                            VALUES (?, ?, ?, ?, ?)\n                        \");\n\n                        $verifiedAt = $userVerified ? date('Y-m-d H:i:s') : null;\n\n                        if ($createUserStmt->execute([$userName, $userEmail, $hashedPassword, $role, $verifiedAt])) {\n                            $userId = $db->lastInsertId();\n\n                            // Generate session token for the newly created user\n                            $token = bin2hex(random_bytes(32));\n                            $sessionStmt = $db->prepare(\"\n                                INSERT INTO user_sessions (user_id, token, expires_at) \n                                VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))\n                            \");\n                            $sessionStmt->execute([$userId, $token]);\n\n                            http_response_code(201);\n                            echo json_encode([\n                                'success' => true,\n                                'message' => 'Google signup successful!',\n                                'data' => [\n                                    'user' => [\n                                        'id' => $userId,\n                                        'name' => $userName,\n                                        'email' => $userEmail,\n                                        'role' => $role,\n                                        'email_verified' => $userVerified\n                                    ],\n                                    'token' => $token\n                                ]\n                            ]);\n                            exit;\n                        } else {\n                            http_response_code(500);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Google signup failed'\n                            ]);\n                        }\n                        break;\n\n                    case 'verify-email':\n                        if (empty($data['token'])) {\n                            http_response_code(400);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Verification token is required'\n                            ]);\n                            exit;\n                        }\n\n                        try {\n                            $verificationResult = $emailVerification->verifyToken($data['token']);\n\n                            if ($verificationResult) {\n                                // Update user email verification status\n                                $userId = $verificationResult['user_id'];\n                                $user->markEmailVerified($userId);\n\n                                http_response_code(200);\n                                echo json_encode([\n                                    'success' => true,\n                                    'message' => 'Email verified successfully!',\n                                    'data' => [\n                                        'user_id' => $verificationResult['user_id'],\n                                        'email' => $verificationResult['email']\n                                    ]\n                                ]);\n                            } else {\n                                http_response_code(400);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'Invalid or expired verification token'\n                                ]);\n                            }\n                        } catch (Exception $e) {\n                            error_log('Email verification error: ' . $e->getMessage());\n                            http_response_code(500);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Server error occurred'\n                            ]);\n                        }\n                        exit;\n\n                    case 'resend-verification':\n                        if (empty($data['email'])) {\n                            http_response_code(400);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Email is required'\n                            ]);\n                            exit;\n                        }\n\n                        try {\n                            // Find user by email  \n                            $user->createEmailVerifiedColumnIfNotExists();\n                            $stmt = $db->prepare(\"SELECT id, name, email, email_verified_at FROM users WHERE email = ?\");\n                            $stmt->execute([$data['email']]);\n                            $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                            if (!$userData) {\n                                http_response_code(404);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'User not found'\n                                ]);\n                                exit;\n                            }\n\n                            if ($userData['email_verified_at']) {\n                                http_response_code(400);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'Email is already verified'\n                                ]);\n                                exit;\n                            }\n\n                            // Create new verification token\n                            $token = $emailVerification->createToken($userData['id'], $userData['email']);\n\n                            if ($token) {\n                                // Send verification email\n                                $emailSent = $emailService->sendVerificationEmail($userData['email'], $userData['name'], $token);\n\n                                if ($emailSent) {\n                                    echo json_encode([\n                                        'success' => true,\n                                        'message' => 'Verification email sent successfully!'\n                                    ]);\n                                } else {\n                                    echo json_encode([\n                                        'success' => true,\n                                        'message' => 'Verification token created, but email could not be sent. Please contact support.'\n                                    ]);\n                                }\n                            } else {\n                                http_response_code(500);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'Failed to create verification token'\n                                ]);\n                            }\n                        } catch (Exception $e) {\n                            error_log('Resend verification error: ' . $e->getMessage());\n                            http_response_code(500);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Server error occurred'\n                            ]);\n                        }\n                        exit;\n                }\n            }\n\n            if ((isset($path_parts[0]) && $path_parts[0] === 'login') || (isset($path_parts[1]) && $path_parts[1] === 'login')) {\n                // Handle login\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n\n                if (empty($data['email']) || empty($data['password'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Email and password are required'\n                    ]);\n                    break;\n                }\n\n                // Check if user exists and password is correct\n                $stmt = $db->prepare(\"SELECT id, name, email, role, password, email_verified, email_verified_at, status FROM users WHERE email = ?\");\n                $stmt->execute([$data['email']]);\n                $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                if ($userData && password_verify($data['password'], $userData['password'])) {\n                    // Check if email is verified and user is not revoked\n                    $emailVerified = $userData['email_verified'] == 1 && $userData['status'] !== 'inactive';\n                    $userStatus = $userData['status'] ?? 'active';\n                    \n                    if (!$emailVerified) {\n                        http_response_code(403);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Please verify your email before logging in',\n                            'verification_required' => true\n                        ]);\n                        break;\n                    }\n                    \n                    if ($userStatus === 'revoked' || $userStatus === 'suspended') {\n                        http_response_code(403);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Your account has been suspended. Please contact support.'\n                        ]);\n                        break;\n                    }\n\n                    // Generate session token\n                    $token = bin2hex(random_bytes(32));\n\n                    // Store session in database (create sessions table if needed)\n                    try {\n                        $sessionStmt = $db->prepare(\"\n                            INSERT INTO user_sessions (user_id, token, expires_at) \n                            VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))\n                            ON DUPLICATE KEY UPDATE token = VALUES(token), expires_at = VALUES(expires_at)\n                        \");\n                        $sessionStmt->execute([$userData['id'], $token]);\n                    } catch (PDOException $e) {\n                        // If sessions table doesn't exist, create it\n                        $db->exec(\"\n                            CREATE TABLE IF NOT EXISTS user_sessions (\n                                id INT AUTO_INCREMENT PRIMARY KEY,\n                                user_id INT NOT NULL,\n                                token VARCHAR(255) NOT NULL UNIQUE,\n                                expires_at DATETIME NOT NULL,\n                                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n                            )\n                        \");\n                        $sessionStmt = $db->prepare(\"\n                            INSERT INTO user_sessions (user_id, token, expires_at) \n                            VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))\n                        \");\n                        $sessionStmt->execute([$userData['id'], $token]);\n                    }\n\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Login successful',\n                        'data' => [\n                            'user' => [\n                                'id' => $userData['id'],\n                                'name' => $userData['name'],\n                                'email' => $userData['email'],\n                                'role' => $userData['role'],\n                                'email_verified' => $emailVerified\n                            ],\n                            'token' => $token\n                        ]\n                    ]);\n                } else {\n                    http_response_code(401);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Invalid email or password'\n                    ]);\n                }\n\n            } elseif ((isset($path_parts[0]) && $path_parts[0] === 'register') || (isset($path_parts[1]) && $path_parts[1] === 'register')) {\n                // Handle registration\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n\n                if (empty($data['firstName']) || empty($data['lastName']) || \n                    empty($data['email']) || empty($data['password'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'All fields are required'\n                    ]);\n                    break;\n                }\n\n                // Check if email already exists\n                $stmt = $db->prepare(\"SELECT id FROM users WHERE email = ?\");\n                $stmt->execute([$data['email']]);\n                if ($stmt->fetch()) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Email already registered'\n                    ]);\n                    break;\n                }\n\n                // Hash password and create user\n                $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n                $userName = $data['firstName'] . ' ' . $data['lastName'];\n                $role = $data['userType'] ?? 'viewer';\n\n                $stmt = $db->prepare(\"\n                    INSERT INTO users (name, email, password, role) \n                    VALUES (?, ?, ?, ?)\n                \");\n\n                if ($stmt->execute([$userName, $data['email'], $hashedPassword, $role])) {\n                    $userId = $db->lastInsertId();\n\n                    // Create email verification token\n                    $verificationToken = $emailVerification->createToken($userId, $data['email']);\n\n                    if ($verificationToken) {\n                        // Send verification email\n                        $emailSent = $emailService->sendVerificationEmail($data['email'], $userName, $verificationToken);\n\n                        $message = 'Registration successful! ';\n                        if ($emailSent) {\n                            $message .= 'Please check your email to verify your account.';\n                        } else {\n                            $message .= 'However, we could not send the verification email. Please contact support.';\n                        }\n                    } else {\n                        $message = 'Registration successful, but verification token creation failed.';\n                    }\n\n                    http_response_code(201);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => $message,\n                        'data' => [\n                            'user' => [\n                                'id' => $userId,\n                                'name' => $userName,\n                                'email' => $data['email'],\n                                'role' => $role,\n                                'email_verified' => false\n                            ],\n                            'verification_required' => true\n                        ]\n                    ]);\n                } else {\n                    http_response_code(500);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Registration failed'\n                    ]);\n                }\n\n            } elseif ((isset($path_parts[0]) && $path_parts[0] === 'verify-email') || (isset($path_parts[1]) && $path_parts[1] === 'verify-email') || (isset($path_parts[2]) && $path_parts[2] === 'verify-email')) {\n                // Handle email verification\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n\n                if (empty($data['token'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Verification token is required'\n                    ]);\n                    break;\n                }\n\n                $verificationResult = $emailVerification->verifyToken($data['token']);\n\n                if ($verificationResult) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Email verified successfully!',\n                        'data' => [\n                            'user_id' => $verificationResult['user_id'],\n                            'email' => $verificationResult['email']\n                        ]\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Invalid or expired verification token'\n                    ]);\n                }\n\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'resend-verification') {\n                // Handle resending verification email\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n\n                if (empty($data['email'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Email is required'\n                    ]);\n                    break;\n                }\n\n                // Find user by email  \n                $user->createEmailVerifiedColumnIfNotExists();\n                $stmt = $db->prepare(\"SELECT id, name, email, email_verified_at FROM users WHERE email = ?\");\n                $stmt->execute([$data['email']]);\n                $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                if (!$userData) {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User not found'\n                    ]);\n                    break;\n                }\n\n                if ($userData['email_verified_at'] !== null) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Email is already verified'\n                    ]);\n                    break;\n                }\n\n                // Create new verification token\n                $verificationToken = $emailVerification->createToken($userData['id'], $userData['email']);\n\n                if ($verificationToken) {\n                    // Send verification email\n                    $emailSent = $emailService->sendVerificationEmail($userData['email'], $userData['name'], $verificationToken);\n\n                    if ($emailSent) {\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Verification email sent successfully!'\n                        ]);\n                    } else {\n                        http_response_code(500);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Failed to send verification email'\n                        ]);\n                    }\n                } else {\n                    http_response_code(500);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Failed to create verification token'\n                    ]);\n                }\n\n            } elseif ((isset($path_parts[0]) && $path_parts[0] === 'forgot-password') || (isset($path_parts[1]) && $path_parts[1] === 'forgot-password') || (isset($path_parts[2]) && $path_parts[2] === 'forgot-password')) {\n                // Handle forgot password\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n\n                if (empty($data['email'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Email is required'\n                    ]);\n                    break;\n                }\n\n                // Find user by email\n                $stmt = $db->prepare(\"SELECT id, name, email FROM users WHERE email = ?\");\n                $stmt->execute([$data['email']]);\n                $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                if (!$userData) {\n                    // Don't reveal if email exists - return success for security\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'If this email is registered, you will receive a password reset link.'\n                    ]);\n                    break;\n                }\n\n                // Create password reset token (using same token system as email verification)\n                $resetToken = $emailVerification->createPasswordResetToken($userData['id'], $userData['email']);\n\n                if ($resetToken) {\n                    // Send password reset email\n                    $emailSent = $emailService->sendPasswordResetEmail($userData['email'], $userData['name'], $resetToken);\n\n                    if ($emailSent) {\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Password reset link sent to your email address.'\n                        ]);\n                    } else {\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'If this email is registered, you will receive a password reset link.'\n                        ]);\n                    }\n                } else {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'If this email is registered, you will receive a password reset link.'\n                    ]);\n                }\n\n            } elseif ((isset($path_parts[0]) && $path_parts[0] === 'reset-password') || (isset($path_parts[1]) && $path_parts[1] === 'reset-password') || (isset($path_parts[2]) && $path_parts[2] === 'reset-password')) {\n                // Handle password reset\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n\n                if (empty($data['token']) || empty($data['password'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Reset token and new password are required'\n                    ]);\n                    break;\n                }\n\n                // Verify reset token\n                $resetResult = $emailVerification->verifyPasswordResetToken($data['token']);\n\n                if ($resetResult) {\n                    // Update user password\n                    $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n                    $stmt = $db->prepare(\"UPDATE users SET password = ? WHERE id = ?\");\n                    \n                    if ($stmt->execute([$hashedPassword, $resetResult['user_id']])) {\n                        // Invalidate all existing sessions for this user\n                        $sessionStmt = $db->prepare(\"DELETE FROM user_sessions WHERE user_id = ?\");\n                        $sessionStmt->execute([$resetResult['user_id']]);\n\n                        // Mark reset token as used\n                        $emailVerification->markTokenAsUsed($data['token']);\n\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Password reset successfully! You can now log in with your new password.',\n                            'data' => [\n                                'user_id' => $resetResult['user_id'],\n                                'email' => $resetResult['email']\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(500);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Failed to update password'\n                        ]);\n                    }\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Invalid or expired reset token'\n                    ]);\n                }\n\n            } elseif ((isset($path_parts[0]) && $path_parts[0] === 'change-password') || (isset($path_parts[1]) && $path_parts[1] === 'change-password') || (isset($path_parts[2]) && $path_parts[2] === 'change-password')) {\n                // Handle password change\n                if (!isset($data['user_id']) || !isset($data['current_password']) || !isset($data['new_password'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Missing required fields'\n                    ]);\n                    exit;\n                }\n\n                // Verify current password\n                $stmt = $db->prepare(\"SELECT password FROM users WHERE id = ?\");\n                $stmt->execute([$data['user_id']]);\n                $user_data = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                if (!$user_data || !password_verify($data['current_password'], $user_data['password'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Current password is incorrect'\n                    ]);\n                    exit;\n                }\n\n                // Update password\n                $new_password_hash = password_hash($data['new_password'], PASSWORD_DEFAULT);\n                $stmt = $db->prepare(\"UPDATE users SET password = ? WHERE id = ?\");\n                \n                if ($stmt->execute([$new_password_hash, $data['user_id']])) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Password updated successfully'\n                    ]);\n                } else {\n                    http_response_code(500);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Failed to update password'\n                    ]);\n                }\n\n            } elseif ((isset($path_parts[0]) && $path_parts[0] === 'logout') || (isset($path_parts[1]) && $path_parts[1] === 'logout') || (isset($path_parts[2]) && $path_parts[2] === 'logout')) {\n                // Handle logout\n                $headers = getallheaders();\n                $authHeader = $headers['Authorization'] ?? '';\n\n                if (preg_match('/Bearer\\s+(.*)$/i', $authHeader, $matches)) {\n                    $token = $matches[1];\n\n                    // Delete session from database\n                    $stmt = $db->prepare(\"DELETE FROM user_sessions WHERE token = ?\");\n                    $stmt->execute([$token]);\n                    \n                    // Also delete any expired sessions for cleanup\n                    $cleanupStmt = $db->prepare(\"DELETE FROM user_sessions WHERE expires_at < NOW()\");\n                    $cleanupStmt->execute();\n                }\n\n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'message' => 'Logout successful'\n                ]);\n\n            } else {\n                // Handle direct /api/auth requests (for Google auth)\n                if (end($path_parts) === 'auth' && count($path_parts) >= 2) {\n                    // This is a direct call to /api/auth, which should be handled by action-based logic above\n                    // If we reach here, it means no valid action was provided\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Invalid or missing action parameter'\n                    ]);\n                } else {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Auth endpoint not found'\n                    ]);\n                }\n            }\n            break;\n\n        case 'GET':\n            if ((isset($path_parts[0]) && $path_parts[0] === 'verify') || (isset($path_parts[1]) && $path_parts[1] === 'verify')) {\n                // Handle session verification for auth guard\n                $headers = getallheaders();\n                $authHeader = $headers['Authorization'] ?? '';\n\n                if (preg_match('/Bearer\\s+(.*)$/i', $authHeader, $matches)) {\n                    $token = $matches[1];\n\n                    // Verify session token\n                    $stmt = $db->prepare(\"\n                        SELECT u.id, u.name, u.email, u.role, u.status, s.expires_at \n                        FROM user_sessions s \n                        JOIN users u ON s.user_id = u.id \n                        WHERE s.token = ? AND s.expires_at > NOW()\n                    \");\n                    $stmt->execute([$token]);\n                    $sessionData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                    if ($sessionData) {\n                        // Check if user is active\n                        $userStatus = $sessionData['status'] ?? 'active';\n                        if ($userStatus === 'revoked' || $userStatus === 'banned') {\n                            http_response_code(403);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Account suspended'\n                            ]);\n                            break;\n                        }\n\n                        // Return user data\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Session valid',\n                            'data' => [\n                                'user' => [\n                                    'id' => $sessionData['id'],\n                                    'name' => $sessionData['name'],\n                                    'email' => $sessionData['email'],\n                                    'role' => $sessionData['role']\n                                ]\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(401);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Invalid or expired session'\n                        ]);\n                    }\n                } else {\n                    http_response_code(401);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Authorization token required'\n                    ]);\n                }\n                break;\n\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'verify-email') {\n                // Handle email verification via GET (for URL clicks)\n                $token = $_GET['token'] ?? '';\n\n                if (empty($token)) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Verification token is required'\n                    ]);\n                    break;\n                }\n\n                $verificationResult = $emailVerification->verifyToken($token);\n\n                if ($verificationResult) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Email verified successfully!',\n                        'data' => [\n                            'user_id' => $verificationResult['user_id'],\n                            'email' => $verificationResult['email']\n                        ]\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Invalid or expired verification token'\n                    ]);\n                }\n\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'verify') {\n                // Handle token verification\n                $headers = getallheaders();\n                $authHeader = $headers['Authorization'] ?? '';\n\n                if (preg_match('/Bearer\\s+(.*)$/i', $authHeader, $matches)) {\n                    $token = $matches[1];\n\n                    // Check if session is valid\n                    $stmt = $db->prepare(\"\n                        SELECT u.id, u.name, u.email, u.role \n                        FROM users u \n                        JOIN user_sessions s ON u.id = s.user_id \n                        WHERE s.token = ? AND s.expires_at > NOW()\n                    \");\n                    $stmt->execute([$token]);\n                    $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                    if ($userData) {\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'data' => [\n                                'user' => $userData\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(401);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Invalid or expired token'\n                        ]);\n                    }\n                } else {\n                    http_response_code(401);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'No token provided'\n                    ]);\n                }\n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Auth endpoint not found'\n                ]);\n            }\n            break;\n\n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":46430},"api/endpoints/creator.php":{"content":"<?php\n/**\n * Creator API Endpoints for VideoHub\n * Handles creator-specific operations like videos and earnings\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/Video.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Initialize video object\n$video = new Video($db);\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'GET':\n            if (strpos($path, '/videos') !== false) {\n                // Get creator's videos\n                $creatorId = $_GET['uploader_id'] ?? $_GET['creator_id'] ?? null;\n                \n                if (!$creatorId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Creator ID is required'\n                    ]);\n                    return;\n                }\n                \n                $filters = ['uploader_id' => $creatorId];\n                \n                // Add other filters\n                if (isset($_GET['category'])) {\n                    $filters['category'] = $_GET['category'];\n                }\n                \n                if (isset($_GET['search'])) {\n                    $filters['search'] = $_GET['search'];\n                }\n                \n                $stmt = $video->read($filters);\n                $videos = [];\n                \n                while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n                    $videos[] = [\n                        'id' => $row['id'],\n                        'title' => $row['title'],\n                        'description' => $row['description'],\n                        'creator_id' => $row['user_id'],\n                        'creator_name' => $row['creator_name'],\n                        'price' => $row['price'],\n                        'category' => $row['category'],\n                        'duration' => $row['duration'] ?? '00:00',\n                        'upload_date' => $row['created_at'],\n                        'views' => $row['views'] ?? 0,\n                        'likes' => $row['likes'] ?? 0,\n                        'status' => $row['status'] ?? 'published',\n                        'thumbnail' => $row['thumbnail'],\n                        'youtube_id' => $row['youtube_id'],\n                        'earnings' => $row['earnings'] ?? '0.00',\n                        'tags' => $row['tags'] ?? ''\n                    ];\n                }\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $videos\n                ]);\n                \n            } elseif (strpos($path, '/earnings') !== false) {\n                // Get creator's earnings\n                $creatorId = $_GET['creator_id'] ?? null;\n                \n                if (!$creatorId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Creator ID is required'\n                    ]);\n                    return;\n                }\n                \n                $earnings = $video->getCreatorEarnings($creatorId);\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $earnings\n                ]);\n                \n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Endpoint not found'\n                ]);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":4305},"api/endpoints/metrics.php":{"content":"<?php\n/**\n * Metrics API Endpoints for VideoHub\n * Provides real-time statistics and dashboard metrics\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'GET':\n            // Check for type parameter in URL\n            $type = $_GET['type'] ?? null;\n            \n            if ($type === 'admin' || (isset($path_parts[1]) && $path_parts[1] === 'admin')) {\n                // Admin dashboard metrics\n                $metrics = [];\n                \n                // Total users\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM users\");\n                $metrics['totalUsers'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total videos\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM videos\");\n                $metrics['totalVideos'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total purchases/sales\n                $stmt = $db->query(\"SELECT COUNT(*) as count, COALESCE(SUM(amount), 0) as revenue FROM purchases\");\n                $purchaseData = $stmt->fetch(PDO::FETCH_ASSOC);\n                $metrics['totalPurchases'] = $purchaseData['count'];\n                $metrics['totalRevenue'] = number_format($purchaseData['revenue'], 2);\n                \n                // New users this month\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM users WHERE created_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH)\");\n                $metrics['newUsersThisMonth'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Active users (simplified - count users with recent purchases)\n                $stmt = $db->query(\"SELECT COUNT(DISTINCT user_id_new) as count FROM purchases WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)\");\n                $metrics['activeUsers'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total views across all videos\n                $stmt = $db->query(\"SELECT COALESCE(SUM(views), 0) as total FROM videos\");\n                $metrics['totalViews'] = $stmt->fetch(PDO::FETCH_ASSOC)['total'];\n                \n                // Pending videos (simplified - count all videos, no complex review status)\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM videos WHERE status IS NULL OR status = 'pending'\");\n                $result = $stmt->fetch(PDO::FETCH_ASSOC);\n                $metrics['pendingVideos'] = $result ? $result['count'] : 0;\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $metrics\n                ]);\n                \n            } elseif ($type === 'creator' || (isset($path_parts[1]) && $path_parts[1] === 'creator')) {\n                // Creator dashboard metrics\n                $creatorId = $_GET['creator_id'] ?? null;\n                \n                if (!$creatorId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Creator ID is required'\n                    ]);\n                    return;\n                }\n                \n                $metrics = [];\n                \n                // Fix user_id data type issue by converting to int\n                $stmt = $db->query(\"UPDATE videos SET user_id = CAST(user_id AS UNSIGNED) WHERE user_id REGEXP '^[0-9]+$'\");\n                \n                // Total videos by creator\n                $stmt = $db->prepare(\"SELECT COUNT(*) as count FROM videos WHERE CAST(user_id AS UNSIGNED) = ?\");\n                $stmt->execute([$creatorId]);\n                $metrics['totalVideos'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total views by creator\n                $stmt = $db->prepare(\"SELECT COALESCE(SUM(views), 0) as total FROM videos WHERE CAST(user_id AS UNSIGNED) = ?\");\n                $stmt->execute([$creatorId]);\n                $metrics['totalViews'] = $stmt->fetch(PDO::FETCH_ASSOC)['total'];\n                \n                // Total earnings by creator from purchases table\n                $stmt = $db->prepare(\"\n                    SELECT COALESCE(SUM(p.amount), 0) as total \n                    FROM purchases p \n                    JOIN videos v ON p.video_id = v.id \n                    WHERE CAST(v.user_id AS UNSIGNED) = ?\n                \");\n                $stmt->execute([$creatorId]);\n                $metrics['totalEarnings'] = number_format($stmt->fetch(PDO::FETCH_ASSOC)['total'], 2);\n                \n                // Subscribers (for now, count unique purchasers of this creator's videos)\n                $stmt = $db->prepare(\"\n                    SELECT COUNT(DISTINCT p.user_id_new) as count \n                    FROM purchases p \n                    JOIN videos v ON p.video_id = v.id \n                    WHERE CAST(v.user_id AS UNSIGNED) = ? AND p.user_id_new IS NOT NULL\n                \");\n                $stmt->execute([$creatorId]);\n                $metrics['subscribers'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $metrics\n                ]);\n                \n            } elseif ($type === 'viewer' || (isset($path_parts[1]) && $path_parts[1] === 'viewer')) {\n                // Viewer dashboard metrics - User-specific metrics\n                $userId = $_GET['user_id'] ?? null;\n                \n                if (!$userId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User ID is required for viewer metrics'\n                    ]);\n                    return;\n                }\n                \n                $metrics = [];\n                \n                // Total available videos for browsing\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM videos\");\n                $metrics['totalVideosCount'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // User-specific purchased videos count (status can be empty, null, or 'completed')\n                $stmt = $db->prepare(\"SELECT COUNT(*) as count FROM purchases WHERE user_id_new = ? AND (status IS NULL OR status = '' OR status = 'completed')\");\n                $stmt->execute([$userId]);\n                $metrics['purchasedVideosCount'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // User's total spending (status can be empty, null, or 'completed')\n                $stmt = $db->prepare(\"SELECT COALESCE(SUM(CAST(amount AS DECIMAL(10,2))), 0) as total FROM purchases WHERE user_id_new = ? AND (status IS NULL OR status = '' OR status = 'completed')\");\n                $stmt->execute([$userId]);\n                $metrics['totalSpentAmount'] = number_format($stmt->fetch(PDO::FETCH_ASSOC)['total'], 2);\n                \n                // Recent videos count (platform-wide)\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM videos WHERE created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)\");\n                $metrics['recentVideosCount'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total creators on platform\n                $stmt = $db->query(\"SELECT COUNT(DISTINCT user_id) as count FROM videos WHERE user_id IS NOT NULL AND user_id != ''\");\n                $metrics['totalCreators'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // User's favorites count (placeholder for now)\n                $metrics['favoritesCount'] = 0;\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $metrics\n                ]);\n                \n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Metrics endpoint not found'\n                ]);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":8927},"api/endpoints/payments.php":{"content":"<?php\n/**\n * Payment Processing API Endpoints for VideoHub\n * Handles video purchases and payment processing\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/User.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\n// Parse input data\n$input = json_decode(file_get_contents('php://input'), true);\n\ntry {\n    switch ($method) {\n        case 'POST':\n            if (isset($path_parts[1]) && $path_parts[1] === 'purchase') {\n                // Process video purchase\n                $videoId = $input['video_id'] ?? null;\n                $userId = $input['user_id'] ?? null;\n                $paymentMethod = $input['payment_method'] ?? 'card';\n                $paymentDetails = $input['payment_details'] ?? [];\n                \n                if (!$videoId || !$userId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Video ID and User ID are required'\n                    ]);\n                    return;\n                }\n                \n                // Check if video exists\n                $stmt = $db->prepare(\"SELECT id, title, price, user_id as creator_id FROM videos WHERE id = ?\");\n                $stmt->execute([$videoId]);\n                $video = $stmt->fetch(PDO::FETCH_ASSOC);\n                \n                if (!$video) {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Video not found'\n                    ]);\n                    return;\n                }\n                \n                // Check if user already purchased this video\n                $stmt = $db->prepare(\"SELECT id FROM purchases WHERE video_id = ? AND user_id_new = ?\");\n                $stmt->execute([$videoId, $userId]);\n                $existingPurchase = $stmt->fetch();\n                \n                if ($existingPurchase) {\n                    http_response_code(409);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Video already purchased'\n                    ]);\n                    return;\n                }\n                \n                // Simulate payment processing\n                $paymentSuccess = processPayment($paymentMethod, $paymentDetails, $video['price']);\n                \n                if (!$paymentSuccess['success']) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Payment failed: ' . $paymentSuccess['message']\n                    ]);\n                    return;\n                }\n                \n                // Create purchase record\n                $stmt = $db->prepare(\"\n                    INSERT INTO purchases (video_id, user_id_new, amount, purchased_at) \n                    VALUES (?, ?, ?, NOW())\n                \");\n                \n                $stmt->execute([$videoId, $userId, $video['price']]);\n                $purchaseId = $db->lastInsertId();\n                \n                // Create earnings record for creator (if earnings table exists)\n                // Note: Creator earnings are calculated from purchases table \n                // No separate earnings table needed - all data is in purchases\n                \n                http_response_code(201);\n                echo json_encode([\n                    'success' => true,\n                    'message' => 'Purchase completed successfully',\n                    'data' => [\n                        'purchase_id' => $purchaseId,\n                        'video_title' => $video['title'],\n                        'amount' => $video['price'],\n                        'payment_method' => $paymentMethod\n                    ]\n                ]);\n                \n            } elseif (isset($path_parts[1]) && $path_parts[1] === 'verify-payment') {\n                // Verify payment status by purchase ID\n                $purchaseId = $input['purchase_id'] ?? null;\n                \n                if (!$purchaseId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Purchase ID is required'\n                    ]);\n                    return;\n                }\n                \n                $stmt = $db->prepare(\"SELECT * FROM purchases WHERE id = ?\");\n                $stmt->execute([$purchaseId]);\n                $purchase = $stmt->fetch(PDO::FETCH_ASSOC);\n                \n                if (!$purchase) {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Purchase not found'\n                    ]);\n                    return;\n                }\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => [\n                        'amount' => $purchase['amount'],\n                        'purchase_date' => $purchase['purchased_at']\n                    ]\n                ]);\n                \n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Payment endpoint not found'\n                ]);\n            }\n            break;\n            \n        case 'GET':\n            if (isset($path_parts[2]) && $path_parts[2] === 'check-access') {\n                // Check if user has access to a video\n                $videoId = $_GET['video_id'] ?? null;\n                $userId = $_GET['user_id'] ?? null;\n                \n                if (!$videoId || !$userId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Video ID and User ID are required'\n                    ]);\n                    return;\n                }\n                \n                $stmt = $db->prepare(\"SELECT id FROM purchases WHERE video_id = ? AND user_id_new = ?\");\n                $stmt->execute([$videoId, $userId]);\n                $purchase = $stmt->fetch();\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'has_access' => !!$purchase,\n                    'message' => $purchase ? 'User has access to this video' : 'Purchase required to access video'\n                ]);\n                \n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Payment endpoint not found'\n                ]);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n\n/**\n * Simulate payment processing\n * In a real application, this would integrate with payment providers like Stripe, PayPal, etc.\n */\nfunction processPayment($method, $details, $amount) {\n    // Simulate different payment scenarios\n    if ($amount <= 0) {\n        return ['success' => false, 'message' => 'Invalid amount'];\n    }\n    \n    switch ($method) {\n        case 'card':\n            // Simulate card validation\n            if (empty($details['card_number']) || empty($details['expiry']) || empty($details['cvv'])) {\n                return ['success' => false, 'message' => 'Invalid card details'];\n            }\n            \n            // Basic validation for demo card\n            $cardNumber = str_replace(' ', '', $details['card_number']);\n            if ($cardNumber !== '4242424242424242' && strlen($cardNumber) < 13) {\n                return ['success' => false, 'message' => 'Please use test card: 4242 4242 4242 4242'];\n            }\n            \n            // Simulate card processing (always success for demo with valid test card)\n            return ['success' => true, 'message' => 'Card payment processed successfully'];\n            \n        case 'paypal':\n            // Simulate PayPal processing\n            if (empty($details['paypal_email'])) {\n                return ['success' => false, 'message' => 'PayPal email required'];\n            }\n            \n            return ['success' => true, 'message' => 'PayPal payment processed successfully'];\n            \n        case 'crypto':\n            // Simulate crypto payment\n            if (empty($details['wallet_address'])) {\n                return ['success' => false, 'message' => 'Wallet address required'];\n            }\n            \n            return ['success' => true, 'message' => 'Crypto payment processed successfully'];\n            \n        default:\n            return ['success' => false, 'message' => 'Unsupported payment method'];\n    }\n}\n?>","size_bytes":9573},"api/endpoints/profile.php":{"content":"<?php\n/**\n * Simplified Profile API Endpoint for VideoHub\n * Streamlined user profile management without complex logic\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Get request method\n$method = $_SERVER['REQUEST_METHOD'];\n\ntry {\n    switch ($method) {\n        case 'GET':\n            // Get user profile - simple approach\n            $userId = null;\n            \n            // Try multiple ways to get user ID\n            if (isset($_GET['user_id'])) {\n                $userId = $_GET['user_id'];\n            } elseif (isset($_POST['user_id'])) {\n                $userId = $_POST['user_id'];\n            } else {\n                // Try to get from session\n                session_start();\n                if (isset($_SESSION['user_id'])) {\n                    $userId = $_SESSION['user_id'];\n                }\n            }\n            \n            if (!$userId) {\n                http_response_code(401);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'User not authenticated'\n                ]);\n                break;\n            }\n            \n            // Simple query to get user data\n            $stmt = $db->prepare(\"SELECT id, name, email, role, created_at FROM users WHERE id = ?\");\n            $stmt->execute([$userId]);\n            $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n            \n            if ($userData) {\n                // Split name for form compatibility\n                $nameParts = explode(' ', $userData['name'], 2);\n                $firstName = $nameParts[0] ?? '';\n                $lastName = $nameParts[1] ?? '';\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => [\n                        'id' => $userData['id'],\n                        'firstName' => $firstName,\n                        'lastName' => $lastName,\n                        'name' => $userData['name'],\n                        'email' => $userData['email'],\n                        'role' => $userData['role'],\n                        'joinDate' => date('M d, Y', strtotime($userData['created_at']))\n                    ]\n                ]);\n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'User not found'\n                ]);\n            }\n            break;\n            \n        case 'PUT':\n            // Update user profile - simple approach\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n            $userId = $data['user_id'] ?? $_GET['user_id'] ?? null;\n            \n            if (!$userId) {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'User ID required'\n                ]);\n                break;\n            }\n            \n            // Simple update query\n            $updateFields = [];\n            $params = [];\n            \n            if (isset($data['name'])) {\n                $updateFields[] = \"name = ?\";\n                $params[] = $data['name'];\n            }\n            \n            if (empty($updateFields)) {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'No fields to update'\n                ]);\n                break;\n            }\n            \n            $params[] = $userId;\n            $sql = \"UPDATE users SET \" . implode(', ', $updateFields) . \" WHERE id = ?\";\n            \n            $stmt = $db->prepare($sql);\n            if ($stmt->execute($params)) {\n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'message' => 'Profile updated successfully'\n                ]);\n            } else {\n                http_response_code(500);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Update failed'\n                ]);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n    \n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":4714},"api/endpoints/purchases.php":{"content":"<?php\n/**\n * Purchases API Endpoints for VideoHub\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/Purchase.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Initialize purchase object\n$purchase = new Purchase($db);\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'GET':\n            if (isset($path_parts[2]) && is_numeric($path_parts[2])) {\n                // Get specific purchase\n                $purchase->id = $path_parts[2];\n                if ($purchase->readOne()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'data' => [\n                            'id' => $purchase->id,\n                            'viewer_id' => $purchase->viewer_id,\n                            'video_id' => $purchase->video_id,\n                            'amount' => $purchase->amount,\n                            'payment_method' => $purchase->payment_method,\n                            'transaction_id' => $purchase->transaction_id,\n                            'status' => $purchase->status,\n                            'purchase_date' => $purchase->purchase_date\n                        ]\n                    ]);\n                } else {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Purchase not found'\n                    ]);\n                }\n            } else {\n                // Get all purchases with filters\n                $userId = $_GET['user_id'] ?? null;\n                \n                // Build SQL query with filters\n                $sql = \"SELECT p.*, v.title as video_title, v.thumbnail, v.price as video_price, \n                               v.description, v.youtube_id, v.category, u.name as creator_name\n                        FROM purchases p \n                        LEFT JOIN videos v ON p.video_id = v.id \n                        LEFT JOIN users u ON v.user_id = u.id\n                        WHERE 1=1\";\n                $params = [];\n                \n                if ($userId) {\n                    $sql .= \" AND p.user_id_new = ?\";\n                    $params[] = $userId;\n                }\n                \n                if (isset($_GET['video_id'])) {\n                    $sql .= \" AND p.video_id = ?\";\n                    $params[] = $_GET['video_id'];\n                }\n                \n                if (isset($_GET['status'])) {\n                    $sql .= \" AND p.status = ?\";\n                    $params[] = $_GET['status'];\n                }\n                \n                $sql .= \" ORDER BY p.purchase_date DESC\";\n                \n                if (isset($_GET['limit'])) {\n                    $sql .= \" LIMIT ?\";\n                    $params[] = (int)$_GET['limit'];\n                }\n                \n                $stmt = $db->prepare($sql);\n                $stmt->execute($params);\n                $purchases = $stmt->fetchAll(PDO::FETCH_ASSOC);\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $purchases,\n                    'purchases' => $purchases\n                ]);\n            }\n            break;\n\n        case 'POST':\n            // Create new purchase\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n            \n            if (!empty($data['viewer_id']) && !empty($data['video_id']) && !empty($data['amount'])) {\n                // Check if user has already purchased this video\n                if ($purchase->hasPurchased($data['viewer_id'], $data['video_id'])) {\n                    http_response_code(409);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'You have already purchased this video'\n                    ]);\n                    break;\n                }\n                \n                $purchase->viewer_id = $data['viewer_id'];\n                $purchase->video_id = $data['video_id'];\n                $purchase->amount = $data['amount'];\n                $purchase->payment_method = $data['payment_method'] ?? 'card';\n                $purchase->transaction_id = $data['transaction_id'] ?? uniqid('txn_');\n                $purchase->status = $data['status'] ?? 'completed';\n                \n                if ($purchase->create()) {\n                    http_response_code(201);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Purchase created successfully',\n                        'data' => [\n                            'id' => $purchase->id,\n                            'transaction_id' => $purchase->transaction_id\n                        ]\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to create purchase'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Missing required fields: viewer_id, video_id, amount'\n                ]);\n            }\n            break;\n\n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":6078},"api/endpoints/users.php":{"content":"<?php\n/**\n * Users API Endpoints for VideoHub\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/User.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Initialize user object\n$user = new User($db);\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'GET':\n            if (isset($path_parts[1]) && $path_parts[1] === 'profile') {\n                // Get user profile - Get from session or token\n                $headers = getallheaders();\n                $token = null;\n                \n                if (isset($headers['Authorization'])) {\n                    $token = str_replace('Bearer ', '', $headers['Authorization']);\n                }\n                \n                // Get user ID from session data or token\n                $userId = null;\n                \n                // Try to get user ID from session first\n                session_start();\n                if (isset($_SESSION['user_id'])) {\n                    $userId = $_SESSION['user_id'];\n                } else {\n                    // Try to get from request headers or POST data\n                    $input = json_decode(file_get_contents(\"php://input\"), true);\n                    if (isset($input['user_id'])) {\n                        $userId = $input['user_id'];\n                    } elseif (isset($_GET['user_id'])) {\n                        $userId = $_GET['user_id'];\n                    }\n                }\n                \n                // If still no user ID, return error\n                if (!$userId) {\n                    http_response_code(401);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User not authenticated'\n                    ]);\n                    break;\n                }\n                \n                // Get user from database\n                $stmt = $db->prepare(\"SELECT id, name, email, role, created_at FROM users WHERE id = ?\");\n                $stmt->execute([$userId]);\n                $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n                \n                if ($userData) {\n                    // Split name into first and last name for profile form\n                    $nameParts = explode(' ', $userData['name'], 2);\n                    $firstName = $nameParts[0] ?? '';\n                    $lastName = $nameParts[1] ?? '';\n                    \n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'data' => [\n                            'id' => $userData['id'],\n                            'firstName' => $firstName,\n                            'lastName' => $lastName,\n                            'name' => $userData['name'],\n                            'email' => $userData['email'],\n                            'role' => $userData['role'],\n                            'status' => 'active',\n                            'joinDate' => date('M d, Y', strtotime($userData['created_at']))\n                        ]\n                    ]);\n                } else {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User not found'\n                    ]);\n                }\n            } elseif (isset($path_parts[1]) && is_numeric($path_parts[1])) {\n                // Get specific user\n                $user->id = $path_parts[1];\n                if ($user->readOne()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'data' => [\n                            'id' => $user->id,\n                            'name' => $user->name,\n                            'email' => $user->email,\n                            'role' => $user->role,\n                            'status' => $user->status,\n                            'created_at' => $user->created_at,\n                            'updated_at' => $user->updated_at\n                        ]\n                    ]);\n                } else {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User not found'\n                    ]);\n                }\n            } else {\n                // Get all users with filters\n                $filters = [];\n                \n                if (isset($_GET['role'])) {\n                    $filters['role'] = $_GET['role'];\n                }\n                \n                if (isset($_GET['status'])) {\n                    $filters['status'] = $_GET['status'];\n                }\n                \n                if (isset($_GET['search'])) {\n                    $filters['search'] = $_GET['search'];\n                }\n                \n                if (isset($_GET['limit'])) {\n                    $filters['limit'] = (int)$_GET['limit'];\n                }\n                \n                if (isset($_GET['offset'])) {\n                    $filters['offset'] = (int)$_GET['offset'];\n                }\n\n                // Get all users from database directly\n                try {\n                    $query = \"SELECT * FROM users ORDER BY id ASC\";\n                    $stmt = $db->prepare($query);\n                    $stmt->execute();\n                    $users = $stmt->fetchAll(PDO::FETCH_ASSOC);\n                    \n                    // Format users data to match frontend expectations\n                    $formattedUsers = [];\n                    foreach ($users as $userData) {\n                        $formattedUsers[] = [\n                            'id' => (int)$userData['id'],\n                            'firstName' => $userData['name'] ?? 'Unknown',\n                            'lastName' => '', // Not available in current schema\n                            'email' => $userData['email'] ?? 'unknown@example.com',\n                            'role' => $userData['role'] ?? 'viewer',\n                            'status' => $userData['email_verified'] ? 'active' : 'pending',\n                            'joinDate' => date('Y-m-d', strtotime($userData['created_at'] ?? 'now')),\n                            'profileImage' => 'https://via.placeholder.com/40x40/6c757d/ffffff?text=U'\n                        ];\n                    }\n\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'users' => $formattedUsers\n                    ]);\n                } catch (Exception $e) {\n                    http_response_code(500);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Server error: ' . $e->getMessage()\n                    ]);\n                }\n            }\n            break;\n\n        case 'POST':\n            // Create new user\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n            \n            if (!empty($data['name']) && !empty($data['email']) && !empty($data['role'])) {\n                $user->name = $data['name'];\n                $user->email = $data['email'];\n                $user->role = $data['role'];\n                $user->status = isset($data['status']) ? $data['status'] : 'active';\n                \n                if ($user->create()) {\n                    http_response_code(201);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'User created successfully',\n                        'data' => [\n                            'id' => $user->id,\n                            'name' => $user->name,\n                            'email' => $user->email,\n                            'role' => $user->role,\n                            'status' => $user->status\n                        ]\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to create user'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Missing required fields: name, email, role'\n                ]);\n            }\n            break;\n\n        case 'PUT':\n            // Update user - support both /api/users/{id} and /users/{id} patterns\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n            \n            // Extract user ID from URL path - handle subfolder deployments\n            $userId = null;\n            \n            // Check different possible positions for the user ID in the path\n            if (preg_match('/.*\\/api\\/users\\/(\\d+)/', $path, $matches)) {\n                $userId = $matches[1];\n            } elseif (preg_match('/.*\\/users\\/(\\d+)/', $path, $matches)) {\n                $userId = $matches[1];\n            } elseif (isset($path_parts[1]) && is_numeric($path_parts[1])) {\n                $userId = $path_parts[1];\n            } elseif (isset($path_parts[2]) && is_numeric($path_parts[2])) {\n                $userId = $path_parts[2];\n            } elseif (isset($path_parts[3]) && is_numeric($path_parts[3])) {\n                $userId = $path_parts[3];\n            }\n            \n            if ($userId) {\n                \n                $user->id = $userId;\n                \n                // Check if user exists first\n                if (!$user->readOne()) {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User not found'\n                    ]);\n                    break;\n                }\n                \n                // Allow partial updates - only update provided fields\n                if (isset($data['name'])) $user->name = $data['name'];\n                if (isset($data['email'])) $user->email = $data['email'];\n                if (isset($data['role'])) $user->role = $data['role'];\n                if (isset($data['status'])) $user->status = $data['status'];\n                \n                // Special handling for revoke action\n                if (isset($data['status']) && $data['status'] === 'revoked') {\n                    // Log revoke action\n                    error_log(\"User {$user->id} access revoked by admin\");\n                }\n                \n                if ($user->update()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'User updated successfully',\n                        'data' => [\n                            'id' => $user->id,\n                            'name' => $user->name,\n                            'email' => $user->email,\n                            'role' => $user->role,\n                            'status' => $user->status\n                        ]\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to update user'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'User ID is required'\n                ]);\n            }\n            break;\n\n        case 'DELETE':\n            // Delete user\n            if (isset($path_parts[1]) && is_numeric($path_parts[1])) {\n                $user->id = $path_parts[1];\n                \n                if ($user->delete()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'User deleted successfully'\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to delete user'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'User ID is required'\n                ]);\n            }\n            break;\n\n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":13265},"api/endpoints/videos.php":{"content":"<?php\n/**\n * Videos API Endpoints for VideoHub\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/Video.php';\n\n\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Initialize video object\n$video = new Video($db);\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'GET':\n            if (isset($path_parts[4]) && is_numeric($path_parts[4])) {\n                // Get specific video\n                $video->id = $path_parts[4];\n                if ($video->readOne()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'data' => [\n                            'id' => $video->id,\n                            'title' => $video->title,\n                            'description' => $video->description,\n                            'creator_id' => $video->creator_id,\n                            'creator_name' => $video->creator_name,\n                            'price' => $video->price,\n                            'category' => $video->category,\n                            'duration' => $video->duration,\n                            'upload_date' => $video->upload_date,\n                            'views' => $video->views,\n                            'likes' => $video->likes,\n                            'status' => $video->status,\n                            'thumbnail' => $video->thumbnail,\n                            'earnings' => $video->earnings,\n                            'tags' => $video->tags,\n                            'file_size' => $video->file_size,\n                            'quality' => $video->quality\n                        ]\n                    ]);\n                } else {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Video not found'\n                    ]);\n                }\n            } else {\n                // Get all videos with filters\n                $filters = [];\n                \n                if (isset($_GET['uploader_id'])) {\n                    $filters['uploader_id'] = $_GET['uploader_id'];\n                }\n                \n                if (isset($_GET['category'])) {\n                    $filters['category'] = $_GET['category'];\n                }\n                \n\n                \n                if (isset($_GET['search'])) {\n                    $filters['search'] = $_GET['search'];\n                }\n                \n                if (isset($_GET['limit'])) {\n                    $filters['limit'] = (int)$_GET['limit'];\n                }\n                \n                if (isset($_GET['offset'])) {\n                    $filters['offset'] = (int)$_GET['offset'];\n                }\n\n                $stmt = $video->read($filters);\n                $videos = $stmt->fetchAll(PDO::FETCH_ASSOC);\n                \n                // Format videos data to match existing database structure\n                $formattedVideos = [];\n                foreach ($videos as $videoData) {\n                    $formattedVideos[] = [\n                        'id' => (int)$videoData['id'],\n                        'title' => $videoData['title'],\n                        'description' => $videoData['description'],\n                        'creatorId' => (int)($videoData['uploader_id'] ?? 0),\n                        'creatorName' => $videoData['creator_name'] ?? $videoData['youtube_channel_title'] ?? 'Unknown Creator',\n                        'price' => (float)$videoData['price'],\n                        'category' => $videoData['category'],\n                        'duration' => '00:00', // Not available in current DB\n                        'uploadDate' => date('Y-m-d', strtotime($videoData['created_at'])),\n                        'views' => (int)$videoData['views'],\n                        'likes' => (int)($videoData['youtube_likes'] ?? 0),\n                        'status' => $videoData['status'] ?? 'pending', // Use actual status from database\n                        'thumbnail' => $videoData['youtube_thumbnail'] ?? 'https://via.placeholder.com/300x169/4f46e5/ffffff?text=Video',\n                        'youtube_id' => $videoData['youtube_id'] ?? '', // Add YouTube ID for video player\n                        'earnings' => 0, // Calculate separately if needed\n                        'tags' => [], // Not available in current DB structure\n                        'fileSize' => 'N/A',\n                        'quality' => '720p'\n                    ];\n                }\n\n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => ['videos' => $formattedVideos]\n                ]);\n            }\n            break;\n\n        case 'POST':\n            if (isset($path_parts[3]) && $path_parts[3] === 'view' && isset($path_parts[4])) {\n                // Increment view count\n                $video->id = $path_parts[4];\n                if ($video->incrementViews()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'View count updated'\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to update view count'\n                    ]);\n                }\n            } elseif (isset($path_parts[3]) && $path_parts[3] === 'like' && isset($path_parts[4])) {\n                // Increment like count\n                $video->id = $path_parts[4];\n                if ($video->incrementLikes()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Like count updated'\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to update like count'\n                    ]);\n                }\n            } else {\n                // Create new video\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n                \n                if (!empty($data['title']) && !empty($data['uploader_id'])) {\n                    $video->title = $data['title'];\n                    $video->description = $data['description'] ?? '';\n                    $video->user_id = $data['uploader_id'];\n                    $video->price = $data['price'] ?? 0;\n                    $video->category = $data['category'] ?? '';\n                    $video->youtube_id = $data['youtube_id'] ?? ''; // Add YouTube ID field\n                    $video->thumbnail = $data['thumbnail'] ?? '';\n                    $video->status = $data['status'] ?? 'pending';\n                    \n                    if ($video->create()) {\n                        http_response_code(201);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Video created successfully',\n                            'data' => [\n                                'id' => $video->id\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(400);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Unable to create video'\n                        ]);\n                    }\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Missing required fields: title, creator_id'\n                    ]);\n                }\n            }\n            break;\n\n        case 'PUT':\n            // Update video - handle both path formats: /api/endpoints/videos.php/123 and /api/endpoints/videos.php?id=123\n            $videoId = null;\n            \n            // Try to get video ID from path\n            if (isset($path_parts[4]) && is_numeric($path_parts[4])) {\n                $videoId = $path_parts[4];\n            } elseif (isset($path_parts[3]) && is_numeric($path_parts[3])) {\n                $videoId = $path_parts[3];\n            }\n            \n            // Also check for ID in query parameters or request body\n            if (!$videoId) {\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n                $videoId = $_GET['id'] ?? $data['id'] ?? null;\n            }\n            \n            // Extract video ID from end of path if it's in format /123\n            if (!$videoId && preg_match('/\\/(\\d+)$/', $_SERVER['REQUEST_URI'], $matches)) {\n                $videoId = $matches[1];\n            }\n            \n            if ($videoId && is_numeric($videoId)) {\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n                \n                $video->id = $videoId;\n                \n                // Handle status-only updates (for approve/reject functionality)\n                if (isset($data['status']) && !isset($data['title'])) {\n                    // Status-only update - just update the status\n                    $video->status = $data['status'];\n                    \n                    if ($video->updateStatus()) {\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Video status updated successfully',\n                            'data' => [\n                                'id' => $video->id,\n                                'status' => $video->status\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(400);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Unable to update video status'\n                        ]);\n                    }\n                } elseif (!empty($data['title'])) {\n                    // Full video update\n                    $video->title = $data['title'];\n                    $video->description = $data['description'] ?? '';\n                    $video->price = $data['price'] ?? 0;\n                    $video->category = $data['category'] ?? '';\n                    $video->thumbnail = $data['thumbnail'] ?? '';\n                    $video->status = $data['status'] ?? 'published';\n                    \n                    if ($video->update()) {\n                        // Get the video data to check if it has a YouTube ID\n                        $video->readOne();\n                        $youtubeId = $video->youtube_id ?? null;\n                        \n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Video updated successfully',\n                            'data' => [\n                                'id' => $video->id,\n                                'youtube_id' => $youtubeId,\n                                'title' => $video->title,\n                                'description' => $video->description\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(400);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Unable to update video'\n                        ]);\n                    }\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Missing required field: title'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Video ID is required'\n                ]);\n            }\n            break;\n\n        case 'DELETE':\n            // Delete video\n            if (isset($path_parts[1]) && is_numeric($path_parts[1])) {\n                $video->id = $path_parts[1];\n                \n                if ($video->delete()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Video deleted successfully'\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to delete video'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Video ID is required'\n                ]);\n            }\n            break;\n\n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":13952},"api/models/EmailVerification.php":{"content":"<?php\n/**\n * Email Verification Model for VideoHub\n */\n\nclass EmailVerification {\n    private $conn;\n    private $table_name = \"email_verification_tokens\";\n    \n    public $id;\n    public $user_id;\n    public $email;\n    public $token;\n    public $expires_at;\n    public $verified_at;\n    public $created_at;\n    \n    public function __construct($db) {\n        $this->conn = $db;\n        $this->createTableIfNotExists();\n    }\n    \n    /**\n     * Create email verification tokens table if it doesn't exist\n     */\n    private function createTableIfNotExists() {\n        $query = \"\n            CREATE TABLE IF NOT EXISTS \" . $this->table_name . \" (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                user_id INT NOT NULL,\n                email VARCHAR(255) NOT NULL,\n                token VARCHAR(255) NOT NULL UNIQUE,\n                expires_at DATETIME NOT NULL,\n                verified_at DATETIME NULL,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n                INDEX idx_token (token),\n                INDEX idx_user_id (user_id),\n                INDEX idx_expires_at (expires_at)\n            )\n        \";\n        \n        try {\n            $this->conn->exec($query);\n        } catch (PDOException $e) {\n            error_log(\"Error creating email verification table: \" . $e->getMessage());\n        }\n    }\n    \n    /**\n     * Create verification token\n     */\n    public function createToken($user_id, $email) {\n        // Delete any existing tokens for this user\n        $this->deleteUserTokens($user_id);\n        \n        // Generate new token\n        $token = bin2hex(random_bytes(32));\n        \n        // Set expiry (24 hours from now)\n        $expires_at = date('Y-m-d H:i:s', strtotime('+24 hours'));\n        \n        $query = \"\n            INSERT INTO \" . $this->table_name . \" \n            (user_id, email, token, expires_at) \n            VALUES (?, ?, ?, ?)\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        \n        if ($stmt->execute([$user_id, $email, $token, $expires_at])) {\n            $this->id = $this->conn->lastInsertId();\n            $this->user_id = $user_id;\n            $this->email = $email;\n            $this->token = $token;\n            $this->expires_at = $expires_at;\n            return $token;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Verify token\n     */\n    public function verifyToken($token) {\n        // First check our new email_verification_tokens table\n        $query = \"\n            SELECT * FROM \" . $this->table_name . \" \n            WHERE token = ? AND expires_at > NOW() AND verified_at IS NULL\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->execute([$token]);\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($row) {\n            // Mark token as verified\n            $updateQuery = \"\n                UPDATE \" . $this->table_name . \" \n                SET verified_at = NOW(),\n                status = 'active'\n                WHERE id = ?\n            \";\n            \n            $updateStmt = $this->conn->prepare($updateQuery);\n            $updateStmt->execute([$row['id']]);\n            \n            // Update user email verification status\n            $userUpdateQuery = \"\n                UPDATE users \n                SET email_verified_at = NOW() \n                WHERE id = ?\n            \";\n            \n            $userUpdateStmt = $this->conn->prepare($userUpdateQuery);\n            $userUpdateStmt->execute([$row['user_id']]);\n            \n            return [\n                'user_id' => $row['user_id'],\n                'email' => $row['email']\n            ];\n        }\n        \n        // Fallback: Check old users table verification_token for backward compatibility\n        $legacyQuery = \"\n            SELECT id, email, verification_token \n            FROM users \n            WHERE verification_token = ? AND email_verified_at IS NULL\n        \";\n        \n        $legacyStmt = $this->conn->prepare($legacyQuery);\n        $legacyStmt->execute([$token]);\n        $legacyRow = $legacyStmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($legacyRow) {\n            // Update user email verification status\n            $userUpdateQuery = \"\n                UPDATE users \n                SET email_verified_at = NOW(), verification_token = NULL \n                WHERE id = ?\n            \";\n            \n            $userUpdateStmt = $this->conn->prepare($userUpdateQuery);\n            $userUpdateStmt->execute([$legacyRow['id']]);\n            \n            return [\n                'user_id' => $legacyRow['id'],\n                'email' => $legacyRow['email']\n            ];\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Get token details\n     */\n    public function getToken($token) {\n        $query = \"\n            SELECT * FROM \" . $this->table_name . \" \n            WHERE token = ?\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->execute([$token]);\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n    \n    /**\n     * Delete user tokens\n     */\n    public function deleteUserTokens($user_id) {\n        $query = \"DELETE FROM \" . $this->table_name . \" WHERE user_id = ?\";\n        $stmt = $this->conn->prepare($query);\n        return $stmt->execute([$user_id]);\n    }\n    \n    /**\n     * Create password reset token\n     */\n    public function createPasswordResetToken($user_id, $email) {\n        // Delete any existing tokens for this user\n        $this->deleteUserTokens($user_id);\n        \n        // Generate new token\n        $token = bin2hex(random_bytes(32));\n        \n        // Set expiry (1 hour from now for password reset)\n        $expires_at = date('Y-m-d H:i:s', strtotime('+1 hour'));\n        \n        $query = \"\n            INSERT INTO \" . $this->table_name . \" \n            (user_id, email, token, expires_at) \n            VALUES (?, ?, ?, ?)\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        \n        if ($stmt->execute([$user_id, $email, $token, $expires_at])) {\n            return $token;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Verify password reset token\n     */\n    public function verifyPasswordResetToken($token) {\n        $query = \"\n            SELECT * FROM \" . $this->table_name . \" \n            WHERE token = ? AND expires_at > NOW() AND verified_at IS NULL\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->execute([$token]);\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($row) {\n            return [\n                'user_id' => $row['user_id'],\n                'email' => $row['email'],\n                'token_id' => $row['id']\n            ];\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Mark token as used\n     */\n    public function markTokenAsUsed($token) {\n        $query = \"\n            UPDATE \" . $this->table_name . \" \n            SET verified_at = NOW() \n            WHERE token = ?\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        return $stmt->execute([$token]);\n    }\n    \n    /**\n     * Delete expired tokens\n     */\n    public function deleteExpiredTokens() {\n        $query = \"DELETE FROM \" . $this->table_name . \" WHERE expires_at < NOW()\";\n        $stmt = $this->conn->prepare($query);\n        return $stmt->execute();\n    }\n    \n    /**\n     * Check if user has verified email\n     */\n    public function isEmailVerified($user_id) {\n        $query = \"\n            SELECT email_verified_at FROM users \n            WHERE id = ?\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->execute([$user_id]);\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return $row && $row['email_verified_at'] !== null;\n    }\n}\n?>","size_bytes":7885},"api/models/Purchase.php":{"content":"<?php\n/**\n * Purchase Model for VideoHub\n */\n\nclass Purchase {\n    private $conn;\n    private $table_name = \"purchases\";\n\n    public $id;\n    public $viewer_id;\n    public $video_id;\n    public $amount;\n    public $payment_method;\n    public $transaction_id;\n    public $status;\n    public $purchase_date;\n    public $created_at;\n    public $updated_at;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Get all purchases with optional filters\n    public function read($filters = []) {\n        $query = \"SELECT p.*, v.title as video_title, v.youtube_thumbnail as thumbnail, u.name as viewer_name\n                  FROM \" . $this->table_name . \" p\n                  LEFT JOIN videos v ON p.video_id = v.id\n                  LEFT JOIN users u ON p.user_id = u.id\";\n        \n        $conditions = [];\n        $params = [];\n\n        if (isset($filters['user_id']) && !empty($filters['user_id'])) {\n            $conditions[] = \"p.user_id = :user_id\";\n            $params[':user_id'] = $filters['user_id'];\n        }\n\n        if (isset($filters['video_id']) && !empty($filters['video_id'])) {\n            $conditions[] = \"p.video_id = :video_id\";\n            $params[':video_id'] = $filters['video_id'];\n        }\n\n        if (isset($filters['status']) && !empty($filters['status'])) {\n            $conditions[] = \"p.status = :status\";\n            $params[':status'] = $filters['status'];\n        }\n\n        if (!empty($conditions)) {\n            $query .= \" WHERE \" . implode(\" AND \", $conditions);\n        }\n\n        $query .= \" ORDER BY p.purchase_date DESC\";\n\n        // Add pagination\n        if (isset($filters['limit'])) {\n            $offset = isset($filters['offset']) ? $filters['offset'] : 0;\n            $query .= \" LIMIT :offset, :limit\";\n            $params[':offset'] = $offset;\n            $params[':limit'] = $filters['limit'];\n        }\n\n        $stmt = $this->conn->prepare($query);\n        \n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value, is_int($value) ? PDO::PARAM_INT : PDO::PARAM_STR);\n        }\n        \n        $stmt->execute();\n        return $stmt;\n    }\n\n    // Get single purchase by ID\n    public function readOne() {\n        $query = \"SELECT p.*, v.title as video_title, v.youtube_thumbnail as thumbnail, u.name as viewer_name\n                  FROM \" . $this->table_name . \" p\n                  LEFT JOIN videos v ON p.video_id = v.id\n                  LEFT JOIN users u ON p.user_id = u.id\n                  WHERE p.id = ? LIMIT 0,1\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(1, $this->id);\n        $stmt->execute();\n\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($row) {\n            $this->viewer_id = $row['viewer_id'];\n            $this->video_id = $row['video_id'];\n            $this->amount = $row['amount'];\n            $this->payment_method = $row['payment_method'];\n            $this->transaction_id = $row['transaction_id'];\n            $this->status = $row['status'];\n            $this->purchase_date = $row['purchase_date'];\n            $this->created_at = $row['created_at'];\n            $this->updated_at = $row['updated_at'];\n            return true;\n        }\n\n        return false;\n    }\n\n    // Create purchase\n    public function create() {\n        $query = \"INSERT INTO \" . $this->table_name . \" \n                  SET user_id_new=:viewer_id, video_id=:video_id, amount=:amount, \n                      payment_method=:payment_method, transaction_id=:transaction_id, \n                      status=:status, purchase_date=NOW(), created_at=NOW(), updated_at=NOW()\";\n\n        $stmt = $this->conn->prepare($query);\n\n        // Sanitize\n        $this->viewer_id = htmlspecialchars(strip_tags($this->viewer_id));\n        $this->video_id = htmlspecialchars(strip_tags($this->video_id));\n        $this->amount = htmlspecialchars(strip_tags($this->amount));\n        $this->payment_method = htmlspecialchars(strip_tags($this->payment_method));\n        $this->transaction_id = htmlspecialchars(strip_tags($this->transaction_id));\n        $this->status = htmlspecialchars(strip_tags($this->status));\n\n        // Bind values\n        $stmt->bindParam(\":viewer_id\", $this->viewer_id);\n        $stmt->bindParam(\":video_id\", $this->video_id);\n        $stmt->bindParam(\":amount\", $this->amount);\n        $stmt->bindParam(\":payment_method\", $this->payment_method);\n        $stmt->bindParam(\":transaction_id\", $this->transaction_id);\n        $stmt->bindParam(\":status\", $this->status);\n\n        if ($stmt->execute()) {\n            $this->id = $this->conn->lastInsertId();\n            return true;\n        }\n\n        return false;\n    }\n\n    // Check if user has purchased a video\n    public function hasPurchased($viewer_id, $video_id) {\n        $query = \"SELECT id FROM \" . $this->table_name . \" \n                  WHERE user_id_new = :viewer_id AND video_id = :video_id AND status = 'completed' \n                  LIMIT 1\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(\":viewer_id\", $viewer_id);\n        $stmt->bindParam(\":video_id\", $video_id);\n        $stmt->execute();\n\n        return $stmt->fetch(PDO::FETCH_ASSOC) !== false;\n    }\n\n    // Get total earnings for a creator\n    public function getCreatorEarnings($creator_id) {\n        $query = \"SELECT COALESCE(SUM(p.amount), 0) as total_earnings\n                  FROM \" . $this->table_name . \" p\n                  JOIN videos v ON p.video_id = v.id\n                  WHERE v.user_id = :creator_id\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(\":creator_id\", $creator_id);\n        $stmt->execute();\n\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        return $row['total_earnings'];\n    }\n}\n?>","size_bytes":5775},"api/models/User.php":{"content":"<?php\n/**\n * User Model for VideoHub\n */\n\nclass User {\n    private $conn;\n    private $table_name = \"users\";\n\n    public $id;\n    public $name;\n    public $email;\n    public $role;\n    public $status;\n    public $email_verified;\n    public $email_verified_at;\n    public $created_at;\n    public $updated_at;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Get all users with optional filters\n    public function read($filters = []) {\n        $this->createEmailVerifiedColumnIfNotExists();\n        $query = \"SELECT id, name, email, role, status, email_verified_at, created_at, updated_at FROM \" . $this->table_name;\n        $conditions = [];\n        $params = [];\n\n        if (isset($filters['role']) && !empty($filters['role'])) {\n            $conditions[] = \"role = :role\";\n            $params[':role'] = $filters['role'];\n        }\n\n        if (isset($filters['status']) && !empty($filters['status'])) {\n            $conditions[] = \"status = :status\";\n            $params[':status'] = $filters['status'];\n        }\n\n        if (isset($filters['search']) && !empty($filters['search'])) {\n            $conditions[] = \"(name LIKE :search OR email LIKE :search)\";\n            $params[':search'] = '%' . $filters['search'] . '%';\n        }\n\n        if (!empty($conditions)) {\n            $query .= \" WHERE \" . implode(\" AND \", $conditions);\n        }\n\n        $query .= \" ORDER BY created_at DESC\";\n\n        // Add pagination\n        if (isset($filters['limit'])) {\n            $offset = isset($filters['offset']) ? $filters['offset'] : 0;\n            $query .= \" LIMIT :offset, :limit\";\n            $params[':offset'] = $offset;\n            $params[':limit'] = $filters['limit'];\n        }\n\n        $stmt = $this->conn->prepare($query);\n        \n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value, is_int($value) ? PDO::PARAM_INT : PDO::PARAM_STR);\n        }\n        \n        $stmt->execute();\n        return $stmt;\n    }\n\n    // Get single user by ID\n    public function readOne() {\n        $this->createEmailVerifiedColumnIfNotExists();\n        $query = \"SELECT id, name, email, role, status, email_verified, email_verified_at, created_at, updated_at FROM \" . $this->table_name . \" WHERE id = ? LIMIT 0,1\";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(1, $this->id);\n        $stmt->execute();\n\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($row) {\n            $this->name = $row['name'];\n            $this->email = $row['email'];\n            $this->role = $row['role'];\n            $this->status = $row['status'];\n            $this->email_verified = $row['email_verified'];\n            $this->email_verified_at = $row['email_verified_at'];\n            $this->created_at = $row['created_at'];\n            $this->updated_at = $row['updated_at'];\n            return true;\n        }\n\n        return false;\n    }\n\n    // Create user\n    public function create() {\n        // Ensure status column exists\n        $this->createStatusColumnIfNotExists();\n        \n        $query = \"INSERT INTO \" . $this->table_name . \" SET name=:name, email=:email, role=:role, status=:status, password=:password, created_at=NOW(), updated_at=NOW()\";\n\n        $stmt = $this->conn->prepare($query);\n\n        // Sanitize\n        $this->name = htmlspecialchars(strip_tags($this->name));\n        $this->email = htmlspecialchars(strip_tags($this->email));\n        $this->role = htmlspecialchars(strip_tags($this->role));\n        $this->status = htmlspecialchars(strip_tags($this->status ?? 'active'));\n        \n        // Generate random password for admin-created users\n        $randomPassword = password_hash(bin2hex(random_bytes(16)), PASSWORD_DEFAULT);\n\n        // Bind values\n        $stmt->bindParam(\":name\", $this->name);\n        $stmt->bindParam(\":email\", $this->email);\n        $stmt->bindParam(\":role\", $this->role);\n        $stmt->bindParam(\":status\", $this->status);\n        $stmt->bindParam(\":password\", $randomPassword);\n\n        if ($stmt->execute()) {\n            $this->id = $this->conn->lastInsertId();\n            return true;\n        }\n\n        return false;\n    }\n\n    // Update user\n    public function update() {\n        // First check if status column exists, if not create it\n        $this->createStatusColumnIfNotExists();\n        \n        $query = \"UPDATE \" . $this->table_name . \" SET name=:name, email=:email, role=:role, status=:status, updated_at=NOW() WHERE id=:id\";\n\n        $stmt = $this->conn->prepare($query);\n\n        // Sanitize\n        $this->name = htmlspecialchars(strip_tags($this->name));\n        $this->email = htmlspecialchars(strip_tags($this->email));\n        $this->role = htmlspecialchars(strip_tags($this->role));\n        $this->status = htmlspecialchars(strip_tags($this->status));\n        $this->id = htmlspecialchars(strip_tags($this->id));\n\n        // Bind values\n        $stmt->bindParam(\":name\", $this->name);\n        $stmt->bindParam(\":email\", $this->email);\n        $stmt->bindParam(\":role\", $this->role);\n        $stmt->bindParam(\":status\", $this->status);\n        $stmt->bindParam(\":id\", $this->id);\n\n        if ($stmt->execute()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Delete user\n    public function delete() {\n        $query = \"DELETE FROM \" . $this->table_name . \" WHERE id = ?\";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(1, $this->id);\n\n        if ($stmt->execute()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Get total count for pagination\n    public function count($filters = []) {\n        $query = \"SELECT COUNT(*) as total FROM \" . $this->table_name;\n        $conditions = [];\n        $params = [];\n\n        if (isset($filters['role']) && !empty($filters['role'])) {\n            $conditions[] = \"role = :role\";\n            $params[':role'] = $filters['role'];\n        }\n\n        if (isset($filters['status']) && !empty($filters['status'])) {\n            $conditions[] = \"status = :status\";\n            $params[':status'] = $filters['status'];\n        }\n\n        if (isset($filters['search']) && !empty($filters['search'])) {\n            $conditions[] = \"(name LIKE :search OR email LIKE :search)\";\n            $params[':search'] = '%' . $filters['search'] . '%';\n        }\n\n        if (!empty($conditions)) {\n            $query .= \" WHERE \" . implode(\" AND \", $conditions);\n        }\n\n        $stmt = $this->conn->prepare($query);\n        \n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value);\n        }\n        \n        $stmt->execute();\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return $row['total'];\n    }\n    \n    /**\n     * Create email_verified_at column if it doesn't exist\n     */\n    public function createEmailVerifiedColumnIfNotExists() {\n        try {\n            // Check if column exists\n            $stmt = $this->conn->prepare(\"SHOW COLUMNS FROM \" . $this->table_name . \" LIKE 'email_verified_at'\");\n            $stmt->execute();\n            \n            if ($stmt->rowCount() === 0) {\n                // Column doesn't exist, create it\n                $alterQuery = \"ALTER TABLE \" . $this->table_name . \" ADD COLUMN email_verified_at DATETIME NULL\";\n                $this->conn->exec($alterQuery);\n                error_log(\"Added email_verified_at column to users table\");\n            }\n        } catch (PDOException $e) {\n            error_log(\"Error checking/creating email_verified_at column: \" . $e->getMessage());\n        }\n    }\n    \n    /**\n     * Check if user email is verified\n     */\n    public function isEmailVerified() {\n        return $this->email_verified_at !== null;\n    }\n    \n    /**\n     * Mark email as verified\n     */\n    public function markEmailVerified() {\n        $query = \"UPDATE \" . $this->table_name . \" SET email_verified_at = NOW(), status = 'active' WHERE id = ?\";\n        $stmt = $this->conn->prepare($query);\n        \n        if ($stmt->execute([$this->id])) {\n            $this->email_verified_at = date('Y-m-d H:i:s');\n            return true;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Create status column if it doesn't exist\n     */\n    public function createStatusColumnIfNotExists() {\n        try {\n            // Check if column exists\n            $stmt = $this->conn->prepare(\"SHOW COLUMNS FROM \" . $this->table_name . \" LIKE 'status'\");\n            $stmt->execute();\n            \n            if ($stmt->rowCount() === 0) {\n                // Column doesn't exist, create it\n                $alterQuery = \"ALTER TABLE \" . $this->table_name . \" ADD COLUMN status ENUM('active', 'inactive', 'suspended', 'revoked') DEFAULT 'active'\";\n                $this->conn->exec($alterQuery);\n                error_log(\"Added status column to users table\");\n            }\n        } catch (PDOException $e) {\n            error_log(\"Error checking/creating status column: \" . $e->getMessage());\n        }\n    }\n    \n    /**\n     * Check if user has revoked access\n     */\n    public function isRevoked() {\n        return $this->status === 'revoked';\n    }\n    \n    /**\n     * Revoke user access\n     */\n    public function revokeAccess() {\n        $this->status = 'revoked';\n        return $this->update();\n    }\n}\n?>","size_bytes":9291},"api/models/Video.php":{"content":"<?php\n/**\n * Video Model for VideoHub\n */\n\nclass Video {\n    private $conn;\n    private $table_name = \"videos\";\n\n    public $id;\n    public $title;\n    public $description;\n    public $user_id;\n    public $uploader_name;\n    public $price;\n    public $category;\n    public $file_path;\n    public $youtube_id;\n    public $youtube_thumbnail;\n    public $is_youtube_synced;\n    public $youtube_channel_id;\n    public $youtube_channel_title;\n    public $youtube_views;\n    public $youtube_likes;\n    public $youtube_comments;\n    public $views;\n    public $likes;\n    public $status;\n    public $thumbnail;\n    public $earnings;\n    public $tags;\n    public $file_size;\n    public $quality;\n    public $created_at;\n    public $updated_at;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Get all videos with optional filters\n    public function read($filters = []) {\n        $query = \"SELECT v.*, u.name as creator_name FROM \" . $this->table_name . \" v \n                  LEFT JOIN users u ON v.user_id = u.id\";\n        \n        $conditions = [];\n        $params = [];\n\n        if (isset($filters['uploader_id']) && !empty($filters['uploader_id'])) {\n            $conditions[] = \"v.user_id = :uploader_id\";\n            $params[':uploader_id'] = $filters['uploader_id'];\n        }\n\n        if (isset($filters['category']) && !empty($filters['category'])) {\n            $conditions[] = \"v.category = :category\";\n            $params[':category'] = $filters['category'];\n        }\n\n        if (isset($filters['search']) && !empty($filters['search'])) {\n            $conditions[] = \"(v.title LIKE :search OR v.description LIKE :search)\";\n            $params[':search'] = '%' . $filters['search'] . '%';\n        }\n\n        if (!empty($conditions)) {\n            $query .= \" WHERE \" . implode(\" AND \", $conditions);\n        }\n\n        $query .= \" ORDER BY v.created_at DESC\";\n\n        // Add pagination\n        if (isset($filters['limit'])) {\n            $offset = isset($filters['offset']) ? $filters['offset'] : 0;\n            $query .= \" LIMIT :offset, :limit\";\n            $params[':offset'] = $offset;\n            $params[':limit'] = $filters['limit'];\n        }\n\n        $stmt = $this->conn->prepare($query);\n        \n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value, is_int($value) ? PDO::PARAM_INT : PDO::PARAM_STR);\n        }\n        \n        $stmt->execute();\n        return $stmt;\n    }\n\n    // Get single video by ID\n    public function readOne() {\n        $query = \"SELECT * FROM \" . $this->table_name . \" WHERE id = ? LIMIT 0,1\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(1, $this->id);\n        $stmt->execute();\n\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($row) {\n            $this->title = $row['title'];\n            $this->description = $row['description'];\n            $this->creator_id = $row['user_id'];\n            $this->price = $row['price'];\n            $this->category = $row['category'];\n            $this->upload_date = $row['created_at'] ?? null;\n            $this->views = $row['views'];\n            $this->likes = $row['youtube_likes'] ?? null;\n            $this->status = $row['status'];\n            $this->thumbnail = $row['thumbnail'];\n            $this->earnings = null; // Not stored in this table\n            $this->tags = null; // Not stored in this table\n            $this->file_size = null; // Not stored in this table\n            $this->quality = null; // Not stored in this table\n            $this->created_at = $row['created_at'];\n            $this->updated_at = null; // Not stored in this table\n            $this->youtube_id = $row['youtube_id'] ?? null;\n            return true;\n        }\n\n        return false;\n    }\n\n    // Create video (fixed to match actual database schema)\n    public function create() {\n        $query = \"INSERT INTO \" . $this->table_name . \" \n                  SET title=:title, description=:description, user_id=:user_id, \n                      price=:price, category=:category, youtube_id=:youtube_id,\n                      thumbnail=:thumbnail, status=:status,\n                      created_at=NOW()\";\n\n        $stmt = $this->conn->prepare($query);\n\n        // Sanitize\n        $this->title = htmlspecialchars(strip_tags($this->title));\n        $this->description = htmlspecialchars(strip_tags($this->description));\n        $this->user_id = htmlspecialchars(strip_tags($this->user_id));\n        $this->price = htmlspecialchars(strip_tags($this->price));\n        $this->category = htmlspecialchars(strip_tags($this->category));\n        $this->youtube_id = htmlspecialchars(strip_tags($this->youtube_id ?? ''));\n        $this->thumbnail = htmlspecialchars(strip_tags($this->thumbnail ?? ''));\n        $this->status = htmlspecialchars(strip_tags($this->status));\n\n        // Bind values\n        $stmt->bindParam(\":title\", $this->title);\n        $stmt->bindParam(\":description\", $this->description);\n        $stmt->bindParam(\":user_id\", $this->user_id);\n        $stmt->bindParam(\":price\", $this->price);\n        $stmt->bindParam(\":category\", $this->category);\n        $stmt->bindParam(\":youtube_id\", $this->youtube_id);\n        $stmt->bindParam(\":thumbnail\", $this->thumbnail);\n        $stmt->bindParam(\":status\", $this->status);\n\n        if ($stmt->execute()) {\n            $this->id = $this->conn->lastInsertId();\n            return true;\n        }\n\n        return false;\n    }\n\n    // Update video\n    public function update() {\n        $query = \"UPDATE \" . $this->table_name . \" \n                  SET title=:title, description=:description, price=:price, \n                      category=:category, thumbnail=:thumbnail, status=:status\n                  WHERE id=:id\";\n\n        $stmt = $this->conn->prepare($query);\n\n        // Sanitize - only sanitize non-null values\n        $this->title = htmlspecialchars(strip_tags($this->title ?? ''));\n        $this->description = htmlspecialchars(strip_tags($this->description ?? ''));\n        $this->price = htmlspecialchars(strip_tags($this->price ?? ''));\n        $this->category = htmlspecialchars(strip_tags($this->category ?? ''));\n        $this->thumbnail = htmlspecialchars(strip_tags($this->thumbnail ?? ''));\n        $this->status = htmlspecialchars(strip_tags($this->status ?? ''));\n        $this->id = htmlspecialchars(strip_tags($this->id ?? ''));\n\n        // Bind values\n        $stmt->bindParam(\":title\", $this->title);\n        $stmt->bindParam(\":description\", $this->description);\n        $stmt->bindParam(\":price\", $this->price);\n        $stmt->bindParam(\":category\", $this->category);\n        $stmt->bindParam(\":thumbnail\", $this->thumbnail);\n        $stmt->bindParam(\":status\", $this->status);\n        $stmt->bindParam(\":id\", $this->id);\n\n        if ($stmt->execute()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Update video status only\n    public function updateStatus() {\n        $query = \"UPDATE \" . $this->table_name . \" SET status = :status WHERE id = :id\";\n        $stmt = $this->conn->prepare($query);\n\n        // Clean data\n        $this->status = htmlspecialchars(strip_tags($this->status ?? ''));\n        $this->id = htmlspecialchars(strip_tags($this->id ?? ''));\n\n        // Bind values\n        $stmt->bindParam(\":status\", $this->status);\n        $stmt->bindParam(\":id\", $this->id);\n\n        if ($stmt->execute()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Delete video\n    public function delete() {\n        $query = \"DELETE FROM \" . $this->table_name . \" WHERE id = ?\";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(1, $this->id);\n\n        if ($stmt->execute()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Get all videos with optional filters (alias for read method)\n    public function readAll($filters = []) {\n        $stmt = $this->read($filters);\n        $videos = [];\n        \n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $videos[] = $row;\n        }\n        \n        return $videos;\n    }\n    \n    // Get creator statistics\n    public function getCreatorStats($creatorId = null) {\n        if (!$creatorId) {\n            $creatorId = 1; // Default creator for demo\n        }\n        \n        $query = \"SELECT \n                    COUNT(*) as totalVideos,\n                    COALESCE(SUM(views), 0) as totalViews,\n                    COALESCE(SUM(youtube_likes), 0) as totalLikes,\n                    COALESCE(SUM(CAST(price AS DECIMAL(10,2))), 0) as totalEarnings\n                  FROM \" . $this->table_name . \" \n                  WHERE user_id = :creator_id\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(':user_id', $creatorId);\n        $stmt->execute();\n        \n        $stats = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return [\n            'totalVideos' => (int)$stats['totalVideos'],\n            'totalViews' => (int)$stats['totalViews'],\n            'totalLikes' => (int)$stats['totalLikes'],\n            'totalEarnings' => (float)$stats['totalEarnings']\n        ];\n    }\n    \n    // Get creator earnings from purchases table\n    public function getCreatorEarnings($creatorId = null) {\n        if (!$creatorId) {\n            $creatorId = 1; // Default creator for demo\n        }\n        \n        $query = \"SELECT \n                    p.id,\n                    v.title as videoTitle,\n                    CAST(p.amount AS DECIMAL(10,2)) as amount,\n                    p.purchase_date as date,\n                    COALESCE(p.status, 'completed') as status,\n                    u.name as viewerName\n                  FROM purchases p\n                  JOIN videos v ON p.video_id = v.id\n                  LEFT JOIN users u ON p.user_id_new = u.id\n                  WHERE v.user_id = :creator_id\n                  ORDER BY p.purchase_date DESC\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(':creator_id', $creatorId);\n        $stmt->execute();\n        \n        $earnings = [];\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $earnings[] = [\n                'id' => $row['id'],\n                'creatorId' => $creatorId,\n                'amount' => (float)$row['amount'],\n                'date' => $row['date'],\n                'videoTitle' => $row['videoTitle'],\n                'viewerName' => $row['viewerName'] ?? 'Anonymous',\n                'status' => $row['status']\n            ];\n        }\n        \n        return $earnings;\n    }\n\n    // Update views count\n    public function incrementViews() {\n        $query = \"UPDATE \" . $this->table_name . \" SET views = views + 1 WHERE id = :id\";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(\":id\", $this->id);\n        return $stmt->execute();\n    }\n\n    // Update likes count\n    public function incrementLikes() {\n        $query = \"UPDATE \" . $this->table_name . \" SET likes = likes + 1 WHERE id = :id\";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(\":id\", $this->id);\n        return $stmt->execute();\n    }\n}\n?>","size_bytes":11120},"api/oauth/youtube.php":{"content":"<?php\n/**\n * YouTube OAuth2 Callback Handler\n * Handles the OAuth2 authorization code exchange\n */\n\nrequire_once __DIR__ . '/../config/database.php';\n\n// OAuth2 configuration\n$clientId = '824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com';\n$clientSecret = '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';\n$redirectUri = 'http://localhost:5000/api/oauth/youtube.php';\n\ntry {\n    if (isset($_GET['code'])) {\n        // Exchange authorization code for tokens\n        $code = $_GET['code'];\n        \n        $tokenUrl = 'https://oauth2.googleapis.com/token';\n        $postData = [\n            'client_id' => $clientId,\n            'client_secret' => $clientSecret,\n            'code' => $code,\n            'grant_type' => 'authorization_code',\n            'redirect_uri' => $redirectUri\n        ];\n        \n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $tokenUrl);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-www-form-urlencoded'\n        ]);\n        \n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        \n        if ($httpCode === 200) {\n            $tokenData = json_decode($response, true);\n            \n            if (isset($tokenData['access_token'])) {\n                // Save tokens to database\n                $database = new Database();\n                $db = $database->getConnection();\n                \n                $userId = 7; // In production, get from authenticated session\n                $accessToken = $tokenData['access_token'];\n                $refreshToken = $tokenData['refresh_token'] ?? null;\n                $expiresIn = $tokenData['expires_in'] ?? 3600;\n                $expiresAt = date('Y-m-d H:i:s', time() + $expiresIn);\n                \n                // Create table if not exists\n                $createTableSQL = \"CREATE TABLE IF NOT EXISTS youtube_tokens (\n                    id INT AUTO_INCREMENT PRIMARY KEY,\n                    user_id INT NOT NULL,\n                    access_token TEXT,\n                    refresh_token TEXT,\n                    expires_at DATETIME,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n                    UNIQUE KEY unique_user (user_id)\n                )\";\n                $db->exec($createTableSQL);\n                \n                // Insert or update tokens\n                $stmt = $db->prepare(\"\n                    INSERT INTO youtube_tokens (user_id, access_token, refresh_token, expires_at) \n                    VALUES (?, ?, ?, ?)\n                    ON DUPLICATE KEY UPDATE \n                    access_token = VALUES(access_token),\n                    refresh_token = COALESCE(VALUES(refresh_token), refresh_token),\n                    expires_at = VALUES(expires_at),\n                    updated_at = CURRENT_TIMESTAMP\n                \");\n                \n                if ($stmt->execute([$userId, $accessToken, $refreshToken, $expiresAt])) {\n                    // Send success message to parent window\n                    echo '<script>\n                        if (window.opener) {\n                            window.opener.postMessage({\n                                type: \"YOUTUBE_AUTH_SUCCESS\",\n                                tokens: {\n                                    access_token: \"' . $accessToken . '\",\n                                    refresh_token: \"' . ($refreshToken ?: '') . '\",\n                                    expires_at: \"' . $expiresAt . '\"\n                                }\n                            }, \"*\");\n                            window.close();\n                        } else {\n                            document.body.innerHTML = \"<h3>Authentication successful! You can close this window.</h3>\";\n                        }\n                    </script>';\n                } else {\n                    throw new Exception('Failed to save tokens to database');\n                }\n            } else {\n                throw new Exception('No access token in response');\n            }\n        } else {\n            throw new Exception('Token exchange failed: HTTP ' . $httpCode);\n        }\n        \n    } elseif (isset($_GET['error'])) {\n        // Handle OAuth error\n        $error = $_GET['error'];\n        $errorDescription = $_GET['error_description'] ?? '';\n        \n        echo '<script>\n            if (window.opener) {\n                window.opener.postMessage({\n                    type: \"YOUTUBE_AUTH_ERROR\",\n                    error: \"' . htmlspecialchars($error) . '\",\n                    description: \"' . htmlspecialchars($errorDescription) . '\"\n                }, \"*\");\n                window.close();\n            } else {\n                document.body.innerHTML = \"<h3>Authentication failed: ' . htmlspecialchars($error) . '</h3>\";\n            }\n        </script>';\n    } else {\n        throw new Exception('No authorization code or error received');\n    }\n    \n} catch (Exception $e) {\n    echo '<script>\n        if (window.opener) {\n            window.opener.postMessage({\n                type: \"YOUTUBE_AUTH_ERROR\",\n                error: \"oauth_error\",\n                description: \"' . htmlspecialchars($e->getMessage()) . '\"\n            }, \"*\");\n            window.close();\n        } else {\n            document.body.innerHTML = \"<h3>Error: ' . htmlspecialchars($e->getMessage()) . '</h3>\";\n        }\n    </script>';\n}\n?>","size_bytes":5709},"api/services/EmailService.php":{"content":"<?php\n/**\n * Email Service for VideoHub\n * Handles email sending functionality using SMTP\n */\n\nrequire_once __DIR__ . '/../config/email.php';\n\nclass EmailService {\n    private $smtp_host;\n    private $smtp_port;\n    private $smtp_username;\n    private $smtp_password;\n    private $smtp_from_email;\n    private $smtp_from_name;\n    private $smtp_encryption;\n    \n    public function __construct() {\n        $this->smtp_host = SMTP_HOST;\n        $this->smtp_port = SMTP_PORT;\n        $this->smtp_username = SMTP_USERNAME;\n        $this->smtp_password = SMTP_PASSWORD;\n        $this->smtp_from_email = SMTP_FROM_EMAIL;\n        $this->smtp_from_name = SMTP_FROM_NAME;\n        $this->smtp_encryption = SMTP_ENCRYPTION;\n    }\n    \n    /**\n     * Send email verification\n     */\n    public function sendVerificationEmail($email, $name, $token) {\n        $subject = VERIFICATION_EMAIL_SUBJECT;\n        $verificationUrl = APP_URL . \"/auth/email-verification.html?token=\" . $token . \"&email=\" . urlencode($email);\n        \n        $body = $this->getVerificationEmailTemplate($name, $verificationUrl);\n        \n        return $this->sendEmailSMTP($email, $name, $subject, $body);\n    }\n    \n    /**\n     * Send password reset email\n     */\n    public function sendPasswordResetEmail($email, $name, $token) {\n        $subject = PASSWORD_RESET_EMAIL_SUBJECT;\n        $resetUrl = APP_URL . \"/auth/set-password.html?token=\" . $token . \"&email=\" . urlencode($email);\n        \n        $body = $this->getPasswordResetEmailTemplate($name, $resetUrl);\n        \n        return $this->sendEmailSMTP($email, $name, $subject, $body);\n    }\n    \n    /**\n     * Send email using SMTP\n     */\n    private function sendEmail($to_email, $to_name, $subject, $body) {\n        try {\n            // Email headers\n            $headers = [\n                'MIME-Version: 1.0',\n                'Content-type: text/html; charset=UTF-8',\n                'From: ' . $this->smtp_from_name . ' <' . $this->smtp_from_email . '>',\n                'Reply-To: ' . $this->smtp_from_email,\n                'X-Mailer: PHP/' . phpversion()\n            ];\n            \n            // Use PHPMailer-like functionality with built-in mail function\n            // For production, consider using PHPMailer library\n            $success = mail(\n                $to_email,\n                $subject,\n                $body,\n                implode(\"\\r\\n\", $headers)\n            );\n            \n            if ($success) {\n                error_log(\"Email sent successfully to: \" . $to_email);\n                return true;\n            } else {\n                error_log(\"Failed to send email to: \" . $to_email);\n                return false;\n            }\n            \n        } catch (Exception $e) {\n            error_log(\"Email sending error: \" . $e->getMessage());\n            return false;\n        }\n    }\n    \n    /**\n     * Send email using SMTP with socket connection\n     */\n    public function sendEmailSMTP($to_email, $to_name, $subject, $body) {\n        try {\n            // Create socket connection\n            $errno = 0;\n            $errstr = '';\n            $socket = fsockopen($this->smtp_host, $this->smtp_port, $errno, $errstr, 30);\n            if (!$socket) {\n                throw new Exception(\"Could not connect to SMTP server: $errstr ($errno)\");\n            }\n            \n            // Read initial response\n            $this->readSMTPResponse($socket);\n            \n            // EHLO command\n            fwrite($socket, \"EHLO \" . gethostname() . \"\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            // STARTTLS if using TLS\n            if ($this->smtp_encryption === 'tls') {\n                fwrite($socket, \"STARTTLS\\r\\n\");\n                $this->readSMTPResponse($socket);\n                \n                if (!stream_socket_enable_crypto($socket, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) {\n                    throw new Exception(\"Failed to enable TLS encryption\");\n                }\n                \n                // Send EHLO again after TLS\n                fwrite($socket, \"EHLO \" . gethostname() . \"\\r\\n\");\n                $this->readSMTPResponse($socket);\n            }\n            \n            // Authentication\n            fwrite($socket, \"AUTH LOGIN\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            fwrite($socket, base64_encode($this->smtp_username) . \"\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            fwrite($socket, base64_encode($this->smtp_password) . \"\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            // MAIL FROM\n            fwrite($socket, \"MAIL FROM: <\" . $this->smtp_from_email . \">\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            // RCPT TO\n            fwrite($socket, \"RCPT TO: <\" . $to_email . \">\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            // DATA\n            fwrite($socket, \"DATA\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            // Email content\n            $email_content = \"From: \" . $this->smtp_from_name . \" <\" . $this->smtp_from_email . \">\\r\\n\";\n            $email_content .= \"To: \" . $to_name . \" <\" . $to_email . \">\\r\\n\";\n            $email_content .= \"Subject: \" . $subject . \"\\r\\n\";\n            $email_content .= \"MIME-Version: 1.0\\r\\n\";\n            $email_content .= \"Content-Type: text/html; charset=UTF-8\\r\\n\";\n            $email_content .= \"\\r\\n\";\n            $email_content .= $body . \"\\r\\n\";\n            $email_content .= \".\\r\\n\";\n            \n            fwrite($socket, $email_content);\n            $this->readSMTPResponse($socket);\n            \n            // QUIT\n            fwrite($socket, \"QUIT\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            fclose($socket);\n            \n            error_log(\"Email sent successfully via SMTP to: \" . $to_email);\n            return true;\n            \n        } catch (Exception $e) {\n            error_log(\"SMTP Email sending error: \" . $e->getMessage());\n            if (isset($socket) && is_resource($socket)) {\n                fclose($socket);\n            }\n            return false;\n        }\n    }\n    \n    /**\n     * Read SMTP response\n     */\n    private function readSMTPResponse($socket) {\n        $response = '';\n        while (($line = fgets($socket, 515)) !== false) {\n            $response .= $line;\n            if (substr($line, 3, 1) === ' ') {\n                break;\n            }\n        }\n        \n        $code = intval(substr($response, 0, 3));\n        if ($code >= 400) {\n            throw new Exception(\"SMTP Error: \" . $response);\n        }\n        \n        return $response;\n    }\n    \n    /**\n     * Get verification email template\n     */\n    private function getVerificationEmailTemplate($name, $verificationUrl) {\n        return '\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Email Verification - VideoHub</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: #007bff; color: white; padding: 20px; text-align: center; }\n        .content { padding: 30px; background: #f8f9fa; }\n        .button { display: inline-block; padding: 12px 24px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n        .footer { text-align: center; padding: 20px; color: #666; font-size: 14px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>VideoHub</h1>\n            <p>Email Verification Required</p>\n        </div>\n        <div class=\"content\">\n            <h2>Hello ' . htmlspecialchars($name) . ',</h2>\n            <p>Thank you for registering with VideoHub! To complete your registration, please verify your email address by clicking the button below:</p>\n            \n            <p style=\"text-align: center;\">\n                <a href=\"' . htmlspecialchars($verificationUrl) . '\" class=\"button\">Verify Email Address</a>\n            </p>\n            \n            <p>If the button above doesn\\'t work, you can copy and paste the following URL into your browser:</p>\n            <p style=\"word-break: break-all; background: #e9ecef; padding: 10px; border-radius: 5px;\">\n                ' . htmlspecialchars($verificationUrl) . '\n            </p>\n            \n            <p><strong>Important:</strong> This verification link will expire in 24 hours for security reasons.</p>\n            \n            <p>If you didn\\'t create an account with VideoHub, you can safely ignore this email.</p>\n        </div>\n        <div class=\"footer\">\n            <p>&copy; 2025 VideoHub. All rights reserved.</p>\n            <p>This is an automated email, please do not reply.</p>\n        </div>\n    </div>\n</body>\n</html>';\n    }\n    \n    /**\n     * Get password reset email template\n     */\n    private function getPasswordResetEmailTemplate($name, $resetUrl) {\n        return '\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Reset - VideoHub</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: #dc3545; color: white; padding: 20px; text-align: center; }\n        .content { padding: 30px; background: #f8f9fa; }\n        .button { display: inline-block; padding: 12px 24px; background: #dc3545; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n        .footer { text-align: center; padding: 20px; color: #666; font-size: 14px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>VideoHub</h1>\n            <p>Password Reset Request</p>\n        </div>\n        <div class=\"content\">\n            <h2>Hello ' . htmlspecialchars($name) . ',</h2>\n            <p>We received a request to reset your password for your VideoHub account. Click the button below to set a new password:</p>\n            \n            <p style=\"text-align: center;\">\n                <a href=\"' . htmlspecialchars($resetUrl) . '\" class=\"button\">Reset Password</a>\n            </p>\n            \n            <p>If the button above doesn\\'t work, you can copy and paste the following URL into your browser:</p>\n            <p style=\"word-break: break-all; background: #e9ecef; padding: 10px; border-radius: 5px;\">\n                ' . htmlspecialchars($resetUrl) . '\n            </p>\n            \n            <p><strong>Important:</strong> This reset link will expire in 24 hours for security reasons.</p>\n            \n            <p>If you didn\\'t request a password reset, you can safely ignore this email. Your password will remain unchanged.</p>\n        </div>\n        <div class=\"footer\">\n            <p>&copy; 2025 VideoHub. All rights reserved.</p>\n            <p>This is an automated email, please do not reply.</p>\n        </div>\n    </div>\n</body>\n</html>';\n    }\n}\n?>","size_bytes":11206},"api/services/GoogleAuthService.php":{"content":"\n<?php\n/**\n * Google Authentication Service for VideoHub\n */\n\nclass GoogleAuthService {\n    private $clientId = '824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com';\n    \n    /**\n     * Verify Google JWT token\n     */\n    public function verifyGoogleToken($credential) {\n        // Decode the JWT token (basic implementation)\n        $parts = explode('.', $credential);\n        if (count($parts) !== 3) {\n            error_log('Invalid JWT token format: expected 3 parts, got ' . count($parts));\n            return false;\n        }\n        \n        try {\n            // Add padding if needed for base64 decoding\n            $payload_encoded = $parts[1];\n            $payload_encoded .= str_repeat('=', (4 - strlen($payload_encoded) % 4) % 4);\n            \n            // Decode the payload (second part)\n            $payload = json_decode(base64_decode(str_replace(['-', '_'], ['+', '/'], $payload_encoded)), true);\n            \n            if (!$payload) {\n                error_log('Failed to decode JWT payload');\n                return false;\n            }\n            \n            // Log payload for debugging (remove in production)\n            error_log('JWT payload: ' . json_encode($payload));\n            \n            // Verify the token is for our client\n            if (!isset($payload['aud']) || $payload['aud'] !== $this->clientId) {\n                error_log('Invalid audience: expected ' . $this->clientId . ', got ' . ($payload['aud'] ?? 'none'));\n                return false;\n            }\n            \n            // Check token expiration\n            if (!isset($payload['exp']) || $payload['exp'] < time()) {\n                error_log('Token expired: ' . ($payload['exp'] ?? 'no exp') . ' < ' . time());\n                return false;\n            }\n            \n            // Return user data\n            return [\n                'email' => $payload['email'] ?? '',\n                'name' => $payload['name'] ?? '',\n                'given_name' => $payload['given_name'] ?? '',\n                'family_name' => $payload['family_name'] ?? '',\n                'picture' => $payload['picture'] ?? '',\n                'email_verified' => $payload['email_verified'] ?? false\n            ];\n            \n        } catch (Exception $e) {\n            error_log('Google token verification error: ' . $e->getMessage());\n            return false;\n        }\n    }\n}\n?>\n","size_bytes":2400},"assets/css/app.css":{"content":"/* VideoHub - Enhanced Modern Design System */\n\n/* Advanced Color Palette & Design Tokens */\n:root {\n    /* Primary Brand Colors */\n    --primary-50: #f0f4ff;\n    --primary-100: #e0e9ff;\n    --primary-200: #c7d6fe;\n    --primary-300: #a5b4fc;\n    --primary-400: #818cf8;\n    --primary-500: #6366f1;\n    --primary-600: #4f46e5;\n    --primary-700: #4338ca;\n    --primary-800: #3730a3;\n    --primary-900: #312e81;\n\n    /* Secondary Palette */\n    --secondary-50: #fdf4ff;\n    --secondary-100: #fae8ff;\n    --secondary-200: #f5d0fe;\n    --secondary-300: #f0abfc;\n    --secondary-400: #e879f9;\n    --secondary-500: #d946ef;\n    --secondary-600: #c026d3;\n    --secondary-700: #a21caf;\n    --secondary-800: #86198f;\n    --secondary-900: #701a75;\n\n    /* Success Colors */\n    --success-50: #ecfdf5;\n    --success-100: #d1fae5;\n    --success-200: #a7f3d0;\n    --success-300: #6ee7b7;\n    --success-400: #34d399;\n    --success-500: #10b981;\n    --success-600: #059669;\n    --success-700: #047857;\n    --success-800: #065f46;\n    --success-900: #064e3b;\n\n    /* Warning Colors */\n    --warning-50: #fffbeb;\n    --warning-100: #fef3c7;\n    --warning-200: #fde68a;\n    --warning-300: #fcd34d;\n    --warning-400: #fbbf24;\n    --warning-500: #f59e0b;\n    --warning-600: #d97706;\n    --warning-700: #b45309;\n    --warning-800: #92400e;\n    --warning-900: #78350f;\n\n    /* Danger Colors */\n    --danger-50: #fef2f2;\n    --danger-100: #fee2e2;\n    --danger-200: #fecaca;\n    --danger-300: #fca5a5;\n    --danger-400: #f87171;\n    --danger-500: #ef4444;\n    --danger-600: #dc2626;\n    --danger-700: #b91c1c;\n    --danger-800: #991b1b;\n    --danger-900: #7f1d1d;\n\n    /* Neutral Grays */\n    --gray-50: #f9fafb;\n    --gray-100: #f3f4f6;\n    --gray-200: #e5e7eb;\n    --gray-300: #d1d5db;\n    --gray-400: #9ca3af;\n    --gray-500: #6b7280;\n    --gray-600: #4b5563;\n    --gray-700: #374151;\n    --gray-800: #1f2937;\n    --gray-900: #111827;\n\n    /* Surface Colors */\n    --surface-primary: #ffffff;\n    --surface-secondary: #f8fafc;\n    --surface-tertiary: #f1f5f9;\n    --surface-dark: #0f172a;\n    --surface-darker: #020617;\n\n    /* Border & Shadows */\n    --border-light: #e2e8f0;\n    --border-medium: #cbd5e1;\n    --border-dark: #64748b;\n\n    /* Advanced Shadows */\n    --shadow-xs: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n    --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n    --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n    --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n    --shadow-inner: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);\n\n    /* Colored Shadows */\n    --shadow-primary: 0 4px 14px 0 rgba(99, 102, 241, 0.2);\n    --shadow-secondary: 0 4px 14px 0 rgba(217, 70, 239, 0.2);\n    --shadow-success: 0 4px 14px 0 rgba(16, 185, 129, 0.2);\n    --shadow-warning: 0 4px 14px 0 rgba(245, 158, 11, 0.2);\n    --shadow-danger: 0 4px 14px 0 rgba(239, 68, 68, 0.2);\n\n    /* Border Radius */\n    --radius-xs: 0.125rem;\n    --radius-sm: 0.25rem;\n    --radius-md: 0.375rem;\n    --radius-lg: 0.5rem;\n    --radius-xl: 0.75rem;\n    --radius-2xl: 1rem;\n    --radius-3xl: 1.5rem;\n    --radius-full: 9999px;\n\n    /* Typography */\n    --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n    --font-mono: 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;\n\n    /* Transitions */\n    --transition-fast: 150ms cubic-bezier(0.4, 0, 0.2, 1);\n    --transition-base: 300ms cubic-bezier(0.4, 0, 0.2, 1);\n    --transition-slow: 500ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    /* Z-Index Scale */\n    --z-dropdown: 1000;\n    --z-sticky: 1020;\n    --z-fixed: 1030;\n    --z-modal-backdrop: 1040;\n    --z-modal: 1050;\n    --z-popover: 1060;\n    --z-tooltip: 1070;\n}\n\n/* Enhanced Base Styles */\n* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\nhtml {\n    scroll-behavior: smooth;\n    font-size: 16px;\n}\n\nbody {\n    font-family: var(--font-sans);\n    line-height: 1.6;\n    color: var(--gray-800);\n    background: linear-gradient(135deg, var(--gray-50) 0%, var(--primary-50) 100%);\n    min-height: 100vh;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n/* Advanced Gradient Backgrounds */\n.bg-gradient-primary {\n    background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-700) 50%, var(--primary-800) 100%);\n}\n\n.bg-gradient-secondary {\n    background: linear-gradient(135deg, var(--secondary-500) 0%, var(--secondary-600) 50%, var(--secondary-700) 100%);\n}\n\n.bg-gradient-success {\n    background: linear-gradient(135deg, var(--success-500) 0%, var(--success-600) 50%, var(--success-700) 100%);\n}\n\n.bg-gradient-mesh {\n    background: \n        radial-gradient(at 40% 20%, var(--primary-400) 0px, transparent 50%),\n        radial-gradient(at 80% 0%, var(--secondary-400) 0px, transparent 50%),\n        radial-gradient(at 0% 50%, var(--success-400) 0px, transparent 50%),\n        radial-gradient(at 80% 50%, var(--warning-400) 0px, transparent 50%),\n        radial-gradient(at 0% 100%, var(--danger-400) 0px, transparent 50%),\n        radial-gradient(at 80% 100%, var(--primary-400) 0px, transparent 50%),\n        radial-gradient(at 0% 0%, var(--secondary-400) 0px, transparent 50%);\n    background-size: 300% 300%;\n    animation: mesh-movement 20s ease infinite;\n}\n\n@keyframes mesh-movement {\n    0%, 100% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n}\n\n/* Enhanced Card System */\n.card {\n    background: var(--surface-primary);\n    border: 1px solid var(--border-light);\n    border-radius: var(--radius-xl);\n    box-shadow: var(--shadow-sm);\n    transition: all var(--transition-base);\n    overflow: hidden;\n    position: relative;\n}\n\n.card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(90deg, var(--primary-500), var(--secondary-500), var(--success-500));\n    opacity: 0;\n    transition: opacity var(--transition-base);\n}\n\n.card:hover {\n    /* transform: translateY(-4px);\n    box-shadow: var(--shadow-xl);\n    border-color: var(--primary-200); */\n}\n\n.card:hover::before {\n    opacity: 1;\n}\n\n.card-premium {\n    background: linear-gradient(135deg, var(--surface-primary) 0%, var(--primary-50) 100%);\n    border: 2px solid var(--primary-200);\n    box-shadow: var(--shadow-primary);\n}\n\n.card-glass {\n    background: rgba(255, 255, 255, 0.8);\n    backdrop-filter: blur(20px) saturate(180%);\n    -webkit-backdrop-filter: blur(20px) saturate(180%);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    box-shadow: var(--shadow-lg);\n}\n\n.card-gradient {\n    background: linear-gradient(135deg, var(--primary-600) 0%, var(--secondary-600) 100%);\n    color: white;\n    border: none;\n}\n\n/* Advanced Button System */\n.btn {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n    padding: 0.75rem 1.5rem;\n    font-family: var(--font-sans);\n    font-size: 0.875rem;\n    font-weight: 600;\n    line-height: 1;\n    text-decoration: none;\n    border: 2px solid transparent;\n    border-radius: var(--radius-lg);\n    cursor: pointer;\n    transition: all var(--transition-base);\n    position: relative;\n    overflow: hidden;\n    letter-spacing: 0.025em;\n}\n\n.btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left var(--transition-slow);\n}\n\n.btn:hover::before {\n    left: 100%;\n}\n\n.btn:active {\n    transform: scale(0.98);\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-700) 100%);\n    color: white;\n    box-shadow: var(--shadow-primary);\n}\n\n.btn-primary:hover {\n    background: linear-gradient(135deg, var(--primary-700) 0%, var(--primary-800) 100%);\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-lg), var(--shadow-primary);\n}\n\n.btn-secondary {\n    background: linear-gradient(135deg, var(--secondary-600) 0%, var(--secondary-700) 100%);\n    color: white;\n    box-shadow: var(--shadow-secondary);\n}\n\n.btn-success {\n    background: linear-gradient(135deg, var(--success-600) 0%, var(--success-700) 100%);\n    color: white;\n    box-shadow: var(--shadow-success);\n}\n\n.btn-outline-primary {\n    background: transparent;\n    color: var(--primary-600);\n    border-color: var(--primary-300);\n}\n\n.btn-outline-primary:hover {\n    background: var(--primary-600);\n    color: white;\n    border-color: var(--primary-600);\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-primary);\n}\n\n.btn-glass {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    color: white;\n}\n\n.btn-floating {\n    position: fixed;\n    bottom: 2rem;\n    right: 2rem;\n    width: 56px;\n    height: 56px;\n    border-radius: var(--radius-full);\n    background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\n    color: white;\n    box-shadow: var(--shadow-lg), var(--shadow-primary);\n    z-index: var(--z-fixed);\n    padding: 0;\n}\n\n.btn-floating:hover {\n    transform: scale(1.1) rotate(5deg);\n    box-shadow: var(--shadow-2xl), var(--shadow-primary);\n}\n\n/* Enhanced Forms */\n.form-control {\n    display: block;\n    width: 100%;\n    padding: 0.75rem 1rem;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: var(--gray-700);\n    background: var(--surface-primary);\n    border: 2px solid var(--border-light);\n    border-radius: var(--radius-lg);\n    transition: all var(--transition-base);\n    box-shadow: var(--shadow-xs);\n}\n\n.form-control:focus {\n    outline: none;\n    border-color: var(--primary-500);\n    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1), var(--shadow-sm);\n    transform: translateY(-1px);\n}\n\n.form-floating {\n    position: relative;\n}\n\n.form-floating > .form-control {\n    padding: 1rem 1rem 0.5rem;\n}\n\n.form-floating > label {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    padding: 1rem;\n    overflow: hidden;\n    text-align: start;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    pointer-events: none;\n    border: 2px solid transparent;\n    transform-origin: 0 0;\n    transition: all var(--transition-base);\n    color: var(--gray-500);\n}\n\n.form-floating > .form-control:focus ~ label,\n.form-floating > .form-control:not(:placeholder-shown) ~ label {\n    color: var(--primary-600);\n    transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);\n    font-weight: 600;\n}\n\n/* Enhanced Navigation */\n.navbar {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(20px) saturate(180%);\n    -webkit-backdrop-filter: blur(20px) saturate(180%);\n    border-bottom: 1px solid var(--border-light);\n    box-shadow: var(--shadow-sm);\n    transition: all var(--transition-base);\n}\n\n.navbar-brand {\n    font-weight: 800;\n    font-size: 1.5rem;\n    background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.nav-link {\n    font-weight: 500;\n    color: var(--gray-700);\n    padding: 0.5rem 1rem;\n    border-radius: var(--radius-md);\n    transition: all var(--transition-base);\n    position: relative;\n}\n\n.nav-link::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    width: 0;\n    height: 2px;\n    background: linear-gradient(90deg, var(--primary-600), var(--secondary-600));\n    transition: all var(--transition-base);\n    transform: translateX(-50%);\n}\n\n.nav-link:hover {\n    color: var(--primary-600);\n    background: var(--primary-50);\n}\n\n.nav-link:hover::after {\n    width: 80%;\n}\n\n.nav-link.active {\n    color: var(--primary-600);\n    background: var(--primary-100);\n}\n\n.nav-link.active::after {\n    width: 80%;\n}\n\n/* Enhanced Sidebar */\n.sidebar {\n    background: linear-gradient(180deg, var(--surface-primary) 0%, var(--surface-secondary) 100%);\n    border-right: 1px solid var(--border-light);\n    box-shadow: var(--shadow-sm);\n    min-height: 100vh;\n}\n\n.sidebar .nav-link {\n    margin: 0.25rem 0.75rem;\n    padding: 0.75rem 1rem;\n    border-radius: var(--radius-lg);\n    color: var(--gray-700);\n    font-weight: 500;\n    transition: all var(--transition-base);\n    position: relative;\n    overflow: hidden;\n}\n\n.sidebar .nav-link::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(99, 102, 241, 0.1), transparent);\n    transition: left var(--transition-slow);\n}\n\n.sidebar .nav-link:hover {\n    color: var(--primary-700);\n    background: var(--primary-50);\n    transform: translateX(4px);\n}\n\n.sidebar .nav-link:hover::before {\n    left: 100%;\n}\n\n.sidebar .nav-link.active {\n    color: white;\n    background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-700) 100%);\n    box-shadow: var(--shadow-primary);\n}\n\n.sidebar .nav-link i {\n    width: 1.25rem;\n    margin-right: 0.75rem;\n}\n\n/* Enhanced Video Components */\n.video-card {\n    background: var(--surface-primary);\n    border: 1px solid var(--border-light);\n    border-radius: var(--radius-xl);\n    overflow: hidden;\n    transition: all var(--transition-base);\n    box-shadow: var(--shadow-sm);\n    position: relative;\n}\n\n.video-card::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, rgba(99, 102, 241, 0.1) 0%, rgba(217, 70, 239, 0.1) 100%);\n    opacity: 0;\n    transition: opacity var(--transition-base);\n    pointer-events: none;\n}\n\n.video-card:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: var(--shadow-2xl);\n    border-color: var(--primary-200);\n}\n\n.video-card:hover::after {\n    opacity: 1;\n}\n\n.video-thumbnail {\n    position: relative;\n    aspect-ratio: 16/9;\n    overflow: hidden;\n    background: var(--gray-900);\n}\n\n.video-thumbnail img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    transition: transform var(--transition-slow);\n}\n\n.video-card:hover .video-thumbnail img {\n    transform: scale(1.1) rotate(1deg);\n}\n\n.video-overlay {\n    position: absolute;\n    inset: 0;\n    background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.7) 100%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    transition: all var(--transition-base);\n    backdrop-filter: blur(2px);\n}\n\n.video-card:hover .video-overlay {\n    opacity: 1;\n}\n\n.video-play-button {\n    width: 64px;\n    height: 64px;\n    background: rgba(255, 255, 255, 0.9);\n    border-radius: var(--radius-full);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: var(--primary-600);\n    font-size: 1.5rem;\n    transition: all var(--transition-base);\n    backdrop-filter: blur(10px);\n}\n\n.video-overlay:hover .video-play-button {\n    transform: scale(1.1);\n    background: white;\n}\n\n.video-duration {\n    position: absolute;\n    bottom: 0.5rem;\n    right: 0.5rem;\n    background: rgba(0, 0, 0, 0.8);\n    color: white;\n    padding: 0.25rem 0.5rem;\n    border-radius: var(--radius-sm);\n    font-size: 0.75rem;\n    font-weight: 600;\n    backdrop-filter: blur(10px);\n}\n\n.video-price {\n    position: absolute;\n    top: 0.5rem;\n    right: 0.5rem;\n    background: linear-gradient(135deg, var(--success-500) 0%, var(--success-600) 100%);\n    color: white;\n    padding: 0.25rem 0.75rem;\n    border-radius: var(--radius-full);\n    font-size: 0.75rem;\n    font-weight: 700;\n    box-shadow: var(--shadow-success);\n}\n\n/* Enhanced Statistics Cards */\n.stat-card {\n    background: linear-gradient(135deg, var(--surface-primary) 0%, var(--surface-secondary) 100%);\n    border: 1px solid var(--border-light);\n    border-radius: var(--radius-xl);\n    padding: 2rem;\n    transition: all var(--transition-base);\n    box-shadow: var(--shadow-sm);\n    position: relative;\n    overflow: hidden;\n}\n\n.stat-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 4px;\n    background: linear-gradient(90deg, var(--primary-500), var(--secondary-500));\n    transform: scaleX(0);\n    transition: transform var(--transition-base);\n    transform-origin: left;\n}\n\n.stat-card:hover {\n    transform: translateY(-4px);\n    box-shadow: var(--shadow-xl);\n}\n\n.stat-card:hover::before {\n    transform: scaleX(1);\n}\n\n.stat-icon {\n    width: 4rem;\n    height: 4rem;\n    border-radius: var(--radius-xl);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n    background: linear-gradient(135deg, var(--primary-100) 0%, var(--primary-200) 100%);\n    color: var(--primary-700);\n    box-shadow: var(--shadow-sm);\n}\n\n.stat-value {\n    font-size: 2.5rem;\n    font-weight: 800;\n    line-height: 1;\n    background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.stat-label {\n    color: var(--gray-600);\n    font-weight: 500;\n    font-size: 0.875rem;\n    margin-top: 0.5rem;\n}\n\n\n\n/* Enhanced Tables */\n.table {\n    border-radius: var(--radius-xl);\n    overflow: hidden;\n    box-shadow: var(--shadow-sm);\n    background: var(--surface-primary);\n}\n\n.table thead th {\n    background: linear-gradient(135deg, var(--gray-800) 0%, var(--gray-900) 100%);\n    color: white;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n    font-size: 0.75rem;\n    padding: 1rem;\n    border: none;\n}\n\n.table tbody tr {\n    transition: all var(--transition-base);\n    border-bottom: 1px solid var(--border-light);\n}\n\n.table tbody tr:hover {\n    background: var(--primary-50);\n    transform: scale(1.01);\n}\n\n.table tbody td {\n    padding: 1rem;\n    vertical-align: middle;\n}\n\n/* Enhanced Badges */\n.badge {\n    padding: 0.375rem 0.75rem;\n    font-size: 0.75rem;\n    font-weight: 600;\n    border-radius: var(--radius-full);\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n}\n\n.badge-primary {\n    background: linear-gradient(135deg, var(--primary-500) 0%, var(--primary-600) 100%);\n    color: white;\n    box-shadow: var(--shadow-primary);\n}\n\n.badge-success {\n    background: linear-gradient(135deg, var(--success-500) 0%, var(--success-600) 100%);\n    color: white;\n    box-shadow: var(--shadow-success);\n}\n\n.badge-warning {\n    background: linear-gradient(135deg, var(--warning-500) 0%, var(--warning-600) 100%);\n    color: white;\n    box-shadow: var(--shadow-warning);\n}\n\n.badge-danger {\n    background: linear-gradient(135deg, var(--danger-500) 0%, var(--danger-600) 100%);\n    color: white;\n    box-shadow: var(--shadow-danger);\n}\n\n/* Enhanced Progress Bars */\n.progress {\n    height: 0.75rem;\n    background: var(--gray-200);\n    border-radius: var(--radius-full);\n    overflow: hidden;\n    box-shadow: var(--shadow-inner);\n}\n\n.progress-bar {\n    background: linear-gradient(90deg, var(--primary-500) 0%, var(--secondary-500) 100%);\n    border-radius: var(--radius-full);\n    transition: width var(--transition-slow);\n    position: relative;\n    overflow: hidden;\n}\n\n.progress-bar::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n    animation: progress-shimmer 2s infinite;\n}\n\n@keyframes progress-shimmer {\n    0% { transform: translateX(-100%); }\n    100% { transform: translateX(100%); }\n}\n\n/* Enhanced Alerts */\n.alert {\n    border: none;\n    border-radius: var(--radius-xl);\n    padding: 1.5rem;\n    box-shadow: var(--shadow-sm);\n    position: relative;\n    overflow: hidden;\n}\n\n.alert::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 4px;\n    height: 100%;\n    background: currentColor;\n}\n\n.alert-primary {\n    background: linear-gradient(135deg, var(--primary-50) 0%, var(--primary-100) 100%);\n    color: var(--primary-800);\n    border-left: 4px solid var(--primary-500);\n}\n\n.alert-success {\n    background: linear-gradient(135deg, var(--success-50) 0%, var(--success-100) 100%);\n    color: var(--success-800);\n    border-left: 4px solid var(--success-500);\n}\n\n.alert-warning {\n    background: linear-gradient(135deg, var(--warning-50) 0%, var(--warning-100) 100%);\n    color: var(--warning-800);\n    border-left: 4px solid var(--warning-500);\n}\n\n.alert-danger {\n    background: linear-gradient(135deg, var(--danger-50) 0%, var(--danger-100) 100%);\n    color: var(--danger-800);\n    border-left: 4px solid var(--danger-500);\n}\n\n/* Advanced Animations */\n@keyframes float {\n    0%, 100% { transform: translateY(0) rotate(0deg); }\n    25% { transform: translateY(-10px) rotate(1deg); }\n    50% { transform: translateY(-5px) rotate(0deg); }\n    75% { transform: translateY(-15px) rotate(-1deg); }\n}\n\n@keyframes pulse-glow {\n    0%, 100% { box-shadow: 0 0 5px rgba(99, 102, 241, 0.5), 0 0 10px rgba(99, 102, 241, 0.3), 0 0 15px rgba(99, 102, 241, 0.2); }\n    50% { box-shadow: 0 0 20px rgba(99, 102, 241, 0.6), 0 0 30px rgba(99, 102, 241, 0.4), 0 0 40px rgba(99, 102, 241, 0.3); }\n}\n\n@keyframes slide-in-up {\n    from {\n        opacity: 0;\n        transform: translateY(30px) scale(0.9);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0) scale(1);\n    }\n}\n\n@keyframes fade-in-scale {\n    from {\n        opacity: 0;\n        transform: scale(0.8);\n    }\n    to {\n        opacity: 1;\n        transform: scale(1);\n    }\n}\n\n/* Animation Classes */\n.animate-float { animation: float 6s ease-in-out infinite; }\n.animate-pulse-glow { animation: pulse-glow 3s ease-in-out infinite; }\n.animate-slide-in-up { animation: slide-in-up 0.6s cubic-bezier(0.4, 0, 0.2, 1); }\n.animate-fade-in-scale { animation: fade-in-scale 0.5s cubic-bezier(0.4, 0, 0.2, 1); }\n\n/* Utility Classes */\n.glass {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(20px) saturate(180%);\n    -webkit-backdrop-filter: blur(20px) saturate(180%);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.gradient-text {\n    background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    font-weight: 700;\n}\n\n.hover-lift {\n    transition: transform var(--transition-base);\n}\n\n.hover-lift:hover {\n    transform: translateY(-4px);\n}\n\n.hover-scale {\n    transition: transform var(--transition-base);\n}\n\n.hover-scale:hover {\n    transform: scale(1.05);\n}\n\n.hover-rotate {\n    transition: transform var(--transition-base);\n}\n\n.hover-rotate:hover {\n    transform: rotate(5deg);\n}\n\n/* Custom Scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--gray-100);\n    border-radius: var(--radius-full);\n}\n\n::-webkit-scrollbar-thumb {\n    background: linear-gradient(135deg, var(--primary-500), var(--secondary-500));\n    border-radius: var(--radius-full);\n    transition: background var(--transition-base);\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .btn-floating {\n        bottom: 1rem;\n        right: 1rem;\n        width: 48px;\n        height: 48px;\n    }\n\n    .video-card:hover {\n        transform: none;\n    }\n\n    .stat-card {\n        padding: 1.5rem;\n    }\n\n    .modal-header,\n    .modal-body {\n        padding: 1.5rem;\n    }\n}\n\n/* Dark Mode Support */\n@media (prefers-color-scheme: dark) {\n    :root {\n        --surface-primary: var(--gray-900);\n        --surface-secondary: var(--gray-800);\n        --surface-tertiary: var(--gray-700);\n    }\n\n    body {\n        background: linear-gradient(135deg, var(--gray-900) 0%, var(--gray-800) 100%);\n        color: var(--gray-100);\n    }\n\n    .card {\n        background: var(--gray-800);\n        border-color: var(--gray-700);\n        color: var(--gray-100);\n    }\n\n    .navbar {\n        background: rgba(17, 24, 39, 0.95);\n        border-bottom-color: var(--gray-700);\n    }\n\n    .sidebar {\n        background: linear-gradient(180deg, var(--gray-900) 0%, var(--gray-800) 100%);\n        border-right-color: var(--gray-700);\n    }\n}\n\n/* Print Styles */\n@media print {\n    .sidebar,\n    .navbar,\n    .btn-floating,\n    .modal {\n        display: none !important;\n    }\n\n    .card {\n        box-shadow: none !important;\n        border: 1px solid var(--gray-300) !important;\n        break-inside: avoid;\n    }\n\n    body {\n        background: white !important;\n        color: black !important;\n    }\n}\n\n/* Focus States for Accessibility */\n.btn:focus,\n.form-control:focus,\n.nav-link:focus {\n    outline: 2px solid var(--primary-500);\n    outline-offset: 2px;\n}\n\n/* High Contrast Mode */\n@media (prefers-contrast: high) {\n    .card {\n        border: 2px solid currentColor;\n    }\n\n    .btn {\n        border: 2px solid currentColor;\n    }\n}\n\n/* Reduced Motion */\n@media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}\n\n/* Loading States */\n.skeleton {\n    background: linear-gradient(90deg, var(--gray-200) 25%, var(--gray-300) 50%, var(--gray-200) 75%);\n    background-size: 200% 100%;\n    animation: skeleton-loading 1.5s infinite;\n    border-radius: var(--radius-md);\n}\n\n@keyframes skeleton-loading {\n    0% { background-position: 200% 0; }\n    100% { background-position: -200% 0; }\n}\n\n.loading-overlay {\n    position: absolute;\n    inset: 0;\n    background: rgba(255, 255, 255, 0.9);\n    backdrop-filter: blur(4px);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: var(--z-modal);\n    border-radius: inherit;\n}\n\n.spinner {\n    width: 2rem;\n    height: 2rem;\n    border: 3px solid var(--gray-200);\n    border-top: 3px solid var(--primary-500);\n    border-radius: var(--radius-full);\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n","size_bytes":26366},"assets/js/admin.js":{"content":"\n/**\n * VideoHub Admin Panel Module\n * Handles admin dashboard functionality with API integration\n */\n\nclass AdminManager {\n    constructor() {\n        console.log('AdminManager constructor called');\n        \n        // Prevent multiple instances\n        if (window.adminManagerInstance) {\n            console.log('Returning existing AdminManager instance');\n            return window.adminManagerInstance;\n        }\n        \n        this.users = [];\n        this.videos = [];\n        this.stats = {};\n        this.usersTable = null;\n        this.currentUserId = null;\n        this.isInitializingTable = false;\n        this.dataLoaded = false;\n        this.tableInitialized = false;\n        this.handlersLoaded = false;\n        \n        // Store instance globally\n        window.adminManagerInstance = this;\n        console.log('New AdminManager instance created');\n        \n        this.init();\n    }\n\n    async init() {\n        this.bindEvents();\n        \n        // Load page-specific data\n        const currentPage = window.location.pathname.split('/').pop();\n        if (currentPage === 'dashboard.html') {\n            await this.loadDashboardData();\n        } else if (currentPage === 'users.html') {\n            // For users page, only initialize table once\n            await this.initUsersPage();\n        } else {\n            await this.waitForAPIService();\n        }\n        \n        this.loadPageSpecificHandlers();\n    }\n\n    async waitForAPIService() {\n        let retries = 0;\n        const maxRetries = 50;\n        \n        while (retries < maxRetries && !window.apiService) {\n            await new Promise(resolve => setTimeout(resolve, 100));\n            retries++;\n        }\n\n        // Only load data for non-dashboard and non-users pages\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        if (window.apiService && !this.dataLoaded && currentPage !== 'users.html') {\n            try {\n                if (currentPage === 'user-detail.html') {\n                    const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n                    const usersResponse = await window.apiService.get(`${apiUrl}/admin/users`);\n                    this.users = usersResponse.data || usersResponse.users || [];\n                    this.dataLoaded = true;\n                }\n                \n                if (currentPage === 'videos.html') {\n                    // const videosResponse = await window.apiService.get('/videos');\n                    // this.videos = videosResponse.data || videosResponse.videos || [];\n                    this.dataLoaded = true;\n                }\n            } catch (error) {\n                console.error('Failed to load data from API:', error);\n                this.users = [];\n                this.videos = [];\n            }\n        }\n    }\n\n    async loadDashboardData() {\n        // Prevent multiple concurrent loads using global state\n        if (window.VideoHubState && window.VideoHubState.isLoading('adminData')) {\n            console.log('Admin data loading already in progress, skipping...');\n            return;\n        }\n\n        try {\n            if (window.VideoHubState) {\n                window.VideoHubState.setLoading('adminData', true);\n            }\n\n            // Show section loaders\n            const metricsSection = document.querySelector('.admin-metrics');\n            const usersSection = document.querySelector('.admin-users');\n            const videosSection = document.querySelector('.admin-videos');\n\n            if (window.commonUtils) {\n                if (metricsSection) window.commonUtils.showSectionLoader(metricsSection, 'Loading admin metrics...');\n                if (usersSection) window.commonUtils.showSectionLoader(usersSection, 'Loading user data...');\n                if (videosSection) window.commonUtils.showSectionLoader(videosSection, 'Loading video data...');\n            }\n\n            // Wait for API service to be available\n            let retries = 0;\n            const maxRetries = 50;\n            \n            while (retries < maxRetries && !window.apiService) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n                retries++;\n            }\n\n            if (window.apiService) {\n                // Load admin metrics from new metrics API\n                try {\n                    const metricsResponse = await window.apiService.get('/api/endpoints/metrics.php?type=admin');\n                    if (metricsResponse.success) {\n                        const metrics = metricsResponse.data;\n                        this.updateDashboardMetrics(metrics);\n                    } else {\n                        // Calculate metrics manually if endpoint fails\n                        this.calculateMetricsManually();\n                    }\n                } catch (error) {\n                    console.log('Metrics endpoint not available, calculating manually');\n                    this.calculateMetricsManually();\n                }\n                \n                // Load additional data for dashboard\n                const [usersResponse, videosResponse] = await Promise.all([\n                    window.apiService.get('/api/admin/users'),\n                    window.apiService.get('/api/videos')\n                ]);\n                \n                this.users = usersResponse.data || usersResponse.users || [];\n                this.videos = videosResponse.data || videosResponse.videos || [];\n                \n                // Update sidebar badges\n                this.updateSidebarBadges();\n            }\n        } catch (error) {\n            console.error('Failed to load dashboard data:', error);\n            \n            // Handle API error with proper user feedback\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Loading admin dashboard data');\n            }\n            \n            // Set empty values on error\n            this.updateDashboardMetrics({\n                totalUsers: 0,\n                totalVideos: 0,\n                totalViews: 0,\n                pendingVideos: 0\n            });\n        } finally {\n            if (window.VideoHubState) {\n                window.VideoHubState.setLoading('adminData', false);\n            }\n\n            // Hide section loaders\n            const metricsSection = document.querySelector('.admin-metrics');\n            const usersSection = document.querySelector('.admin-users');\n            const videosSection = document.querySelector('.admin-videos');\n\n            if (window.commonUtils) {\n                if (metricsSection) window.commonUtils.hideSectionLoader(metricsSection);\n                if (usersSection) window.commonUtils.hideSectionLoader(usersSection);\n                if (videosSection) window.commonUtils.hideSectionLoader(videosSection);\n            }\n        }\n    }\n\n    updateDashboardMetrics(metrics) {\n        // Update dashboard metric displays\n        const totalUsersEl = document.getElementById('totalUsers');\n        const totalVideosEl = document.getElementById('totalVideos');\n        const totalViewsEl = document.getElementById('totalViews');\n        const pendingVideosEl = document.getElementById('pendingVideos');\n        \n        if (totalUsersEl) totalUsersEl.textContent = metrics.totalUsers || 0;\n        if (totalVideosEl) totalVideosEl.textContent = metrics.totalVideos || 0;\n        if (totalViewsEl) totalViewsEl.textContent = metrics.totalViews || 0;\n        if (pendingVideosEl) pendingVideosEl.textContent = metrics.pendingVideos || 0;\n    }\n\n    calculateMetricsManually() {\n        // Calculate metrics from loaded data\n        const metrics = {\n            totalUsers: this.users.length || 0,\n            totalVideos: this.videos.length || 0,\n            totalViews: this.videos.reduce((sum, video) => sum + (parseInt(video.views) || 0), 0),\n            pendingVideos: this.videos.filter(video => video.status === 'pending').length || 0\n        };\n        this.updateDashboardMetrics(metrics);\n    }\n\n    // Add the missing viewUserDetailsPage function\n    viewUserDetailsPage(userId) {\n        window.location.href = `user-detail.html?id=${userId}`;\n    }\n\n    updateSidebarBadges() {\n        // Sidebar badges removed for cleaner interface\n    }\n\n    bindEvents() {\n        // Event listeners for admin functionality\n        document.addEventListener('DOMContentLoaded', () => {\n            this.loadPageSpecificHandlers();\n            this.bindModalEvents();\n        });\n    }\n\n    bindModalEvents() {\n        // Add User Modal\n        const saveUserBtn = document.getElementById('saveUser');\n        if (saveUserBtn) {\n            saveUserBtn.addEventListener('click', () => this.handleAddUser());\n        }\n\n        // Edit User Modal\n        const updateUserBtn = document.getElementById('updateUser');\n        if (updateUserBtn) {\n            updateUserBtn.addEventListener('click', () => this.handleUpdateUser());\n        }\n\n        // Confirm Delete\n        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');\n        if (confirmDeleteBtn) {\n            confirmDeleteBtn.addEventListener('click', () => this.handleConfirmDelete());\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        // Prevent multiple handler loads\n        if (this.handlersLoaded) {\n            return;\n        }\n        this.handlersLoaded = true;\n        \n        switch (currentPage) {\n            case 'dashboard.html':\n                this.initDashboard();\n                break;\n            case 'users.html':\n                // Users page already initialized in init() method\n                break;\n            case 'videos.html':\n                ///this.initVideosPage();\n                break;\n        }\n    }\n\n    initDashboard() {\n        console.log('Admin dashboard initialized');\n    }\n\n    async initUsersPage() {\n        // Wait for API service first\n        let retries = 0;\n        while (retries < 50 && !window.apiService) {\n            await new Promise(resolve => setTimeout(resolve, 100));\n            retries++;\n        }\n        \n        // Only initialize if not already done and ensure single initialization\n        if (!this.isInitializingTable && !this.usersTable && !this.tableInitialized) {\n            this.tableInitialized = true;\n            await this.loadUsersDataTable();\n        }\n    }\n\n    // initVideosPage() {\n    //     this.loadVideosGrid();\n    // }\n\n    async loadUsersDataTable() {\n        // Prevent multiple simultaneous initializations\n        if (this.isInitializingTable) {\n            console.log('Table initialization already in progress');\n            return;\n        }\n        \n        this.isInitializingTable = true;\n\n        try {\n            // Wait for jQuery and DataTables to be available\n            // if (typeof $ === 'undefined' || !$.fn.DataTable) {\n            //     setTimeout(() => {\n            //         this.isInitializingTable = false;\n            //         this.loadUsersDataTable();\n            //     }, 100);\n            //     return;\n            // }\n\n            // Check if table element exists\n            const tableElement = $('#usersTable');\n            if (tableElement.length === 0) {\n                console.error('Users table element not found');\n                this.isInitializingTable = false;\n                return;\n            }\n\n            // Load users data first (only if not already loaded)\n            if (!this.users.length && !this.dataLoaded) {\n                try {\n                    console.log('Loading users data from API...');\n                    const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n                    const response = await fetch(`${apiUrl}/admin/users`);\n                    const result = await response.json();\n                    if (result.success) {\n                        this.users = result.data || [];\n                        this.dataLoaded = true;\n                        console.log(`Loaded ${this.users.length} users`);\n                    } else {\n                        this.users = [];\n                    }\n                } catch (error) {\n                    console.error('Failed to load users:', error);\n                    this.users = [];\n                }\n            }\n\n            // Update total users count\n            const totalUsersCount = document.getElementById('totalUsersCount');\n            if (totalUsersCount) {\n                totalUsersCount.textContent = this.users.length;\n            }\n\n            // Properly destroy existing DataTable if it exists\n            if ($.fn.DataTable.isDataTable('#usersTable')) {\n                console.log('Destroying existing DataTable');\n                tableElement.DataTable().clear().destroy();\n                tableElement.empty(); // Clear table contents\n                this.usersTable = null;\n            }\n\n            // Small delay to ensure cleanup is complete\n            await new Promise(resolve => setTimeout(resolve, 150));\n\n        // Initialize DataTable\n        this.usersTable = tableElement.DataTable({\n            data: this.users,\n            responsive: true,\n            pageLength: 25,\n            order: [[0, 'asc']],\n            columnDefs: [\n                { \n                    targets: 0,\n                    data: null,\n                    width: '60px',\n                    className: 'text-center',\n                    orderable: false,\n                    render: function(data, type, row, meta) {\n                        return meta.row + 1; // Serial number starting from 1\n                    }\n                },\n                { \n                    targets: 1,\n                    data: null,\n                    orderable: true,\n                    render: function(data, type, row) {\n                        const name = row.name || 'Unknown User';\n                        const initials = name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);\n                        return `\n                            <div class=\"d-flex align-items-center\">\n                                <div class=\"user-avatar me-3\">\n                                    ${initials}\n                                </div>\n                                <div>\n                                    <div class=\"fw-semibold\">${name}</div>\n                                    <small class=\"text-muted\">ID: ${row.id}</small>\n                                </div>\n                            </div>\n                        `;\n                    }\n                },\n                { \n                    targets: 2,\n                    data: 'email',\n                    render: function(data) {\n                        return data || 'No email';\n                    }\n                },\n                { \n                    targets: 3,\n                    data: 'role',\n                    render: function(data) {\n                        const badgeClass = {\n                            'admin': 'danger',\n                            'creator': 'success', \n                            'viewer': 'primary'\n                        };\n                        const roleText = data ? data.charAt(0).toUpperCase() + data.slice(1) : 'Viewer';\n                        return `<span class=\"badge bg-${badgeClass[data] || 'secondary'}\">${roleText}</span>`;\n                    }\n                },\n                {\n                    targets: 4,\n                    data: 'status',\n                    render: function(data) {\n                        const badgeClass = {\n                            'active': 'success',\n                            'inactive': 'warning',\n                            'suspended': 'danger',\n                            'revoked': 'dark'\n                        };\n                        const statusText = data ? data.charAt(0).toUpperCase() + data.slice(1) : 'Active';\n                        return `<span class=\"badge bg-${badgeClass[data] || 'success'}\">${statusText}</span>`;\n                    }\n                },\n                {\n                    targets: 5,\n                    data: null,\n                    render: function(data, type, row) {\n                        return row.email_verified ? '<span class=\"badge bg-success\">Verified</span>' : '<span class=\"badge bg-warning\">Not Verified</span>';\n                    }\n                },\n                {\n                    targets: 6,\n                    data: 'joinDate',\n                    render: function(data) {\n                        if (!data) return 'Unknown';\n                        try {\n                            return new Date(data).toLocaleDateString();\n                        } catch (e) {\n                            return data;\n                        }\n                    }\n                },\n                {\n                    targets: 7,\n                    data: null,\n                    orderable: false,\n                    width: '200px',\n                    className: 'text-center',\n                    render: function(data, type, row) {\n                        return `\n                            <div class=\"btn-group\" role=\"group\">\n                                <div class=\"dropdown\">\n                                    <button class=\"btn btn-sm btn-outline-info dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" title=\"View Options\">\n                                        <i class=\"fas fa-eye\"></i>\n                                    </button>\n                                    <ul class=\"dropdown-menu\">\n                                        <li><a class=\"dropdown-item\" href=\"#\" onclick=\"adminManager.showUserDetails(${row.id})\"><i class=\"fas fa-info-circle me-2\"></i>Quick View</a></li>\n                                        <li><a class=\"dropdown-item\" href=\"#\" onclick=\"viewUserDetailsPage(${row.id})\"><i class=\"fas fa-external-link-alt me-2\"></i>Full Details</a></li>\n                                    </ul>\n                                </div>\n                                <button class=\"btn btn-sm btn-outline-primary\" onclick=\"adminManager.editUser(${row.id})\" title=\"Edit User\">\n                                    <i class=\"fas fa-edit\"></i>\n                                </button>\n                                <button class=\"btn btn-sm btn-outline-warning\" onclick=\"revokeUser(${row.id})\" title=\"Revoke Access\">\n                                    <i class=\"fas fa-ban\"></i>\n                                </button>\n                                <button class=\"btn btn-sm btn-outline-danger\" onclick=\"deleteUser(${row.id})\" title=\"Delete User\">\n                                    <i class=\"fas fa-trash\"></i>\n                                </button>\n                            </div>\n                        `;\n                    }\n                }\n            ],\n            language: {\n                search: \"Search users:\",\n                lengthMenu: \"Show _MENU_ users per page\",\n                info: \"Showing _START_ to _END_ of _TOTAL_ users\",\n                infoEmpty: \"No users available\",\n                infoFiltered: \"(filtered from _MAX_ total users)\",\n                zeroRecords: \"No matching users found\",\n                paginate: {\n                    first: \"First\",\n                    last: \"Last\",\n                    next: \"Next\",\n                    previous: \"Previous\"\n                }\n            },\n            dom: '<\"row\"<\"col-sm-12 col-md-6\"l><\"col-sm-12 col-md-6\"f>>' +\n                 '<\"row\"<\"col-sm-12\"tr>>' +\n                 '<\"row\"<\"col-sm-12 col-md-5\"i><\"col-sm-12 col-md-7\"p>>',\n            searchDelay: 400,\n            processing: true,\n            drawCallback: function() {\n                console.log('DataTable draw completed');\n            }\n        });\n        \n        console.log('DataTable initialized successfully with', this.users.length, 'users');\n        \n        // Hide loading indicator after successful initialization\n        const loadingIndicator = document.getElementById('usersLoadingIndicator');\n        if (loadingIndicator) {\n            loadingIndicator.style.display = 'none';\n        }\n        \n        } catch (error) {\n            console.error('Error initializing DataTable:', error);\n            // Hide loading indicator even on error\n            const loadingIndicator = document.getElementById('usersLoadingIndicator');\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'none';\n            }\n        } finally {\n            this.isInitializingTable = false;\n        }\n    }\n\n    // User management methods\n    async showUserDetails(userId) {\n        try {\n            // Find user in local data first\n            let user = this.users.find(u => u.id == userId);\n            \n            // If not found locally, fetch from API\n            if (!user) {\n                const response = await fetch(`/api/endpoints/users.php/${userId}`);\n                const result = await response.json();\n                if (result.success) {\n                    user = result.data;\n                }\n            }\n\n            if (user) {\n                // Helper function to safely set element content\n                const safeSetContent = (elementId, content) => {\n                    const element = document.getElementById(elementId);\n                    if (element) {\n                        element.textContent = content;\n                    } else {\n                        console.warn(`Element with ID '${elementId}' not found`);\n                    }\n                };\n\n                const safeSetClass = (elementId, className) => {\n                    const element = document.getElementById(elementId);\n                    if (element) {\n                        element.className = className;\n                    } else {\n                        console.warn(`Element with ID '${elementId}' not found`);\n                    }\n                };\n\n                // Populate user details modal safely\n                safeSetContent('detailUserId', user.id);\n                safeSetContent('detailUserName', user.name || 'Unknown User');\n                safeSetContent('detailUserEmail', user.email || 'No email');\n                safeSetContent('detailUserRole', (user.role || 'viewer').charAt(0).toUpperCase() + (user.role || 'viewer').slice(1));\n                safeSetClass('detailUserRole', `badge bg-${this.getUserRoleBadgeClass(user.role)}`);\n                \n                // Status badge\n                const statusEl = document.getElementById('detailUserStatus');\n                if (statusEl) {\n                    statusEl.textContent = (user.status || 'active').charAt(0).toUpperCase() + (user.status || 'active').slice(1);\n                    statusEl.className = `badge bg-${user.status === 'active' ? 'success' : user.status === 'suspended' ? 'danger' : user.status === 'revoked' ? 'dark' : 'warning'}`;\n                }\n                \n                safeSetContent('detailJoinDate', user.joinDate ? new Date(user.joinDate).toLocaleDateString() : (user.created_at ? new Date(user.created_at).toLocaleDateString() : 'Unknown'));\n                safeSetContent('detailLastSeen', user.updated_at ? new Date(user.updated_at).toLocaleDateString() : 'Recently');\n                \n                const emailVerifiedEl = document.getElementById('detailEmailVerified');\n                if (emailVerifiedEl) {\n                    emailVerifiedEl.textContent = user.email_verified_at ? 'Verified' : 'Not Verified';\n                    emailVerifiedEl.className = `badge bg-${user.email_verified_at ? 'success' : 'warning'}`;\n                }\n\n                // Optional elements that might not exist on all pages\n                safeSetContent('detailLastLogin', 'Recently'); // Mock data for now\n                safeSetContent('detailVideoCount', Math.floor(Math.random() * 10));\n                safeSetContent('detailPurchaseCount', Math.floor(Math.random() * 20));\n                safeSetContent('detailTotalSpent', `$${(Math.random() * 500).toFixed(2)}`);\n                \n                // Store current user ID for editing\n                this.currentUserId = userId;\n                \n                // Show modal\n                const modalElement = document.getElementById('userDetailsModal');\n                if (modalElement) {\n                    const modal = new bootstrap.Modal(modalElement);\n                    modal.show();\n                } else {\n                    console.error('User details modal not found');\n                    this.showAlert('Modal not available', 'danger');\n                }\n            } else {\n                this.showAlert('User not found', 'danger');\n            }\n        } catch (error) {\n            console.error('Error loading user details:', error);\n            this.showAlert('Failed to load user details', 'danger');\n        }\n    }\n\n    async editUser(userId) {\n        try {\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await fetch(`${apiUrl}/admin/users?id=${userId}`);\n            const result = await response.json();\n            \n            if (result.success && result.data) {\n                const user = result.data;\n                \n                // Fill edit form\n                document.getElementById('editUserId').value = user.id;\n                document.getElementById('editFirstName').value = user.name?.split(' ')[0] || '';\n                document.getElementById('editLastName').value = user.name?.split(' ').slice(1).join(' ') || '';\n                document.getElementById('editEmail').value = user.email;\n                document.getElementById('editUserType').value = user.role;\n                document.getElementById('editStatus').value = user.status || 'active';\n                \n                // Show modal\n                const modal = new bootstrap.Modal(document.getElementById('editUserModal'));\n                modal.show();\n            }\n        } catch (error) {\n            console.error('Error loading user for edit:', error);\n            this.showAlert('Error loading user details', 'danger');\n        }\n    }\n\n    async revokeUser(userId) {\n        try {\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await fetch(`${apiUrl}/admin/users`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    id: userId,\n                    status: 'revoked'\n                })\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                // Update user in local data\n                const user = this.users.find(u => u.id == userId);\n                if (user) {\n                    user.status = 'revoked';\n                }\n                \n                // Refresh the table\n                this.refreshUsersTable();\n                \n                if (window.commonUtils) {\n                    window.commonUtils.showToast('User access revoked successfully', 'warning');\n                }\n            } else {\n                throw new Error(result.message || 'Failed to revoke user access');\n            }\n        } catch (error) {\n            console.error('Error revoking user:', error);\n            if (window.commonUtils) {\n                window.commonUtils.showToast('Error revoking user access', 'danger');\n            }\n        }\n    }\n\n    async deleteUser(userId) {\n        try {\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await fetch(`${apiUrl}/admin/users`, {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ id: userId })\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                // Remove user from local data\n                this.users = this.users.filter(u => u.id != userId);\n                \n                // Refresh the table\n                this.refreshUsersTable();\n                \n                if (window.commonUtils) {\n                    window.commonUtils.showToast('User deleted successfully', 'success');\n                }\n            } else {\n                throw new Error(result.message || 'Failed to delete user');\n            }\n        } catch (error) {\n            console.error('Error deleting user:', error);\n            if (window.commonUtils) {\n                window.commonUtils.showToast('Error deleting user', 'danger');\n            }\n        }\n    }\n\n    async createUser(userData) {\n        try {\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await fetch(`${apiUrl}/admin/users`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(userData)\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                this.showAlert('User created successfully', 'success');\n                this.refreshUsersTable();\n                return true;\n            } else {\n                this.showAlert(result.message || 'Failed to create user', 'danger');\n                return false;\n            }\n        } catch (error) {\n            console.error('Error creating user:', error);\n            this.showAlert('Error creating user', 'danger');\n            return false;\n        }\n    }\n\n    async updateUser(userData) {\n        try {\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await fetch(`${apiUrl}/admin/users`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(userData)\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                this.showAlert('User updated successfully', 'success');\n                this.refreshUsersTable();\n                return true;\n            } else {\n                this.showAlert(result.message || 'Failed to update user', 'danger');\n                return false;\n            }\n        } catch (error) {\n            console.error('Error updating user:', error);\n            this.showAlert('Error updating user', 'danger');\n            return false;\n        }\n    }\n\n    async refreshUsersTable() {\n        if (this.usersTable && $.fn.DataTable.isDataTable('#usersTable')) {\n            // Reload data\n            try {\n                const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n                const response = await fetch(`${apiUrl}/admin/users`);\n                const result = await response.json();\n                \n                if (result.success) {\n                    this.users = result.data || [];\n                    this.usersTable.clear();\n                    this.usersTable.rows.add(this.users);\n                    this.usersTable.draw();\n                    \n                    // Update total count\n                    const totalUsersCount = document.getElementById('totalUsersCount');\n                    if (totalUsersCount) {\n                        totalUsersCount.textContent = this.users.length;\n                    }\n                }\n            } catch (error) {\n                console.error('Error refreshing users table:', error);\n                this.showAlert('Error refreshing table', 'danger');\n            }\n        } else {\n            // If table doesn't exist, reinitialize it\n            await this.loadUsersDataTable();\n        }\n    }\n\n    showAlert(message, type) {\n        const alertDiv = document.createElement('div');\n        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;\n        alertDiv.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        const container = document.querySelector('main');\n        if (container) {\n            container.insertBefore(alertDiv, container.firstChild);\n            \n            setTimeout(() => {\n                alertDiv.remove();\n            }, 5000);\n        }\n    }\n\n    async loadVideosGrid() {\n\n           console.log('load grid');\n        const videosGrid = document.getElementById('videosGrid');\n        const loadingIndicator = document.getElementById('videosLoadingIndicator');\n        const emptyState = document.getElementById('emptyState');\n        \n        if (!videosGrid) return;\n        \n        try {\n            // Show loading indicator\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'block';\n            }\n            if (emptyState) {\n                emptyState.classList.add('d-none');\n            }\n            \n            // Load videos from API\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            let response = await fetch(`${apiUrl}/endpoints/videos.php`);\n            let result = await response.json();\n            console.log('Videos API response:', result);\n            \n            if (result.success && result.data && result.data.videos) {\n                // Transform videos data for admin display\n                this.videos = result.data.videos.map(video => ({\n                    id: video.id,\n                    title: video.title,\n                    description: video.description,\n                    price: video.price,\n                    thumbnail: video.thumbnail,\n                    youtube_id: video.youtube_id || video.youtubeId,\n                    creator_name: video.creatorName,\n                    creator_email: '',\n                    upload_date: video.uploadDate,\n                    views: video.views,\n                    purchase_count: video.views,\n                    status: video.status || 'published',\n                    created_at: new Date().toISOString(),\n                    youtube_thumbnail: video.thumbnail,\n                    youtube_channel_title: video.creatorName,\n                    youtube_views: video.views\n                }));\n            } else if (result.success && Array.isArray(result.data)) {\n                // Handle case where data is directly an array\n                this.videos = result.data;\n            } else {\n                throw new Error('Failed to load videos: ' + (result.message || 'Invalid response format'));\n            }\n            \n            // Update stats cards\n            this.updateVideoStats();\n            \n            // Render videos grid\n            this.renderVideosGrid();\n            \n        } catch (error) {\n            console.error('Error loading videos:', error);\n            videosGrid.innerHTML = `\n                <div class=\"col-12 text-center py-4\">\n                    <div class=\"text-danger\">\n                        <i class=\"fas fa-exclamation-triangle fa-2x mb-2\"></i>\n                        <p>Error loading videos: ${error.message}</p>\n                        <button class=\"btn btn-outline-primary btn-sm\" onclick=\"adminManager.loadVideosGrid()\">\n                            <i class=\"fas fa-refresh me-1\"></i>Retry\n                        </button>\n                    </div>\n                </div>\n            `;\n        } finally {\n            // Hide loading indicator\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'none';\n            }\n        }\n    }\n\n    renderVideosGrid() {\n        const videosGrid = document.getElementById('videosGrid');\n        const emptyState = document.getElementById('emptyState');\n        \n        if (!videosGrid) return;\n        \n        if (this.videos.length === 0) {\n            if (emptyState) {\n                emptyState.classList.remove('d-none');\n            }\n            videosGrid.innerHTML = '';\n            return;\n        }\n        \n        if (emptyState) {\n            emptyState.classList.add('d-none');\n        }\n        \n        videosGrid.innerHTML = '';\n        \n        this.videos.forEach(video => {\n            const videoCard = document.createElement('div');\n            videoCard.className = 'col-lg-4 col-md-6 mb-4';\n            \n            const statusClass = video.status === 'published' || video.status === 'active' ? 'success' : \n                              video.status === 'pending' ? 'warning' : \n                              video.status === 'flagged' ? 'danger' : 'secondary';\n            \n            const uploadDate = video.upload_date ? new Date(video.upload_date).toLocaleDateString() : \n                             video.created_at ? new Date(video.created_at).toLocaleDateString() : 'Unknown';\n            \n            // Get YouTube ID from various possible fields  \n            const youtubeId = video.youtube_id || video.youtube_video_id || video.video_id || video.youtubeId;\n            \n\n            \n            // Improved thumbnail handling with fallbacks\n            const getThumbnailHtml = () => {\n                if (youtubeId) {\n                    return `\n                        <img src=\"https://img.youtube.com/vi/${youtubeId}/maxresdefault.jpg\" \n                             class=\"card-img-top w-100 h-100\" alt=\"${video.title}\" style=\"object-fit: cover; height: 200px;\"\n                             onerror=\"this.onerror=null; this.src='https://img.youtube.com/vi/${youtubeId}/hqdefault.jpg';\">\n                    `;\n                } else if (video.thumbnail) {\n                    return `\n                        <img src=\"${video.thumbnail}\" \n                             class=\"card-img-top w-100 h-100\" alt=\"${video.title}\" style=\"object-fit: cover; height: 200px;\"\n                             onerror=\"this.onerror=null; this.src='https://via.placeholder.com/350x200/6c757d/ffffff?text=Video+Unavailable';\">\n                    `;\n                } else {\n                    return `\n                        <div class=\"d-flex align-items-center justify-content-center h-100 bg-light\">\n                            <i class=\"fas fa-play fa-3x text-muted\"></i>\n                        </div>\n                    `;\n                }\n            };\n            \n            videoCard.innerHTML = `\n                <div class=\"card h-100\">\n                    <div class=\"position-relative\" style=\"height: 200px; cursor: pointer;\" \n                         onclick=\"${youtubeId ? `watchVideo('${youtubeId}', '${video.title}')` : `alert('Video not available for playback')`}\">\n                        ${getThumbnailHtml()}\n                        \n                        <!-- Play Button Overlay -->\n                        <div class=\"position-absolute top-50 start-50 translate-middle\">\n                            <div class=\"d-flex align-items-center justify-content-center\" \n                                 style=\"width: 60px; height: 60px; background: rgba(0,0,0,0.7); border-radius: 50%;\">\n                                <i class=\"fas fa-play text-white\" style=\"font-size: 24px; margin-left: 3px;\"></i>\n                            </div>\n                        </div>\n                        \n                        <div class=\"position-absolute top-0 end-0 m-2\">\n                            <span class=\"badge bg-${statusClass}\">${(video.status || 'active').charAt(0).toUpperCase() + (video.status || 'active').slice(1)}</span>\n                        </div>\n                        <div class=\"position-absolute bottom-0 end-0 m-2\">\n                            <span class=\"badge bg-dark\">${video.duration || '00:00'}</span>\n                        </div>\n                        <div class=\"position-absolute top-0 start-0 m-2\">\n                            <span class=\"badge bg-success\">$${parseFloat(video.price || 0).toFixed(2)}</span>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <h6 class=\"card-title mb-2\" title=\"${video.title}\">${video.title.length > 50 ? video.title.substring(0, 47) + '...' : video.title}</h6>\n                        <p class=\"card-text text-muted small mb-3\" style=\"display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;\">\n                            ${video.description || 'No description available'}\n                        </p>\n                        \n                        <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                            <small class=\"text-muted\">by ${video.creator_name || video.youtube_channel_title || 'Unknown Creator'}</small>\n                            <small class=\"text-muted\">${(video.views || video.youtube_views || 0).toLocaleString()} views</small>\n                        </div>\n                        \n                        <div class=\"d-flex justify-content-between align-items-center mb-3\">\n                            <small class=\"text-muted\">${uploadDate}</small>\n                            ${youtubeId ? `\n                                <div class=\"btn-group\">\n                                    <button class=\"btn btn-primary btn-sm\" onclick=\"watchVideo('${youtubeId}', '${video.title}')\" title=\"Watch in modal\">\n                                        <i class=\"fas fa-play me-1\"></i>Watch\n                                    </button>\n                                    <button class=\"btn btn-outline-primary btn-sm\" onclick=\"window.commonUtils.openVideoInNewTab('${video.id}', '${youtubeId}')\" title=\"Open in new tab\">\n                                        <i class=\"fas fa-external-link-alt\"></i>\n                                    </button>\n                                </div>\n                            ` : `\n                                <button class=\"btn btn-outline-secondary btn-sm\">\n                                    <i class=\"fas fa-ban me-1\"></i>Unavailable\n                                </button>\n                            `}\n                        </div>\n                        \n                        <div class=\"d-flex gap-2\">\n                            ${video.status === 'published' || video.status === 'active' ? \n                                `<button class=\"btn btn-danger btn-sm flex-fill\" onclick=\"adminManager.rejectVideo(${video.id})\" title=\"Reject Video\">\n                                    <i class=\"fas fa-times me-1\"></i>Reject\n                                </button>\n                                <button class=\"btn btn-warning btn-sm\" onclick=\"adminManager.flagVideo(${video.id})\" title=\"Flag Video\">\n                                    <i class=\"fas fa-flag\"></i>\n                                </button>` :\n                                video.status === 'rejected' ?\n                                `<button class=\"btn btn-success btn-sm flex-fill\" onclick=\"adminManager.approveVideo(${video.id})\" title=\"Approve Video\">\n                                    <i class=\"fas fa-check me-1\"></i>Approve\n                                </button>\n                                <button class=\"btn btn-warning btn-sm\" onclick=\"adminManager.flagVideo(${video.id})\" title=\"Flag Video\">\n                                    <i class=\"fas fa-flag\"></i>\n                                </button>` :\n                                video.status === 'flagged' ?\n                                `<button class=\"btn btn-success btn-sm flex-fill\" onclick=\"adminManager.approveVideo(${video.id})\" title=\"Approve Video\">\n                                    <i class=\"fas fa-check me-1\"></i>Approve\n                                </button>\n                                <button class=\"btn btn-danger btn-sm flex-fill\" onclick=\"adminManager.rejectVideo(${video.id})\" title=\"Reject Video\">\n                                    <i class=\"fas fa-times me-1\"></i>Reject\n                                </button>` :\n                                `<button class=\"btn btn-success btn-sm flex-fill\" onclick=\"adminManager.approveVideo(${video.id})\" title=\"Approve Video\">\n                                    <i class=\"fas fa-check me-1\"></i>Approve\n                                </button>\n                                <button class=\"btn btn-danger btn-sm flex-fill\" onclick=\"adminManager.rejectVideo(${video.id})\" title=\"Reject Video\">\n                                    <i class=\"fas fa-times me-1\"></i>Reject\n                                </button>`\n                            }\n                            <button class=\"btn btn-outline-primary btn-sm\" onclick=\"adminManager.showVideoDetails(${video.id})\" title=\"View Details\">\n                                <i class=\"fas fa-eye\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `;\n            videosGrid.appendChild(videoCard);\n        });\n    }\n\n    async loadVideosTable() {\n        const tbody = document.querySelector('#videosTableBody');\n        const loadingIndicator = document.getElementById('videosLoadingIndicator');\n        const emptyState = document.getElementById('videosEmptyState');\n        const totalCount = document.getElementById('totalVideosCount');\n        \n        if (!tbody) return;\n        \n        try {\n            // Show loading indicator\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'block';\n            }\n            if (emptyState) {\n                emptyState.classList.add('d-none');\n            }\n            \n            // Try to load from admin videos endpoint first, fallback to regular videos endpoint\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            let response = await fetch(`${apiUrl}/endpoints/videos.php`);\n            let result = await response.json();\n            \n            if (!result.success) {\n                // Fallback to regular videos API  \n                response = await fetch(`${apiUrl}/videos`);\n                result = await response.json();\n            }\n            \n            if (result.success && result.data && result.data.videos) {\n                // Transform videos data for admin display\n                this.videos = result.data.videos.map(video => ({\n                    id: video.id,\n                    title: video.title,\n                    description: video.description,\n                    price: video.price,\n                    thumbnail: video.thumbnail,\n                    youtube_id: video.youtube_id || video.youtubeId,\n                    creator_name: video.creatorName,\n                    creator_email: '',\n                    upload_date: video.uploadDate,\n                    views: video.views,\n                    purchase_count: video.views,\n                    status: video.status || 'published',\n                    created_at: new Date().toISOString()\n                }));\n            } else if (result.success && Array.isArray(result.data)) {\n                // Handle case where data is directly an array\n                this.videos = result.data;\n            } else {\n                throw new Error('Failed to load videos: ' + (result.message || 'Invalid response format'));\n            }\n            \n            // Update total count\n            if (totalCount) {\n                totalCount.textContent = this.videos.length;\n            }\n            \n            // Update stats cards\n            this.updateVideoStats();\n            \n            // Clear existing content\n            tbody.innerHTML = '';\n            \n            if (this.videos.length === 0) {\n                if (emptyState) {\n                    emptyState.classList.remove('d-none');\n                }\n            } else {\n                this.videos.forEach(video => {\n                    const row = document.createElement('tr');\n                    row.innerHTML = `\n                        <td><span class=\"fw-bold\">${video.id}</span></td>\n                        <td>\n                            <img src=\"${video.thumbnail || 'https://via.placeholder.com/60x40'}\" \n                                 alt=\"${video.title}\" class=\"rounded shadow-sm\" \n                                 style=\"width: 60px; height: 40px; object-fit: cover;\">\n                        </td>\n                        <td>\n                            <div class=\"fw-bold\">${video.title}</div>\n                            <small class=\"text-muted\">${video.description ? video.description.substring(0, 50) + '...' : 'No description'}</small>\n                        </td>\n                        <td>\n                            <div>${video.creator_name || 'Unknown'}</div>\n                            <small class=\"text-muted\">${video.creator_email || ''}</small>\n                        </td>\n                        <td><span class=\"fw-bold text-success\">$${video.price || '0.00'}</span></td>\n                        <td>\n                            <span class=\"badge bg-${this.getVideoStatusBadgeColor(video.status)}\">${video.status || 'active'}</span>\n                        </td>\n                        <td><span class=\"fw-bold\">${video.views || video.purchase_count || 0}</span></td>\n                        <td>${video.upload_date || new Date(video.created_at).toLocaleDateString()}</td>\n                        <td>\n                            <div class=\"btn-group btn-group-sm\">\n                                <button class=\"btn btn-outline-info btn-sm\" onclick=\"adminManager.viewVideo(${video.id})\" title=\"View Video\">\n                                    <i class=\"fas fa-eye\"></i>\n                                </button>\n                                <button class=\"btn btn-outline-primary btn-sm\" onclick=\"adminManager.editVideo(${video.id})\" title=\"Edit Video\">\n                                    <i class=\"fas fa-edit\"></i>\n                                </button>\n                                <button class=\"btn btn-outline-warning btn-sm\" onclick=\"adminManager.toggleVideoStatus(${video.id})\" title=\"Toggle Status\">\n                                    <i class=\"fas fa-toggle-on\"></i>\n                                </button>\n                                <button class=\"btn btn-outline-danger btn-sm\" onclick=\"adminManager.deleteVideo(${video.id})\" title=\"Delete Video\">\n                                    <i class=\"fas fa-trash\"></i>\n                                </button>\n                            </div>\n                        </td>\n                    `;\n                    tbody.appendChild(row);\n                });\n            }\n            \n        } catch (error) {\n            console.error('Error loading videos:', error);\n            tbody.innerHTML = `\n                <tr>\n                    <td colspan=\"9\" class=\"text-center py-4\">\n                        <div class=\"text-danger\">\n                            <i class=\"fas fa-exclamation-triangle fa-2x mb-2\"></i>\n                            <p>Error loading videos: ${error.message}</p>\n                            <button class=\"btn btn-outline-primary btn-sm\" onclick=\"adminManager.loadVideosTable()\">\n                                <i class=\"fas fa-refresh me-1\"></i>Retry\n                            </button>\n                        </div>\n                    </td>\n                </tr>\n            `;\n        } finally {\n            // Hide loading indicator\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'none';\n            }\n        }\n    }\n\n    updateVideoStats() {\n        const totalVideos = document.getElementById('totalVideos');\n        const publishedVideos = document.getElementById('publishedVideos');\n        const pendingVideos = document.getElementById('pendingVideos');\n        const flaggedVideos = document.getElementById('flaggedVideos');\n        \n        // Ensure this.videos is an array before using filter\n        if (!Array.isArray(this.videos)) {\n            console.warn('Videos data is not an array:', this.videos);\n            this.videos = [];\n        }\n        \n        if (totalVideos) totalVideos.textContent = this.videos.length;\n        if (publishedVideos) publishedVideos.textContent = this.videos.filter(v => v.status === 'published' || v.status === 'active').length;\n        if (pendingVideos) pendingVideos.textContent = this.videos.filter(v => v.status === 'pending').length;\n        if (flaggedVideos) flaggedVideos.textContent = this.videos.filter(v => v.status === 'flagged').length;\n    }\n\n    getVideoStatusBadgeColor(status) {\n        switch(status) {\n            case 'published':\n            case 'active': return 'success';\n            case 'pending': return 'warning';\n            case 'flagged': return 'danger';\n            case 'draft': return 'secondary';\n            default: return 'primary';\n        }\n    }\n\n    // Video management methods\n    async viewVideo(videoId) {\n        window.open(`/video-player.html?id=${videoId}`, '_blank');\n    }\n\n    async editVideo(videoId) {\n        // Redirect to video edit page or show modal\n        this.showAlert('Video editing functionality coming soon', 'info');\n    }\n\n    async toggleVideoStatus(videoId) {\n        try {\n            const video = this.videos.find(v => v.id === videoId);\n            if (!video) return;\n            \n            const newStatus = video.status === 'active' ? 'pending' : 'active';\n            \n            // Here you would call API to update video status\n            this.showAlert(`Video status would be changed to ${newStatus}`, 'info');\n            \n        } catch (error) {\n            console.error('Error toggling video status:', error);\n            this.showAlert('Error updating video status', 'danger');\n        }\n    }\n\n    async approveVideo(videoId) {\n        try {\n            if (!confirm('Are you sure you want to approve this video?')) return;\n            \n            const response = await window.apiService.put(`/api/endpoints/videos.php/${videoId}`, {\n                status: 'published'\n            });\n            \n            if (response.success) {\n                this.showAlert('Video approved successfully!', 'success');\n                // Update local video status\n                const video = this.videos.find(v => v.id == videoId);\n                if (video) {\n                    video.status = 'published';\n                }\n                // Refresh the videos grid immediately to show updated buttons\n                this.renderVideosGrid();\n                this.updateVideoStats();\n            } else {\n                this.showAlert(response.message || 'Failed to approve video', 'danger');\n            }\n        } catch (error) {\n            console.error('Error approving video:', error);\n            this.showAlert('Error approving video', 'danger');\n        }\n    }\n\n    async rejectVideo(videoId) {\n        try {\n            if (!confirm('Are you sure you want to reject this video?')) return;\n            \n            const response = await window.apiService.put(`/api/endpoints/videos.php/${videoId}`, {\n                status: 'rejected'\n            });\n            \n            if (response.success) {\n                this.showAlert('Video rejected successfully!', 'warning');\n                // Update local video status\n                const video = this.videos.find(v => v.id == videoId);\n                if (video) {\n                    video.status = 'rejected';\n                }\n                // Refresh the videos grid immediately to show updated buttons\n                this.renderVideosGrid();\n                this.updateVideoStats();\n            } else {\n                this.showAlert(response.message || 'Failed to reject video', 'danger');\n            }\n        } catch (error) {\n            console.error('Error rejecting video:', error);\n            this.showAlert('Error rejecting video', 'danger');\n        }\n    }\n\n    async flagVideo(videoId) {\n        try {\n            if (!confirm('Are you sure you want to flag this video?')) return;\n            \n            const response = await window.apiService.put(`/api/endpoints/videos.php/${videoId}`, {\n                status: 'flagged'\n            });\n            \n            if (response.success) {\n                this.showAlert('Video flagged successfully!', 'danger');\n                // Update local video status\n                const video = this.videos.find(v => v.id == videoId);\n                if (video) {\n                    video.status = 'flagged';\n                }\n                // Refresh the videos grid immediately to show updated buttons\n                this.renderVideosGrid();\n                this.updateVideoStats();\n            } else {\n                this.showAlert(response.message || 'Failed to flag video', 'danger');\n            }\n        } catch (error) {\n            console.error('Error flagging video:', error);\n            this.showAlert('Error flagging video', 'danger');\n        }\n    }\n\n    async showVideoDetails(videoId) {\n        try {\n            const video = this.videos.find(v => v.id == videoId);\n            if (!video) {\n                this.showAlert('Video not found', 'danger');\n                return;\n            }\n\n            // Populate modal with video details\n            document.getElementById('modalVideoTitle').textContent = video.title || 'Unknown Title';\n            document.getElementById('modalVideoCreator').textContent = video.creator_name || video.creatorName || 'Unknown Creator';\n            document.getElementById('modalVideoDuration').textContent = video.duration || 'Unknown';\n            document.getElementById('modalVideoDate').textContent = video.upload_date || video.uploadDate || 'Unknown';\n            document.getElementById('modalVideoViews').textContent = (video.views || 0).toLocaleString();\n            document.getElementById('modalVideoPrice').textContent = `$${parseFloat(video.price || 0).toFixed(2)}`;\n            \n            const statusEl = document.getElementById('modalVideoStatus');\n            const statusClass = video.status === 'published' ? 'success' : video.status === 'pending' ? 'warning' : video.status === 'rejected' ? 'danger' : 'secondary';\n            statusEl.className = `badge bg-${statusClass}`;\n            statusEl.textContent = (video.status || 'published').charAt(0).toUpperCase() + (video.status || 'published').slice(1);\n            \n            document.getElementById('modalVideoDescription').textContent = video.description || 'No description available';\n            \n            // Set thumbnail\n            const thumbnailEl = document.getElementById('modalVideoThumbnail');\n            if (video.youtube_id) {\n                thumbnailEl.src = `https://img.youtube.com/vi/${video.youtube_id}/maxresdefault.jpg`;\n            } else if (video.thumbnail) {\n                thumbnailEl.src = video.thumbnail;\n            } else {\n                thumbnailEl.src = 'https://via.placeholder.com/300x200/007bff/ffffff?text=Video+Preview';\n            }\n\n            // Set up modal action buttons\n            const approveBtn = document.getElementById('approveVideo');\n            const rejectBtn = document.getElementById('rejectVideo');\n            const flagBtn = document.getElementById('flagVideo');\n\n            // Remove existing event listeners\n            approveBtn.replaceWith(approveBtn.cloneNode(true));\n            rejectBtn.replaceWith(rejectBtn.cloneNode(true));\n            flagBtn.replaceWith(flagBtn.cloneNode(true));\n\n            // Re-get the new elements after cloning\n            const newApproveBtn = document.getElementById('approveVideo');\n            const newRejectBtn = document.getElementById('rejectVideo');\n            const newFlagBtn = document.getElementById('flagVideo');\n\n            newApproveBtn.addEventListener('click', () => {\n                bootstrap.Modal.getInstance(document.getElementById('videoDetailsModal')).hide();\n                this.approveVideo(videoId);\n            });\n\n            newRejectBtn.addEventListener('click', () => {\n                bootstrap.Modal.getInstance(document.getElementById('videoDetailsModal')).hide();\n                this.rejectVideo(videoId);\n            });\n\n            newFlagBtn.addEventListener('click', () => {\n                bootstrap.Modal.getInstance(document.getElementById('videoDetailsModal')).hide();\n                this.flagVideo(videoId);\n            });\n\n            // Show modal\n            const modal = new bootstrap.Modal(document.getElementById('videoDetailsModal'));\n            modal.show();\n\n        } catch (error) {\n            console.error('Error showing video details:', error);\n            this.showAlert('Error loading video details', 'danger');\n        }\n    }\n\n    async flagVideo(videoId) {\n        try {\n            if (!confirm('Are you sure you want to flag this video?')) return;\n            \n            const response = await window.apiService.put(`/api/endpoints/videos.php/${videoId}`, {\n                status: 'flagged'\n            });\n            \n            if (response.success) {\n                this.showAlert('Video flagged successfully!', 'danger');\n                // Update local video status\n                const video = this.videos.find(v => v.id == videoId);\n                if (video) {\n                    video.status = 'flagged';\n                }\n                // Refresh the videos grid\n                this.renderVideosGrid();\n                this.updateVideoStats();\n            } else {\n                this.showAlert(response.message || 'Failed to flag video', 'danger');\n            }\n        } catch (error) {\n            console.error('Error flagging video:', error);\n            this.showAlert('Error flagging video', 'danger');\n        }\n    }\n\n    // Video Playback Functions\n    watchVideo(youtubeId, title) {\n        // Create video player modal\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.id = 'videoPlayerModal';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-xl\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${title}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body p-0\">\n                        <div class=\"ratio ratio-16x9\">\n                            <iframe src=\"https://www.youtube.com/embed/${youtubeId}?autoplay=1\" \n                                    title=\"${title}\" \n                                    frameborder=\"0\" \n                                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n                                    allowfullscreen></iframe>\n                        </div>\n                        <div class=\"p-3\">\n                            <h6>${title}</h6>\n                            <div class=\"d-flex justify-content-between align-items-center\">\n                                <span class=\"text-muted\">Admin Preview</span>\n                                <button class=\"btn btn-outline-primary btn-sm\" onclick=\"window.commonUtils.openVideoInNewTab(null, '${youtubeId}')\" title=\"Open in new tab\">\n                                    <i class=\"fas fa-external-link-alt me-1\"></i>Open in YouTube\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n\n        // Remove modal after it's hidden\n        modal.addEventListener('hidden.bs.modal', () => {\n            modal.remove();\n        });\n    }\n\n    // Video stats update method\n    updateVideoStats() {\n        const totalVideos = document.getElementById('totalVideos');\n        const publishedVideos = document.getElementById('publishedVideos');\n        const pendingVideos = document.getElementById('pendingVideos'); \n        const flaggedVideos = document.getElementById('flaggedVideos');\n        \n        if (totalVideos) totalVideos.textContent = this.videos.length;\n        if (publishedVideos) publishedVideos.textContent = this.videos.filter(v => v.status === 'published' || v.status === 'active').length;\n        if (pendingVideos) pendingVideos.textContent = this.videos.filter(v => v.status === 'pending').length;\n        if (flaggedVideos) flaggedVideos.textContent = this.videos.filter(v => v.status === 'flagged').length;\n    }\n\n    // Utility methods\n    getUserRoleBadgeClass(role) {\n        const badgeClass = {\n            'admin': 'danger', \n            'creator': 'success', \n            'viewer': 'primary'\n        };\n        return badgeClass[role] || 'secondary';\n    }\n\n    showAlert(message, type = 'info') {\n        // Simple alert implementation\n        console.log(`${type.toUpperCase()}: ${message}`);\n        \n        // Create toast notification if possible\n        if (window.commonUtils && window.commonUtils.showToast) {\n            window.commonUtils.showToast(message, type);\n        } else {\n            // Fallback to browser alert\n            alert(message);\n        }\n    }\n\n    refreshUsersTable() {\n        if (this.usersTable) {\n            this.loadUsersDataTable();\n        }\n    }\n\n    // Helper method for getting video status badge color\n    getVideoStatusBadgeColor(status) {\n        switch(status) {\n            case 'published':\n            case 'active': return 'success';\n            case 'pending': return 'warning';\n            case 'flagged': return 'danger';\n            case 'rejected': return 'dark';\n            case 'draft': return 'secondary';\n            default: return 'primary';\n        }\n    }\n\n    // Add filter functionality for admin videos page\n    setupVideoFilters() {\n        const applyFiltersBtn = document.getElementById('applyFilters');\n        if (applyFiltersBtn) {\n            applyFiltersBtn.addEventListener('click', () => {\n                this.applyVideoFilters();\n            });\n        }\n\n        // Also bind to individual filter changes\n        const searchInput = document.getElementById('searchInput');\n        const statusFilter = document.getElementById('statusFilter');\n        const creatorFilter = document.getElementById('creatorFilter');\n        const categoryFilter = document.getElementById('categoryFilter');\n        const dateFilter = document.getElementById('dateFilter');\n\n        if (searchInput) {\n            searchInput.addEventListener('input', () => this.applyVideoFilters());\n        }\n        if (statusFilter) {\n            statusFilter.addEventListener('change', () => this.applyVideoFilters());\n        }\n        if (creatorFilter) {\n            creatorFilter.addEventListener('change', () => this.applyVideoFilters());\n        }\n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', () => this.applyVideoFilters());\n        }\n        if (dateFilter) {\n            dateFilter.addEventListener('change', () => this.applyVideoFilters());\n        }\n    }\n\n    applyVideoFilters() {\n        if (!this.videos || this.videos.length === 0) return;\n\n        const searchInput = document.getElementById('searchInput');\n        const statusFilter = document.getElementById('statusFilter');\n        const creatorFilter = document.getElementById('creatorFilter');\n        const categoryFilter = document.getElementById('categoryFilter');\n        const dateFilter = document.getElementById('dateFilter');\n\n        let filteredVideos = [...this.videos];\n\n        // Apply search filter\n        if (searchInput && searchInput.value) {\n            const searchTerm = searchInput.value.toLowerCase();\n            filteredVideos = filteredVideos.filter(video => \n                video.title.toLowerCase().includes(searchTerm) ||\n                (video.description && video.description.toLowerCase().includes(searchTerm)) ||\n                (video.creator_name && video.creator_name.toLowerCase().includes(searchTerm))\n            );\n        }\n\n        // Apply status filter\n        if (statusFilter && statusFilter.value) {\n            filteredVideos = filteredVideos.filter(video => \n                (video.status || 'published') === statusFilter.value\n            );\n        }\n\n        // Apply creator filter\n        if (creatorFilter && creatorFilter.value) {\n            filteredVideos = filteredVideos.filter(video => \n                video.creator_name === creatorFilter.value || video.uploader_id == creatorFilter.value\n            );\n        }\n\n        // Apply category filter\n        if (categoryFilter && categoryFilter.value) {\n            filteredVideos = filteredVideos.filter(video => \n                video.category === categoryFilter.value\n            );\n        }\n\n        // Apply date filter\n        if (dateFilter && dateFilter.value) {\n            const now = new Date();\n            const dateThreshold = new Date();\n            \n            switch (dateFilter.value) {\n                case 'today':\n                    dateThreshold.setHours(0, 0, 0, 0);\n                    break;\n                case 'week':\n                    dateThreshold.setDate(now.getDate() - 7);\n                    break;\n                case 'month':\n                    dateThreshold.setMonth(now.getMonth() - 1);\n                    break;\n            }\n            \n            if (dateFilter.value !== '') {\n                filteredVideos = filteredVideos.filter(video => {\n                    const videoDate = new Date(video.created_at || video.uploadDate);\n                    return videoDate >= dateThreshold;\n                });\n            }\n        }\n\n        // Update display with filtered videos\n        this.displayFilteredVideos(filteredVideos);\n    }\n\n    displayFilteredVideos(filteredVideos) {\n        const videosGrid = document.getElementById('videosGrid');\n        if (!videosGrid) return;\n\n        if (filteredVideos.length === 0) {\n            const emptyState = document.getElementById('emptyState');\n            if (emptyState) {\n                emptyState.classList.remove('d-none');\n            }\n            videosGrid.innerHTML = '';\n            return;\n        }\n\n        const emptyState = document.getElementById('emptyState');\n        if (emptyState) {\n            emptyState.classList.add('d-none');\n        }\n\n        videosGrid.innerHTML = filteredVideos.map(video => `\n            <div class=\"col-md-6 col-lg-4 col-xl-3\">\n                <div class=\"card h-100\">\n                    <div class=\"position-relative\">\n                        <div class=\"video-thumbnail bg-light d-flex align-items-center justify-content-center\" style=\"height: 180px;\">\n                            ${video.thumbnail ? \n                                `<img src=\"${video.thumbnail}\" class=\"img-fluid\" style=\"max-height: 100%; max-width: 100%; object-fit: cover;\" alt=\"${video.title}\">` :\n                                `<i class=\"fas fa-play-circle fa-3x text-muted\"></i>`\n                            }\n                        </div>\n                        <div class=\"position-absolute top-0 end-0 m-2\">\n                            <span class=\"badge bg-${this.getVideoStatusBadgeColor(video.status)}\">${video.status || 'published'}</span>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <h6 class=\"card-title text-truncate\" title=\"${video.title}\">${video.title}</h6>\n                        <p class=\"card-text text-muted small\">${(video.description || '').substring(0, 80)}...</p>\n                        <div class=\"d-flex justify-content-between align-items-center small text-muted\">\n                            <span><i class=\"fas fa-user me-1\"></i>${video.creator_name || 'Unknown'}</span>\n                            <span><i class=\"fas fa-eye me-1\"></i>${video.views || 0}</span>\n                        </div>\n                    </div>\n                    <div class=\"card-footer bg-transparent\">\n                        <div class=\"btn-group w-100\" role=\"group\">\n                            <button class=\"btn btn-outline-primary btn-sm\" onclick=\"adminManager.viewVideo('${video.id}')\">\n                                <i class=\"fas fa-eye\"></i>\n                            </button>\n                            <button class=\"btn btn-outline-warning btn-sm\" onclick=\"adminManager.approveVideo('${video.id}')\">\n                                <i class=\"fas fa-check\"></i>\n                            </button>\n                            <button class=\"btn btn-outline-danger btn-sm\" onclick=\"adminManager.flagVideo('${video.id}')\">\n                                <i class=\"fas fa-flag\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `).join('');\n    }\n}\n\n// Global video playback function for admin\nfunction watchVideo(youtubeId, title) {\n    if (window.adminManager && typeof window.adminManager.watchVideo === 'function') {\n        window.adminManager.watchVideo(youtubeId, title);\n    } else {\n        // Fallback implementation\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.id = 'videoPlayerModal';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-xl\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${title}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body p-0\">\n                        <div class=\"ratio ratio-16x9\">\n                            <iframe src=\"https://www.youtube.com/embed/${youtubeId}?autoplay=1\" \n                                    title=\"${title}\" \n                                    frameborder=\"0\" \n                                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n                                    allowfullscreen></iframe>\n                        </div>\n                        <div class=\"p-3\">\n                            <h6>${title}</h6>\n                            <div class=\"d-flex justify-content-between align-items-center\">\n                                <span class=\"text-muted\">Admin Preview</span>\n                                <button class=\"btn btn-outline-primary btn-sm\" onclick=\"window.commonUtils.openVideoInNewTab(null, '${youtubeId}')\" title=\"Open in new tab\">\n                                    <i class=\"fas fa-external-link-alt me-1\"></i>Open in YouTube\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n\n        modal.addEventListener('hidden.bs.modal', () => {\n            modal.remove();\n        });\n    }\n}\n\n// Setup video filters if on videos page\nsetTimeout(() => {\n    if (window.location.pathname.includes('videos.html') && window.adminManager) {\n        window.adminManager.setupVideoFilters();\n    }\n}, 1000);\n","size_bytes":76050},"assets/js/api.js":{"content":"/**\n * VideoHub API Service\n * Handles all backend API communications\n */\n\n// Use a more reliable approach to prevent duplicate loading\n(function() {\n    'use strict';\n\n    if (window.APIService && window.apiService) {\n        console.log('APIService already loaded');\n        return;\n    }\n\n    class APIService {\n    constructor() {\n        // Use VideoHubConfig for consistent base path handling\n        this.baseURL = '/video-platform';\n        this.timeout = 10000;\n        this.useDataService = false; // Now using PHP backend\n        this.authToken = this.getStoredToken(); // Initialize stored token on service creation\n        this.init();\n    }\n\n    init() {\n        this.defaultHeaders = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        };\n\n        // Wait for dataService to be initialized if using it\n        if (this.useDataService && !window.dataService) {\n            setTimeout(() => this.init(), 100);\n        }\n    }\n\n    /**\n     * Get the correct base URL for API calls using VideoHubConfig\n     * This ensures the app works whether deployed at root or in a subfolder\n     */\n    getBaseURL() {\n        // Use VideoHubConfig if available, otherwise fallback to auto-detection\n        if (window.videoHubConfig) {\n            return window.videoHubConfig.getApiUrl();\n        }\n        \n        // Fallback to auto-detection if config not loaded yet\n        const currentPath = window.location.pathname;\n        \n        // If we're on index.html or root, use current directory\n        if (currentPath === '/' || currentPath.endsWith('/') || currentPath.endsWith('/index.html')) {\n            const basePath = currentPath.replace('/index.html', '').replace(/\\/$/, '');\n            return basePath + '/api';\n        }\n        \n        // For pages in subdirectories (like auth/, admin/, etc.), go up one level\n        const pathParts = currentPath.split('/');\n        pathParts.pop(); // Remove current file\n        \n        // If we're in a subdirectory, go up one more level to reach the app root\n        if (pathParts.length > 1 && pathParts[pathParts.length - 1] !== '') {\n            pathParts.pop();\n        }\n        \n        const basePath = pathParts.join('/') || '';\n        return basePath + '/api';\n    }\n\n    // Generic HTTP methods\n    async request(method, endpoint, data = null, options = {}) {\n        // Handle endpoint URL construction\n        let url;\n        if (endpoint.startsWith('http://') || endpoint.startsWith('https://')) {\n            // Absolute URL\n            url = endpoint;\n        } else if (endpoint.startsWith('/api/')) {\n            // Endpoint already includes /api/, use it directly\n            url = `${this.baseURL}${endpoint}`;\n        } else {\n            // Relative endpoint, prepend baseURL\n            url = `${this.baseURL}${endpoint}`;\n        }\n        const config = {\n            method,\n            headers: {\n                ...this.defaultHeaders,\n                ...options.headers\n            },\n            ...options\n        };\n\n        // Add authentication token if available\n        const token = this.getAuthToken();\n        if (token) {\n            config.headers['Authorization'] = `Bearer ${token}`;\n        }\n\n        // Add body for POST, PUT, PATCH requests\n        if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n            config.body = JSON.stringify(data);\n        }\n\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n            config.signal = controller.signal;\n\n            const response = await fetch(url, config);\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n                // Try to get more detailed error from response\n                try {\n                    const errorData = await response.json();\n                    if (errorData.message) {\n                        errorMessage = errorData.message;\n                    } else if (errorData.error) {\n                        errorMessage = errorData.error;\n                    }\n                } catch (e) {\n                    // If can't parse JSON, use default error message\n                }\n\n                throw new Error(errorMessage);\n            }\n\n            const result = await response.json();\n            // Standardize response format\n            if (result.hasOwnProperty('success')) {\n                return result;\n            }\n            // Otherwise wrap it in standard format\n            return { success: true, data: result };\n        } catch (error) {\n            console.error(`API Error [${method} ${endpoint}]:`, error);\n\n            let errorMessage = error.message;\n            let isNetworkError = false;\n\n            if (error.name === 'AbortError') {\n                errorMessage = 'Request timed out. Please try again.';\n                isNetworkError = true;\n            } else if (error.name === 'TypeError') {\n                errorMessage = 'Network error. Please check your connection.';\n                isNetworkError = true;\n            }\n\n            return {\n                success: false,\n                error: errorMessage,\n                isNetworkError,\n                endpoint: endpoint,\n                method: method\n            };\n        }\n    }\n\n    async get(endpoint, options = {}) {\n        return this.request('GET', endpoint, null, options);\n    }\n\n    async post(endpoint, data, options = {}) {\n        return this.request('POST', endpoint, data, options);\n    }\n\n    async put(endpoint, data, options = {}) {\n        return this.request('PUT', endpoint, data, options);\n    }\n\n    async delete(endpoint, options = {}) {\n        return this.request('DELETE', endpoint, null, options);\n    }\n\n    // Authentication\n    getAuthToken() {\n        // Get token from AuthManager if available for perfect sync\n        if (window.authManager && window.authManager.getToken()) {\n            this.authToken = window.authManager.getToken();\n            return this.authToken;\n        }\n        \n        // Fallback to storage\n        const token = this.getStoredToken();\n        this.authToken = token;\n        return token;\n    }\n\n    setAuthToken(token, rememberMe = false) {\n        this.authToken = token;\n\n        // Store token based on remember me preference\n        if (rememberMe) {\n            localStorage.setItem('authToken', token);\n            sessionStorage.removeItem('authToken');\n        } else {\n            sessionStorage.setItem('authToken', token);\n            localStorage.removeItem('authToken');\n        }\n    }\n\n    clearAuthToken() {\n        this.authToken = null;\n        localStorage.removeItem('authToken');\n        sessionStorage.removeItem('authToken');\n    }\n\n    getStoredToken() {\n        return localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\n    }\n\n    // Auth API endpoints\n    async login(credentials) {\n        return this.post('/auth/login', credentials);\n    }\n\n    async register(userData) {\n        return this.post('/auth/register', userData);\n    }\n\n    async logout() {\n        const result = await this.post('/auth/logout');\n        this.clearAuthToken();\n        return result;\n    }\n\n    async verifyToken() {\n        return this.get('/auth/verify');\n    }\n\n    // User API endpoints\n    async getUserProfile() {\n        // Check user role to determine correct endpoint\n        let userSession = null;\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n\n        if (localSession) {\n            userSession = JSON.parse(localSession);\n        } else if (sessionSession) {\n            userSession = JSON.parse(sessionSession);\n        }\n\n        if (userSession && userSession.userType === 'viewer') {\n            // For viewers, use the users/profile endpoint which is more generic\n            return this.get('/users/profile');\n        } else {\n            // For other roles (admin, creator)\n            return this.get('/users/profile');\n        }\n    }\n\n    async updateUserProfile(profileData) {\n        return this.put('users/profile', profileData);\n    }\n\n    async getUsers(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getUsers(params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/users${queryString ? '?' + queryString : ''}`);\n    }\n\n    async updateUserRole(userId, role) {\n        return this.put(`/users/${userId}/role`, { role });\n    }\n\n    async deleteUser(userId) {\n        return this.delete(`/users/${userId}`);\n    }\n\n    // Video API endpoints\n    async getVideos(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getVideos(params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/videos${queryString ? '?' + queryString : ''}`);\n    }\n\n    async getVideo(videoId) {\n        return this.get(`/videos/${videoId}`);\n    }\n\n    async uploadVideo(videoData) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.uploadVideo(videoData);\n        }\n        // For file uploads, we need to use FormData\n        const formData = new FormData();\n        Object.keys(videoData).forEach(key => {\n            formData.append(key, videoData[key]);\n        });\n\n        return this.request('POST', '/videos', formData, {\n            headers: {} // Remove Content-Type to let browser set it for FormData\n        });\n    }\n\n    async updateVideo(videoId, videoData) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.updateVideo(videoId, videoData);\n        }\n        return this.put(`/videos/${videoId}`, videoData);\n    }\n\n    async deleteVideo(videoId) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.deleteVideo(videoId);\n        }\n        return this.delete(`/videos/${videoId}`);\n    }\n\n    async duplicateVideo(videoId) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.duplicateVideo(videoId);\n        }\n        return this.post(`/videos/${videoId}/duplicate`);\n    }\n\n    async approveVideo(videoId) {\n        return this.put(`/videos/${videoId}/approve`);\n    }\n\n    async rejectVideo(videoId, reason) {\n        return this.put(`/videos/${videoId}/reject`, { reason });\n    }\n\n    // Creator API endpoints\n    async getCreatorStats() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getCreatorStats();\n        }\n        return this.get('/creator/stats');\n    }\n\n    async getCreatorVideos(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getCreatorVideos(null, params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/creator/videos${queryString ? '?' + queryString : ''}`);\n    }\n\n    async getCreatorEarnings(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getCreatorEarnings(null, params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/creator/earnings${queryString ? '?' + queryString : ''}`);\n    }\n\n    // Viewer API endpoints\n    async purchaseVideo(videoId, paymentData) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.purchaseVideo(videoId, paymentData);\n        }\n        return this.post(`/videos/${videoId}/purchase`, paymentData);\n    }\n\n    async getViewerPurchases() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getViewerPurchases();\n        }\n        return this.get('/viewer/purchases');\n    }\n\n    async getViewerStats() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getViewerStats();\n        }\n        return this.get('/viewer/stats');\n    }\n\n    // Admin API endpoints\n    async getAdminStats() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getAdminStats();\n        }\n        return this.get('/admin/stats');\n    }\n\n    async getAdminUsers(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getUsers(params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/admin/users${queryString ? '?' + queryString : ''}`);\n    }\n\n    async getSystemHealth() {\n        return this.get('/admin/health');\n    }\n\n    async getAnalytics() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getAnalyticsData();\n        }\n        return this.get('/admin/analytics');\n    }\n\n    async getPurchases(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getViewerPurchases(null, params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/purchases${queryString ? '?' + queryString : ''}`);\n    }\n\n    // Search API endpoints\n    async searchVideos(query, filters = {}) {\n        const params = { q: query, ...filters };\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/search/videos?${queryString}`);\n    }\n\n    // Utility methods\n    handleApiError(error, context = '') {\n        let message = 'Something went wrong. Please try again.';\n\n        if (error.isNetworkError) {\n            message = 'Network error. Please check your connection.';\n        } else if (error.error) {\n            message = error.error;\n        }\n\n        if (context) {\n            message = `${context}: ${message}`;\n        }\n\n        // Show toast notification\n        if (window.commonUtils) {\n            window.commonUtils.showToast(message, 'danger');\n        }\n\n        return message;\n    }\n\n    showSuccessMessage(message) {\n        if (window.commonUtils) {\n            window.commonUtils.showToast(message, 'success');\n        }\n    }\n    }\n\n    // Export to global scope\n    window.APIService = APIService;\n    window.apiService = new APIService();\n    console.log('APIService initialized successfully');\n\n})(); // End of IIFE","size_bytes":14618},"assets/js/auth.js":{"content":"/**\n * VideoHub Authentication Module\n * Handles user registration, login, password reset, and email verification\n */\n\nclass AuthManager {\n    constructor() {\n        this.verificationProcessed = false;\n        this.googleClientId = '824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com';\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n    }\n\n    bindEvents() {\n        // Login form\n        const loginForm = document.getElementById('loginForm');\n        if (loginForm) {\n            this.loginValidator = new FormValidator(loginForm);\n            this.setupLoginValidation();\n            loginForm.addEventListener('submit', this.handleLogin.bind(this));\n        }\n\n        // Signup form\n        const signupForm = document.getElementById('signupForm');\n        if (signupForm) {\n            this.signupValidator = new FormValidator(signupForm);\n            this.setupSignupValidation();\n            signupForm.addEventListener('submit', this.handleSignup.bind(this));\n        }\n\n        // Forgot password form\n        const forgotPasswordForm = document.getElementById('forgotPasswordForm');\n        if (forgotPasswordForm) {\n            this.forgotPasswordValidator = new FormValidator(forgotPasswordForm);\n            this.setupForgotPasswordValidation();\n            forgotPasswordForm.addEventListener('submit', this.handleForgotPassword.bind(this));\n        }\n\n        // Set password form\n        const setPasswordForm = document.getElementById('setPasswordForm');\n        if (setPasswordForm) {\n            this.setPasswordValidator = new FormValidator(setPasswordForm);\n            this.setupSetPasswordValidation();\n            setPasswordForm.addEventListener('submit', this.handleSetPassword.bind(this));\n        }\n\n        // Auto-verify if token is present in URL (only once)\n        if (window.location.pathname.includes('email-verification.html')) {\n            const urlParams = new URLSearchParams(window.location.search);\n            const token = urlParams.get('token');\n            if (token && !this.verificationProcessed) {\n                this.verificationProcessed = true;\n                // Auto-verify email when token is present\n                setTimeout(() => {\n                   // this.handleEmailVerification();\n                }, 1000);\n            }\n        }\n\n        const resendEmail = document.getElementById('resendEmail');\n        if (resendEmail) {\n            resendEmail.addEventListener('click', this.handleResendEmail.bind(this));\n        }\n\n        // Resend link in forgot password page\n        const resendLink = document.getElementById('resendLink');\n        if (resendLink) {\n            resendLink.addEventListener('click', this.handleResendForgotPassword.bind(this));\n        }\n\n        // Password strength checker\n        const newPasswordInput = document.getElementById('newPassword');\n        if (newPasswordInput) {\n            newPasswordInput.addEventListener('input', this.checkPasswordStrength.bind(this));\n        }\n\n        // Password toggle\n        const togglePassword = document.getElementById('togglePassword');\n        if (togglePassword) {\n            togglePassword.addEventListener('click', this.togglePasswordVisibility.bind(this));\n        }\n\n        // Google Sign-In buttons\n        const googleSignInBtn = document.getElementById('googleSignInBtn');\n        if (googleSignInBtn) {\n            googleSignInBtn.addEventListener('click', this.handleGoogleSignIn.bind(this));\n        }\n\n        const googleSignUpBtn = document.getElementById('googleSignUpBtn');\n        if (googleSignUpBtn) {\n            googleSignUpBtn.addEventListener('click', this.handleGoogleSignUp.bind(this));\n        }\n    }\n\n    setupLoginValidation() {\n        if (!this.loginValidator) return;\n        \n        this.loginValidator\n            .addRule('email', [\n                { validator: FormValidator.rules.required, message: 'Email is required' },\n                { validator: FormValidator.rules.email, message: 'Please enter a valid email address' }\n            ])\n            .addRule('password', [\n                { validator: FormValidator.rules.required, message: 'Password is required' },\n                { validator: FormValidator.rules.minLength(6), message: 'Password must be at least 6 characters' }\n            ]);\n    }\n\n    setupSignupValidation() {\n        if (!this.signupValidator) return;\n        \n        this.signupValidator\n            .addRule('name', [\n                { validator: FormValidator.rules.required, message: 'Name is required' },\n                { validator: FormValidator.rules.minLength(2), message: 'Name must be at least 2 characters' }\n            ])\n            .addRule('email', [\n                { validator: FormValidator.rules.required, message: 'Email is required' },\n                { validator: FormValidator.rules.email, message: 'Please enter a valid email address' }\n            ])\n            .addRule('password', [\n                { validator: FormValidator.rules.required, message: 'Password is required' },\n                { validator: FormValidator.rules.password, message: 'Password must be at least 8 characters with uppercase, lowercase, and number' }\n            ])\n            .addRule('confirmPassword', [\n                { validator: FormValidator.rules.required, message: 'Please confirm your password' },\n                { validator: FormValidator.rules.match('password'), message: 'Passwords do not match' }\n            ]);\n    }\n\n    setupForgotPasswordValidation() {\n        if (!this.forgotPasswordValidator) return;\n        \n        this.forgotPasswordValidator\n            .addRule('email', [\n                { validator: FormValidator.rules.required, message: 'Email is required' },\n                { validator: FormValidator.rules.email, message: 'Please enter a valid email address' }\n            ]);\n    }\n\n    setupSetPasswordValidation() {\n        if (!this.setPasswordValidator) return;\n        \n        this.setPasswordValidator\n            .addRule('newPassword', [\n                { validator: FormValidator.rules.required, message: 'New password is required' },\n                { validator: FormValidator.rules.password, message: 'Password must be at least 8 characters with uppercase, lowercase, and number' }\n            ])\n            .addRule('confirmPassword', [\n                { validator: FormValidator.rules.required, message: 'Please confirm your password' },\n                { validator: FormValidator.rules.match('newPassword'), message: 'Passwords do not match' }\n            ]);\n    }\n\n    loadPageSpecificHandlers() {\n        // Handle demo login prefill\n        this.setupDemoLogin();\n\n        // Handle URL parameters for verification\n        this.handleUrlParameters();\n\n        // Initialize Google Sign-In\n        this.initializeGoogleSignIn();\n    }\n\n    setupDemoLogin() {\n        const demoButtons = document.querySelectorAll('.demo-login-btn');\n        demoButtons.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const userType = e.target.dataset.userType;\n                this.prefillDemoCredentials(userType);\n            });\n        });\n    }\n\n    prefillDemoCredentials(userType) {\n        const emailInput = document.getElementById('email');\n        const passwordInput = document.getElementById('password');\n\n        if (!emailInput || !passwordInput) return;\n\n        const credentials = {\n            admin: { email: 'admin@videohub.com', password: 'admin123' },\n            creator: { email: 'creator@videohub.com', password: 'creator123' },\n            viewer: { email: 'viewer@videohub.com', password: 'viewer123' }\n        };\n\n        if (credentials[userType]) {\n            emailInput.value = credentials[userType].email;\n            passwordInput.value = credentials[userType].password;\n        }\n    }\n\n    handleUrlParameters() {\n        const urlParams = new URLSearchParams(window.location.search);\n        const email = urlParams.get('email');\n        const token = urlParams.get('token');\n\n        if (email) {\n            const userEmailSpan = document.getElementById('userEmail');\n            if (userEmailSpan) {\n                userEmailSpan.textContent = email;\n            }\n        }\n\n        if (token) {\n            // Auto-verify if token is present\n            setTimeout(() => {\n                //this.handleEmailVerification();\n            }, 1000);\n        }\n    }\n\n    async handleLogin(e) {\n        e.preventDefault();\n\n        // Validate form\n        if (this.loginValidator && !this.loginValidator.validateForm()) {\n            if (window.notificationManager) {\n                window.notificationManager.showError('Please fix the errors below');\n            }\n            return;\n        }\n\n        const submitButton = e.target.querySelector('button[type=\"submit\"]') || document.getElementById('loginBtn');\n        const email = document.getElementById('email').value;\n        const password = document.getElementById('password').value;\n        const rememberMe = document.getElementById('rememberMe').checked;\n\n        try {\n            // Set button loading state\n            if (window.ButtonLoader) {\n                window.ButtonLoader.setLoading(submitButton, 'Signing in...');\n            } else if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, true, 'Signing in...');\n            }\n\n            // Wait for API service to be available\n            await this.waitForAPIService();          \n            // Make API call to login endpoint\n            const response = await window.apiService.post(`/api/auth/login`, {\n                email: email,\n                password: password\n            });\n\n            if (response.success && response.data) {\n                // Store user session and token\n                const userData = response.data.user;\n                const token = response.data.token;\n\n                // Use AuthManager for centralized auth handling\n                if (window.authManager) {\n                    window.authManager.setAuthentication({\n                        email: userData.email,\n                        userType: userData.role,\n                        name: userData.name,\n                        id: userData.id\n                    }, token, rememberMe);\n                } else {\n                    // Fallback to old method\n                    this.setUserSession({\n                        email: userData.email,\n                        userType: userData.role,\n                        name: userData.name,\n                        id: userData.id,\n                        rememberMe: rememberMe\n                    });\n\n                    // Store auth token with remember me preference\n                    if (window.apiService) {\n                        window.apiService.setAuthToken(token, rememberMe);\n                    }\n                }\n\n                if (window.notificationManager) {\n                    window.notificationManager.showSuccess('Login successful! Redirecting...');\n                } else if (window.commonUtils) {\n                    window.commonUtils.showToast('Login successful! Redirecting...', 'success');\n                }\n\n                // Redirect based on user type\n                setTimeout(() => {\n                    this.redirectToUserDashboard(userData.role);\n                }, 1000);\n            } else {\n                throw new Error(response.error || 'Login failed');\n            }\n\n        } catch (error) {\n            console.error('Login error:', error);\n            if (window.notificationManager) {\n                window.notificationManager.showError(error.message || 'Invalid email or password. Please try again.');\n            } else if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Login');\n            } else {\n                this.showError(error.message || 'Invalid email or password. Please try again.');\n            }\n        } finally {\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, false);\n            }\n        }\n    }\n\n    async handleSignup(e) {\n        e.preventDefault();\n\n        const submitButton = e.target.querySelector('button[type=\"submit\"]');\n        const formData = {\n            firstName: document.getElementById('firstName').value,\n            lastName: document.getElementById('lastName').value,\n            email: document.getElementById('email').value,\n            userType: document.getElementById('userType').value,\n            password: document.getElementById('password').value,\n            confirmPassword: document.getElementById('confirmPassword').value,\n            agreeTerms: document.getElementById('agreeTerms').checked\n        };\n\n        try {\n            // Validate form\n            this.validateSignupForm(formData);\n\n            // Set button loading state\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, true, 'Creating account...');\n            }\n\n            // Wait for API service to be available\n            await this.waitForAPIService();\n\n            // Make API call to register endpoint\n         \n            const response = await window.apiService.post(`/api/auth/register`, formData);\n\n            if (response.success && response.data) {\n                if (response.data.verification_required) {\n                    // Show email verification message\n                    if (window.commonUtils) {\n                        window.commonUtils.showToast(response.message || 'Account created! Please check your email to verify.', 'success');\n                    }\n\n                    // Store email for verification page\n                    sessionStorage.setItem('pendingVerificationEmail', formData.email);\n\n                    // Redirect to email verification page\n                    setTimeout(() => {\n                        window.location.href = `email-verification.html?email=${encodeURIComponent(formData.email)}`;\n                    }, 2000);\n                } else {\n                    // Traditional registration flow (if email verification is disabled)\n                    if (window.commonUtils) {\n                        window.commonUtils.showToast('Account created successfully! You can now log in.', 'success');\n                    }\n\n                    // Redirect to login page\n                    setTimeout(() => {\n                        window.location.href = 'login.html';\n                    }, 1500);\n                }\n            } else {\n                throw new Error(response.error || 'Registration failed');\n            }\n\n        } catch (error) {\n            console.error('Registration error:', error);\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Registration');\n            } else {\n                this.showError(error.message || 'Registration failed. Please try again.');\n            }\n        } finally {\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, false);\n            }\n        }\n    }\n\n    async handleForgotPassword(e) {\n        e.preventDefault();\n\n        const submitButton = e.target.querySelector('button[type=\"submit\"]');\n        const email = document.getElementById('email').value;\n\n        if (!email) {\n            this.showError('Please enter your email address.');\n            return;\n        }\n\n        try {\n            // Set button loading state\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, true, 'Sending reset link...');\n            } else {\n                this.showLoading('Sending reset link...');\n            }\n\n            // Make direct API call for forgot password endpoint using configured base URL\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await fetch(`${apiUrl}/auth/forgot-password`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ email })\n            });\n\n            const result = await response.json();\n\n            if (result.success) {\n                // Hide form and show success message\n                document.getElementById('emailForm').style.display = 'none';\n                document.getElementById('successMessage').classList.remove('d-none');\n\n                if (window.commonUtils) {\n                    window.commonUtils.showToast(result.message || 'Password reset link sent successfully!', 'success');\n                }\n            } else {\n                throw new Error(result.error || result.message || 'Failed to send reset email');\n            }\n\n        } catch (error) {\n            console.error('Forgot password error:', error);\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Password Reset');\n            } else {\n                this.showError(error.message || 'Failed to send reset email. Please try again.');\n            }\n        } finally {\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, false);\n            } else {\n                this.hideLoading();\n            }\n        }\n    }\n\n    async handleResendForgotPassword(e) {\n        e.preventDefault();\n\n        // Hide success message and show form again\n        document.getElementById('successMessage').classList.add('d-none');\n        document.getElementById('emailForm').style.display = 'block';\n\n        if (window.commonUtils) {\n            window.commonUtils.showToast('Please enter your email again to resend the reset link.', 'info');\n        }\n    }\n\n    async handleEmailVerification() {\n        try {\n            this.showLoading('Verifying email...');\n\n            // Get token from URL parameters\n            const urlParams = new URLSearchParams(window.location.search);\n            const token = urlParams.get('token');\n\n            if (!token) {\n                throw new Error('No verification token provided');\n            }\n\n            // Make direct API call without waiting for API service using configured base URL\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await fetch(`${apiUrl}/endpoints/auth.php`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ \n                    action: 'verify-email',\n                    token: token \n                })\n            });\n\n            const result = await response.json();\n\n            if (result.success) {\n                // Hide pending verification and show success\n                const pendingVerification = document.getElementById('pendingVerification');\n                const verificationSuccess = document.getElementById('verificationSuccess');\n\n                if (pendingVerification) pendingVerification.style.display = 'none';\n                if (verificationSuccess) verificationSuccess.classList.remove('d-none');\n\n                this.showSuccess('Email verified successfully! You can now log in.');\n\n                // Redirect to login page after success\n                setTimeout(() => {\n                    window.location.href = 'login.html';\n                }, 3000);\n            } else {\n                throw new Error(result.message || 'Verification failed');\n            }\n\n        } catch (error) {\n            console.error('Email verification error:', error);\n            this.showError(error.message || 'Verification failed. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleResendEmail() {\n        try {\n            this.showLoading('Resending verification email...');\n\n            // Get email from URL parameters or session storage\n            const urlParams = new URLSearchParams(window.location.search);\n            const email = urlParams.get('email') || sessionStorage.getItem('pendingVerificationEmail');\n\n            if (!email) {\n                throw new Error('No email address available for resending');\n            }\n\n            // Make direct API call without waiting for API service using configured base URL\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await fetch(`${apiUrl}/endpoints/auth.php`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ \n                    action: 'resend-verification',\n                    email: email \n                })\n            });\n\n            const result = await response.json();\n\n            if (result.success) {\n                this.showSuccess('Verification email sent successfully!');\n            } else {\n                throw new Error(result.message || 'Failed to resend email');\n            }\n\n        } catch (error) {\n            console.error('Resend email error:', error);\n            this.showError(error.message || 'Failed to resend email. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleSetPassword(e) {\n        e.preventDefault();\n\n        const submitButton = e.target.querySelector('button[type=\"submit\"]');\n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n\n        try {\n            // Validate passwords\n            if (newPassword !== confirmPassword) {\n                throw new Error('Passwords do not match');\n            }\n\n            if (!this.isPasswordStrong(newPassword)) {\n                throw new Error('Password does not meet strength requirements');\n            }\n\n            // Get token from URL parameters\n            const urlParams = new URLSearchParams(window.location.search);\n            const token = urlParams.get('token');\n\n            if (!token) {\n                throw new Error('Invalid or missing reset token');\n            }\n\n            // Set button loading state\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, true, 'Setting password...');\n            } else {\n                this.showLoading('Setting password...');\n            }\n\n            // Make direct API call for reset password endpoint using configured base URL\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await fetch(`${apiUrl}/auth/reset-password`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ \n                    token: token,\n                    password: newPassword \n                })\n            });\n\n            const result = await response.json();\n\n            if (result.success) {\n                if (window.commonUtils) {\n                    window.commonUtils.showToast('Password reset successfully! You can now log in.', 'success');\n                } else {\n                    this.showSuccess('Password set successfully! You can now log in.');\n                }\n\n                // Redirect to login\n                setTimeout(() => {\n                    window.location.href = 'login.html';\n                }, 1500);\n            } else {\n                throw new Error(result.error || result.message || 'Failed to reset password');\n            }\n\n        } catch (error) {\n            console.error('Set password error:', error);\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Password Reset');\n            } else {\n                this.showError(error.message || 'Failed to set password. Please try again.');\n            }\n        } finally {\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, false);\n            } else {\n                this.hideLoading();\n            }\n        }\n    }\n\n    validateSignupForm(formData) {\n        if (!formData.firstName.trim()) {\n            throw new Error('First name is required');\n        }\n\n        if (!formData.lastName.trim()) {\n            throw new Error('Last name is required');\n        }\n\n        if (!this.isValidEmail(formData.email)) {\n            throw new Error('Please enter a valid email address');\n        }\n\n        if (!formData.userType) {\n            throw new Error('Please select an account type');\n        }\n\n        if (formData.password.length < 8) {\n            throw new Error('Password must be at least 8 characters long');\n        }\n\n        if (formData.password !== formData.confirmPassword) {\n            throw new Error('Passwords do not match');\n        }\n\n        if (!formData.agreeTerms) {\n            throw new Error('You must agree to the Terms of Service');\n        }\n    }\n\n    checkPasswordStrength(e) {\n        const password = e.target.value;\n        const strengthBars = document.querySelectorAll('.strength-bar');\n        const strengthText = document.getElementById('strengthText');\n\n        if (!strengthBars.length || !strengthText) return;\n\n        const strength = this.calculatePasswordStrength(password);\n\n        // Reset all bars\n        strengthBars.forEach(bar => {\n            bar.className = 'strength-bar';\n        });\n\n        // Fill bars based on strength\n        for (let i = 0; i < strength.score; i++) {\n            strengthBars[i].classList.add(strength.class);\n        }\n\n        strengthText.textContent = strength.text;\n        strengthText.className = `text-${strength.class}`;\n    }\n\n    calculatePasswordStrength(password) {\n        let score = 0;\n        let feedback = [];\n\n        if (password.length >= 8) score++;\n        if (/[a-z]/.test(password)) score++;\n        if (/[A-Z]/.test(password)) score++;\n        if (/[0-9]/.test(password)) score++;\n        if (/[^A-Za-z0-9]/.test(password)) score++;\n\n        const strengthLevels = {\n            0: { class: 'muted', text: 'Enter a password' },\n            1: { class: 'danger', text: 'Very weak' },\n            2: { class: 'warning', text: 'Weak' },\n            3: { class: 'info', text: 'Fair' },\n            4: { class: 'success', text: 'Good' },\n            5: { class: 'success', text: 'Strong' }\n        };\n\n        return { score, ...strengthLevels[score] };\n    }\n\n    isPasswordStrong(password) {\n        return password.length >= 8 && \n               /[a-z]/.test(password) && \n               /[A-Z]/.test(password) && \n               /[0-9]/.test(password);\n    }\n\n    togglePasswordVisibility() {\n        const passwordInput = document.getElementById('newPassword');\n        const toggleButton = document.getElementById('togglePassword');\n\n        if (passwordInput.type === 'password') {\n            passwordInput.type = 'text';\n            toggleButton.innerHTML = '<i class=\"fas fa-eye-slash\"></i>';\n        } else {\n            passwordInput.type = 'password';\n            toggleButton.innerHTML = '<i class=\"fas fa-eye\"></i>';\n        }\n    }\n\n    getUserTypeFromEmail(email) {\n        if (email.includes('admin@')) return 'admin';\n        if (email.includes('creator@')) return 'creator';\n        if (email.includes('viewer@')) return 'viewer';\n        return null;\n    }\n\n    redirectToUserDashboard(userType) {\n        const dashboardUrls = {\n            admin: '../admin/dashboard.html',\n            creator: '../creator/dashboard.html',\n            viewer: '../viewer/dashboard.html'\n        };\n\n        window.location.href = dashboardUrls[userType];\n    }\n\n    setUserSession(userData) {\n        const sessionData = {\n            ...userData,\n            timestamp: new Date().toISOString()\n        };\n\n        if (userData.rememberMe) {\n            localStorage.setItem('userSession', JSON.stringify(sessionData));\n        } else {\n            sessionStorage.setItem('userSession', JSON.stringify(sessionData));\n        }\n    }\n\n    getUserSession() {\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n\n        const session = localSession || sessionSession;\n        return session ? JSON.parse(session) : null;\n    }\n\n    clearUserSession() {\n        localStorage.removeItem('userSession');\n        sessionStorage.removeItem('userSession');\n    }\n\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    async waitForAPIService() {\n        let retries = 0;\n        const maxRetries = 50;\n\n        while (retries < maxRetries && !window.apiService) {\n            await new Promise(resolve => setTimeout(resolve, 100));\n            retries++;\n        }\n\n        if (!window.apiService) {\n            throw new Error('API service not available');\n        }\n    }\n\n    showLoading(message = 'Loading...') {\n        // Create or update loading indicator\n        let loader = document.getElementById('globalLoader');\n        if (!loader) {\n            loader = document.createElement('div');\n            loader.id = 'globalLoader';\n            loader.className = 'position-fixed top-50 start-50 translate-middle';\n            loader.style.zIndex = '9999';\n            document.body.appendChild(loader);\n        }\n\n        loader.innerHTML = `\n            <div class=\"bg-white p-4 rounded shadow text-center\">\n                <div class=\"spinner-border text-primary mb-2\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div>${message}</div>\n            </div>\n        `;\n        loader.style.display = 'block';\n    }\n\n    hideLoading() {\n        const loader = document.getElementById('globalLoader');\n        if (loader) {\n            loader.style.display = 'none';\n        }\n    }\n\n    showSuccess(message) {\n        this.showMessage(message, 'success');\n    }\n\n    showError(message) {\n        this.showMessage(message, 'danger');\n    }\n\n    showMessage(message, type = 'info') {\n        // Create toast notification\n        const toastContainer = document.getElementById('toastContainer') || this.createToastContainer();\n\n        const toast = document.createElement('div');\n        toast.className = `toast align-items-center text-bg-${type} border-0`;\n        toast.setAttribute('role', 'alert');\n        toast.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">${message}</div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        `;\n\n        toastContainer.appendChild(toast);\n\n        // Initialize and show toast\n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n\n        // Remove toast after it's hidden\n        toast.addEventListener('hidden.bs.toast', () => {\n            toast.remove();\n        });\n    }\n\n    createToastContainer() {\n        const container = document.createElement('div');\n        container.id = 'toastContainer';\n        container.className = 'toast-container position-fixed top-0 end-0 p-3';\n        container.style.zIndex = '9999';\n        document.body.appendChild(container);\n        return container;\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    isValidReturnUrl(url) {\n        try {\n            const decodedUrl = decodeURIComponent(url);\n            // Only allow internal URLs to dashboard pages\n            return decodedUrl.startsWith('/admin/') || \n                   decodedUrl.startsWith('/creator/') || \n                   decodedUrl.startsWith('/viewer/');\n        } catch {\n            return false;\n        }\n    }\n\n    initializeGoogleSignIn() {\n        // Wait for Google Sign-In API to load with retry limit\n        let retries = 0;\n        const maxRetries = 50;\n\n        const checkAndInit = () => {\n            if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {\n                try {\n                    google.accounts.id.initialize({\n                        client_id: this.googleClientId,\n                        callback: this.handleGoogleCredentialResponse.bind(this),\n                        auto_select: false,\n                        cancel_on_tap_outside: true\n                    });\n                    console.log('Google Sign-In initialized successfully');\n                } catch (error) {\n                    console.error('Error initializing Google Sign-In:', error);\n                }\n            } else if (retries < maxRetries) {\n                retries++;\n                setTimeout(checkAndInit, 100);\n            } else {\n                console.error('Google Sign-In API failed to load after maximum retries');\n            }\n        };\n\n        checkAndInit();\n    }\n\n    handleGoogleSignIn() {\n        if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {\n            try {\n                // Use renderButton for more reliable sign-in\n                const buttonContainer = document.createElement('div');\n                buttonContainer.style.display = 'none';\n                document.body.appendChild(buttonContainer);\n\n                google.accounts.id.renderButton(buttonContainer, {\n                    theme: 'outline',\n                    size: 'large',\n                    width: 250\n                });\n\n                // Trigger click programmatically\n                setTimeout(() => {\n                    const googleButton = buttonContainer.querySelector('div[role=\"button\"]');\n                    if (googleButton) {\n                        googleButton.click();\n                    } else {\n                        // Fallback to prompt\n                        google.accounts.id.prompt();\n                    }\n                    document.body.removeChild(buttonContainer);\n                }, 100);\n\n            } catch (error) {\n                console.error('Google Sign-In error:', error);\n                this.showError('Google Sign-In encountered an error. Please try again.');\n            }\n        } else {\n            this.showError('Google Sign-In is not available. Please refresh the page and try again.');\n        }\n    }\n\n    handleGoogleSignUp() {\n        // Same logic as sign-in, the backend will handle the difference\n        this.handleGoogleSignIn();\n    }\n\n    async handleGoogleCredentialResponse(response) {\n        try {\n            console.log('Google credential response received');\n            this.showLoading('Authenticating with Google...');\n\n            if (!response || !response.credential) {\n                throw new Error('No credential received from Google');\n            }\n\n            // Wait for API service to be available\n            await this.waitForAPIService();\n\n            const isSignupPage = window.location.pathname.includes('signup.html');\n            const action = isSignupPage ? 'google-signup' : 'google-login';\n\n            // Send Google credential to backend using action-based endpoint\n            const apiResponse = await window.apiService.post('/api/auth', {\n                action: action,\n                credential: response.credential\n            });\n\n            if (apiResponse.success && apiResponse.data) {\n                const userData = apiResponse.data.user;\n                const token = apiResponse.data.token;\n\n                this.setUserSession({\n                    email: userData.email,\n                    userType: userData.role,\n                    name: userData.name,\n                    id: userData.id,\n                    rememberMe: true\n                });\n\n                // Store auth token (Google auth defaults to remember me)\n                if (window.apiService) {\n                    window.apiService.setAuthToken(token, true);\n                }\n\n                const successMessage = isSignupPage ? \n                    'Account created successfully with Google!' : \n                    'Google Sign-In successful! Redirecting...';\n\n                this.showSuccess(successMessage);\n\n                // Redirect based on user type\n                setTimeout(() => {\n                    this.redirectToUserDashboard(userData.role);\n                }, 1500);\n            } else {\n                throw new Error(apiResponse.message || 'Google authentication failed');\n            }\n\n        } catch (error) {\n            console.error('Google authentication error:', error);\n            this.showError(error.message || 'Google authentication failed. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n}\n\n// Initialize authentication manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new AuthManager();\n});\n\n// Export for other modules\nwindow.AuthManager = AuthManager;","size_bytes":37268},"assets/js/common.js":{"content":"/**\n * VideoHub Common Utilities Module\n * Shared functionality and utilities used across all modules\n */\n\nclass CommonUtils {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.setupGlobalErrorHandler();\n        this.setupToastContainer();\n        this.bindCommonEvents();\n        this.checkUserSession();\n    }\n\n    setupGlobalErrorHandler() {\n        window.addEventListener('error', (event) => {\n            console.error('Global error:', event.error);\n            this.showToast('An unexpected error occurred. Please try again.', 'danger');\n        });\n\n        window.addEventListener('unhandledrejection', (event) => {\n            console.error('Unhandled promise rejection:', event.reason);\n            this.showToast('An unexpected error occurred. Please try again.', 'danger');\n        });\n    }\n\n    setupToastContainer() {\n        if (!document.getElementById('toastContainer')) {\n            const toastContainer = document.createElement('div');\n            toastContainer.id = 'toastContainer';\n            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';\n            toastContainer.style.zIndex = '9999';\n            document.body.appendChild(toastContainer);\n        }\n    }\n\n    bindCommonEvents() {\n        // Handle logout links\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('a[href*=\"login.html\"]') && e.target.textContent.includes('Logout')) {\n                e.preventDefault();\n                this.handleLogout();\n            }\n            // Also handle logout class\n            if (e.target.matches('.logout-btn') || e.target.closest('.logout-btn')) {\n                e.preventDefault();\n                this.handleLogout();\n            }\n        });\n\n        // Handle demo mode notifications\n        this.showDemoModeNotification();\n    }\n\n    showDemoModeNotification() {\n        // Demo mode notification removed per user request\n    }\n\n    checkUserSession() {\n        const session = this.getUserSession();\n        if (session && this.isSessionExpired(session)) {\n            this.clearUserSession();\n            if (!window.location.pathname.includes('auth/')) {\n                this.showToast('Your session has expired. Please log in again.', 'warning');\n                setTimeout(() => {\n                    window.location.href = '/auth/login.html';\n                }, 2000);\n            }\n        }\n    }\n\n    // Session Management\n    getUserSession() {\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n\n        const session = localSession || sessionSession;\n        return session ? JSON.parse(session) : null;\n    }\n\n    setUserSession(userData) {\n        const sessionData = {\n            ...userData,\n            timestamp: new Date().toISOString(),\n            expires: new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString() // 24 hours\n        };\n\n        if (userData.rememberMe) {\n            localStorage.setItem('userSession', JSON.stringify(sessionData));\n        } else {\n            sessionStorage.setItem('userSession', JSON.stringify(sessionData));\n        }\n    }\n\n    clearUserSession() {\n        localStorage.removeItem('userSession');\n        sessionStorage.removeItem('userSession');\n    }\n\n    isSessionExpired(session) {\n        if (!session.expires) return false;\n        return new Date() > new Date(session.expires);\n    }\n\n    handleLogout() {\n        // Show confirmation modal instead of direct logout\n        this.showLogoutConfirmModal();\n    }\n\n    performLogout() {\n        this.clearUserSession();\n        this.showToast('Logged out successfully!', 'success');\n\n        setTimeout(() => {\n            // Use config-aware redirect if available\n            if (window.videoHubConfig) {\n                window.location.href = window.videoHubConfig.getUrl('/auth/login.html');\n            } else {\n                // Fallback for environments without deployment config\n                window.location.href = '/auth/login.html';\n            }\n        }, 1000);\n    }\n\n    showLogoutConfirmModal() {\n        // Create logout confirmation modal if it doesn't exist\n        let logoutModal = document.getElementById('logoutConfirmModal');\n        if (!logoutModal) {\n            logoutModal = document.createElement('div');\n            logoutModal.className = 'modal fade';\n            logoutModal.id = 'logoutConfirmModal';\n            logoutModal.setAttribute('tabindex', '-1');\n            logoutModal.innerHTML = `\n                <div class=\"modal-dialog modal-dialog-centered\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">\n                                <i class=\"fas fa-sign-out-alt me-2\"></i>Confirm Logout\n                            </h5>\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <p>Are you sure you want to log out? You will need to sign in again to access your account.</p>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                            <button type=\"button\" class=\"btn btn-danger\" id=\"confirmLogoutBtn\">\n                                <i class=\"fas fa-sign-out-alt me-2\"></i>Logout\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `;\n            document.body.appendChild(logoutModal);\n\n            // Add event listener to confirm button\n            document.getElementById('confirmLogoutBtn').addEventListener('click', () => {\n                const modal = bootstrap.Modal.getInstance(logoutModal);\n                modal.hide();\n                this.performLogout();\n            });\n        }\n\n        const modal = new bootstrap.Modal(logoutModal);\n        modal.show();\n    }\n\n    // Toast Notifications\n    showToast(message, type = 'info', delay = 5000) {\n        const toastContainer = document.getElementById('toastContainer');\n        if (!toastContainer) return;\n\n        const toastId = 'toast-' + Date.now();\n        const toastElement = document.createElement('div');\n        toastElement.id = toastId;\n        toastElement.className = `toast align-items-center text-bg-${type} border-0`;\n        toastElement.setAttribute('role', 'alert');\n\n        const iconMap = {\n            success: 'fas fa-check-circle',\n            danger: 'fas fa-exclamation-circle',\n            warning: 'fas fa-exclamation-triangle',\n            info: 'fas fa-info-circle'\n        };\n\n        toastElement.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">\n                    <i class=\"${iconMap[type] || iconMap.info} me-2\"></i>\n                    ${message}\n                </div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        `;\n\n        toastContainer.appendChild(toastElement);\n\n        const toast = new bootstrap.Toast(toastElement, {\n            autohide: true,\n            delay: delay\n        });\n        toast.show();\n\n        toastElement.addEventListener('hidden.bs.toast', () => {\n            toastElement.remove();\n        });\n    }\n\n    // Loading States\n    showLoading(message = 'Loading...', target = null) {\n        const loaderId = 'loader-' + Date.now();\n        const loader = document.createElement('div');\n        loader.id = loaderId;\n        loader.className = 'position-absolute top-50 start-50 translate-middle';\n        loader.style.zIndex = '9999';\n        loader.innerHTML = `\n            <div class=\"bg-white p-4 rounded shadow text-center\">\n                <div class=\"spinner-border text-primary mb-2\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div>${message}</div>\n            </div>\n        `;\n\n        if (target) {\n            target.style.position = 'relative';\n            target.appendChild(loader);\n        } else {\n            loader.className = 'position-fixed top-50 start-50 translate-middle';\n            document.body.appendChild(loader);\n        }\n\n        return loaderId;\n    }\n\n    hideLoading(loaderId = null) {\n        if (loaderId) {\n            const loader = document.getElementById(loaderId);\n            if (loader) loader.remove();\n        } else {\n            // Remove all loaders\n            document.querySelectorAll('[id^=\"loader-\"]').forEach(loader => {\n                loader.remove();\n            });\n        }\n    }\n\n    // Button Loading States\n    setButtonLoading(button, isLoading = true, loadingText = 'Loading...') {\n        if (!button) return;\n\n        if (isLoading) {\n            // Store original content\n            button.dataset.originalContent = button.innerHTML;\n            button.dataset.originalDisabled = button.disabled;\n\n            // Set loading state\n            button.disabled = true;\n            button.innerHTML = `\n                <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\n                ${loadingText}\n            `;\n            button.classList.add('btn-loading');\n        } else {\n            // Restore original state\n            if (button.dataset.originalContent) {\n                button.innerHTML = button.dataset.originalContent;\n                delete button.dataset.originalContent;\n            }\n\n            button.disabled = button.dataset.originalDisabled === 'true';\n            delete button.dataset.originalDisabled;\n            button.classList.remove('btn-loading');\n        }\n    }\n\n    // Section Loading States\n    showSectionLoader(sectionElement, message = 'Loading data...') {\n        if (!sectionElement) return null;\n\n        const loaderId = 'section-loader-' + Date.now();\n        const existingLoader = sectionElement.querySelector('.section-loader');\n\n        if (existingLoader) {\n            existingLoader.remove();\n        }\n\n        const loader = document.createElement('div');\n        loader.id = loaderId;\n        loader.className = 'section-loader d-flex justify-content-center align-items-center py-5';\n        loader.innerHTML = `\n            <div class=\"text-center\">\n                <div class=\"spinner-border text-primary mb-3\" role=\"status\" style=\"width: 3rem; height: 3rem;\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"text-muted\">${message}</div>\n            </div>\n        `;\n\n        // Hide existing content\n        const content = sectionElement.children;\n        for (let i = 0; i < content.length; i++) {\n            if (!content[i].classList.contains('section-loader')) {\n                content[i].style.display = 'none';\n            }\n        }\n\n        sectionElement.appendChild(loader);\n        return loaderId;\n    }\n\n    hideSectionLoader(sectionElement) {\n        if (!sectionElement) return;\n\n        const loader = sectionElement.querySelector('.section-loader');\n        if (loader) {\n            loader.remove();\n        }\n\n        // Show hidden content\n        const content = sectionElement.children;\n        for (let i = 0; i < content.length; i++) {\n            if (!content[i].classList.contains('section-loader')) {\n                content[i].style.display = '';\n            }\n        }\n    }\n\n    // Enhanced Error Handling\n    handleAPIError(error, context = '', showToast = true) {\n        console.error(`API Error in ${context}:`, error);\n\n        let message = 'An unexpected error occurred. Please try again.';\n        let type = 'danger';\n\n        if (error) {\n            if (error.isNetworkError) {\n                message = 'Network error. Please check your connection and try again.';\n                type = 'warning';\n            } else if (error.error) {\n                message = error.error;\n            } else if (typeof error === 'string') {\n                message = error;\n            } else if (error.message) {\n                message = error.message;\n            }\n        }\n\n        if (showToast) {\n            this.showToast(message, type);\n        }\n\n        return { message, type };\n    }\n\n    // Retry functionality\n    async retryOperation(operation, maxRetries = 3, delay = 1000) {\n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\n            try {\n                return await operation();\n            } catch (error) {\n                if (attempt === maxRetries) {\n                    throw error;\n                }\n                console.warn(`Attempt ${attempt} failed, retrying in ${delay}ms...`, error);\n                await new Promise(resolve => setTimeout(resolve, delay));\n                delay *= 2; // Exponential backoff\n            }\n        }\n    }\n\n    // Form Validation\n    validateEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    validatePassword(password) {\n        return {\n            length: password.length >= 8,\n            uppercase: /[A-Z]/.test(password),\n            lowercase: /[a-z]/.test(password),\n            number: /[0-9]/.test(password),\n            special: /[^A-Za-z0-9]/.test(password)\n        };\n    }\n\n    sanitizeInput(input) {\n        const div = document.createElement('div');\n        div.textContent = input;\n        return div.innerHTML;\n    }\n\n    // Date and Time Utilities\n    formatDate(date, format = 'short') {\n        const d = new Date(date);\n        const options = {\n            short: { year: 'numeric', month: 'short', day: 'numeric' },\n            long: { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' },\n            time: { hour: '2-digit', minute: '2-digit' }\n        };\n        return d.toLocaleDateString('en-US', options[format] || options.short);\n    }\n\n    formatDuration(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n\n        if (hours > 0) {\n            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        }\n        return `${minutes}:${secs.toString().padStart(2, '0')}`;\n    }\n\n    // Video Playback Utilities\n    openVideoInNewTab(videoId, youtubeId = null) {\n        // If youtubeId is directly provided, use it\n        if (youtubeId) {\n            const youtubeUrl = `https://www.youtube.com/watch?v=${youtubeId}`;\n            window.open(youtubeUrl, '_blank', 'noopener,noreferrer');\n            this.showToast(`Opening video in new tab`, 'info');\n            return;\n        }\n\n        // Otherwise, try to find the video in available data\n        let video = null;\n\n        // Check viewer data\n        if (window.viewerManager && window.viewerManager.videos) {\n            video = window.viewerManager.videos.find(v => v.id == videoId);\n        }\n\n        // Check creator data\n        if (!video && window.creatorManager && window.creatorManager.videos) {\n            video = window.creatorManager.videos.find(v => v.id == videoId);\n        }\n\n        // Check admin data\n        if (!video && window.adminManager && window.adminManager.videos) {\n            video = window.adminManager.videos.find(v => v.id == videoId);\n        }\n\n        if (!video) {\n            this.showToast('Video not found', 'error');\n            return;\n        }\n\n        // Get YouTube ID\n        let youtubeVideoId = video.youtube_id;\n\n        if (!youtubeVideoId && (video.thumbnail || video.youtube_thumbnail)) {\n            // Try to extract from thumbnail URL as fallback\n            const thumbnailUrl = video.thumbnail || video.youtube_thumbnail;\n            const patterns = [\n                /\\/vi\\/([^/]+)\\//, // YouTube thumbnail URL format\n                /youtu\\.be\\/([^?]+)/, // Short URL format\n                /embed\\/([^?]+)/ // Embed URL format\n            ];\n\n            for (const pattern of patterns) {\n                const match = thumbnailUrl.match(pattern);\n                if (match) {\n                    youtubeVideoId = match[1];\n                    break;\n                }\n            }\n        }\n\n        if (!youtubeVideoId) {\n            this.showToast('YouTube video ID not available', 'error');\n            return;\n        }\n\n        // Open YouTube video in new tab\n        const youtubeUrl = `https://www.youtube.com/watch?v=${youtubeVideoId}`;\n        window.open(youtubeUrl, '_blank', 'noopener,noreferrer');\n\n        this.showToast(`Opening \"${video.title}\" in new tab`, 'info');\n    }\n\n    timeAgo(date) {\n        const now = new Date();\n        const past = new Date(date);\n        const diff = now - past;\n\n        const seconds = Math.floor(diff / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        const weeks = Math.floor(days / 7);\n        const months = Math.floor(days / 30);\n        const years = Math.floor(days / 365);\n\n        if (years > 0) return `${years} year${years > 1 ? 's' : ''} ago`;\n        if (months > 0) return `${months} month${months > 1 ? 's' : ''} ago`;\n        if (weeks > 0) return `${weeks} week${weeks > 1 ? 's' : ''} ago`;\n        if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;\n        if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n        if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n        return 'Just now';\n    }\n\n    // URL and Navigation Utilities\n    getQueryParam(param) {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get(param);\n    }\n\n    setQueryParam(param, value) {\n        const url = new URL(window.location);\n        url.searchParams.set(param, value);\n        window.history.pushState({}, '', url);\n    }\n\n    removeQueryParam(param) {\n        const url = new URL(window.location);\n        url.searchParams.delete(param);\n        window.history.pushState({}, '', url);\n    }\n\n    // Local Storage Utilities\n    setLocalData(key, data) {\n        try {\n            localStorage.setItem(key, JSON.stringify(data));\n            return true;\n        } catch (error) {\n            console.error('Error saving to localStorage:', error);\n            return false;\n        }\n    }\n\n    getLocalData(key) {\n        try {\n            const data = localStorage.getItem(key);\n            return data ? JSON.parse(data) : null;\n        } catch (error) {\n            console.error('Error reading from localStorage:', error);\n            return null;\n        }\n    }\n\n    removeLocalData(key) {\n        try {\n            localStorage.removeItem(key);\n            return true;\n        } catch (error) {\n            console.error('Error removing from localStorage:', error);\n            return false;\n        }\n    }\n\n    // Network Utilities\n    async makeRequest(url, options = {}) {\n        const defaultOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const mergedOptions = { ...defaultOptions, ...options };\n\n        try {\n            const response = await fetch(url, mergedOptions);\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            return await response.json();\n        } catch (error) {\n            console.error('Request failed:', error);\n            throw error;\n        }\n    }\n\n    // File Utilities\n    formatFileSize(bytes) {\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        if (bytes === 0) return '0 Bytes';\n        const i = Math.floor(Math.log(bytes) / Math.log(1024));\n        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    }\n\n    isValidImageFile(file) {\n        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n        return validTypes.includes(file.type);\n    }\n\n    isValidVideoFile(file) {\n        const validTypes = ['video/mp4', 'video/avi', 'video/mov', 'video/wmv', 'video/webm'];\n        return validTypes.includes(file.type);\n    }\n\n    // Animation Utilities\n    fadeIn(element, duration = 300) {\n        element.style.opacity = '0';\n        element.style.display = 'block';\n\n        let start = null;\n        const animate = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            element.style.opacity = Math.min(progress / duration, 1);\n\n            if (progress < duration) {\n                requestAnimationFrame(animate);\n            }\n        };\n\n        requestAnimationFrame(animate);\n    }\n\n    fadeOut(element, duration = 300) {\n        let start = null;\n        const animate = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            element.style.opacity = Math.max(1 - (progress / duration), 0);\n\n            if (progress < duration) {\n                requestAnimationFrame(animate);\n            } else {\n                element.style.display = 'none';\n            }\n        };\n\n        requestAnimationFrame(animate);\n    }\n\n    // Utility Functions\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n\n    throttle(func, limit) {\n        let inThrottle;\n        return function() {\n            const args = arguments;\n            const context = this;\n            if (!inThrottle) {\n                func.apply(context, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Currency Formatting\n    formatCurrency(amount, currency = 'USD') {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: currency\n        }).format(amount);\n    }\n\n    // Number Formatting\n    formatNumber(number) {\n        return new Intl.NumberFormat('en-US').format(number);\n    }\n\n    // Copy to Clipboard\n    async copyToClipboard(text) {\n        try {\n            await navigator.clipboard.writeText(text);\n            this.showToast('Copied to clipboard!', 'success');\n            return true;\n        } catch (error) {\n            console.error('Failed to copy:', error);\n            this.showToast('Failed to copy to clipboard', 'danger');\n            return false;\n        }\n    }\n\n    // Device Detection\n    isMobile() {\n        return window.innerWidth <= 768;\n    }\n\n    isTablet() {\n        return window.innerWidth > 768 && window.innerWidth <= 1024;\n    }\n\n    isDesktop() {\n        return window.innerWidth > 1024;\n    }\n\n    // Event Emitter\n    createEventEmitter() {\n        const events = {};\n\n        return {\n            on(event, callback) {\n                if (!events[event]) events[event] = [];\n                events[event].push(callback);\n            },\n\n            emit(event, data) {\n                if (events[event]) {\n                    events[event].forEach(callback => callback(data));\n                }\n            },\n\n            off(event, callback) {\n                if (events[event]) {\n                    events[event] = events[event].filter(cb => cb !== callback);\n                }\n            }\n        };\n    }\n\n    // Logout functionality\n    static async logout() {\n        try {\n            if (window.authGuard) {\n                await window.authGuard.logout();\n            } else {\n                // Fallback logout\n                if (window.apiService) {\n                    await window.apiService.post('/auth/logout');\n                }\n                localStorage.clear();\n                sessionStorage.clear();\n                window.location.href = '/auth/login.html';\n            }\n        } catch (error) {\n            console.error('Logout error:', error);\n            localStorage.clear();\n            sessionStorage.clear();\n            window.location.href = '/auth/login.html';\n        }\n    }\n}\n\n// Global logout confirmation function\nfunction showLogoutConfirm() {\n    if (window.commonUtils) {\n        window.commonUtils.showLogoutConfirmModal();\n    } else {\n        // Fallback if commonUtils not available\n        if (confirm('Are you sure you want to logout?')) {\n            logout();\n        }\n    }\n}\n\n// Enhanced logout confirmation with styled modal\nfunction showStyledLogoutConfirm() {\n    return new Promise((resolve) => {\n        // Create logout confirmation modal\n        let modal = document.getElementById('styledLogoutConfirmModal');\n        if (!modal) {\n            modal = document.createElement('div');\n            modal.className = 'modal fade';\n            modal.id = 'styledLogoutConfirmModal';\n            modal.setAttribute('tabindex', '-1');\n            modal.innerHTML = `\n                <div class=\"modal-dialog modal-dialog-centered\">\n                    <div class=\"modal-content border-0 shadow-lg\">\n                        <div class=\"modal-header bg-warning text-white border-0\">\n                            <h5 class=\"modal-title fw-bold\">\n                                <i class=\"fas fa-sign-out-alt me-2\"></i>Confirm Logout\n                            </h5>\n                            <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\"></button>\n                        </div>\n                        <div class=\"modal-body p-4\">\n                            <div class=\"alert alert-warning border-0 mb-4\">\n                                <div class=\"d-flex align-items-center\">\n                                    <i class=\"fas fa-exclamation-triangle fa-2x me-3 text-warning\"></i>\n                                    <div>\n                                        <p class=\"mb-1 fw-semibold\">Are you sure you want to logout?</p>\n                                        <small class=\"text-muted\">You will need to sign in again to access your account.</small>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"card border-0 bg-light\">\n                                <div class=\"card-body p-3\">\n                                    <h6 class=\"fw-bold text-dark mb-2\">\n                                        <i class=\"fas fa-info-circle me-2 text-info\"></i>Before you go\n                                    </h6>\n                                    <ul class=\"list-unstyled mb-0 small text-muted\">\n                                        <li><i class=\"fas fa-check text-success me-2\"></i>Your work has been saved automatically</li>\n                                        <li><i class=\"fas fa-check text-success me-2\"></i>You can login anytime to continue</li>\n                                        <li><i class=\"fas fa-check text-success me-2\"></i>Your session will be securely ended</li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"modal-footer border-0 pt-0\">\n                            <button type=\"button\" class=\"btn btn-outline-secondary px-4\" data-bs-dismiss=\"modal\">\n                                <i class=\"fas fa-times me-2\"></i>Stay Logged In\n                            </button>\n                            <button type=\"button\" class=\"btn btn-warning px-4\" id=\"confirmLogoutBtn\">\n                                <i class=\"fas fa-sign-out-alt me-2\"></i>Logout\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `;\n            document.body.appendChild(modal);\n        }\n\n        // Set up confirm button action\n        const confirmBtn = document.getElementById('confirmLogoutBtn');\n        confirmBtn.onclick = function() {\n            const bootstrapModal = bootstrap.Modal.getInstance(modal);\n            bootstrapModal.hide();\n            resolve(true);\n        };\n\n        // Set up cancel action\n        modal.addEventListener('hidden.bs.modal', function handler() {\n            modal.removeEventListener('hidden.bs.modal', handler);\n            resolve(false);\n        });\n\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n    });\n}\n\n\n// Global Toast Function\nwindow.showToast = function(message, type = 'info', delay = 5000) {\n    if (window.commonUtils) {\n        window.commonUtils.showToast(message, type, delay);\n    } else {\n        console.log(`${type.toUpperCase()}: ${message}`);\n    }\n};\n\n// Initialize common utilities when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.commonUtils = new CommonUtils();\n});\n\n// Export for other modules\nwindow.CommonUtils = CommonUtils;","size_bytes":29532},"assets/js/creator.js":{"content":"/**\n * VideoHub Creator Module\n * Handles creator dashboard functionality with API integration\n */\n\nclass CreatorManager {\n    constructor() {\n        this.stats = {};\n        this.videos = [];\n        this.filteredVideos = [];\n        this.earnings = [];\n        this.isLoading = false;\n        this.uploadValidator = null;\n        this.editVideoValidator = null;\n        this.currentPage = 1;\n        this.init();\n    }\n\n    async init() {\n        this.setupFormValidation();\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n        \n        // Only load data if we haven't already loaded it\n        if (!this.stats || Object.keys(this.stats).length === 0) {\n            await this.loadDashboardData();\n        }\n        \n        // Initialize filters after data loads\n        setTimeout(() => {\n            if (this.videos.length > 0) {\n                this.filteredVideos = [...this.videos];\n                this.updatePagination();\n            }\n        }, 1000);\n    }\n\n    setupFormValidation() {\n        // Setup validation after a short delay to ensure DOM is ready\n        setTimeout(() => {\n            // Initialize upload form validation\n            const uploadForm = document.getElementById('uploadForm');\n            if (uploadForm && window.FormValidator) {\n                this.uploadValidator = new FormValidator(uploadForm);\n                this.uploadValidator\n                    .addRule('videoTitle', [\n                        { validator: FormValidator.rules.required, message: 'Video title is required' },\n                        { validator: FormValidator.rules.minLength(3), message: 'Title must be at least 3 characters' },\n                        { validator: FormValidator.rules.maxLength(100), message: 'Title must be less than 100 characters' }\n                    ])\n                    .addRule('videoDescription', [\n                        { validator: FormValidator.rules.maxLength(5000), message: 'Description must be less than 5000 characters' }\n                    ])\n                    .addRule('videoPrice', [\n                        { validator: FormValidator.rules.required, message: 'Price is required' },\n                        { validator: FormValidator.rules.decimal, message: 'Price must be a valid number' },\n                        { validator: (value) => parseFloat(value) >= 0, message: 'Price must be 0 or greater' }\n                    ]);\n            }\n\n            // Initialize edit form validation  \n            const editForm = document.getElementById('editVideoForm');\n            if (editForm && window.FormValidator) {\n                this.editVideoValidator = new FormValidator(editForm);\n                this.editVideoValidator\n                    .addRule('editTitle', [\n                        { validator: FormValidator.rules.required, message: 'Video title is required' },\n                        { validator: FormValidator.rules.minLength(3), message: 'Title must be at least 3 characters' },\n                        { validator: FormValidator.rules.maxLength(100), message: 'Title must be less than 100 characters' }\n                    ])\n                    .addRule('editDescription', [\n                        { validator: FormValidator.rules.maxLength(5000), message: 'Description must be less than 5000 characters' }\n                    ])\n                    .addRule('editPrice', [\n                        { validator: FormValidator.rules.required, message: 'Price is required' },\n                        { validator: FormValidator.rules.decimal, message: 'Price must be a valid number' },\n                        { validator: (value) => parseFloat(value) >= 0, message: 'Price must be 0 or greater' }\n                    ]);\n            }\n        }, 500);\n    }\n\n    async loadDashboardData() {\n        // Prevent multiple concurrent loads using global state\n        if (window.VideoHubState && window.VideoHubState.isLoading('creatorData')) {\n            console.log('Creator data loading already in progress, skipping...');\n            return;\n        }\n        \n        this.isLoading = true;\n        if (window.VideoHubState) {\n            window.VideoHubState.setLoading('creatorData', true);\n        }\n\n        // Show section loaders\n        const dashboardSection = document.querySelector('.dashboard-stats');\n        const videosSection = document.querySelector('.recent-videos');\n        const earningsSection = document.querySelector('.recent-earnings');\n\n        if (window.commonUtils) {\n            if (dashboardSection) window.commonUtils.showSectionLoader(dashboardSection, 'Loading dashboard metrics...');\n            if (videosSection) window.commonUtils.showSectionLoader(videosSection, 'Loading recent videos...');\n            if (earningsSection) window.commonUtils.showSectionLoader(earningsSection, 'Loading earnings data...');\n        }\n        \n        try {\n            // Wait for API service to be available\n            let retries = 0;\n            const maxRetries = 50;\n            \n            while (retries < maxRetries && !window.apiService) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n                retries++;\n            }\n\n            if (window.apiService) {\n                // Get current user info from both localStorage and sessionStorage\n                const localSession = localStorage.getItem('userSession');\n                const sessionSession = sessionStorage.getItem('userSession');\n                const userSession = JSON.parse(localSession || sessionSession || '{}');\n                \n                // Get creator ID from session\n                const creatorId = userSession.id;\n                \n                if (!creatorId) {\n                    console.error('No creator ID found in session, redirecting to login');\n                    window.location.href = '../auth/login.html';\n                    return;\n                }\n                \n                console.log('Loading data for creator ID:', creatorId);\n                \n                // Check cache first\n                const cachedMetrics = window.VideoHubState?.getCached('metrics', creatorId);\n                const cachedVideos = window.VideoHubState?.getCached('videos', creatorId);\n                const cachedEarnings = window.VideoHubState?.getCached('earnings', creatorId);\n                \n                let metricsResponse, videosResponse, earningsResponse;\n                \n                if (cachedMetrics && cachedVideos && cachedEarnings) {\n                    console.log('Using cached creator data');\n                    metricsResponse = { success: true, data: cachedMetrics };\n                    videosResponse = { data: { videos: cachedVideos } };\n                    earningsResponse = { data: { earnings: cachedEarnings } };\n                } else {\n                    // Load data based on current page\n                    const currentPage = window.location.pathname.split('/').pop();\n                    \n                    if (currentPage === 'dashboard.html') {\n                        // Load all data for dashboard\n                        [metricsResponse, videosResponse, earningsResponse] = await Promise.all([\n                            window.apiService.get(`/api/endpoints/metrics.php?type=creator&creator_id=${creatorId}`),\n                            window.apiService.get(`/api/endpoints/creator.php/videos?uploader_id=${creatorId}`),\n                            window.apiService.get(`/api/endpoints/creator.php/earnings?creator_id=${creatorId}`)\n                        ]);\n                    } else if (currentPage === 'videos.html') {\n                        // Load only videos for videos page\n                        videosResponse = await window.apiService.get(`/api/endpoints/creator.php/videos?uploader_id=${creatorId}`);\n                        metricsResponse = { success: false };\n                        earningsResponse = { data: { earnings: [] } };\n                    } else if (currentPage === 'earnings.html') {\n                        // Load only earnings for earnings page\n                        earningsResponse = await window.apiService.get(`/api/endpoints/creator.php/earnings?creator_id=${creatorId}`);\n                        metricsResponse = { success: false };\n                        videosResponse = { data: { videos: [] } };\n                    } else {\n                        // Minimal loading for other pages\n                        metricsResponse = { success: false };\n                        videosResponse = { data: { videos: [] } };\n                        earningsResponse = { data: { earnings: [] } };\n                    }\n                    \n                    // Cache the responses\n                    if (window.VideoHubState) {\n                        if (metricsResponse.success) window.VideoHubState.setCached('metrics', metricsResponse.data, creatorId);\n                        if (videosResponse.data) window.VideoHubState.setCached('videos', videosResponse.data.videos || videosResponse.data, creatorId);\n                        if (earningsResponse.data) window.VideoHubState.setCached('earnings', earningsResponse.data.earnings || earningsResponse.data, creatorId);\n                    }\n                }\n                \n                // Process metrics\n                if (metricsResponse.success) {\n                    this.stats = metricsResponse.data;\n                }\n                \n                // Process videos \n                this.videos = Array.isArray(videosResponse.data?.videos) ? videosResponse.data.videos : \n                             Array.isArray(videosResponse.videos) ? videosResponse.videos : \n                             Array.isArray(videosResponse.data) ? videosResponse.data : [];\n                             \n                // Process earnings\n                this.earnings = Array.isArray(earningsResponse.data?.earnings) ? earningsResponse.data.earnings : \n                               Array.isArray(earningsResponse.earnings) ? earningsResponse.earnings : \n                               Array.isArray(earningsResponse.data) ? earningsResponse.data : [];\n                \n                console.log('Creator data loaded successfully:', {\n                    videosLength: this.videos.length,\n                    earningsLength: this.earnings.length,\n                    stats: this.stats\n                });\n\n                // Update UI\n                this.updateDashboardMetrics(this.stats);\n                \n                // Update page-specific content based on current page\n                if (window.location.pathname.includes('dashboard.html')) {\n                    this.updateRecentVideos();\n                    this.updateRecentEarnings();\n                } else if (window.location.pathname.includes('videos.html')) {\n                    this.loadVideosGrid();\n                    this.updateVideoPageStats();\n                }\n            }\n        } catch (error) {\n            console.error('Failed to load dashboard data:', error);\n            \n            // Handle API error with proper user feedback\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Loading creator dashboard data');\n            }\n            \n            // Set empty values on error\n            this.updateDashboardMetrics({\n                totalVideos: 0,\n                totalViews: 0,\n                totalEarnings: '0.00',\n                subscribers: 0\n            });\n        } finally {\n            this.isLoading = false;\n            if (window.VideoHubState) {\n                window.VideoHubState.setLoading('creatorData', false);\n            }\n\n            // Hide section loaders\n            const dashboardSection = document.querySelector('.dashboard-stats');\n            const videosSection = document.querySelector('.recent-videos');\n            const earningsSection = document.querySelector('.recent-earnings');\n\n            if (window.commonUtils) {\n                if (dashboardSection) window.commonUtils.hideSectionLoader(dashboardSection);\n                if (videosSection) window.commonUtils.hideSectionLoader(videosSection);\n                if (earningsSection) window.commonUtils.hideSectionLoader(earningsSection);\n            }\n        }\n    }\n\n    updateDashboardMetrics(stats) {\n        // Update dashboard metric displays\n        const totalVideosEl = document.getElementById('totalVideos');\n        const totalViewsEl = document.getElementById('totalViews');\n        const totalEarningsEl = document.getElementById('totalEarnings');\n        const subscribersEl = document.getElementById('subscribers');\n        \n        if (totalVideosEl) totalVideosEl.textContent = stats.totalVideos || 0;\n        if (totalViewsEl) totalViewsEl.textContent = stats.totalViews || 0;\n        if (totalEarningsEl) totalEarningsEl.textContent = '$' + (stats.totalEarnings || '0.00');\n        if (subscribersEl) subscribersEl.textContent = stats.subscribers || 0;\n\n        // Update earnings table\n        this.updateEarningsTable();\n    }\n\n    updateEarningsTable() {\n        const earningsTableBody = document.getElementById('earningsTable');\n        if (!earningsTableBody) return;\n\n        if (!this.earnings.length) {\n            earningsTableBody.innerHTML = '<tr><td colspan=\"4\" class=\"text-center text-muted\">No earnings data available</td></tr>';\n            return;\n        }\n\n        earningsTableBody.innerHTML = this.earnings.map(earning => `\n            <tr>\n                <td>${earning.videoTitle || 'N/A'}</td>\n                <td>${earning.viewerName || 'N/A'}</td>\n                <td>${earning.date || 'N/A'}</td>\n                <td>$${earning.amount || '0.00'}</td>\n            </tr>\n        `).join('');\n    }\n\n    bindEvents() {\n        // Upload button event\n        const uploadBtn = document.querySelector('[data-bs-target=\"#uploadModal\"]');\n        if (uploadBtn) {\n            uploadBtn.addEventListener('click', () => this.showUploadModal());\n        }\n\n        // Filter and search events\n        const searchInput = document.getElementById('searchInput');\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                this.applyVideoFilters();\n            });\n        }\n\n        const statusFilter = document.getElementById('statusFilter');\n        if (statusFilter) {\n            statusFilter.addEventListener('change', () => {\n                this.applyVideoFilters();\n            });\n        }\n\n        const categoryFilter = document.getElementById('categoryFilter');\n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', () => {\n                this.applyVideoFilters();\n            });\n        }\n\n        const sortFilter = document.getElementById('sortFilter');\n        if (sortFilter) {\n            sortFilter.addEventListener('change', () => {\n                this.applyVideoFilters();\n            });\n        }\n\n        // Video management events - use more specific targeting to prevent duplicates\n        document.addEventListener('click', (e) => {\n            // Check for edit video button\n            if (e.target.classList.contains('edit-video-btn')) {\n                e.preventDefault();\n                e.stopPropagation();\n                const videoId = e.target.dataset.videoId;\n                if (videoId) {\n                    this.editVideo(videoId);\n                }\n            }\n            // Check for delete video button  \n            if (e.target.classList.contains('delete-video-btn')) {\n                e.preventDefault();\n                e.stopPropagation();\n                const videoId = e.target.dataset.videoId;\n                if (videoId && !this.isDeleting) {\n                    this.deleteVideo(videoId);\n                }\n            }\n        });\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        switch (currentPage) {\n            case 'dashboard.html':\n                this.initDashboard();\n                break;\n            case 'videos.html':\n                this.initVideosPage();\n                break;\n            case 'earnings.html':\n                this.initEarningsPage();\n                break;\n        }\n    }\n\n    initDashboard() {\n        console.log('Creator dashboard initialized');\n        this.updateRecentVideos();\n        this.updateRecentEarnings();\n    }\n\n    updateRecentVideos() {\n        const recentVideosContainer = document.getElementById('recentVideos');\n        if (!recentVideosContainer) return;\n\n        if (!this.videos || this.videos.length === 0) {\n            recentVideosContainer.innerHTML = '<p class=\"text-muted\">No videos uploaded yet.</p>';\n            return;\n        }\n\n        // Get the 3 most recent videos\n        const recentVideos = this.videos\n            .sort((a, b) => new Date(b.created_at || b.uploadDate) - new Date(a.created_at || a.uploadDate))\n            .slice(0, 3);\n\n        recentVideosContainer.innerHTML = recentVideos.map(video => {\n            const statusClass = video.status === 'published' ? 'bg-success' : \n                               video.status === 'pending' ? 'bg-warning' : 'bg-secondary';\n            const statusIcon = video.status === 'published' ? 'fa-play' : \n                              video.status === 'pending' ? 'fa-clock' : 'fa-pause';\n            \n            return `\n                <div class=\"d-flex mb-3\">\n                    <div class=\"me-3\">\n                        <div class=\"${statusClass} text-white d-flex align-items-center justify-content-center\" style=\"width: 60px; height: 40px; border-radius: 4px;\">\n                            <i class=\"fas ${statusIcon}\"></i>\n                        </div>\n                    </div>\n                    <div class=\"flex-grow-1\">\n                        <h6 class=\"mb-1\">${video.title}</h6>\n                        <small class=\"text-muted\">${(video.status || 'unknown').charAt(0).toUpperCase() + (video.status || 'unknown').slice(1)}</small>\n                    </div>\n                </div>\n            `;\n        }).join('');\n    }\n\n    updateRecentEarnings() {\n        const earningsTableBody = document.getElementById('earningsTable');\n        if (!earningsTableBody) return;\n\n        if (!this.earnings || this.earnings.length === 0) {\n            earningsTableBody.innerHTML = '<tr><td colspan=\"4\" class=\"text-center text-muted\">No earnings data available</td></tr>';\n            return;\n        }\n\n        // Get the 5 most recent earnings\n        const recentEarnings = this.earnings\n            .sort((a, b) => new Date(b.date || b.purchaseDate) - new Date(a.date || a.purchaseDate))\n            .slice(0, 5);\n\n        earningsTableBody.innerHTML = recentEarnings.map(earning => `\n            <tr>\n                <td>${earning.videoTitle || 'N/A'}</td>\n                <td>${earning.viewerName || 'Anonymous'}</td>\n                <td>${earning.date || earning.purchaseDate || 'N/A'}</td>\n                <td>$${earning.amount || '0.00'}</td>\n            </tr>\n        `).join('');\n    }\n\n    initVideosPage() {\n        this.loadVideosGrid();\n        this.updateVideoPageStats();\n    }\n\n    initEarningsPage() {\n        this.loadEarningsTable();\n    }\n\n    async loadVideosGrid() {\n        const videosGrid = document.getElementById('videosGrid');\n        if (!videosGrid) return;\n\n        if (!this.videos.length) {\n            videosGrid.innerHTML = '<div class=\"col-12 text-center text-muted\"><p>No videos found. Upload your first video to get started!</p></div>';\n            const pagination = document.querySelector('.pagination');\n            if (pagination) pagination.parentElement.style.display = 'none';\n            return;\n        }\n\n        // Initialize filtered videos and apply initial filters\n        this.filteredVideos = [...this.videos];\n        this.currentPage = 1;\n        this.applyVideoFilters();\n        return;\n\n        // Filters and pagination will handle the display\n    }\n\n    updateVideoPageStats() {\n        const totalVideos = this.videos ? this.videos.length : 0;\n        const publishedVideos = this.videos ? this.videos.filter(v => (v.status || 'published') === 'published').length : 0;\n        const pendingVideos = this.videos ? this.videos.filter(v => v.status === 'pending').length : 0;\n        const totalViews = this.videos ? this.videos.reduce((sum, v) => sum + (parseInt(v.views) || 0), 0) : 0;\n\n        // Update stats cards on videos page\n        const totalVideosEl = document.getElementById('totalVideos');\n        const publishedVideosEl = document.getElementById('publishedVideos');\n        const pendingVideosEl = document.getElementById('pendingVideos');\n        const totalViewsEl = document.getElementById('totalViews');\n\n        if (totalVideosEl) totalVideosEl.innerHTML = totalVideos;\n        if (publishedVideosEl) publishedVideosEl.innerHTML = publishedVideos;\n        if (pendingVideosEl) pendingVideosEl.innerHTML = pendingVideos;\n        if (totalViewsEl) totalViewsEl.innerHTML = totalViews.toLocaleString();\n    }\n\n    async loadEarningsTable() {\n        const tbody = document.getElementById('earningsTableBody');\n        if (!tbody) return;\n\n        if (!this.earnings.length) {\n            tbody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center text-muted\">No earnings found</td></tr>';\n            return;\n        }\n\n        tbody.innerHTML = this.earnings.map(earning => `\n            <tr>\n                <td>${earning.date || 'N/A'}</td>\n                <td>${earning.videoTitle || 'N/A'}</td>\n                <td>${earning.viewerName || 'N/A'}</td>\n                <td>$${earning.amount || '0.00'}</td>\n                <td><span class=\"badge bg-success\">Completed</span></td>\n            </tr>\n        `).join('');\n    }\n\n    showUploadModal() {\n        console.log('Show upload modal');\n    }\n\n    playVideo(videoId) {\n        const video = this.videos.find(v => v.id == videoId);\n        if (!video) {\n            alert('Video not found');\n            return;\n        }\n\n        // Extract YouTube video ID\n        let youtubeVideoId = '';\n        if (video.youtube_id) {\n            youtubeVideoId = video.youtube_id;\n        } else if (video.youtube_thumbnail) {\n            // Extract from thumbnail URL\n            const match = video.youtube_thumbnail.match(/\\/vi\\/([^\\/]+)\\//);\n            if (match) {\n                youtubeVideoId = match[1];\n            }\n        }\n\n        if (!youtubeVideoId) {\n            alert('Video not available for playback');\n            return;\n        }\n\n        // Create video player modal\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.id = 'videoPlayerModal';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-xl\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${video.title}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body p-0\">\n                        <div class=\"ratio ratio-16x9\">\n                            <iframe src=\"https://www.youtube.com/embed/${youtubeVideoId}?autoplay=1\" \n                                    title=\"${video.title}\" \n                                    frameborder=\"0\" \n                                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n                                    allowfullscreen></iframe>\n                        </div>\n                        <div class=\"p-3\">\n                            <h6>${video.title}</h6>\n                            <p class=\"text-muted\">${video.description || 'No description available'}</p>\n                            <div class=\"d-flex justify-content-between align-items-center\">\n                                <div>\n                                    <span>Views: ${video.youtube_views || video.views || 0}</span>\n                                    <span class=\"mx-2\">•</span>\n                                    <span>Price: $${video.price}</span>\n                                </div>\n                                <button class=\"btn btn-outline-success btn-sm\" onclick=\"window.creatorManager.openVideoInNewTab('${video.id}')\" title=\"Open in new tab\">\n                                    <i class=\"fas fa-external-link-alt me-1\"></i>Open in YouTube\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n\n        // Remove modal after it's hidden\n        modal.addEventListener('hidden.bs.modal', () => {\n            modal.remove();\n        });\n    }\n\n    openVideoInNewTab(videoId) {\n        const video = this.videos.find(v => v.id == videoId);\n        \n        if (!video) {\n            this.showNotification('Video not found', 'error');\n            return;\n        }\n        \n        // Get YouTube ID\n        let youtubeVideoId = video.youtube_id;\n        \n        if (!youtubeVideoId && video.youtube_thumbnail) {\n            // Try to extract from thumbnail URL as fallback\n            const match = video.youtube_thumbnail.match(/\\/vi\\/([^\\/]+)\\//);\n            if (match) {\n                youtubeVideoId = match[1];\n            }\n        }\n        \n        if (!youtubeVideoId) {\n            this.showNotification('YouTube video ID not available', 'error');\n            return;\n        }\n        \n        // Open YouTube video in new tab\n        const youtubeUrl = `https://www.youtube.com/watch?v=${youtubeVideoId}`;\n        window.open(youtubeUrl, '_blank', 'noopener,noreferrer');\n        \n        this.showNotification(`Opening \"${video.title}\" in new tab`, 'info');\n    }\n\n    editVideo(videoId) {\n        console.log('Edit video called with ID:', videoId, 'Available videos:', this.videos.length);\n        \n        // Convert videoId to string for comparison since IDs may be numbers or strings\n        const video = this.videos.find(v => String(v.id) === String(videoId));\n        if (!video) {\n            console.error('Video not found. Looking for ID:', videoId, 'Available IDs:', this.videos.map(v => v.id));\n            if (window.notificationManager) {\n                window.notificationManager.showError('Video not found');\n            } else if (window.commonUtils) {\n                window.commonUtils.showToast('Video not found', 'error');\n            } else {\n                alert('Video not found');\n            }\n            return;\n        }\n\n        // Create edit modal\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.id = 'editVideoModal';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-lg\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header bg-success text-white\">\n                        <h5 class=\"modal-title\">\n                            <i class=\"fas fa-edit me-2\"></i>Edit Video\n                        </h5>\n                        <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"alert alert-light\">\n                            <i class=\"fas fa-info-circle text-success me-2\"></i>\n                            Update your video details and settings.\n                        </div>\n                        \n                        <form id=\"editVideoForm\">\n                            <div class=\"row g-4\">\n                                <div class=\"col-12\">\n                                    <label for=\"editTitle\" class=\"form-label\">Video Title *</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"editTitle\" value=\"${video.title}\" placeholder=\"Enter video title...\" required>\n                                </div>\n                                \n                                <div class=\"col-12\">\n                                    <label for=\"editDescription\" class=\"form-label\">Description</label>\n                                    <textarea class=\"form-control\" id=\"editDescription\" rows=\"3\" placeholder=\"Describe your video...\">${video.description || ''}</textarea>\n                                </div>\n                                \n                                <div class=\"col-md-6\">\n                                    <label for=\"editPrice\" class=\"form-label\">Price ($) *</label>\n                                    <div class=\"input-group\">\n                                        <span class=\"input-group-text\">$</span>\n                                        <input type=\"number\" class=\"form-control\" id=\"editPrice\" value=\"${video.price}\" min=\"0\" step=\"0.01\" placeholder=\"0.00\" required>\n                                    </div>\n                                </div>\n                                \n                                <div class=\"col-md-6\">\n                                    <label for=\"editStatus\" class=\"form-label fw-semibold\">Publication Status</label>\n                                    <div class=\"input-group\">\n                                        <span class=\"input-group-text bg-light border-end-0\">\n                                            <i class=\"fas fa-toggle-on text-muted\"></i>\n                                        </span>\n                                        <select class=\"form-select border-start-0\" id=\"editStatus\">\n                                            <option value=\"published\" ${video.status === 'published' ? 'selected' : ''}>📺 Published (Live)</option>\n                                            <option value=\"pending\" ${video.status === 'pending' ? 'selected' : ''}>⏳ Pending Review</option>\n                                            <option value=\"draft\" ${video.status === 'draft' ? 'selected' : ''}>📝 Draft (Private)</option>\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <!-- Video Preview -->\n                            <div class=\"mt-4\">\n                                <h6 class=\"fw-semibold text-muted mb-3\">\n                                    <i class=\"fas fa-eye me-2\"></i>Current Video Preview\n                                </h6>\n                                <div class=\"card border-0 bg-light-subtle\">\n                                    <div class=\"card-body p-3\">\n                                        <div class=\"row align-items-center\">\n                                            <div class=\"col-auto\">\n                                                <img src=\"${video.thumbnail || video.youtube_thumbnail || 'https://via.placeholder.com/120x68/666/fff?text=Video'}\" \n                                                     class=\"rounded\" style=\"width: 120px; height: 68px; object-fit: cover;\" alt=\"Video thumbnail\">\n                                            </div>\n                                            <div class=\"col\">\n                                                <h6 class=\"mb-1\">${video.title}</h6>\n                                                <small class=\"text-muted\">\n                                                    <i class=\"fas fa-eye me-1\"></i>${video.views || 0} views\n                                                    <span class=\"mx-2\">•</span>\n                                                    <i class=\"fas fa-calendar me-1\"></i>${video.upload_date || 'Unknown date'}\n                                                </small>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                        <button type=\"button\" class=\"btn btn-success\" onclick=\"window.creatorManager.saveVideoChanges('${videoId}')\">\n                            <i class=\"fas fa-save me-1\"></i>Save Changes\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n\n        // Remove modal after it's hidden\n        modal.addEventListener('hidden.bs.modal', () => {\n            modal.remove();\n        });\n    }\n\n    async saveVideoChanges(videoId) {\n        // Validate form first\n        if (this.editVideoValidator && !this.editVideoValidator.validateForm()) {\n            if (window.notificationManager) {\n                window.notificationManager.showError('Please fix the errors below');\n            }\n            return;\n        }\n        \n        const saveButton = document.querySelector('#editVideoModal .btn-success');\n        const title = document.getElementById('editTitle').value;\n        const description = document.getElementById('editDescription').value;\n        const price = document.getElementById('editPrice').value;\n        const status = document.getElementById('editStatus').value;\n\n        if (!title.trim()) {\n            if (window.notificationManager) {\n                window.notificationManager.showWarning('Title is required');\n            } else if (window.commonUtils) {\n                window.commonUtils.showToast('Title is required', 'warning');\n            } else {\n                alert('Title is required');\n            }\n            return;\n        }\n\n        try {\n            // Set button loading state\n            if (window.ButtonLoader) {\n                window.ButtonLoader.setLoading(saveButton, 'Saving...');\n            } else if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(saveButton, true, 'Saving...');\n            }\n            // Update video in our database first\n            const response = await window.apiService.put(`/api/videos/${videoId}`, {\n                title: title.trim(),\n                description: description.trim(),\n                price: parseFloat(price),\n                status: status\n            });\n\n            if (response.success) {\n                // Update local video data\n                const videoIndex = this.videos.findIndex(v => v.id == videoId);\n                if (videoIndex !== -1) {\n                    this.videos[videoIndex] = { ...this.videos[videoIndex], title, description, price, status };\n                }\n\n                // Close modal\n                const modal = bootstrap.Modal.getInstance(document.getElementById('editVideoModal'));\n                modal.hide();\n\n                // If video has YouTube ID, sync with YouTube\n                if (response.data?.youtube_id) {\n                    console.log('Syncing video update to YouTube...');\n                    this.showNotification('Video updated! Syncing with YouTube...', 'info');\n                    \n                    try {\n                        // Use the global YouTube API instance\n                        if (!window.youtubeAPI) {\n                            console.error('YouTube API client not available');\n                            throw new Error('YouTube API client not available');\n                        }\n                        \n                        // Ensure YouTube client is properly initialized\n                        await window.youtubeAPI.initialize();\n                        \n                        const youtubeResult = await window.youtubeAPI.updateVideoMetadata(response.data.youtube_id, {\n                            title: title.trim(),\n                            description: description.trim()\n                        });\n                        \n                        if (youtubeResult.success) {\n                            console.log('Video successfully updated on YouTube');\n                            if (window.notificationManager) {\n                                window.notificationManager.showSuccess('✓ Video updated successfully in VideoHub and YouTube!');\n                            } else {\n                                this.showNotification('✓ Video updated successfully in VideoHub and YouTube!', 'success');\n                            }\n                        } else {\n                            console.warn('Video updated in VideoHub but YouTube sync failed:', youtubeResult.error);\n                            if (youtubeResult.needsAuth) {\n                                if (window.notificationManager) {\n                                    window.notificationManager.showWarning('Video updated in VideoHub. YouTube sync requires authentication. Please connect your YouTube account.');\n                                } else {\n                                    this.showNotification('Video updated in VideoHub. YouTube sync requires authentication. Please connect your YouTube account.', 'warning');\n                                }\n                                this.showYouTubeConnectOption();\n                            } else {\n                                if (window.notificationManager) {\n                                    window.notificationManager.showWarning('Video updated in VideoHub. YouTube sync failed: ' + youtubeResult.error);\n                                } else {\n                                    this.showNotification('Video updated in VideoHub. YouTube sync failed: ' + youtubeResult.error, 'warning');\n                                }\n                            }\n                        }\n                    } catch (youtubeError) {\n                        console.error('YouTube sync error:', youtubeError);\n                        this.showNotification('Video updated in VideoHub. YouTube sync failed - please check authentication.', 'warning');\n                        this.showYouTubeConnectOption();\n                    }\n                } else {\n                    this.showNotification('✓ Video updated successfully!', 'success');\n                }\n\n                // Reload videos grid\n                this.loadVideosGrid();\n                this.updateVideoPageStats();\n            } else {\n                this.showNotification('Failed to update video: ' + (response.message || 'Unknown error'), 'error');\n            }\n        } catch (error) {\n            console.error('Error updating video:', error);\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Updating video');\n            } else {\n                this.showNotification('Error updating video. Please try again.', 'error');\n            }\n        } finally {\n            // Reset button loading state\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(saveButton, false);\n            }\n        }\n    }\n\n    showNotification(message, type = 'info') {\n        // Create notification element\n        const notification = document.createElement('div');\n        notification.className = `alert alert-${type === 'error' ? 'danger' : type === 'warning' ? 'warning' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show position-fixed`;\n        notification.style.top = '20px';\n        notification.style.right = '20px';\n        notification.style.zIndex = '9999';\n        notification.style.minWidth = '300px';\n        notification.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        document.body.appendChild(notification);\n        \n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.remove();\n            }\n        }, 5000);\n    }\n\n    showYouTubeConnectOption() {\n        // Create YouTube connect notification\n        const notification = document.createElement('div');\n        notification.className = 'alert alert-info alert-dismissible fade show position-fixed';\n        notification.style.top = '20px';\n        notification.style.right = '20px';\n        notification.style.zIndex = '9999';\n        notification.style.minWidth = '350px';\n        notification.innerHTML = `\n            <div class=\"d-flex align-items-center justify-content-between\">\n                <span>Connect YouTube to sync video changes</span>\n                <button type=\"button\" class=\"btn btn-sm btn-primary ms-2\" onclick=\"window.creatorManager.connectYouTubeFromToast()\">\n                    <i class=\"fab fa-youtube me-1\"></i>Connect\n                </button>\n            </div>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        document.body.appendChild(notification);\n        \n        // Auto-remove after 10 seconds\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.remove();\n            }\n        }, 10000);\n    }\n\n    async connectYouTubeFromToast() {\n        try {\n            if (window.youtubeAPI) {\n                const success = await window.youtubeAPI.signIn();\n                if (success) {\n                    this.showNotification('✓ YouTube account connected successfully!', 'success');\n                } else {\n                    this.showNotification('Failed to connect YouTube account.', 'error');\n                }\n            } else {\n                this.showNotification('YouTube API not available', 'error');\n            }\n        } catch (error) {\n            console.error('Connect failed:', error);\n            this.showNotification('Failed to connect YouTube account.', 'error');\n        }\n    }\n\n    async deleteVideo(videoId) {\n        // Prevent multiple confirmations by checking if one is already showing\n        if (this.isDeleting) {\n            return;\n        }\n        \n        this.isDeleting = true;\n        \n        try {\n            // Show confirm modal instead of browser confirm\n            const confirmed = await this.showCreatorConfirmModal('delete', videoId);\n            if (!confirmed) {\n                return;\n            }\n\n            // Find and disable the delete button to prevent multiple calls\n            const deleteButton = document.querySelector(`[data-video-id=\"${videoId}\"].delete-video-btn`);\n            if (deleteButton) {\n                deleteButton.disabled = true;\n                if (window.commonUtils) {\n                    window.commonUtils.setButtonLoading(deleteButton, true, 'Deleting...');\n                }\n            }\n\n            const response = await window.apiService.delete(`/api/videos/${videoId}`);\n\n            if (response.success) {\n                // Remove from local videos array\n                this.videos = this.videos.filter(v => String(v.id) !== String(videoId));\n\n                // Reload videos grid\n                this.loadVideosGrid();\n                this.updateVideoPageStats();\n\n                if (window.commonUtils) {\n                    window.commonUtils.showToast('Video deleted successfully!', 'success');\n                } else {\n                    alert('Video deleted successfully!');\n                }\n            } else {\n                if (window.commonUtils) {\n                    window.commonUtils.showToast('Failed to delete video: ' + (response.message || 'Unknown error'), 'error');\n                } else {\n                    alert('Failed to delete video: ' + (response.message || 'Unknown error'));\n                }\n            }\n        } catch (error) {\n            console.error('Error deleting video:', error);\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Deleting video');\n            } else {\n                alert('Error deleting video. Please try again.');\n            }\n        } finally {\n            this.isDeleting = false;\n            // Re-enable the delete button\n            const deleteButton = document.querySelector(`[data-video-id=\"${videoId}\"].delete-video-btn`);\n            if (deleteButton && window.commonUtils) {\n                window.commonUtils.setButtonLoading(deleteButton, false);\n                deleteButton.disabled = false;\n            }\n        }\n    }\n\n    formatNumber(num) {\n        return new Intl.NumberFormat().format(num || 0);\n    }\n\n    formatCurrency(amount) {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD'\n        }).format(amount || 0);\n    }\n\n    bindVideoButtons() {\n        // Bind edit buttons\n        document.querySelectorAll('.edit-video-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                const videoId = e.target.dataset.videoId;\n                if (videoId) {\n                    console.log('Edit button clicked for video:', videoId);\n                    this.editVideo(videoId);\n                }\n            });\n        });\n\n        // Bind delete buttons\n        document.querySelectorAll('.delete-video-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                const videoId = e.target.dataset.videoId;\n                if (videoId && !this.isDeleting) {\n                    console.log('Delete button clicked for video:', videoId);\n                    this.deleteVideo(videoId);\n                }\n            });\n        });\n    }\n\n    // Add missing debounce utility function\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n\n    showCreatorConfirmModal(action, videoId) {\n        return new Promise((resolve) => {\n            const video = this.videos.find(v => v.id == videoId);\n            if (!video) {\n                resolve(false);\n                return;\n            }\n            \n            const actionTexts = {\n                delete: { \n                    title: 'Delete Video', \n                    message: 'delete this video permanently', \n                    class: 'danger',\n                    description: 'This action cannot be undone. The video will be removed from VideoHub and YouTube.',\n                    icon: 'fa-trash'\n                },\n                edit: { \n                    title: 'Edit Video', \n                    message: 'save changes to this video', \n                    class: 'success',\n                    description: 'Your changes will be updated on both VideoHub and YouTube.',\n                    icon: 'fa-edit'\n                },\n                publish: { \n                    title: 'Publish Video', \n                    message: 'publish this video', \n                    class: 'success',\n                    description: 'This video will become available for purchase by viewers.',\n                    icon: 'fa-globe'\n                }\n            };\n            \n            const actionData = actionTexts[action];\n            if (!actionData) {\n                resolve(false);\n                return;\n            }\n            \n            // Create confirmation modal\n            let modal = document.getElementById('creatorActionConfirmModal');\n            if (!modal) {\n                modal = document.createElement('div');\n                modal.className = 'modal fade';\n                modal.id = 'creatorActionConfirmModal';\n                modal.setAttribute('tabindex', '-1');\n                modal.innerHTML = `\n                    <div class=\"modal-dialog modal-dialog-centered\">\n                        <div class=\"modal-content border-0 shadow-lg\">\n                            <div class=\"modal-header bg-gradient text-white border-0\">\n                                <h5 class=\"modal-title fw-bold\" id=\"creatorActionModalTitle\">\n                                    <i class=\"fas fa-question-circle me-2\"></i>Confirm Action\n                                </h5>\n                                <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\"></button>\n                            </div>\n                            <div class=\"modal-body p-4\">\n                                <div class=\"alert border-0 mb-4\" id=\"creatorActionDescription\">\n                                    <div class=\"d-flex align-items-center\">\n                                        <i class=\"fas fa-info-circle fa-2x me-3\" id=\"creatorActionIcon\"></i>\n                                        <div>\n                                            <p class=\"mb-1 fw-semibold\" id=\"creatorActionModalMessage\">Are you sure?</p>\n                                            <small class=\"text-muted\" id=\"creatorActionDescriptionText\">This action requires confirmation.</small>\n                                        </div>\n                                    </div>\n                                </div>\n                                \n                                <div class=\"card border-0 bg-light\">\n                                    <div class=\"card-body p-3\">\n                                        <h6 class=\"fw-bold text-dark mb-2\">\n                                            <i class=\"fas fa-video me-2 text-primary\"></i>Video Details\n                                        </h6>\n                                        <div class=\"row align-items-center\">\n                                            <div class=\"col-auto\">\n                                                <img id=\"creatorActionVideoThumbnail\" src=\"\" alt=\"Video thumbnail\" \n                                                     class=\"rounded shadow-sm\" style=\"width: 60px; height: 34px; object-fit: cover;\">\n                                            </div>\n                                            <div class=\"col\">\n                                                <div class=\"fw-semibold text-dark\" id=\"creatorActionModalVideoTitle\">Video Title</div>\n                                                <small class=\"text-muted\" id=\"creatorActionModalVideoCreator\">Creator</small>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"modal-footer border-0 pt-0\">\n                                <button type=\"button\" class=\"btn btn-outline-secondary px-4\" data-bs-dismiss=\"modal\">\n                                    <i class=\"fas fa-times me-2\"></i>Cancel\n                                </button>\n                                <button type=\"button\" class=\"btn px-4\" id=\"confirmCreatorActionBtn\">\n                                    <i class=\"fas fa-check me-2\"></i>Confirm\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                document.body.appendChild(modal);\n            }\n            \n            // Update modal content\n            document.getElementById('creatorActionModalTitle').innerHTML = `<i class=\"fas ${actionData.icon} me-2\"></i>${actionData.title}`;\n            document.getElementById('creatorActionModalMessage').textContent = `Are you sure you want to ${actionData.message}?`;\n            document.getElementById('creatorActionDescriptionText').textContent = actionData.description;\n            document.getElementById('creatorActionModalVideoTitle').textContent = video.title;\n            document.getElementById('creatorActionModalVideoCreator').textContent = `by ${video.creatorName || video.creator_name || 'Unknown Creator'}`;\n            \n            // Set thumbnail\n            const thumbnailEl = document.getElementById('creatorActionVideoThumbnail');\n            if (video.youtube_id) {\n                thumbnailEl.src = `https://img.youtube.com/vi/${video.youtube_id}/hqdefault.jpg`;\n            } else if (video.thumbnail) {\n                thumbnailEl.src = video.thumbnail;\n            } else {\n                thumbnailEl.src = 'https://via.placeholder.com/60x34/6c757d/ffffff?text=Video';\n            }\n            \n            const confirmBtn = document.getElementById('confirmCreatorActionBtn');\n            const descriptionAlert = document.getElementById('creatorActionDescription');\n            const iconEl = document.getElementById('creatorActionIcon');\n            const headerEl = modal.querySelector('.modal-header');\n            \n            confirmBtn.className = `btn btn-${actionData.class} px-4`;\n            confirmBtn.innerHTML = `<i class=\"fas ${actionData.icon} me-2\"></i>${actionData.title}`;\n            descriptionAlert.className = `alert alert-${actionData.class === 'danger' ? 'danger' : 'info'} border-0 mb-4`;\n            iconEl.className = `fas ${actionData.icon} fa-2x me-3 text-${actionData.class}`;\n            headerEl.className = `modal-header text-white border-0 bg-${actionData.class}`;\n            \n            // Set up confirm button action\n            confirmBtn.onclick = function() {\n                const bootstrapModal = bootstrap.Modal.getInstance(modal);\n                bootstrapModal.hide();\n                resolve(true);\n            };\n            \n            // Set up cancel action\n            modal.addEventListener('hidden.bs.modal', function handler() {\n                modal.removeEventListener('hidden.bs.modal', handler);\n                resolve(false);\n            });\n            \n            const bootstrapModal = new bootstrap.Modal(modal);\n            bootstrapModal.show();\n        });\n    }\n\n    // Add missing filter functionality\n    applyVideoFilters() {\n        const searchInput = document.getElementById('searchInput');\n        const statusFilter = document.getElementById('statusFilter');\n        const categoryFilter = document.getElementById('categoryFilter');\n        const sortFilter = document.getElementById('sortFilter');\n\n        let filteredVideos = [...this.videos];\n\n        // Apply search filter\n        if (searchInput && searchInput.value) {\n            const searchTerm = searchInput.value.toLowerCase();\n            filteredVideos = filteredVideos.filter(video => \n                video.title.toLowerCase().includes(searchTerm) ||\n                (video.description && video.description.toLowerCase().includes(searchTerm))\n            );\n        }\n\n        // Apply status filter\n        if (statusFilter && statusFilter.value) {\n            filteredVideos = filteredVideos.filter(video => \n                (video.status || 'published') === statusFilter.value\n            );\n        }\n\n        // Apply category filter\n        if (categoryFilter && categoryFilter.value) {\n            filteredVideos = filteredVideos.filter(video => \n                video.category === categoryFilter.value\n            );\n        }\n\n        // Apply sorting\n        if (sortFilter && sortFilter.value) {\n            switch (sortFilter.value) {\n                case 'newest':\n                    filteredVideos.sort((a, b) => new Date(b.uploadDate || b.created_at) - new Date(a.uploadDate || a.created_at));\n                    break;\n                case 'oldest':\n                    filteredVideos.sort((a, b) => new Date(a.uploadDate || a.created_at) - new Date(b.uploadDate || b.created_at));\n                    break;\n                case 'views':\n                    filteredVideos.sort((a, b) => (b.views || 0) - (a.views || 0));\n                    break;\n            }\n        }\n\n        // Store filtered videos and update display\n        this.filteredVideos = filteredVideos;\n        this.currentPage = 1;\n        this.displayFilteredVideos();\n        this.updatePagination();\n    }\n\n    displayFilteredVideos() {\n        const videosGrid = document.getElementById('videosGrid');\n        if (!videosGrid) return;\n\n        const videosPerPage = 6;\n        const startIndex = (this.currentPage - 1) * videosPerPage;\n        const endIndex = startIndex + videosPerPage;\n        const videosToShow = this.filteredVideos.slice(startIndex, endIndex);\n\n        if (videosToShow.length === 0) {\n            videosGrid.innerHTML = `\n                <div class=\"col-12 text-center py-5\">\n                    <i class=\"fas fa-video fa-3x text-muted mb-3\"></i>\n                    <h5 class=\"text-muted\">No videos found</h5>\n                    <p class=\"text-muted\">Try adjusting your filters</p>\n                </div>\n            `;\n            return;\n        }\n\n        videosGrid.innerHTML = videosToShow.map(video => {\n            const status = video.status || 'published';\n            const statusClass = status === 'published' ? 'bg-success' : \n                               status === 'pending' ? 'bg-warning' : 'bg-secondary';\n            const statusIcon = status === 'published' ? 'fa-check-circle' : \n                              status === 'pending' ? 'fa-clock' : 'fa-pause-circle';\n            \n            return `\n                <div class=\"col-lg-4 col-md-6 mb-4\">\n                    <div class=\"card h-100 video-card\">\n                        <div class=\"video-thumbnail cursor-pointer\" \n                             style=\"background-image: url('${video.youtube_thumbnail || video.thumbnail || 'https://via.placeholder.com/300x169'}'); \n                                    background-size: cover; background-position: center; height: 180px; position: relative;\" \n                             onclick=\"window.creatorManager.playVideo('${video.id}')\">\n                            <div class=\"video-overlay d-flex align-items-center justify-content-center\" \n                                 style=\"position: absolute; top: 0; left: 0; right: 0; bottom: 0; \n                                        background: rgba(0,0,0,0.3); opacity: 0; transition: opacity 0.3s;\">\n                                <i class=\"fas fa-play fa-3x text-white\" style=\"text-shadow: 2px 2px 4px rgba(0,0,0,0.6);\"></i>\n                            </div>\n                            <div class=\"position-absolute top-0 end-0 m-2\">\n                                <span class=\"badge ${statusClass}\">\n                                    <i class=\"fas ${statusIcon} me-1\"></i>${status.charAt(0).toUpperCase() + status.slice(1)}\n                                </span>\n                            </div>\n                        </div>\n                        <div class=\"card-body\">\n                            <h6 class=\"card-title\">${video.title}</h6>\n                            <p class=\"card-text text-muted small\">${(video.description || '').substring(0, 100)}...</p>\n                            <div class=\"d-flex justify-content-between align-items-center\">\n                                <small class=\"text-muted\">\n                                    <i class=\"fas fa-eye me-1\"></i>${video.youtube_views || video.views || 0} views\n                                </small>\n                                <small class=\"text-muted\">\n                                    $${video.price || '0.00'}\n                                </small>\n                            </div>\n                        </div>\n                        <div class=\"card-footer bg-transparent\">\n                            <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                                <div class=\"btn-group\">\n                                    <button class=\"btn btn-success btn-sm\" onclick=\"window.creatorManager.playVideo('${video.id}')\" title=\"Watch in modal\">\n                                        <i class=\"fas fa-play me-1\"></i>Watch\n                                    </button>\n                                    <button class=\"btn btn-outline-success btn-sm\" onclick=\"window.creatorManager.openVideoInNewTab('${video.id}')\" title=\"Open in new tab\">\n                                        <i class=\"fas fa-external-link-alt\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div class=\"btn-group w-100\">\n                                <button class=\"btn btn-outline-primary btn-sm edit-video-btn\" data-video-id=\"${video.id}\">\n                                    <i class=\"fas fa-edit me-1\"></i>Edit\n                                </button>\n                                <button class=\"btn btn-outline-danger btn-sm delete-video-btn\" data-video-id=\"${video.id}\">\n                                    <i class=\"fas fa-trash me-1\"></i>Delete\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }).join('');\n        \n        // Add hover effect for play overlay\n        setTimeout(() => {\n            document.querySelectorAll('.video-thumbnail').forEach(thumbnail => {\n                const overlay = thumbnail.querySelector('.video-overlay');\n                if (overlay) {\n                    thumbnail.addEventListener('mouseenter', () => {\n                        overlay.style.opacity = '1';\n                    });\n                    thumbnail.addEventListener('mouseleave', () => {\n                        overlay.style.opacity = '0';\n                    });\n                }\n            });\n        }, 100);\n    }\n\n    updatePagination() {\n        const pagination = document.querySelector('.pagination');\n        if (!pagination) return;\n\n        const videosPerPage = 6;\n        const totalPages = Math.ceil(this.filteredVideos.length / videosPerPage);\n        \n        if (totalPages <= 1) {\n            pagination.parentElement.style.display = 'none';\n            return;\n        }\n\n        pagination.parentElement.style.display = 'block';\n        \n        let paginationHTML = '';\n        \n        // Previous button\n        paginationHTML += `\n            <li class=\"page-item ${this.currentPage === 1 ? 'disabled' : ''}\">\n                <a class=\"page-link\" href=\"#\" data-page=\"${this.currentPage - 1}\">Previous</a>\n            </li>\n        `;\n        \n        // Page numbers\n        for (let i = 1; i <= totalPages; i++) {\n            paginationHTML += `\n                <li class=\"page-item ${i === this.currentPage ? 'active' : ''}\">\n                    <a class=\"page-link\" href=\"#\" data-page=\"${i}\">${i}</a>\n                </li>\n            `;\n        }\n        \n        // Next button\n        paginationHTML += `\n            <li class=\"page-item ${this.currentPage === totalPages ? 'disabled' : ''}\">\n                <a class=\"page-link\" href=\"#\" data-page=\"${this.currentPage + 1}\">Next</a>\n            </li>\n        `;\n        \n        pagination.innerHTML = paginationHTML;\n        \n        // Remove existing event listeners to prevent duplicates\n        const existingHandler = pagination._paginationHandler;\n        if (existingHandler) {\n            pagination.removeEventListener('click', existingHandler);\n        }\n        \n        // Add click handlers for pagination\n        const paginationHandler = (e) => {\n            e.preventDefault();\n            if (e.target.classList.contains('page-link') && !e.target.parentElement.classList.contains('disabled')) {\n                const page = parseInt(e.target.dataset.page);\n                if (page && page !== this.currentPage && page >= 1 && page <= totalPages) {\n                    this.currentPage = page;\n                    this.displayFilteredVideos();\n                    this.updatePagination();\n                    // Scroll to top of videos section\n                    document.getElementById('videosGrid')?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                }\n            }\n        };\n        \n        pagination._paginationHandler = paginationHandler;\n        pagination.addEventListener('click', paginationHandler);\n    }\n}\n\n// Initialize creator manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.creatorManager = new CreatorManager();\n    \n    // Initialize VideoHub upload functionality if on videos page\n    if (window.location.pathname.includes('videos.html')) {\n        new VideoHubUploadManager();\n    }\n});\n\n/**\n * VideoHub Upload Manager\n * Handles video uploads directly to VideoHub\n */\nclass VideoHubUploadManager {\n    constructor() {\n        this.uploadModal = document.getElementById('uploadModal');\n        this.uploadForm = document.getElementById('uploadForm');\n        this.uploadBtn = document.getElementById('uploadBtn');\n        this.cancelBtn = document.getElementById('cancelBtn');\n        \n        // Upload area elements\n        this.uploadArea = document.getElementById('uploadArea');\n        this.fileSelectedArea = document.getElementById('fileSelectedArea');\n        this.uploadProgressArea = document.getElementById('uploadProgressArea');\n        this.uploadSuccess = document.getElementById('uploadSuccess');\n        \n        // File display elements\n        this.selectedFileName = document.getElementById('selectedFileName');\n        this.selectedFileSize = document.getElementById('selectedFileSize');\n        this.uploadingFileName = document.getElementById('uploadingFileName');\n        \n        // Progress elements\n        this.uploadProgressBar = document.getElementById('uploadProgressBar');\n        this.uploadPercentage = document.getElementById('uploadPercentage');\n        this.uploadStatus = document.getElementById('uploadStatus');\n        this.uploadSpeed = document.getElementById('uploadSpeed');\n        this.uploadTimeRemaining = document.getElementById('uploadTimeRemaining');\n        \n        // Upload state\n        this.selectedFile = null;\n        this.uploadStartTime = null;\n        this.uploadBytesUploaded = 0;\n        \n        this.init();\n    }\n    \n    async init() {\n        this.bindEvents();\n        this.setupCharacterCounters();\n        this.setupDragAndDrop();\n    }\n    \n    bindEvents() {\n        // Upload button click\n        if (this.uploadBtn) {\n            this.uploadBtn.addEventListener('click', (e) => this.handleUpload(e));\n        }\n        \n        // Modal events\n        if (this.uploadModal) {\n            this.uploadModal.addEventListener('show.bs.modal', () => this.onModalShow());\n            this.uploadModal.addEventListener('hidden.bs.modal', () => this.onModalHide());\n        }\n        \n        // File input change\n        const fileInput = document.getElementById('videoFile');\n        if (fileInput) {\n            fileInput.addEventListener('change', (e) => this.onFileSelect(e));\n        }\n    }\n    \n    setupDragAndDrop() {\n        if (!this.uploadArea) return;\n        \n        // Prevent default drag behaviors\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n            this.uploadArea.addEventListener(eventName, this.preventDefaults, false);\n            document.body.addEventListener(eventName, this.preventDefaults, false);\n        });\n        \n        // Highlight drop area when item is dragged over it\n        ['dragenter', 'dragover'].forEach(eventName => {\n            this.uploadArea.addEventListener(eventName, () => this.highlight(), false);\n        });\n        \n        ['dragleave', 'drop'].forEach(eventName => {\n            this.uploadArea.addEventListener(eventName, () => this.unhighlight(), false);\n        });\n        \n        // Handle dropped files\n        this.uploadArea.addEventListener('drop', (e) => this.handleDrop(e), false);\n    }\n    \n    preventDefaults(e) {\n        e.preventDefault();\n        e.stopPropagation();\n    }\n    \n    highlight() {\n        this.uploadArea.style.borderColor = '#198754';\n        this.uploadArea.style.background = '#f8fffe';\n        this.uploadArea.style.transform = 'scale(1.02)';\n    }\n    \n    unhighlight() {\n        this.uploadArea.style.borderColor = '#dee2e6';\n        this.uploadArea.style.background = '#f8f9fa';\n        this.uploadArea.style.transform = 'scale(1)';\n    }\n    \n    handleDrop(e) {\n        const dt = e.dataTransfer;\n        const files = dt.files;\n        \n        if (files.length > 0) {\n            const file = files[0];\n            if (file.type.startsWith('video/')) {\n                this.setSelectedFile(file);\n            } else {\n                this.showError('Please select a valid video file (MP4, MOV, AVI, WMV)');\n            }\n        }\n    }\n    \n    setupCharacterCounters() {\n        // Title counter\n        const titleInput = document.getElementById('videoTitle');\n        const titleCount = document.getElementById('titleCount');\n        if (titleInput && titleCount) {\n            titleInput.addEventListener('input', (e) => {\n                titleCount.textContent = e.target.value.length;\n            });\n        }\n        \n        // Description counter  \n        const descInput = document.getElementById('videoDescription');\n        const descCount = document.getElementById('descCount');\n        if (descInput && descCount) {\n            descInput.addEventListener('input', (e) => {\n                descCount.textContent = e.target.value.length;\n            });\n        }\n    }\n    \n    onFileSelect(e) {\n        const file = e.target.files[0];\n        if (file) {\n            this.setSelectedFile(file);\n        }\n    }\n    \n    setSelectedFile(file) {\n        // Validate file type\n        if (!file.type.startsWith('video/')) {\n            this.showError('Please select a valid video file (MP4, MOV, AVI, WMV)');\n            return;\n        }\n        \n        // Validate file size (2GB max)\n        const maxSize = 2 * 1024 * 1024 * 1024; // 2GB in bytes\n        if (file.size > maxSize) {\n            this.showError('File size exceeds 2GB limit. Please choose a smaller file.');\n            return;\n        }\n        \n        this.selectedFile = file;\n        \n        // Update UI to show selected file\n        const fileSize = this.formatFileSize(file.size);\n        this.selectedFileName.textContent = file.name;\n        this.selectedFileSize.textContent = fileSize;\n        \n        // Show file selected state\n        this.uploadArea.style.display = 'none';\n        this.fileSelectedArea.style.display = 'block';\n        \n        // Update file input\n        const fileInput = document.getElementById('videoFile');\n        const dataTransfer = new DataTransfer();\n        dataTransfer.items.add(file);\n        fileInput.files = dataTransfer.files;\n    }\n    \n    formatFileSize(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n    \n    onModalShow() {\n        // Reset form when modal is shown\n        this.resetForm();\n    }\n    \n    onModalHide() {\n        // Clean up when modal is hidden\n        this.hideProgress();\n        this.resetForm();\n    }\n    \n    clearFileSelection() {\n        this.selectedFile = null;\n        this.uploadArea.style.display = 'block';\n        this.fileSelectedArea.style.display = 'none';\n        this.uploadProgressArea.style.display = 'none';\n        \n        // Clear file input\n        const fileInput = document.getElementById('videoFile');\n        if (fileInput) {\n            fileInput.value = '';\n        }\n    }\n    \n    async handleUpload(e) {\n        e.preventDefault();\n        \n        try {\n            // Validate form\n            if (!this.validateForm()) {\n                return;\n            }\n            \n            // Get form data\n            const formData = this.getFormData();\n            \n            // Show progress\n            this.showUploadProgress();\n            this.updateUploadProgress(10, 'Preparing upload...');\n            \n            // Get current user session\n            const userSession = JSON.parse(localStorage.getItem('userSession') || sessionStorage.getItem('userSession') || '{}');\n            const creatorId = userSession.id;\n            \n            if (!creatorId) {\n                this.showError('User session not found. Please login again.');\n                return;\n            }\n            \n            this.updateUploadProgress(20, 'Authenticating with YouTube...');\n            \n            // Upload video directly to YouTube using JavaScript API\n            const youtubeResult = await window.youtubeAPI.uploadVideo(\n                formData.file, \n                formData.metadata, \n                (progress) => this.updateUploadProgress(Math.min(progress, 80), 'Uploading to YouTube...')\n            );\n            \n            if (youtubeResult.success) {\n                this.updateUploadProgress(85, 'Syncing with VideoHub...');\n                \n                // Sync with database after successful YouTube upload (fixed fields to match schema)\n                const syncData = {\n                    title: formData.metadata.title,\n                    description: formData.metadata.description,\n                    uploader_id: creatorId, // Fixed: changed from user_id to uploader_id\n                    price: formData.metadata.price,\n                    category: formData.metadata.tags.join(','),\n                    youtube_id: youtubeResult.videoId,\n                    thumbnail: youtubeResult.thumbnail || '',\n                    status: formData.metadata.privacy === 'public' ? 'published' : 'pending'\n                    // Removed duration and file_size as they don't exist in the database\n                };\n                \n                // Use configured API base URL\n                const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n                const syncResponse = await fetch(`${apiUrl}/videos`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(syncData)\n                });\n                \n                this.updateUploadProgress(100, 'Upload complete!');\n                \n                const syncResult = await syncResponse.json();\n                \n                if (syncResult.success) {\n                    this.showUploadSuccess();\n                    \n                    // Wait a moment for user to see success\n                    setTimeout(() => {\n                        this.hideProgress();\n                        this.resetForm();\n                        \n                        // Close modal and refresh videos\n                        const modal = bootstrap.Modal.getInstance(this.uploadModal);\n                        modal.hide();\n                        \n                        // Refresh videos list\n                        if (window.creatorManager) {\n                            window.creatorManager.loadDashboardData();\n                        }\n                        setTimeout(() => window.location.reload(), 500);\n                    }, 2000);\n                } else {\n                    throw new Error('Video uploaded to YouTube but failed to sync with database: ' + syncResult.message);\n                }\n            } else {\n                throw new Error(youtubeResult.error || 'Upload failed');\n            }\n            \n        } catch (error) {\n            console.error('Upload failed:', error);\n            this.showError(error.message || 'Upload failed. Please try again.');\n            this.hideProgress();\n        }\n    }\n    \n    validateForm() {\n        const fileInput = document.getElementById('videoFile');\n        const titleInput = document.getElementById('videoTitle');\n        \n        if (!fileInput.files || fileInput.files.length === 0) {\n            this.showError('Please select a video file.');\n            return false;\n        }\n        \n        if (!titleInput.value.trim()) {\n            this.showError('Please enter a video title.');\n            return false;\n        }\n        \n        const file = fileInput.files[0];\n        if (file.size > 2 * 1024 * 1024 * 1024) { // 2GB limit\n            this.showError('File size must be less than 2GB.');\n            return false;\n        }\n        \n        return true;\n    }\n    \n    getFormData() {\n        const fileInput = document.getElementById('videoFile');\n        const titleInput = document.getElementById('videoTitle');\n        const descInput = document.getElementById('videoDescription');\n        const priceInput = document.getElementById('videoPrice');\n        const privacyInput = document.getElementById('videoPrivacy');\n        const tagsInput = document.getElementById('videoTags');\n        \n        const tags = tagsInput.value ? tagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag) : [];\n        \n        return {\n            file: fileInput.files[0],\n            metadata: {\n                title: titleInput.value.trim(),\n                description: descInput.value.trim(),\n                price: parseFloat(priceInput.value) || 0,\n                privacy: privacyInput.value,\n                tags: tags,\n                categoryId: '22' // Education category\n            }\n        };\n    }\n    \n    resetForm() {\n        if (this.uploadForm) {\n            this.uploadForm.reset();\n        }\n        \n        // Reset upload states\n        this.clearFileSelection();\n        this.selectedFile = null;\n        this.uploadStartTime = null;\n        this.uploadBytesUploaded = 0;\n        \n        // Reset character counters\n        const titleCount = document.getElementById('titleCount');\n        const descCount = document.getElementById('descCount');\n        if (titleCount) titleCount.textContent = '0';\n        if (descCount) descCount.textContent = '0';\n        \n        // Hide all upload areas except default\n        if (this.uploadArea) this.uploadArea.style.display = 'block';\n        if (this.fileSelectedArea) this.fileSelectedArea.style.display = 'none';\n        if (this.uploadProgressArea) this.uploadProgressArea.style.display = 'none';\n        if (this.uploadSuccess) this.uploadSuccess.style.display = 'none';\n    }\n    \n    showUploadProgress() {\n        // Set up file name for upload\n        if (this.selectedFile && this.uploadingFileName) {\n            this.uploadingFileName.textContent = this.selectedFile.name;\n        }\n        \n        // Show upload progress area\n        if (this.fileSelectedArea) this.fileSelectedArea.style.display = 'none';\n        if (this.uploadProgressArea) this.uploadProgressArea.style.display = 'block';\n        \n        // Disable upload button and show uploading state\n        if (this.uploadBtn) {\n            this.uploadBtn.disabled = true;\n            this.uploadBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Uploading...';\n        }\n        \n        // Track upload start time\n        this.uploadStartTime = Date.now();\n    }\n    \n    hideProgress() {\n        // Re-enable upload button\n        if (this.uploadBtn) {\n            this.uploadBtn.disabled = false;\n            this.uploadBtn.innerHTML = '<i class=\"fas fa-cloud-upload-alt me-2\"></i>Upload to YouTube';\n        }\n    }\n    \n    updateUploadProgress(percentage, status = 'Uploading...') {\n        // Update progress bar\n        if (this.uploadProgressBar) {\n            this.uploadProgressBar.style.width = percentage + '%';\n        }\n        \n        // Update percentage badge\n        if (this.uploadPercentage) {\n            this.uploadPercentage.textContent = Math.round(percentage) + '%';\n        }\n        \n        // Update status\n        if (this.uploadStatus) {\n            this.uploadStatus.textContent = status;\n        }\n        \n        // Calculate and update upload speed and time remaining\n        if (this.selectedFile && this.uploadStartTime) {\n            const now = Date.now();\n            const elapsed = (now - this.uploadStartTime) / 1000; // seconds\n            const bytesUploaded = (percentage / 100) * this.selectedFile.size;\n            \n            if (elapsed > 1 && bytesUploaded > 0) {\n                const speed = bytesUploaded / elapsed; // bytes per second\n                const remaining = this.selectedFile.size - bytesUploaded;\n                const timeRemaining = remaining / speed; // seconds\n                \n                // Update speed display\n                if (this.uploadSpeed) {\n                    this.uploadSpeed.textContent = this.formatSpeed(speed);\n                }\n                \n                // Update time remaining\n                if (this.uploadTimeRemaining && percentage < 99) {\n                    this.uploadTimeRemaining.textContent = this.formatTime(timeRemaining);\n                } else if (this.uploadTimeRemaining) {\n                    this.uploadTimeRemaining.textContent = 'Almost done...';\n                }\n            }\n        }\n    }\n    \n    showUploadSuccess() {\n        // Hide progress area and show success\n        if (this.uploadProgressArea) this.uploadProgressArea.style.display = 'none';\n        if (this.uploadSuccess) {\n            this.uploadSuccess.style.display = 'block';\n        }\n    }\n    \n    formatSpeed(bytesPerSecond) {\n        const mbps = bytesPerSecond / (1024 * 1024);\n        if (mbps >= 1) {\n            return mbps.toFixed(1) + ' MB/s';\n        } else {\n            const kbps = bytesPerSecond / 1024;\n            return kbps.toFixed(1) + ' KB/s';\n        }\n    }\n    \n    formatTime(seconds) {\n        if (seconds < 60) {\n            return Math.round(seconds) + ' seconds left';\n        } else if (seconds < 3600) {\n            const minutes = Math.round(seconds / 60);\n            return minutes + ' minute' + (minutes !== 1 ? 's' : '') + ' left';\n        } else {\n            const hours = Math.round(seconds / 3600);\n            return hours + ' hour' + (hours !== 1 ? 's' : '') + ' left';\n        }\n    }\n    \n    showSuccess(message) {\n        if (window.commonUtils) {\n            window.commonUtils.showToast(message, 'success');\n        } else {\n            alert(message);\n        }\n    }\n    \n    showError(message) {\n        if (window.commonUtils) {\n            window.commonUtils.showToast(message, 'error');\n        } else {\n            alert(message);\n        }\n    }\n}\n\n// Global function to clear file selection\nwindow.clearFileSelection = function() {\n    // Find the upload manager instance and call its clearFileSelection method\n    const uploadArea = document.getElementById('uploadArea');\n    const fileSelectedArea = document.getElementById('fileSelectedArea');\n    const uploadProgressArea = document.getElementById('uploadProgressArea');\n    const fileInput = document.getElementById('videoFile');\n    \n    if (uploadArea) uploadArea.style.display = 'block';\n    if (fileSelectedArea) fileSelectedArea.style.display = 'none';\n    if (uploadProgressArea) uploadProgressArea.style.display = 'none';\n    if (fileInput) fileInput.value = '';\n};","size_bytes":83592},"assets/js/global-state.js":{"content":"/**\n * Global State Management for VideoHub\n * Prevents duplicate API calls and manages shared data\n */\nwindow.VideoHubState = {\n    // Cache for API responses\n    cache: {\n        creators: new Map(),\n        videos: new Map(),\n        earnings: new Map(),\n        metrics: new Map(),\n        users: new Map()\n    },\n    \n    // Loading states to prevent duplicate calls\n    loading: {\n        creatorData: false,\n        videos: false,\n        earnings: false,\n        metrics: false\n    },\n    \n    // Cache TTL (5 minutes)\n    TTL: 5 * 60 * 1000,\n    \n    // Get cached data if it's still valid\n    getCached: function(key, userId = null) {\n        const cacheKey = userId ? `${key}_${userId}` : key;\n        const cached = this.cache[key]?.get(cacheKey);\n        \n        if (cached && (Date.now() - cached.timestamp) < this.TTL) {\n            return cached.data;\n        }\n        return null;\n    },\n    \n    // Set cached data\n    setCached: function(key, data, userId = null) {\n        const cacheKey = userId ? `${key}_${userId}` : key;\n        if (!this.cache[key]) this.cache[key] = new Map();\n        \n        this.cache[key].set(cacheKey, {\n            data: data,\n            timestamp: Date.now()\n        });\n    },\n    \n    // Check if currently loading\n    isLoading: function(key) {\n        return this.loading[key];\n    },\n    \n    // Set loading state\n    setLoading: function(key, state) {\n        this.loading[key] = state;\n    },\n    \n    // Clear cache\n    clearCache: function() {\n        Object.keys(this.cache).forEach(key => {\n            this.cache[key].clear();\n        });\n    }\n};","size_bytes":1613},"assets/js/payment.js":{"content":"/**\n * VideoHub Stripe Payment Module\n * Handles real Stripe payment processing for video purchases - Stripe ONLY\n */\n\nclass StripePaymentManager {\n    constructor() {\n        this.stripe = null;\n        this.elements = null;\n        this.cardElement = null;\n        this.currentPaymentIntent = null;\n        this.publishableKey = null;\n        this.isInitialized = false;\n        this.init();\n    }\n\n    async init() {\n        try {\n            await this.loadStripeKey();\n            this.initializeStripe();\n            this.bindEvents();\n            this.isInitialized = true;\n        } catch (error) {\n            console.error('Failed to initialize Stripe:', error);\n            this.showError('Payment system initialization failed');\n        }\n    }\n\n    async loadStripeKey() {\n        try {\n            const response = await fetch(this.getApiUrl('/config/stripe-key'));\n            if (response.ok) {\n                const data = await response.json();\n                this.publishableKey = data.publishable_key;\n            } else {\n                throw new Error('Failed to load Stripe key');\n            }\n        } catch (error) {\n            console.error('Could not load Stripe key from API:', error);\n            throw error;\n        }\n    }\n\n    initializeStripe() {\n        if (!this.publishableKey) {\n            throw new Error('Stripe publishable key not found');\n        }\n\n        this.stripe = Stripe(this.publishableKey);\n        this.elements = this.stripe.elements();\n\n        const style = {\n            base: {\n                fontSize: '16px',\n                color: '#424770',\n                '::placeholder': {\n                    color: '#aab7c4',\n                },\n            },\n            invalid: {\n                color: '#9e2146',\n            },\n        };\n\n        this.cardElement = this.elements.create('card', {style: style});\n    }\n\n    bindEvents() {\n        document.addEventListener('click', (e) => {\n            if (e.target.classList.contains('purchase-video-btn')) {\n                e.preventDefault();\n                this.handlePurchaseClick(e.target);\n            }\n        });\n\n        document.addEventListener('submit', (e) => {\n            if (e.target.id === 'stripe-payment-form') {\n                e.preventDefault();\n                this.processStripePayment(e.target);\n            }\n        });\n    }\n\n    async handlePurchaseClick(button) {\n        if (!this.isInitialized) {\n            this.showError('Payment system is not ready. Please refresh the page.');\n            return;\n        }\n\n        const videoId = button.dataset.videoId;\n        const videoTitle = button.dataset.videoTitle;\n        const videoPrice = parseFloat(button.dataset.videoPrice);\n\n        if (!videoId || !videoPrice) {\n            this.showError('Invalid video information');\n            return;\n        }\n\n        try {\n            const userId = this.getCurrentUserId();\n            if (!userId) {\n                this.showError('Please log in to purchase videos');\n                return;\n            }\n\n            this.showStripePaymentModal(videoId, videoTitle, videoPrice);\n        } catch (error) {\n            console.error('Error initiating purchase:', error);\n            this.showError('Failed to start purchase process');\n        }\n    }\n\n    showStripePaymentModal(videoId, videoTitle, videoPrice) {\n        const modalHtml = `\n            <div class=\"modal fade\" id=\"stripePaymentModal\" tabindex=\"-1\" aria-labelledby=\"stripePaymentModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog modal-dialog-centered\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\" id=\"stripePaymentModalLabel\">\n                                <i class=\"fas fa-credit-card me-2\"></i>Purchase Video\n                            </h5>\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <div class=\"mb-3\">\n                                <h6>${videoTitle}</h6>\n                                <div class=\"text-end\">\n                                    <span class=\"h4 text-primary\">$${videoPrice.toFixed(2)}</span>\n                                    <small class=\"text-muted d-block\">One-time purchase</small>\n                                </div>\n                            </div>\n                            \n                            <form id=\"stripe-payment-form\">\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\">Card Details</label>\n                                    <div id=\"card-element\" class=\"form-control\" style=\"height: 45px; padding: 10px;\"></div>\n                                    <div id=\"card-errors\" class=\"text-danger mt-2\" style=\"display: none;\"></div>\n                                </div>\n                                \n                                <input type=\"hidden\" id=\"video-id\" value=\"${videoId}\">\n                                <input type=\"hidden\" id=\"video-price\" value=\"${videoPrice}\">\n                                \n                                <button type=\"submit\" id=\"submit-payment\" class=\"btn btn-primary w-100\" disabled>\n                                    <span class=\"spinner-border spinner-border-sm me-2\" style=\"display: none;\"></span>\n                                    Pay $${videoPrice.toFixed(2)}\n                                </button>\n                            </form>\n                            \n                            <div class=\"mt-3 text-center\">\n                                <small class=\"text-muted\">\n                                    <i class=\"fas fa-shield-alt me-1\"></i>\n                                    Secured by Stripe\n                                </small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        const existingModal = document.getElementById('stripePaymentModal');\n        if (existingModal) {\n            existingModal.remove();\n        }\n\n        document.body.insertAdjacentHTML('beforeend', modalHtml);\n\n        const modal = new bootstrap.Modal(document.getElementById('stripePaymentModal'));\n        modal.show();\n\n        setTimeout(() => {\n            this.mountCardElement();\n        }, 300);\n    }\n\n    mountCardElement() {\n        const cardElementContainer = document.getElementById('card-element');\n        const cardErrors = document.getElementById('card-errors');\n        const submitButton = document.getElementById('submit-payment');\n\n        if (!cardElementContainer || !this.cardElement) {\n            console.error('Card element container not found or Stripe not initialized');\n            return;\n        }\n\n        this.cardElement.mount('#card-element');\n\n        this.cardElement.on('change', (event) => {\n            if (event.error) {\n                cardErrors.textContent = event.error.message;\n                cardErrors.style.display = 'block';\n                submitButton.disabled = true;\n            } else {\n                cardErrors.style.display = 'none';\n                submitButton.disabled = event.empty;\n            }\n        });\n    }\n\n    async processStripePayment(form) {\n        const videoId = form.querySelector('#video-id').value;\n        const videoPrice = parseFloat(form.querySelector('#video-price').value);\n        const submitButton = form.querySelector('#submit-payment');\n        const spinner = submitButton.querySelector('.spinner-border');\n        \n        submitButton.disabled = true;\n        spinner.style.display = 'inline-block';\n\n        try {\n            const paymentIntentResponse = await this.createPaymentIntent(videoId, videoPrice);\n            \n            if (!paymentIntentResponse.success) {\n                throw new Error(paymentIntentResponse.message);\n            }\n\n            const {error, paymentIntent} = await this.stripe.confirmCardPayment(\n                paymentIntentResponse.client_secret,\n                {\n                    payment_method: {\n                        card: this.cardElement,\n                    }\n                }\n            );\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            if (paymentIntent.status === 'succeeded') {\n                await this.confirmPayment(paymentIntent.id, videoId);\n                this.showSuccess('Payment successful! You can now watch the video.');\n                \n                bootstrap.Modal.getInstance(document.getElementById('stripePaymentModal')).hide();\n                \n                setTimeout(() => {\n                    window.location.reload();\n                }, 2000);\n            }\n\n        } catch (error) {\n            console.error('Payment failed:', error);\n            this.showError(error.message || 'Payment failed. Please try again.');\n        } finally {\n            submitButton.disabled = false;\n            spinner.style.display = 'none';\n        }\n    }\n\n    async createPaymentIntent(videoId, videoPrice) {\n        const userId = this.getCurrentUserId();\n        \n        const response = await fetch(this.getApiUrl('/payments/create-payment-intent'), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                video_id: videoId,\n                user_id: userId,\n                amount: videoPrice\n            })\n        });\n\n        return await response.json();\n    }\n\n    async confirmPayment(paymentIntentId, videoId) {\n        const userId = this.getCurrentUserId();\n        \n        const response = await fetch(this.getApiUrl('/payments/confirm-payment'), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                payment_intent_id: paymentIntentId,\n                video_id: videoId,\n                user_id: userId\n            })\n        });\n\n        return await response.json();\n    }\n\n    getCurrentUserId() {\n        const userSession = JSON.parse(localStorage.getItem('userSession') || sessionStorage.getItem('userSession') || '{}');\n        return userSession.id || userSession.userId;\n    }\n\n    getApiUrl(endpoint) {\n        const config = window.videoHubConfig;\n        if (config) {\n            return config.getUrl(`/api${endpoint}`);\n        }\n        return `/api${endpoint}`;\n    }\n\n    showError(message) {\n        if (window.commonUtils && window.commonUtils.showNotification) {\n            window.commonUtils.showNotification(message, 'error');\n        } else {\n            alert('Error: ' + message);\n        }\n    }\n\n    showSuccess(message) {\n        if (window.commonUtils && window.commonUtils.showNotification) {\n            window.commonUtils.showNotification(message, 'success');\n        } else {\n            alert(message);\n        }\n    }\n}\n\n// Initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    if (window.Stripe) {\n        window.stripePaymentManager = new StripePaymentManager();\n    } else {\n        console.error('Stripe.js not loaded');\n    }\n});\n\n// Global function for backward compatibility\nwindow.purchaseVideo = function(videoId, videoTitle, videoPrice) {\n    if (window.stripePaymentManager && window.stripePaymentManager.isInitialized) {\n        window.stripePaymentManager.showStripePaymentModal(videoId, videoTitle, videoPrice);\n    } else {\n        console.error('Stripe payment manager not initialized');\n        if (window.commonUtils && window.commonUtils.showNotification) {\n            window.commonUtils.showNotification('Payment system not ready. Please refresh the page.', 'error');\n        }\n    }\n};","size_bytes":11973},"assets/js/profile.js":{"content":"/**\n * VideoHub Profile Settings Module\n * Handles profile updates and password changes\n */\n\nclass ProfileManager {\n    constructor() {\n        this.currentUser = {};\n        this.init();\n    }\n\n    async init() {\n        await this.loadUserProfile();\n        this.bindEvents();\n        this.setupPasswordStrengthChecker();\n    }\n\n    async loadUserProfile() {\n        try {\n            // Check for user session first\n            let userSession = null;\n\n            // Try to get session from both localStorage and sessionStorage\n            const localSession = localStorage.getItem('userSession');\n            const sessionSession = sessionStorage.getItem('userSession');\n\n            if (localSession) {\n                userSession = JSON.parse(localSession);\n            } else if (sessionSession) {\n                userSession = JSON.parse(sessionSession);\n            }\n\n            if (!userSession || !userSession.email) {\n                console.log('No user session found');\n                return;\n            }\n\n            // Wait for API service to be available\n            let retries = 0;\n            const maxRetries = 50;\n\n            while (retries < maxRetries && !window.apiService) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n                retries++;\n            }\n\n            if (window.apiService) {\n                try {\n                    const result = await window.apiService.getUserProfile();\n                    if (result.success) {\n                        this.currentUser = result.data;\n                        this.populateProfileForm();\n                        console.log('Profile loaded:', this.currentUser);\n\n                        // Also load admin metrics and update sidebar badges\n                        if (this.currentUser.role === 'admin') {\n                            await this.loadAdminMetrics();\n                        }\n                    } else {\n                        throw new Error(result.message || 'Failed to load profile');\n                    }\n                } catch (apiError) {\n                    console.error('API error loading profile:', apiError);\n                    \n                    // Handle 401 authentication errors by redirecting to login\n                    if (apiError.message && (apiError.message.includes('401') || apiError.message.includes('not authenticated'))) {\n                        console.log('User not authenticated, redirecting to login');\n                        window.location.href = '../auth/login.html';\n                        return;\n                    }\n                    \n                    // For other errors, fallback to session data\n                    console.log('Using session data as fallback');\n                    this.currentUser = {\n                        name: userSession.name || '',\n                        email: userSession.email || '',\n                        role: userSession.userType || 'viewer'\n                    };\n                    this.populateProfileForm();\n                }\n            } else {\n                // Use session data as fallback\n                this.currentUser = {\n                    name: userSession.name || '',\n                    email: userSession.email || '',\n                    role: userSession.userType || 'viewer'\n                };\n                this.populateProfileForm();\n            }\n        } catch (error) {\n            console.error('Error loading profile:', error);\n            \n            // Handle authentication errors gracefully\n            if (error.message && (error.message.includes('401') || error.message.includes('not authenticated'))) {\n                console.log('User not authenticated, redirecting to login');\n                window.location.href = '../auth/login.html';\n                return;\n            }\n            \n            // Try to use session data as fallback for other errors\n            let userSession = null;\n            const localSession = localStorage.getItem('userSession');\n            const sessionSession = sessionStorage.getItem('userSession');\n\n            if (localSession) {\n                userSession = JSON.parse(localSession);\n            } else if (sessionSession) {\n                userSession = JSON.parse(sessionSession);\n            }\n\n            if (userSession && userSession.email) {\n                this.currentUser = {\n                    name: userSession.name || '',\n                    email: userSession.email || '',\n                    role: userSession.userType || 'viewer'\n                };\n                this.populateProfileForm();\n            }\n        }\n    }\n\n    populateProfileForm() {\n        // Safely update form fields if they exist\n        const firstNameEl = document.getElementById('firstName');\n        const lastNameEl = document.getElementById('lastName');\n        const emailEl = document.getElementById('email');\n        const channelNameEl = document.getElementById('channelName');\n        const channelDescriptionEl = document.getElementById('channelDescription');\n\n        if (firstNameEl) firstNameEl.value = this.currentUser.firstName || this.currentUser.name?.split(' ')[0] || '';\n        if (lastNameEl) lastNameEl.value = this.currentUser.lastName || this.currentUser.name?.split(' ')[1] || '';\n        if (emailEl) emailEl.value = this.currentUser.email || '';\n        if (channelNameEl) channelNameEl.value = this.currentUser.channelName || this.currentUser.name || '';\n        if (channelDescriptionEl) channelDescriptionEl.value = this.currentUser.channelDescription || '';\n\n        // Update last login time\n        const lastLoginElement = document.getElementById('lastLoginTime');\n        if (lastLoginElement) {\n            const now = new Date();\n            lastLoginElement.textContent = `${now.toLocaleDateString()}, ${now.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;\n        }\n\n        // Update role field\n        const roleEl = document.getElementById('role');\n        if (roleEl && this.currentUser.role) {\n            const roleMap = {\n                'admin': 'Administrator',\n                'creator': 'Content Creator',\n                'viewer': 'Viewer'\n            };\n            roleEl.value = roleMap[this.currentUser.role] || this.currentUser.role;\n        }\n    }\n\n    bindEvents() {\n        // Profile form submission\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', (e) => this.handleProfileUpdate(e));\n        }\n\n        // Password form submission\n        const passwordForm = document.getElementById('changePasswordForm');\n        if (passwordForm) {\n            passwordForm.addEventListener('submit', (e) => this.handlePasswordChange(e));\n        }\n\n        // Real-time validation\n        this.setupFormValidation();\n    }\n\n    setupFormValidation() {\n        // First name validation\n        const firstNameInput = document.getElementById('firstName');\n        if (firstNameInput) {\n            firstNameInput.addEventListener('input', (e) => {\n                this.validateName(e.target);\n            });\n        }\n\n        // Last name validation\n        const lastNameInput = document.getElementById('lastName');\n        if (lastNameInput) {\n            lastNameInput.addEventListener('input', (e) => {\n                this.validateName(e.target);\n            });\n        }\n\n        // Password confirmation validation\n        const confirmPasswordInput = document.getElementById('confirmPassword');\n        const newPasswordInput = document.getElementById('newPassword');\n\n        if (confirmPasswordInput && newPasswordInput) {\n            [confirmPasswordInput, newPasswordInput].forEach(input => {\n                input.addEventListener('input', () => {\n                    this.validatePasswordMatch();\n                });\n            });\n        }\n    }\n\n    validateName(input) {\n        const name = input.value.trim();\n        const isValid = name.length >= 2 && /^[a-zA-Z\\s'-]+$/.test(name);\n\n        if (isValid) {\n            input.classList.remove('is-invalid');\n            input.classList.add('is-valid');\n        } else {\n            input.classList.remove('is-valid');\n            input.classList.add('is-invalid');\n        }\n\n        return isValid;\n    }\n\n    validatePasswordMatch() {\n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n        const confirmPasswordInput = document.getElementById('confirmPassword');\n\n        if (confirmPassword && newPassword !== confirmPassword) {\n            confirmPasswordInput.classList.add('is-invalid');\n            confirmPasswordInput.classList.remove('is-valid');\n            return false;\n        } else if (confirmPassword) {\n            confirmPasswordInput.classList.remove('is-invalid');\n            confirmPasswordInput.classList.add('is-valid');\n            return true;\n        }\n        return false;\n    }\n\n    setupPasswordStrengthChecker() {\n        const newPasswordInput = document.getElementById('newPassword');\n        if (newPasswordInput) {\n            newPasswordInput.addEventListener('input', (e) => {\n                this.updatePasswordStrength(e.target.value);\n            });\n        }\n    }\n\n    updatePasswordStrength(password) {\n        const strengthBar = document.getElementById('strengthBar');\n        const strengthText = document.getElementById('strengthText');\n\n        if (!strengthBar || !strengthText) return;\n\n        const strength = this.calculatePasswordStrength(password);\n\n        // Update progress bar\n        strengthBar.style.width = `${strength.percentage}%`;\n        strengthBar.className = `progress-bar bg-${strength.color}`;\n\n        // Update text\n        strengthText.textContent = strength.text;\n        strengthText.className = `text-sm text-${strength.color}`;\n    }\n\n    calculatePasswordStrength(password) {\n        if (!password) return { percentage: 0, color: 'secondary', text: 'Enter password' };\n\n        let score = 0;\n        const checks = [\n            { test: /.{8,}/, points: 25 }, // Length >= 8\n            { test: /[a-z]/, points: 15 }, // Lowercase\n            { test: /[A-Z]/, points: 15 }, // Uppercase\n            { test: /[0-9]/, points: 20 }, // Numbers\n            { test: /[^A-Za-z0-9]/, points: 25 } // Special characters\n        ];\n\n        checks.forEach(check => {\n            if (check.test.test(password)) {\n                score += check.points;\n            }\n        });\n\n        if (score < 40) return { percentage: score, color: 'danger', text: 'Weak' };\n        if (score < 70) return { percentage: score, color: 'warning', text: 'Fair' };\n        if (score < 90) return { percentage: score, color: 'info', text: 'Good' };\n        return { percentage: score, color: 'success', text: 'Strong' };\n    }\n\n    async handleProfileUpdate(e) {\n        e.preventDefault();\n\n        const form = e.target;\n        const formData = new FormData(form);\n        const profileData = {\n            firstName: formData.get('firstName').trim(),\n            lastName: formData.get('lastName').trim()\n        };\n\n        // Validate form\n        const isValid = this.validateProfileForm(form);\n        if (!isValid) {\n            return;\n        }\n\n        // Show loading state\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> Saving...';\n        submitBtn.disabled = true;\n\n        try {\n            const result = await window.apiService.updateUserProfile(profileData);\n\n            if (result.success) {\n                // Update local data\n                this.currentUser.firstName = profileData.firstName;\n                this.currentUser.lastName = profileData.lastName;\n\n                // Add success class to form\n                form.classList.add('was-validated');\n\n                window.apiService.showSuccessMessage('Profile updated successfully');\n            } else {\n                window.apiService.handleApiError(result, 'Failed to update profile');\n            }\n        } catch (error) {\n            // Demo mode\n            this.currentUser.firstName = profileData.firstName;\n            this.currentUser.lastName = profileData.lastName;\n            window.apiService.showSuccessMessage('Profile updated successfully (demo mode)');\n        } finally {\n            // Reset button\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    }\n\n    validateProfileForm(form) {\n        const firstName = form.querySelector('#firstName');\n        const lastName = form.querySelector('#lastName');\n\n        let isValid = true;\n\n        if (!this.validateName(firstName)) {\n            isValid = false;\n        }\n\n        if (!this.validateName(lastName)) {\n            isValid = false;\n        }\n\n        form.classList.add('was-validated');\n        return isValid;\n    }\n\n    async handlePasswordChange(e) {\n        e.preventDefault();\n\n        const form = e.target;\n        const formData = new FormData(form);\n        const passwordData = {\n            currentPassword: formData.get('currentPassword'),\n            newPassword: formData.get('newPassword'),\n            confirmPassword: formData.get('confirmPassword')\n        };\n\n        // Validate form\n        const isValid = this.validatePasswordForm(form, passwordData);\n        if (!isValid) {\n            return;\n        }\n\n        // Show loading state\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> Updating...';\n        submitBtn.disabled = true;\n\n        try {\n            const result = await window.apiService.put('/users/change-password', {\n                currentPassword: passwordData.currentPassword,\n                newPassword: passwordData.newPassword\n            });\n\n            if (result.success) {\n                // Close modal\n                const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));\n                modal.hide();\n\n                // Reset form\n                form.reset();\n                form.classList.remove('was-validated');\n\n                // Reset password strength indicator\n                this.updatePasswordStrength('');\n\n                window.apiService.showSuccessMessage('Password updated successfully');\n            } else {\n                window.apiService.handleApiError(result, 'Failed to update password');\n            }\n        } catch (error) {\n            // Demo mode\n            const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));\n            modal.hide();\n            form.reset();\n            form.classList.remove('was-validated');\n            this.updatePasswordStrength('');\n            window.apiService.showSuccessMessage('Password updated successfully (demo mode)');\n        } finally {\n            // Reset button\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    }\n\n    validatePasswordForm(form, data) {\n        let isValid = true;\n\n        // Current password validation\n        const currentPasswordInput = form.querySelector('#currentPassword');\n        if (!data.currentPassword || data.currentPassword.length < 6) {\n            currentPasswordInput.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            currentPasswordInput.classList.remove('is-invalid');\n            currentPasswordInput.classList.add('is-valid');\n        }\n\n        // New password validation\n        const newPasswordInput = form.querySelector('#newPassword');\n        const strength = this.calculatePasswordStrength(data.newPassword);\n        if (strength.percentage < 40) {\n            newPasswordInput.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            newPasswordInput.classList.remove('is-invalid');\n            newPasswordInput.classList.add('is-valid');\n        }\n\n        // Confirm password validation\n        if (data.newPassword !== data.confirmPassword) {\n            form.querySelector('#confirmPassword').classList.add('is-invalid');\n            isValid = false;\n        }\n\n        form.classList.add('was-validated');\n        return isValid;\n    }\n\n    async loadAdminMetrics() {\n        try {\n            // Load admin data for sidebar badges\n            const [usersResponse, videosResponse] = await Promise.all([\n                window.apiService.get('/admin/users'),\n                window.apiService.get('/videos')\n            ]);\n\n            const users = usersResponse.data || usersResponse.users || [];\n            const videos = videosResponse.data || videosResponse.videos || [];\n\n            // Sidebar badges removed for cleaner interface\n\n        } catch (error) {\n            console.error('Failed to load admin metrics:', error);\n        }\n    }\n}\n\n// Global functions\nwindow.resetProfileForm = function() {\n    const form = document.getElementById('profileForm');\n    if (form) {\n        form.reset();\n        form.classList.remove('was-validated');\n\n        // Remove validation classes\n        form.querySelectorAll('.form-control').forEach(input => {\n            input.classList.remove('is-valid', 'is-invalid');\n        });\n\n        // Reload original data\n        window.profileManager.populateProfileForm();\n    }\n};\n\nwindow.togglePasswordVisibility = function(inputId, button) {\n    const input = document.getElementById(inputId);\n    const icon = button.querySelector('i');\n\n    if (input.type === 'password') {\n        input.type = 'text';\n        icon.classList.remove('fa-eye');\n        icon.classList.add('fa-eye-slash');\n    } else {\n        input.type = 'password';\n        icon.classList.remove('fa-eye-slash');\n        icon.classList.add('fa-eye');\n    }\n};\n\n// Initialize profile manager\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.profileManager = new ProfileManager();\n});","size_bytes":18224},"assets/js/simple-profile.js":{"content":"/**\n * Simple Profile Management System for VideoHub\n * Streamlined approach without complex logic\n */\n\nclass SimpleProfileManager {\n    constructor() {\n        this.init();\n    }\n\n    async init() {\n        await this.loadUserData();\n        this.bindFormEvents();\n    }\n\n    async loadUserData() {\n        try {\n            // Get user session\n            const userSession = this.getUserSession();\n            if (!userSession || !userSession.id) {\n                console.error('No user session found');\n                window.location.href = '../auth/login.html';\n                return;\n            }\n\n            // console.log('Loading profile for user ID:', userSession.id);\n\n            // Try API first, fallback to session data\n            let userData = null;\n            if (window.apiService) {\n                try {\n                    const result = await window.apiService.get(`/api/users/${userSession.id}`);\n                    // console.log('API response:', result);\n                    if (result.success && result.data) {\n                        userData = result.data;\n                        // console.log('Using API data:', userData);\n                    }\n                } catch (error) {\n                    console.warn('API error, using session data:', error);\n                }\n            }\n\n            // Use session data as fallback\n            if (!userData) {\n                // console.log('Using session data fallback');\n                userData = {\n                    firstName: userSession.name?.split(' ')[0] || '',\n                    lastName: userSession.name?.split(' ').slice(1).join(' ') || '',\n                    email: userSession.email || '',\n                    role: userSession.userType || 'viewer',\n                    name: userSession.name || '',\n                    joinDate: 'Recent'\n                };\n            } else {\n                // Ensure we have split names for API data\n                if (userData.name && !userData.firstName) {\n                    const nameParts = userData.name.split(' ');\n                    userData.firstName = nameParts[0] || '';\n                    userData.lastName = nameParts.slice(1).join(' ') || '';\n                }\n                \n                // Format created_at date if available\n                if (userData.created_at) {\n                    userData.joinDate = new Date(userData.created_at).toLocaleDateString('en-US', {\n                        month: 'short',\n                        day: 'numeric',\n                        year: 'numeric'\n                    });\n                }\n            }\n\n            // console.log('Final user data to populate:', userData);\n            this.populateForm(userData);\n            \n        } catch (error) {\n            console.error('Error loading profile:', error);\n            this.showAlert('Error loading profile data', 'danger');\n        }\n    }\n\n    getUserSession() {\n        const sessionData = sessionStorage.getItem('userSession') || localStorage.getItem('userSession');\n        return sessionData ? JSON.parse(sessionData) : null;\n    }\n\n    populateForm(userData) {\n        // console.log('Populating form with data:', userData);\n        \n        // Safely populate form fields\n        this.setFieldValue('firstName', userData.firstName);\n        this.setFieldValue('lastName', userData.lastName);\n        this.setFieldValue('email', userData.email);\n        // this.setFieldValue('channelName', userData.channelName || userData.name);\n        // this.setFieldValue('channelDescription', userData.channelDescription);\n        \n        // Set role display\n        const roleEl = document.getElementById('role');\n        if (roleEl) {\n            const roleMap = {\n                'admin': 'Administrator',\n                'creator': 'Content Creator',\n                'viewer': 'Viewer'\n            };\n            roleEl.value = roleMap[userData.role] || userData.role;\n            // console.log('Set role to:', roleMap[userData.role] || userData.role);\n        }\n\n        // Update additional profile elements (viewer/admin specific)\n        this.setFieldValue('displayName', userData.name);\n        this.setFieldValue('DisplayName', userData.name);\n        this.setFieldValue('userRole', this.getMembershipType(userData.role));\n        this.setFieldValue('memberSince', userData.joinDate || 'Recent');\n        this.setFieldValue('lastLogin', 'Today');\n\n        // Update user badges based on role\n        this.updateUserBadges(userData.role);\n        \n        // console.log('Form population completed');\n    }\n\n    getMembershipType(role) {\n        const membershipTypes = {\n            'admin': 'Administrator',\n            'creator': 'Creator',\n            'viewer': 'Premium Member'\n        };\n        return membershipTypes[role] || 'Member';\n    }\n\n    updateUserBadges(role) {\n        const badgesEl = document.getElementById('userBadges');\n        if (badgesEl) {\n            let badges = '';\n            if (role === 'admin') {\n                badges = '<span class=\"badge bg-danger\">Admin</span>';\n            } else if (role === 'creator') {\n                badges = '<span class=\"badge bg-success\">Creator</span>';\n            } else {\n                badges = '<span class=\"badge bg-success\">Verified</span><span class=\"badge bg-primary\">Premium</span>';\n            }\n            badgesEl.innerHTML = badges;\n        }\n    }\n\n    setFieldValue(fieldId, value) {\n        const element = document.getElementById(fieldId);\n        if (!element) {\n            console.warn(`Field ${fieldId} not found in DOM`);\n            return;\n        }\n        \n        // Check if it's an input field\n        if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA' || element.tagName === 'SELECT') {\n            element.value = value || '';\n            // console.log(`Set ${fieldId} value to:`, value);\n        } else {\n            // For display elements (h6, strong, span, div, p, etc.)\n            element.textContent = value || '';\n            // console.log(`Set ${fieldId} textContent to:`, value);\n        }\n    }\n\n    bindFormEvents() {\n        // Profile form submission\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', (e) => this.handleProfileUpdate(e));\n        }\n\n        // Password form submission is now handled by change-password.js\n    }\n\n    async handleProfileUpdate(e) {\n        e.preventDefault();\n        \n        try {\n            const formData = this.getFormData();\n            const userSession = this.getUserSession();\n            \n            if (!userSession?.id) {\n                this.showAlert('Session expired. Please login again.', 'danger');\n                return;\n            }\n\n            // Use API service for profile updates\n            if (!window.apiService) {\n                this.showAlert('API service not available. Please refresh the page.', 'danger');\n                return;\n            }\n\n            const response = await window.apiService.put(`/api/users/${userSession.id}`, formData);\n\n            if (response.success) {\n                // Update session with new data\n                const updatedSession = { ...userSession, ...formData };\n                localStorage.setItem('userSession', JSON.stringify(updatedSession));\n                sessionStorage.setItem('userSession', JSON.stringify(updatedSession));\n                \n                this.showAlert('Profile updated successfully!', 'success');\n            } else {\n                this.showAlert('Failed to update profile', 'danger');\n            }\n            \n        } catch (error) {\n            console.error('Error updating profile:', error);\n            this.showAlert('Error updating profile', 'danger');\n        }\n    }\n\n    // Password change is now handled by change-password.js\n    // This method is deprecated and replaced\n\n    getFormData() {\n        const firstName = document.getElementById('firstName')?.value || '';\n        const lastName = document.getElementById('lastName')?.value || '';\n        \n        return {\n            name: `${firstName} ${lastName}`.trim(),\n            channel_name: document.getElementById('channelName')?.value || '',\n            channel_description: document.getElementById('channelDescription')?.value || ''\n        };\n    }\n\n    showAlert(message, type) {\n        const alertDiv = document.createElement('div');\n        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;\n        alertDiv.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        const container = document.querySelector('main');\n        if (container) {\n            container.insertBefore(alertDiv, container.firstChild);\n            \n            setTimeout(() => {\n                alertDiv.remove();\n            }, 5000);\n        }\n    }\n}\n\n// Initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.simpleProfileManager = new SimpleProfileManager();\n});","size_bytes":9133},"assets/js/viewer.js":{"content":"/**\n * VideoHub Viewer Module\n * Handles viewer functionality including browsing, purchasing, and watching videos\n */\n\nclass ViewerManager {\n    constructor() {\n        this.videos = [];\n        this.purchases = [];\n        this.favorites = [];\n        this.currentVideo = null;\n        this.player = null;\n        this.filteredVideos = [];\n        this.currentPage = 1;\n        this.videosPerPage = 6;\n        this.currentViewerId = null; // Will be set from session\n        this.favorites = []; // Will be loaded from API\n        this.init();\n    }\n\n    async init() {\n        await this.loadDataFromAPI();\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n        this.initializePlayer();\n    }\n\n    async loadDataFromAPI() {\n        const currentPage = window.location.pathname.split('/').pop();\n\n        try {\n            // Wait for API service to be available - reduced timeout\n            let retries = 0;\n            const maxRetries = 20;\n\n            while (retries < maxRetries && !window.apiService) {\n                await new Promise(resolve => setTimeout(resolve, 50));\n                retries++;\n            }\n\n            if (window.apiService) {\n                // Get current user info from session\n                const userSession = JSON.parse(localStorage.getItem('userSession') || sessionStorage.getItem('userSession') || '{}');\n                const userId = userSession.id || userSession.userId;\n                this.currentViewerId = userId;\n\n                if (!userId) {\n                    console.error('No viewer ID found in session, redirecting to login');\n                    const loginUrl = window.videoHubConfig ?\n                        window.videoHubConfig.getUrl('/auth/login.html') :\n                        '../auth/login.html';\n                    window.location.href = loginUrl;\n                    return;\n                }\n\n                // Load data based on current page - optimized for performance\n                if (currentPage === 'dashboard.html') {\n                    // Load videos only once, metrics loaded separately and cached\n                    const videosResponse = await window.apiService.get('/api/videos');\n                    this.videos = Array.isArray(videosResponse.videos) ? videosResponse.videos :\n                                 Array.isArray(videosResponse.data?.videos) ? videosResponse.data.videos :\n                                 Array.isArray(videosResponse.data) ? videosResponse.data : [];\n                    \n                    // Load metrics with debouncing\n                    this.loadMetricsWithDelay(userId);\n                } else if (currentPage === 'purchases.html') {\n                    // Load purchases for purchases page - cached for 30 seconds\n                    const cached = sessionStorage.getItem(`purchases_${userId}`);\n                    const cacheTime = sessionStorage.getItem(`purchases_time_${userId}`);\n                    \n                    if (cached && cacheTime && (Date.now() - parseInt(cacheTime)) < 30000) {\n                        this.purchases = JSON.parse(cached);\n                        this.displayPurchases();\n                    } else {\n                        const purchasesResponse = await window.apiService.get(`/api/purchases?user_id=${userId}`);\n                        this.purchases = Array.isArray(purchasesResponse.purchases) ? purchasesResponse.purchases :\n                                        Array.isArray(purchasesResponse.data?.purchases) ? purchasesResponse.data.purchases :\n                                        Array.isArray(purchasesResponse.data) ? purchasesResponse.data : [];\n                        \n                        // Cache the results\n                        sessionStorage.setItem(`purchases_${userId}`, JSON.stringify(this.purchases));\n                        sessionStorage.setItem(`purchases_time_${userId}`, Date.now().toString());\n                        \n                        this.displayPurchases();\n                    }\n                } else {\n                    // Minimal loading for other pages\n                    this.videos = [];\n                }\n\n                this.purchases = [];\n\n                console.log('Viewer data loaded for', currentPage, {\n                    videosLength: this.videos.length,\n                    purchasesLength: this.purchases.length\n                });\n            } else {\n                console.error('API service not available');\n                this.videos = [];\n                this.purchases = [];\n            }\n        } catch (error) {\n            console.error('Failed to load viewer data:', error);\n\n            // Handle API error with proper user feedback\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Loading viewer data');\n            }\n\n            // Set empty values on error\n            this.updateDashboardMetrics({\n                totalVideosCount: 0,\n                purchasedVideosCount: 0,\n                totalSpentAmount: '0.00',\n                favoritesCount: 0\n            });\n        } finally {\n            // Hide section loaders\n            const dashboardSection = document.querySelector('.dashboard-stats');\n            const videosSection = document.querySelector('.videos-section');\n            const purchasesSection = document.querySelector('.purchases-section');\n\n            if (window.commonUtils) {\n                if (dashboardSection) window.commonUtils.hideSectionLoader(dashboardSection);\n                if (videosSection) window.commonUtils.hideSectionLoader(videosSection);\n                if (purchasesSection) window.commonUtils.hideSectionLoader(purchasesSection);\n            }\n        }\n    }\n\n    updateDashboardMetrics(metrics) {\n        console.log('Updating dashboard metrics:', metrics);\n\n        // Update dashboard with user-specific metrics\n        const totalVideosCountEl = document.getElementById('totalVideosCount');\n        const purchasedVideosCountEl = document.getElementById('purchasedVideosCount');\n        const totalSpentAmountEl = document.getElementById('totalSpentAmount');\n        const totalCreatorsEl = document.getElementById('totalCreators');\n\n        // Legacy element IDs for backward compatibility\n        const totalPurchasesCountEl = document.getElementById('totalPurchasesCount');\n        const platformRevenueEl = document.getElementById('platformRevenue');\n\n        // Purchase page metrics\n        const totalPurchasesEl = document.getElementById('totalPurchases');\n        const totalSpentEl = document.getElementById('totalSpent');\n\n        // Dashboard metrics - map to correct HTML elements\n        if (totalVideosCountEl) totalVideosCountEl.textContent = metrics.totalVideosCount || 0;\n        if (purchasedVideosCountEl) purchasedVideosCountEl.textContent = metrics.purchasedVideosCount || 0;\n        if (totalSpentAmountEl) totalSpentAmountEl.textContent = '$' + (metrics.totalSpentAmount || '0.00');\n        if (totalCreatorsEl) totalCreatorsEl.textContent = metrics.totalCreators || 0;\n\n        // Legacy elements for backward compatibility\n        if (totalPurchasesCountEl) totalPurchasesCountEl.textContent = metrics.purchasedVideosCount || 0;\n        if (platformRevenueEl) platformRevenueEl.textContent = '$' + (metrics.totalSpentAmount || '0.00');\n\n        // Purchase page metrics (user-specific)\n        if (totalPurchasesEl) totalPurchasesEl.textContent = metrics.purchasedVideosCount || 0;\n        if (totalSpentEl) totalSpentEl.textContent = '$' + (metrics.totalSpentAmount || '0.00');\n    }\n\n    updatePurchaseMetrics() {\n        // Calculate metrics from purchases data\n        const totalPurchases = this.purchases.length;\n        const totalSpent = this.purchases.reduce((sum, purchase) => sum + parseFloat(purchase.amount || 0), 0);\n\n        // Calculate this month's purchases\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n        const thisMonthPurchases = this.purchases.filter(purchase => {\n            const purchaseDate = new Date(purchase.purchase_date || purchase.purchased_at);\n            return purchaseDate.getMonth() === currentMonth && purchaseDate.getFullYear() === currentYear;\n        }).length;\n\n        // Calculate average price\n        const avgPrice = totalPurchases > 0 ? totalSpent / totalPurchases : 0;\n\n        // Update purchase page elements\n        const totalPurchasesEl = document.getElementById('totalPurchases');\n        const totalSpentEl = document.getElementById('totalSpent');\n        const thisMonthEl = document.getElementById('thisMonth');\n        const avgPriceEl = document.getElementById('avgPrice');\n\n        if (totalPurchasesEl) totalPurchasesEl.textContent = totalPurchases;\n        if (totalSpentEl) totalSpentEl.textContent = '$' + totalSpent.toFixed(2);\n        if (thisMonthEl) thisMonthEl.textContent = thisMonthPurchases;\n        if (avgPriceEl) avgPriceEl.textContent = '$' + avgPrice.toFixed(2);\n    }\n\n    async loadRemainingData() {\n        try {\n            // Filter purchases for current viewer (if needed)\n            // this.purchases = this.purchases.filter(p => p.viewerId === this.currentViewerId);\n\n            // Enrich purchases with video data\n            this.purchases = this.purchases.map(purchase => {\n                const video = this.videos.find(v => v.id === purchase.videoId);\n                return {\n                    ...purchase,\n                    video: video ? {\n                        ...video,\n                        creator: video.creatorName || 'Unknown Creator',\n                        thumbnail: video.thumbnail || 'https://via.placeholder.com/400x225/666/fff?text=Video',\n                        rating: 4.5 // Default rating\n                    } : null\n                };\n            }).filter(p => p.video); // Remove purchases without video data\n\n            console.log('Viewer data loaded:', { videos: this.videos.length, purchases: this.purchases.length });\n        } catch (error) {\n            console.error('Error loading viewer data:', error);\n            this.videos = [];\n            this.purchases = [];\n        }\n    }\n\n    bindEvents() {\n        // Filter and search events\n        const categoryFilter = document.getElementById('categoryFilter');\n        const statusFilter = document.getElementById('statusFilter');\n        const searchInput = document.getElementById('searchInput');\n        const applyFilters = document.getElementById('applyFilters');\n\n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', () => this.applyFilters());\n        }\n        if (statusFilter) {\n            statusFilter.addEventListener('change', () => this.applyFilters());\n        }\n        if (searchInput) {\n            searchInput.addEventListener('input', () => this.applyFilters());\n        }\n        if (applyFilters) {\n            applyFilters.addEventListener('click', () => this.applyFilters());\n        }\n\n        // View mode toggle\n        const gridView = document.getElementById('gridView');\n        const listView = document.getElementById('listView');\n\n        if (gridView) {\n            gridView.addEventListener('click', () => this.switchViewMode('grid'));\n        }\n        if (listView) {\n            listView.addEventListener('click', () => this.switchViewMode('list'));\n        }\n\n        // Purchase modal events\n        const purchaseFromPreviewBtn = document.getElementById('purchaseFromPreview');\n        const confirmPurchaseBtn = document.getElementById('confirmPurchase');\n        if (purchaseFromPreviewBtn) {\n            purchaseFromPreviewBtn.addEventListener('click', this.handlePurchaseFromPreview.bind(this));\n        }\n        if (confirmPurchaseBtn) {\n            confirmPurchaseBtn.addEventListener('click', this.handleConfirmPurchase.bind(this));\n        }\n\n        // Profile form events\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', this.handleProfileUpdate.bind(this));\n        }\n\n        const passwordForm = document.getElementById('passwordForm');\n        if (passwordForm) {\n            passwordForm.addEventListener('submit', this.handlePasswordChange.bind(this));\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n\n        switch (currentPage) {\n            case 'dashboard.html':\n                this.loadDashboardPage();\n                break;\n            case 'purchases.html':\n                this.loadPurchasesPage();\n                break;\n            case 'profile.html':\n                this.loadProfilePage();\n                break;\n        }\n    }\n\n    async loadDashboardPage() {\n        console.log('Loading dashboard page...');\n\n        // Load user purchases for proper card display\n        const userSession = JSON.parse(localStorage.getItem('userSession') || sessionStorage.getItem('userSession') || '{}');\n        const userId = userSession.id || userSession.userId;\n\n        if (!userId) {\n            console.error('No user ID found for purchases');\n            this.purchases = [];\n            return;\n        }\n\n        try {\n            // Get user-specific purchases for card display\n            const purchasesResponse = await window.apiService.get(`/api/purchases?user_id=${userId}`);\n\n            if (purchasesResponse.success) {\n                this.purchases = Array.isArray(purchasesResponse.purchases) ? purchasesResponse.purchases :\n                                Array.isArray(purchasesResponse.data?.purchases) ? purchasesResponse.data.purchases :\n                                Array.isArray(purchasesResponse.data) ? purchasesResponse.data : [];\n\n                console.log('Dashboard user purchases loaded:', this.purchases);\n            }\n        } catch (error) {\n            console.error('Failed to load user purchases for dashboard:', error);\n            this.purchases = [];\n        }\n\n        this.renderAllVideos();\n        this.bindAllVideosEvents();\n    }\n\n    async loadPurchasesPage() {\n        console.log('Loading purchases page data...');\n\n        // Load user's purchase data from API\n        const userSession = JSON.parse(localStorage.getItem('userSession') || sessionStorage.getItem('userSession') || '{}');\n        const userId = userSession.id || userSession.userId;\n\n        if (!userId) {\n            console.error('No user ID found for purchases page');\n            this.purchases = [];\n            this.updatePurchaseStats();\n            this.renderPurchasedVideos();\n            return;\n        }\n\n        try {\n            // Get user-specific purchases ONLY on purchases page\n            const purchasesResponse = await window.apiService.get(`/api/purchases?user_id=${userId}`);\n            console.log('Purchases API response:', purchasesResponse);\n\n            if (purchasesResponse.success) {\n                // Update purchases with proper data structure\n                this.purchases = Array.isArray(purchasesResponse.purchases) ? purchasesResponse.purchases :\n                                Array.isArray(purchasesResponse.data?.purchases) ? purchasesResponse.data.purchases :\n                                Array.isArray(purchasesResponse.data) ? purchasesResponse.data : [];\n\n                console.log('User purchases loaded:', this.purchases);\n\n                // Enrich purchases with video data\n                this.purchases = this.purchases.map(purchase => {\n                    const video = this.videos.find(v => v.id === purchase.video_id);\n                    return {\n                        ...purchase,\n                        video: video ? {\n                            ...video,\n                            creator: video.creatorName || video.creator_name || purchase.creator_name || 'Unknown Creator',\n                            thumbnail: video.thumbnail || purchase.thumbnail || 'https://via.placeholder.com/400x225/666/fff?text=Video'\n                        } : null\n                    };\n                }).filter(p => p.video); // Remove purchases without video data\n            }\n\n            // Update purchase stats in UI\n            this.updatePurchaseStats();\n            this.renderPurchasedVideos();\n\n        } catch (error) {\n            console.error('Failed to load purchases:', error);\n            this.purchases = [];\n            this.updatePurchaseStats();\n            this.renderPurchasedVideos();\n        }\n    }\n\n    updatePurchaseStats() {\n        const totalPurchasesEl = document.getElementById('totalPurchases');\n        const totalSpentEl = document.getElementById('totalSpent');\n        const thisMonthEl = document.getElementById('thisMonth');\n\n        if (totalPurchasesEl) {\n            totalPurchasesEl.textContent = this.purchases.length;\n        }\n\n        if (totalSpentEl) {\n            const totalSpent = this.purchases.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\n            totalSpentEl.textContent = '$' + totalSpent.toFixed(2);\n        }\n\n        if (thisMonthEl) {\n            const currentMonth = new Date().getMonth();\n            const currentYear = new Date().getFullYear();\n            const thisMonthPurchases = this.purchases.filter(p => {\n                const purchaseDate = new Date(p.purchase_date || p.created_at);\n                return purchaseDate.getMonth() === currentMonth && purchaseDate.getFullYear() === currentYear;\n            });\n            thisMonthEl.textContent = thisMonthPurchases.length;\n        }\n    }\n\n    loadProfilePage() {\n        this.loadProfileData();\n    }\n\n    renderAllVideos() {\n        const container = document.getElementById('allVideos');\n        if (!container) return;\n\n        this.filteredVideos = this.videos;\n        this.displayVideos();\n    }\n\n    displayVideos() {\n        const container = document.getElementById('allVideos');\n        const loader = document.getElementById('videosLoader');\n\n        if (!container) return;\n\n        // Hide loader and show videos\n        if (loader) loader.style.display = 'none';\n\n        container.innerHTML = '';\n        container.className = 'row'; // Ensure it's always a row for grid\n\n        if (this.filteredVideos.length === 0) {\n            container.innerHTML = `\n                <div class=\"col-12 text-center py-5\">\n                    <i class=\"fas fa-video fa-3x text-muted mb-3\"></i>\n                    <h5 class=\"text-muted\">No videos found</h5>\n                    <p class=\"text-muted\">Try adjusting your search filters</p>\n                </div>\n            `;\n            this.updatePagination();\n            return;\n        }\n\n        // Calculate pagination\n        const startIndex = (this.currentPage - 1) * this.videosPerPage;\n        const endIndex = startIndex + this.videosPerPage;\n        const videosToShow = this.filteredVideos.slice(startIndex, endIndex);\n\n        videosToShow.forEach(video => {\n            const col = document.createElement('div');\n            col.className = 'col-lg-4 col-md-6 mb-4';\n            col.innerHTML = this.createVideoCard(video);\n            container.appendChild(col);\n        });\n\n        this.updatePagination();\n    }\n\n    bindAllVideosEvents() {\n        // Search functionality\n        const searchInput = document.getElementById('videoSearch');\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                this.filterVideos();\n            });\n        }\n\n        // Category filter\n        const categoryFilter = document.getElementById('categoryFilter');\n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', () => {\n                this.filterVideos();\n            });\n        }\n\n        // Sort functionality\n        const sortBy = document.getElementById('sortBy');\n        if (sortBy) {\n            sortBy.addEventListener('change', () => {\n                this.sortVideos();\n            });\n        }\n\n        // View mode toggle\n        const gridView = document.getElementById('gridView');\n        const listView = document.getElementById('listView');\n\n        if (gridView) {\n            gridView.addEventListener('change', () => {\n                if (gridView.checked) {\n                    this.switchViewMode('grid');\n                }\n            });\n        }\n\n        if (listView) {\n            listView.addEventListener('change', () => {\n                if (listView.checked) {\n                    this.switchViewMode('list');\n                }\n            });\n        }\n    }\n\n    filterVideos() {\n        const searchTerm = document.getElementById('videoSearch')?.value.toLowerCase() || '';\n        const selectedCategory = document.getElementById('categoryFilter')?.value || '';\n\n        this.filteredVideos = this.videos.filter(video => {\n            const matchesSearch = video.title.toLowerCase().includes(searchTerm) ||\n                                (video.description && video.description.toLowerCase().includes(searchTerm)) ||\n                                (video.creatorName && video.creatorName.toLowerCase().includes(searchTerm)) ||\n                                (video.creator_name && video.creator_name.toLowerCase().includes(searchTerm)) ||\n                                (video.youtube_channel_title && video.youtube_channel_title.toLowerCase().includes(searchTerm));\n\n            const matchesCategory = !selectedCategory || video.category === selectedCategory;\n\n            return matchesSearch && matchesCategory;\n        });\n\n        this.currentPage = 1; // Reset to first page when filtering\n        this.sortVideos();\n    }\n\n    sortVideos() {\n        const sortBy = document.getElementById('sortBy')?.value || 'newest';\n\n        switch (sortBy) {\n            case 'newest':\n                this.filteredVideos.sort((a, b) => new Date(b.uploadDate || b.created_at || 0) - new Date(a.uploadDate || a.created_at || 0));\n                break;\n            case 'oldest':\n                this.filteredVideos.sort((a, b) => new Date(a.uploadDate || a.created_at || 0) - new Date(b.uploadDate || b.created_at || 0));\n                break;\n            case 'price-low':\n                this.filteredVideos.sort((a, b) => (parseFloat(a.price) || 0) - (parseFloat(b.price) || 0));\n                break;\n            case 'price-high':\n                this.filteredVideos.sort((a, b) => (parseFloat(b.price) || 0) - (parseFloat(a.price) || 0));\n                break;\n            case 'rating':\n                this.filteredVideos.sort((a, b) => (parseFloat(b.rating) || 4.5) - (parseFloat(a.rating) || 4.5));\n                break;\n        }\n\n        this.displayVideos();\n    }\n\n    switchViewMode(mode) {\n        const container = document.getElementById('allVideos');\n        const gridBtn = document.getElementById('gridView');\n        const listBtn = document.getElementById('listView');\n\n        if (!container) return;\n\n        // Update button states\n        if (gridBtn && listBtn) {\n            if (mode === 'grid') {\n                gridBtn.classList.remove('btn-outline-primary');\n                gridBtn.classList.add('btn-primary');\n                listBtn.classList.remove('btn-primary');\n                listBtn.classList.add('btn-outline-primary');\n            } else {\n                listBtn.classList.remove('btn-outline-primary');\n                listBtn.classList.add('btn-primary');\n                gridBtn.classList.remove('btn-primary');\n                gridBtn.classList.add('btn-outline-primary');\n            }\n        }\n\n        if (mode === 'list') {\n            // Create table view\n            container.className = 'col-12';\n            container.innerHTML = `\n                <div class=\"table-responsive\">\n                    <table class=\"table table-hover\">\n                        <thead>\n                            <tr>\n                                <th>Video</th>\n                                <th>Creator</th>\n                                <th>Price</th>\n                                <th>Category</th>\n                                <th>Views</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"videosTableBody\">\n                        </tbody>\n                    </table>\n                </div>\n            `;\n\n            const tbody = document.getElementById('videosTableBody');\n            this.filteredVideos.forEach(video => {\n                const isPurchased = this.purchases.some(p => p.video_id == video.id);\n                const price = parseFloat(video.price || 0);\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>\n                        <div class=\"d-flex align-items-center\">\n                            <div class=\"position-relative me-3\" style=\"width: 80px; height: 45px; background-color: #e9ecef;\">\n                                ${video.thumbnail ? `\n                                    <img src=\"${video.thumbnail}\" width=\"80\" height=\"45\" class=\"rounded\" alt=\"${video.title}\" style=\"object-fit: cover;\">\n                                ` : `\n                                    <div class=\"d-flex align-items-center justify-content-center w-100 h-100\">\n                                        <i class=\"fas fa-play text-muted\"></i>\n                                    </div>\n                                `}\n                            </div>\n                            <div>\n                                <strong>${video.title}</strong><br>\n                                <small class=\"text-muted\">${(video.description || '').substring(0, 60)}...</small>\n                            </div>\n                        </div>\n                    </td>\n                    <td>${video.youtube_channel_title || video.creatorName || video.creator_name || 'Unknown Creator'}</td>\n                    <td>${isPurchased ? '<span class=\"text-success fw-bold\">Purchased</span>' : `<span class=\"text-primary fw-bold\">$${price.toFixed(2)}</span>`}</td>\n                    <td><span class=\"badge bg-secondary\">${video.category || 'General'}</span></td>\n                    <td>${video.views || 0} views</td>\n                    <td>\n                        <button class=\"btn btn-sm ${isPurchased ? 'btn-success' : 'btn-primary'}\"\n                                onclick=\"${isPurchased ? `watchVideo('${video.youtube_id}', '${video.title}')` : `viewerManager.showPurchaseModal(${video.id})`}\">\n                            <i class=\"fas fa-${isPurchased ? 'play' : 'shopping-cart'} me-1\"></i>\n                            ${isPurchased ? 'Watch' : 'Purchase'}\n                        </button>\n                    </td>\n                `;\n                tbody.appendChild(row);\n            });\n        } else {\n            // Grid view is the default\n            container.className = 'row';\n            this.displayVideos();\n        }\n    }\n\n    updatePagination() {\n        const paginationContainer = document.getElementById('paginationContainer');\n        const paginationList = document.getElementById('paginationList');\n\n        if (!paginationContainer || !paginationList) return;\n\n        const totalPages = Math.ceil(this.filteredVideos.length / this.videosPerPage);\n\n        if (totalPages <= 1) {\n            paginationContainer.classList.add('d-none');\n            return;\n        }\n\n        paginationContainer.classList.remove('d-none');\n\n        let paginationHTML = '';\n\n        // Previous button\n        paginationHTML += `\n            <li class=\"page-item ${this.currentPage === 1 ? 'disabled' : ''}\">\n                <a class=\"page-link\" href=\"#\" data-page=\"${this.currentPage - 1}\">Previous</a>\n            </li>\n        `;\n\n        // Page numbers\n        const startPage = Math.max(1, this.currentPage - 2);\n        const endPage = Math.min(totalPages, this.currentPage + 2);\n\n        if (startPage > 1) {\n            paginationHTML += `<li class=\"page-item\"><a class=\"page-link\" href=\"#\" data-page=\"1\">1</a></li>`;\n            if (startPage > 2) {\n                paginationHTML += `<li class=\"page-item disabled\"><span class=\"page-link\">...</span></li>`;\n            }\n        }\n\n        for (let i = startPage; i <= endPage; i++) {\n            paginationHTML += `\n                <li class=\"page-item ${i === this.currentPage ? 'active' : ''}\">\n                    <a class=\"page-link\" href=\"#\" data-page=\"${i}\">${i}</a>\n                </li>\n            `;\n        }\n\n        if (endPage < totalPages) {\n            if (endPage < totalPages - 1) {\n                paginationHTML += `<li class=\"page-item disabled\"><span class=\"page-link\">...</span></li>`;\n            }\n            paginationHTML += `<li class=\"page-item\"><a class=\"page-link\" href=\"#\" data-page=\"${totalPages}\">${totalPages}</a></li>`;\n        }\n\n        // Next button\n        paginationHTML += `\n            <li class=\"page-item ${this.currentPage === totalPages ? 'disabled' : ''}\">\n                <a class=\"page-link\" href=\"#\" data-page=\"${this.currentPage + 1}\">Next</a>\n            </li>\n        `;\n\n        paginationList.innerHTML = paginationHTML;\n\n        // Remove existing event listeners to prevent duplicates\n        const existingHandler = paginationList._paginationHandler;\n        if (existingHandler) {\n            paginationList.removeEventListener('click', existingHandler);\n        }\n\n        // Add click handlers for pagination\n        const paginationHandler = (e) => {\n            e.preventDefault();\n            if (e.target.classList.contains('page-link') && !e.target.parentElement.classList.contains('disabled')) {\n                const page = parseInt(e.target.dataset.page);\n                if (page && page !== this.currentPage && page >= 1 && page <= totalPages) {\n                    this.currentPage = page;\n                    this.displayVideos();\n                    // Scroll to top of videos section\n                    document.getElementById('allVideos')?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                }\n            }\n        };\n\n        paginationList._paginationHandler = paginationHandler;\n        paginationList.addEventListener('click', paginationHandler);\n    }\n\n    createVideoCard(video) {\n        const isPurchased = this.purchases.some(p => p.video_id == video.id);\n        const price = parseFloat(video.price || 0);\n        const youtubeId = video.youtube_id || '';\n\n        return `\n            <div class=\"card h-100\">\n                <div class=\"position-relative\" style=\"height: 180px; background-color: #e9ecef; cursor: pointer;\"\n                     onclick=\"${isPurchased ? `watchVideo('${youtubeId}', '${video.title}')` : `viewerManager.showPurchaseModal(${video.id})`}\">\n                    ${youtubeId ? `\n                        <img src=\"https://img.youtube.com/vi/${youtubeId}/maxresdefault.jpg\"\n                             class=\"card-img-top w-100 h-100\" alt=\"${video.title}\" style=\"object-fit: cover;\"\n                             onerror=\"this.src='https://img.youtube.com/vi/${youtubeId}/hqdefault.jpg'\">\n                    ` : video.thumbnail ? `\n                        <img src=\"${video.thumbnail}\"\n                             class=\"card-img-top w-100 h-100\" alt=\"${video.title}\" style=\"object-fit: cover;\">\n                    ` : `\n                        <div class=\"d-flex align-items-center justify-content-center h-100\">\n                            <i class=\"fas fa-play fa-3x text-muted\"></i>\n                        </div>\n                    `}\n\n                    <!-- Play Button Overlay -->\n                    <div class=\"position-absolute top-50 start-50 translate-middle\">\n                        <div class=\"d-flex align-items-center justify-content-center\"\n                             style=\"width: 60px; height: 60px; background: rgba(0,0,0,0.7); border-radius: 50%;\">\n                            <i class=\"fas fa-play text-white\" style=\"font-size: 24px; margin-left: 3px;\"></i>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"card-body\">\n                    <h6 class=\"card-title mb-2\">${video.title}</h6>\n                    <p class=\"card-text text-muted small mb-3\" style=\"display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;\">\n                        ${video.description || 'No description available'}\n                    </p>\n\n                    <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                        ${isPurchased ? `\n                            <span class=\"text-success fw-bold\">Purchased</span>\n                        ` : `\n                            <span class=\"text-primary fw-bold\">${price > 0 ? `$${price.toFixed(2)}` : 'Free'}</span>\n                        `}\n                        <small class=\"text-muted\">by ${video.youtube_channel_title || video.creatorName || video.creator_name || 'Unknown Creator'}</small>\n                    </div>\n\n                    <div class=\"d-flex justify-content-between align-items-center\">\n                        <small class=\"text-muted\">${video.views || 0} views</small>\n                        ${isPurchased ? `\n                            <div class=\"btn-group\">\n                                <button class=\"btn btn-success btn-sm\" onclick=\"watchVideo('${youtubeId}', '${video.title}')\" title=\"Watch in modal\">\n                                    <i class=\"fas fa-play me-1\"></i>Watch\n                                </button>\n                                <button class=\"btn btn-outline-success btn-sm\" onclick=\"viewerManager.openVideoInNewTab(${video.id})\" title=\"Open in new tab\">\n                                    <i class=\"fas fa-external-link-alt\"></i>\n                                </button>\n                            </div>\n                        ` : `\n                            <button class=\"btn btn-primary btn-sm\" onclick=\"viewerManager.showPurchaseModal(${video.id})\">\n                                <i class=\"fas fa-shopping-cart me-1\"></i>Purchase\n                            </button>\n                        `}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderPurchaseStats() {\n        const totalVideosCount = document.getElementById('totalVideosCount');\n        const purchasedVideosCount = document.getElementById('purchasedVideosCount');\n        const totalSpentAmount = document.getElementById('totalSpentAmount');\n        const favoritesCount = document.getElementById('favoritesCount');\n\n        // Total videos available in platform\n        if (totalVideosCount) totalVideosCount.textContent = this.videos.length;\n\n        // Purchased videos count\n        if (purchasedVideosCount) purchasedVideosCount.textContent = this.purchases.length;\n\n        // Total spent by current viewer\n        if (totalSpentAmount) {\n            const total = this.purchases.reduce((sum, p) => sum + p.price, 0);\n            totalSpentAmount.textContent = '$' + total.toFixed(2);\n        }\n\n        // Favorites count\n        if (favoritesCount) {\n            favoritesCount.textContent = this.favorites.length;\n        }\n    }\n\n    renderPurchasedVideos() {\n        const gridContainer = document.getElementById('purchasesGrid');\n\n        if (!gridContainer) {\n            console.warn('Purchase grid container not found');\n            return;\n        }\n\n        console.log('Rendering purchases:', this.purchases);\n\n        if (this.purchases.length === 0) {\n            gridContainer.innerHTML = `\n                <div class=\"col-12 text-center py-5\">\n                    <i class=\"fas fa-video fa-3x text-muted mb-3\"></i>\n                    <h5 class=\"text-muted\">No purchased videos yet</h5>\n                    <p class=\"text-muted\">Browse and purchase videos to watch them here</p>\n                    <a href=\"dashboard.html\" class=\"btn btn-primary\">Browse Videos</a>\n                </div>\n            `;\n            return;\n        }\n\n        gridContainer.innerHTML = '';\n        this.purchases.forEach(purchase => {\n            if (purchase.video) {\n                const col = document.createElement('div');\n                col.className = 'col-lg-4 col-md-6 mb-4';\n                col.innerHTML = this.createPurchasedVideoCard(purchase);\n                gridContainer.appendChild(col);\n            }\n        });\n\n        // Grid view only - no list view needed for purchases page\n    }\n\n    createPurchasedVideoCard(purchase) {\n        const purchaseDate = new Date(purchase.purchase_date || purchase.created_at).toLocaleDateString();\n        const videoId = purchase.video_id || purchase.video.id;\n        const amount = parseFloat(purchase.amount || 0);\n\n        return `\n            <div class=\"card h-100 shadow-sm border-0\">\n                <div class=\"position-relative\" style=\"cursor: pointer;\" onclick=\"viewerManager.playVideo(${videoId})\">\n                    <img src=\"${purchase.video.thumbnail}\" class=\"card-img-top\" alt=\"${purchase.video.title}\" style=\"height: 200px; object-fit: cover;\">\n\n                    <!-- Play Button Overlay -->\n                    <div class=\"position-absolute top-50 start-50 translate-middle\">\n                        <div class=\"play-button-overlay d-flex align-items-center justify-content-center\"\n                             style=\"width: 60px; height: 60px; background: rgba(0,0,0,0.7); border-radius: 50%; transition: all 0.3s ease;\">\n                            <i class=\"fas fa-play text-white\" style=\"font-size: 24px; margin-left: 3px;\"></i>\n                        </div>\n                    </div>\n\n                    <div class=\"position-absolute top-0 end-0 m-2\">\n                        <span class=\"badge bg-success\">Purchased</span>\n                    </div>\n                    <div class=\"position-absolute bottom-0 start-0 end-0 p-3\" style=\"background: linear-gradient(transparent, rgba(0,0,0,0.7));\">\n                        <div class=\"d-flex justify-content-between align-items-end\">\n                            <span class=\"badge bg-dark\">${purchase.video.duration || '0:00'}</span>\n                            <div class=\"btn-group\">\n                                <button class=\"btn btn-success btn-sm\" onclick=\"event.stopPropagation(); viewerManager.playVideo(${videoId})\" title=\"Watch in modal\">\n                                    <i class=\"fas fa-play me-1\"></i>Watch\n                                </button>\n                                <button class=\"btn btn-outline-light btn-sm\" onclick=\"event.stopPropagation(); viewerManager.openVideoInNewTab(${videoId})\" title=\"Open in new tab\">\n                                    <i class=\"fas fa-external-link-alt\"></i>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <h6 class=\"card-title mb-2\">${purchase.video.title || 'Untitled Video'}</h6>\n                    <p class=\"card-text text-muted small mb-2\">${purchase.video.description || purchase.description || 'No description available'}</p>\n                    <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                        <span class=\"text-success fw-bold\">$${amount.toFixed(2)}</span>\n                        <small class=\"text-muted\">by ${purchase.video.creator || purchase.creator_name || 'Unknown Creator'}</small>\n                    </div>\n                    <div class=\"d-flex justify-content-between align-items-center\">\n                        <small class=\"text-muted\">Purchased: ${purchaseDate}</small>\n                        <div class=\"btn-group\">\n                            <button class=\"btn btn-success btn-sm\" onclick=\"viewerManager.playVideo(${videoId})\" title=\"Watch in modal\">\n                                <i class=\"fas fa-play me-1\"></i>Watch\n                            </button>\n                            <button class=\"btn btn-outline-success btn-sm\" onclick=\"viewerManager.openVideoInNewTab(${videoId})\" title=\"Open in new tab\">\n                                <i class=\"fas fa-external-link-alt\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    applyFilters() {\n        const category = document.getElementById('categoryFilter')?.value || '';\n        const status = document.getElementById('statusFilter')?.value || '';\n        const search = document.getElementById('searchInput')?.value.toLowerCase() || '';\n\n        let filtered = this.purchases;\n\n        if (category) {\n            filtered = filtered.filter(p => p.video.category === category);\n        }\n\n        if (status) {\n            if (status === 'watched') {\n                filtered = filtered.filter(p => p.watchProgress > 80);\n            } else if (status === 'unwatched') {\n                filtered = filtered.filter(p => p.watchProgress < 20);\n            } else if (status === 'favorite') {\n                filtered = filtered.filter(p => this.favorites.includes(p.videoId));\n            }\n        }\n\n        if (search) {\n            filtered = filtered.filter(p =>\n                p.video.title.toLowerCase().includes(search) ||\n                p.video.creatorName.toLowerCase().includes(search)\n            );\n        }\n\n        // Update display with filtered results\n        this.renderFilteredPurchases(filtered);\n    }\n\n    renderFilteredPurchases(purchases) {\n        const gridContainer = document.getElementById('videosGrid');\n        if (gridContainer) {\n            gridContainer.innerHTML = '';\n            purchases.forEach(purchase => {\n                const col = document.createElement('div');\n                col.className = 'col-lg-4 col-md-6 mb-4';\n                col.innerHTML = this.createPurchasedVideoCard(purchase);\n                gridContainer.appendChild(col);\n            });\n        }\n    }\n\n    // Utility methods\n    parseDuration(duration) {\n        const parts = duration.split(':');\n        return parseInt(parts[0]) * 60 + parseInt(parts[1]);\n    }\n\n    initializePlayer() {\n        // Initialize YouTube API if not already loaded\n        if (!window.YT) {\n            const tag = document.createElement('script');\n            tag.src = 'https://www.youtube.com/iframe_api';\n            const firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n            window.onYouTubeIframeAPIReady = () => {\n                console.log('YouTube API ready');\n            };\n        }\n    }\n\n    async playVideo(videoId) {\n        try {\n            // Find the video\n            const video = this.videos.find(v => v.id == videoId);\n            if (!video) {\n                alert('Video not found');\n                return;\n            }\n\n            // Check if user has purchased this video\n            const isPurchased = this.purchases.some(p => p.video_id == videoId);\n            if (!isPurchased) {\n                alert('You need to purchase this video first');\n                this.showPurchaseModal(videoId);\n                return;\n            }\n\n            // Get YouTube video ID - prioritize youtube_id field over thumbnail extraction\n            let youtubeVideoId = '';\n\n            // First try to get YouTube ID from the video's youtube_id field\n            if (video.youtube_id) {\n                youtubeVideoId = video.youtube_id;\n            } else if (video.thumbnail) {\n                // Fallback: Extract from thumbnail URL\n                const patterns = [\n                    /\\/vi\\/([^\\/]+)\\//,  // Standard thumbnail format\n                    /watch\\?v=([^&]+)/,  // Watch URL format\n                    /youtu\\.be\\/([^?]+)/, // Short URL format\n                    /embed\\/([^?]+)/     // Embed URL format\n                ];\n\n                for (const pattern of patterns) {\n                    const match = video.thumbnail.match(pattern);\n                    if (match) {\n                        youtubeVideoId = match[1];\n                        break;\n                    }\n                }\n            }\n\n            if (!youtubeVideoId) {\n                alert('Video not available for playback - missing YouTube ID');\n                return;\n            }\n\n            // Create video player modal\n            this.showVideoPlayer(youtubeVideoId, video.title);\n\n        } catch (error) {\n            console.error('Error playing video:', error);\n            alert('Error loading video');\n        }\n    }\n\n    showVideoPlayer(youtubeVideoId, title) {\n        // Use the static modal instead of creating a dynamic one (like purchases page)\n        const modal = document.getElementById('videoPlayerModal');\n        const iframe = document.getElementById('youtubePlayer');\n        const titleElement = document.getElementById('videoTitle');\n        const loading = document.getElementById('playerLoading');\n\n        if (!modal || !iframe || !titleElement) {\n            alert('Video player modal not found');\n            return;\n        }\n\n        // Set title\n        titleElement.textContent = title;\n\n        // Show loading\n        if (loading) loading.style.display = 'block';\n\n        // Set iframe source\n        iframe.src = `https://www.youtube.com/embed/${youtubeVideoId}?autoplay=1&controls=1&modestbranding=1&rel=0`;\n\n        // Show modal\n        const bsModal = new bootstrap.Modal(modal);\n        bsModal.show();\n\n        // Hide loading after iframe loads\n        iframe.onload = function() {\n            if (loading) loading.style.display = 'none';\n        };\n\n        // Clean up when modal closes\n        modal.addEventListener('hidden.bs.modal', function() {\n            iframe.src = '';\n            if (loading) loading.style.display = 'block';\n        });\n    }\n\n    stopVideo() {\n        if (this.ytPlayer && this.ytPlayer.destroy) {\n            this.ytPlayer.destroy();\n            this.ytPlayer = null;\n        }\n    }\n\n    toggleFavorite(videoId) {\n        const index = this.favorites.indexOf(videoId);\n        if (index > -1) {\n            this.favorites.splice(index, 1);\n            console.log(`Removed video ${videoId} from favorites`);\n        } else {\n            this.favorites.push(videoId);\n            console.log(`Added video ${videoId} to favorites`);\n        }\n\n        // Re-render the current view to update favorite icons\n        if (window.location.href.includes('purchases.html')) {\n            this.renderPurchasedVideos();\n        } else {\n            this.displayVideos();\n        }\n    }\n\n    showViewerConfirmModal(action, videoId, additionalData = {}) {\n        return new Promise((resolve) => {\n            const video = this.videos.find(v => v.id == videoId);\n            if (!video) {\n                resolve(false);\n                return;\n            }\n\n            const actionTexts = {\n                purchase: {\n                    title: 'Purchase Video',\n                    message: `purchase \"${video.title}\" for $${parseFloat(video.price || 0).toFixed(2)}`,\n                    class: 'primary',\n                    description: 'You will have lifetime access to this video after purchase.',\n                    icon: 'fa-shopping-cart'\n                },\n                removeFromFavorites: {\n                    title: 'Remove from Favorites',\n                    message: 'remove this video from your favorites',\n                    class: 'warning',\n                    description: 'You can always add it back to favorites later.',\n                    icon: 'fa-heart-broken'\n                },\n                reportVideo: {\n                    title: 'Report Video',\n                    message: 'report this video for inappropriate content',\n                    class: 'danger',\n                    description: 'This will notify our moderation team for review.',\n                    icon: 'fa-flag'\n                }\n            };\n\n            const actionData = actionTexts[action];\n            if (!actionData) {\n                resolve(false);\n                return;\n            }\n\n            // Create confirmation modal\n            let modal = document.getElementById('viewerActionConfirmModal');\n            if (!modal) {\n                modal = document.createElement('div');\n                modal.className = 'modal fade';\n                modal.id = 'viewerActionConfirmModal';\n                modal.setAttribute('tabindex', '-1');\n                modal.innerHTML = `\n                    <div class=\"modal-dialog modal-dialog-centered\">\n                        <div class=\"modal-content border-0 shadow-lg\">\n                            <div class=\"modal-header bg-gradient text-white border-0\">\n                                <h5 class=\"modal-title fw-bold\" id=\"viewerActionModalTitle\">\n                                    <i class=\"fas fa-question-circle me-2\"></i>Confirm Action\n                                </h5>\n                                <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\"></button>\n                            </div>\n                            <div class=\"modal-body p-4\">\n                                <div class=\"alert border-0 mb-4\" id=\"viewerActionDescription\">\n                                    <div class=\"d-flex align-items-center\">\n                                        <i class=\"fas fa-info-circle fa-2x me-3\" id=\"viewerActionIcon\"></i>\n                                        <div>\n                                            <p class=\"mb-1 fw-semibold\" id=\"viewerActionModalMessage\">Are you sure?</p>\n                                            <small class=\"text-muted\" id=\"viewerActionDescriptionText\">This action requires confirmation.</small>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div class=\"card border-0 bg-light\">\n                                    <div class=\"card-body p-3\">\n                                        <h6 class=\"fw-bold text-dark mb-2\">\n                                            <i class=\"fas fa-video me-2 text-primary\"></i>Video Details\n                                        </h6>\n                                        <div class=\"row align-items-center\">\n                                            <div class=\"col-auto\">\n                                                <img id=\"viewerActionVideoThumbnail\" src=\"\" alt=\"Video thumbnail\"\n                                                     class=\"rounded shadow-sm\" style=\"width: 60px; height: 34px; object-fit: cover;\">\n                                            </div>\n                                            <div class=\"col\">\n                                                <div class=\"fw-semibold text-dark\" id=\"viewerActionModalVideoTitle\">Video Title</div>\n                                                <small class=\"text-muted\" id=\"viewerActionModalVideoCreator\">Creator</small>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"modal-footer border-0 pt-0\">\n                                <button type=\"button\" class=\"btn btn-outline-secondary px-4\" data-bs-dismiss=\"modal\">\n                                    <i class=\"fas fa-times me-2\"></i>Cancel\n                                </button>\n                                <button type=\"button\" class=\"btn px-4\" id=\"confirmViewerActionBtn\">\n                                    <i class=\"fas fa-check me-2\"></i>Confirm\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                `;\n                document.body.appendChild(modal);\n            }\n\n            // Update modal content\n            document.getElementById('viewerActionModalTitle').innerHTML = `<i class=\"fas ${actionData.icon} me-2\"></i>${actionData.title}`;\n            document.getElementById('viewerActionModalMessage').textContent = `Are you sure you want to ${actionData.message}?`;\n            document.getElementById('viewerActionDescriptionText').textContent = actionData.description;\n            document.getElementById('viewerActionModalVideoTitle').textContent = video.title;\n            document.getElementById('viewerActionModalVideoCreator').textContent = `by ${video.creatorName || video.creator_name || video.youtube_channel_title || 'Unknown Creator'}`;\n\n            // Set thumbnail\n            const thumbnailEl = document.getElementById('viewerActionVideoThumbnail');\n            if (video.youtube_id) {\n                thumbnailEl.src = `https://img.youtube.com/vi/${video.youtube_id}/hqdefault.jpg`;\n            } else if (video.thumbnail) {\n                thumbnailEl.src = video.thumbnail;\n            } else {\n                thumbnailEl.src = 'https://via.placeholder.com/60x34/6c757d/ffffff?text=Video';\n            }\n\n            const confirmBtn = document.getElementById('confirmViewerActionBtn');\n            const descriptionAlert = document.getElementById('viewerActionDescription');\n            const iconEl = document.getElementById('viewerActionIcon');\n            const headerEl = modal.querySelector('.modal-header');\n\n            confirmBtn.className = `btn btn-${actionData.class} px-4`;\n            confirmBtn.innerHTML = `<i class=\"fas ${actionData.icon} me-2\"></i>${actionData.title}`;\n            descriptionAlert.className = `alert alert-${actionData.class === 'danger' ? 'danger' : 'info'} border-0 mb-4`;\n            iconEl.className = `fas ${actionData.icon} fa-2x me-3 text-${actionData.class}`;\n            headerEl.className = `modal-header text-white border-0 bg-${actionData.class}`;\n\n            // Set up confirm button action\n            confirmBtn.onclick = function() {\n                const bootstrapModal = bootstrap.Modal.getInstance(modal);\n                bootstrapModal.hide();\n                resolve(true);\n            };\n\n            // Set up cancel action\n            modal.addEventListener('hidden.bs.modal', function handler() {\n                modal.removeEventListener('hidden.bs.modal', handler);\n                resolve(false);\n            });\n\n            const bootstrapModal = new bootstrap.Modal(modal);\n            bootstrapModal.show();\n        });\n    }\n\n    openVideoInNewTab(videoId) {\n        const video = this.videos.find(v => v.id == videoId) ||\n                     this.purchases.find(p => p.video_id == videoId || p.video.id == videoId)?.video;\n\n        if (!video) {\n            this.showNotification('Video not found', 'error');\n            return;\n        }\n\n        // Get YouTube ID\n        let youtubeVideoId = video.youtube_id;\n\n        if (!youtubeVideoId && video.thumbnail) {\n            // Try to extract from thumbnail URL as fallback\n            const patterns = [\n                /\\/vi\\/([^/]+)\\//, // YouTube thumbnail URL format\n                /youtu\\.be\\/([^?]+)/, // Short URL format\n                /embed\\/([^?]+)/ // Embed URL format\n            ];\n\n            for (const pattern of patterns) {\n                const match = video.thumbnail.match(pattern);\n                if (match) {\n                    youtubeVideoId = match[1];\n                    break;\n                }\n            }\n        }\n\n        if (!youtubeVideoId) {\n            this.showNotification('YouTube video ID not available', 'error');\n            return;\n        }\n\n        // Open YouTube video in new tab\n        const youtubeUrl = `https://www.youtube.com/watch?v=${youtubeVideoId}`;\n        window.open(youtubeUrl, '_blank', 'noopener,noreferrer');\n\n        this.showNotification(`Opening \"${video.title}\" in new tab`, 'info');\n    }\n\n    shareVideo(videoId) {\n        const video = this.videos.find(v => v.id == videoId);\n        if (video) {\n            // Simple share functionality\n            if (navigator.share) {\n                navigator.share({\n                    title: video.title,\n                    text: `Check out this video: ${video.title}`,\n                    url: window.location.href\n                });\n            } else {\n                // Fallback to copying to clipboard\n                const shareText = `Check out this video: ${video.title} - ${window.location.href}`;\n                navigator.clipboard.writeText(shareText).then(() => {\n                    alert('Video link copied to clipboard!');\n                }).catch(() => {\n                    alert('Share link: ' + shareText);\n                });\n            }\n        }\n    }\n\n    // Event handlers\n    showVideoPreview(videoId) {\n        console.log('Showing preview for video:', videoId);\n    }\n\n    async purchaseVideo(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (!video) {\n            this.showNotification('Video not found', 'error');\n            return;\n        }\n\n        // Check if already purchased\n        const userSession = JSON.parse(localStorage.getItem('userSession') || '{}');\n        const userId = userSession.userId || 8;\n        const alreadyPurchased = this.purchases.some(p => p.video_id === videoId);\n\n        if (alreadyPurchased) {\n            this.showNotification('You have already purchased this video', 'info');\n            return;\n        }\n\n        // Show purchase modal\n        this.showPurchaseModal(videoId);\n    }\n\n    showPurchaseModal(videoId) {\n        const video = this.videos.find(v => v.id == videoId);\n        if (!video) {\n            console.error('Video not found for ID:', videoId);\n            this.showNotification('Video not found', 'error');\n            return;\n        }\n\n        // Get current user ID\n        const userSession = JSON.parse(localStorage.getItem('userSession') || sessionStorage.getItem('userSession') || '{}');\n        const userId = userSession.id || userSession.userId || 8;\n\n        // Check if already purchased\n        const alreadyPurchased = this.purchases.some(p => p.video_id == videoId);\n        if (alreadyPurchased) {\n            this.showNotification('You have already purchased this video', 'info');\n            return;\n        }\n\n        // Remove any existing modal\n        const existingModal = document.getElementById('purchaseModal');\n        if (existingModal) {\n            existingModal.remove();\n        }\n\n        // Create new modal\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.id = 'purchaseModal';\n        modal.setAttribute('tabindex', '-1');\n        modal.setAttribute('aria-labelledby', 'purchaseModalLabel');\n        modal.setAttribute('aria-hidden', 'true');\n\n        const price = parseFloat(video.price || 0);\n\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-lg\">\n                <div class=\"modal-content shadow-lg border-0\">\n                    <div class=\"modal-header bg-gradient\" style=\"background: linear-gradient(135deg, #007bff, #0056b3);\">\n                        <h5 class=\"modal-title text-white fw-bold\" id=\"purchaseModalLabel\">\n                            <i class=\"fas fa-shopping-cart me-2\"></i>Purchase Video\n                        </h5>\n                        <button type=\"button\" class=\"btn-close btn-close-white\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n\n                    <div class=\"modal-body p-4\">\n                        <!-- Video Information -->\n                        <div class=\"card border-0 bg-light mb-4\">\n                            <div class=\"card-body\">\n                                <div class=\"row align-items-center\">\n                                    <div class=\"col-md-8\">\n                                        <h6 class=\"fw-bold text-dark mb-2\">${video.title}</h6>\n                                        <p class=\"text-muted mb-1\">\n                                            <i class=\"fas fa-user-circle me-1\"></i>\n                                            ${video.creatorName || video.creator_name || video.youtube_channel_title || 'Content Creator'}\n                                        </p>\n                                        <p class=\"text-muted small mb-0\">${(video.description || 'High-quality video content').substring(0, 80)}...</p>\n                                    </div>\n                                    <div class=\"col-md-4 text-end\">\n                                        <h3 class=\"text-primary fw-bold mb-0\">$${price.toFixed(2)}</h3>\n                                        <small class=\"text-muted\">One-time purchase</small>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <!-- Payment Form -->\n                        <form id=\"purchaseForm\" novalidate>\n                            <div class=\"row g-4\">\n                                <!-- Payment Methods -->\n                                <div class=\"col-md-6\">\n                                    <h6 class=\"fw-bold mb-3\">\n                                        <i class=\"fas fa-credit-card text-primary me-2\"></i>Payment Method\n                                    </h6>\n\n                                    <div class=\"payment-methods\">\n                                        <div class=\"form-check payment-option mb-3 p-3 border rounded\" style=\"cursor: pointer;\">\n                                            <input class=\"form-check-input\" type=\"radio\" name=\"paymentMethod\" value=\"card\" id=\"cardMethod\" checked>\n                                            <label class=\"form-check-label w-100\" for=\"cardMethod\" style=\"cursor: pointer;\">\n                                                <div class=\"d-flex align-items-center\">\n                                                    <i class=\"fas fa-credit-card text-primary me-3 fs-5\"></i>\n                                                    <div>\n                                                        <div class=\"fw-semibold\">Credit/Debit Card</div>\n                                                        <small class=\"text-muted\">Visa, Mastercard, Amex</small>\n                                                    </div>\n                                                </div>\n                                            </label>\n                                        </div>\n\n                                        <div class=\"form-check payment-option mb-3 p-3 border rounded\" style=\"cursor: pointer;\">\n                                            <input class=\"form-check-input\" type=\"radio\" name=\"paymentMethod\" value=\"paypal\" id=\"paypalMethod\">\n                                            <label class=\"form-check-label w-100\" for=\"paypalMethod\" style=\"cursor: pointer;\">\n                                                <div class=\"d-flex align-items-center\">\n                                                    <i class=\"fab fa-paypal text-primary me-3 fs-5\"></i>\n                                                    <div>\n                                                        <div class=\"fw-semibold\">PayPal</div>\n                                                        <small class=\"text-muted\">Pay with PayPal account</small>\n                                                    </div>\n                                                </div>\n                                            </label>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <!-- Payment Details -->\n                                <div class=\"col-md-6\">\n                                    <h6 class=\"fw-bold mb-3\">\n                                        <i class=\"fas fa-lock text-success me-2\"></i>Payment Details\n                                    </h6>\n\n                                    <!-- Card Details -->\n                                    <div id=\"cardDetails\" class=\"payment-details\" style=\"display: block;\">\n                                        <div class=\"mb-3\">\n                                            <label class=\"form-label fw-semibold\">Card Number</label>\n                                            <input type=\"text\" class=\"form-control\" name=\"cardNumber\" placeholder=\"4242 4242 4242 4242\" value=\"4242 4242 4242 4242\" maxlength=\"19\" required>\n                                            <div class=\"invalid-feedback\">Please enter a valid card number</div>\n                                        </div>\n                                        <div class=\"row g-3\">\n                                            <div class=\"col-6\">\n                                                <label class=\"form-label fw-semibold\">Expiry Date</label>\n                                                <input type=\"text\" class=\"form-control\" name=\"expiry\" placeholder=\"MM/YY\" value=\"12/26\" maxlength=\"5\" required>\n                                                <div class=\"invalid-feedback\">Enter MM/YY format</div>\n                                            </div>\n                                            <div class=\"col-6\">\n                                                <label class=\"form-label fw-semibold\">CVV</label>\n                                                <input type=\"text\" class=\"form-control\" name=\"cvv\" placeholder=\"123\" value=\"123\" maxlength=\"4\" required>\n                                                <div class=\"invalid-feedback\">Enter CVV code</div>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <!-- PayPal Details -->\n                                    <div id=\"paypalDetails\" class=\"payment-details\" style=\"display: none;\">\n                                        <div class=\"mb-3\">\n                                            <label class=\"form-label fw-semibold\">PayPal Email</label>\n                                            <input type=\"email\" class=\"form-control\" name=\"paypalEmail\" placeholder=\"your@email.com\" value=\"demo@example.com\">\n                                            <div class=\"invalid-feedback\">Please enter a valid email address</div>\n                                        </div>\n                                    </div>\n\n                                    <div class=\"alert alert-info border-0 mt-3\">\n                                        <i class=\"fas fa-shield-check me-2\"></i>\n                                        <small>Payments are secured with 256-bit SSL encryption</small>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n\n                        <!-- Demo Notice -->\n                        <div class=\"alert alert-warning border-0 mt-4\">\n                            <i class=\"fas fa-info-circle me-2\"></i>\n                            <strong>Demo Mode:</strong> This is a demonstration. No real charges will be made.\n                        </div>\n                    </div>\n\n                    <div class=\"modal-footer bg-light\">\n                        <button type=\"button\" class=\"btn btn-outline-secondary\" data-bs-dismiss=\"modal\">\n                            <i class=\"fas fa-times me-2\"></i>Cancel\n                        </button>\n                        <button type=\"button\" class=\"btn btn-primary\" id=\"purchaseBtn\">\n                            <i class=\"fas fa-credit-card me-2\"></i>Purchase for $${price.toFixed(2)}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Add to document\n        document.body.appendChild(modal);\n\n        // Initialize Bootstrap modal\n        const bootstrapModal = new bootstrap.Modal(modal, {\n            backdrop: 'static',\n            keyboard: false\n        });\n\n        // Show modal\n        bootstrapModal.show();\n\n        // Setup event handlers\n        this.setupModalEventHandlers(modal, video, userId, bootstrapModal);\n    }\n\n    setupModalEventHandlers(modal, video, userId, bootstrapModal) {\n        const form = modal.querySelector('#purchaseForm');\n        const purchaseBtn = modal.querySelector('#purchaseBtn');\n\n        // Payment method change handler\n        modal.querySelectorAll('input[name=\"paymentMethod\"]').forEach(radio => {\n            radio.addEventListener('change', () => {\n                // Hide all payment details\n                modal.querySelectorAll('.payment-details').forEach(details => {\n                    details.style.display = 'none';\n                });\n\n                // Show selected payment details\n                const selectedMethod = radio.value;\n                const detailsElement = modal.querySelector(`#${selectedMethod}Details`);\n                if (detailsElement) {\n                    detailsElement.style.display = 'block';\n                }\n\n                // Update payment option styling\n                modal.querySelectorAll('.payment-option').forEach(option => {\n                    option.classList.remove('border-primary', 'bg-light');\n                });\n                radio.closest('.payment-option').classList.add('border-primary', 'bg-light');\n            });\n        });\n\n        // Set initial payment method styling\n        const initialMethod = modal.querySelector('input[name=\"paymentMethod\"]:checked');\n        if (initialMethod) {\n            initialMethod.closest('.payment-option').classList.add('border-primary', 'bg-light');\n        }\n\n        // Purchase button click handler\n        purchaseBtn.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.processPurchase(modal, video, userId, bootstrapModal);\n        });\n\n        // Form submission handler\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.processPurchase(modal, video, userId, bootstrapModal);\n        });\n\n        // Cleanup on modal close\n        modal.addEventListener('hidden.bs.modal', () => {\n            modal.remove();\n        });\n\n        // Card number formatting\n        const cardNumberInput = modal.querySelector('input[name=\"cardNumber\"]');\n        if (cardNumberInput) {\n            cardNumberInput.addEventListener('input', (e) => {\n                let value = e.target.value.replace(/\\D/g, '');\n                value = value.replace(/(\\d{4})(?=\\d)/g, '$1 ');\n                e.target.value = value;\n            });\n        }\n\n        // Expiry date formatting\n        const expiryInput = modal.querySelector('input[name=\"expiry\"]');\n        if (expiryInput) {\n            expiryInput.addEventListener('input', (e) => {\n                let value = e.target.value.replace(/\\D/g, '');\n                if (value.length >= 2) {\n                    value = value.substring(0, 2) + '/' + value.substring(2, 4);\n                }\n                e.target.value = value;\n            });\n        }\n\n        // CVV number only\n        const cvvInput = modal.querySelector('input[name=\"cvv\"]');\n        if (cvvInput) {\n            cvvInput.addEventListener('input', (e) => {\n                e.target.value = e.target.value.replace(/\\D/g, '');\n            });\n        }\n    }\n\n    async processPurchase(modal, video, userId, bootstrapModal) {\n        const form = modal.querySelector('#purchaseForm');\n        const purchaseBtn = modal.querySelector('#purchaseBtn');\n        const paymentMethod = form.querySelector('input[name=\"paymentMethod\"]:checked').value;\n\n        // Validate form\n        if (!this.validatePaymentForm(form, paymentMethod)) {\n            return;\n        }\n\n        // Get payment details\n        const paymentDetails = this.collectPaymentDetails(form, paymentMethod);\n\n        try {\n            // Show loading state\n            this.showPaymentLoading(modal, purchaseBtn);\n\n            // Make payment request\n            const response = await window.apiService.post('/api/payments/purchase', {\n                video_id: video.id,\n                user_id: userId,\n                payment_method: paymentMethod,\n                payment_details: paymentDetails\n            });\n\n            if (response.success) {\n                await this.handlePaymentSuccess(modal, response, bootstrapModal);\n            } else {\n                this.handlePaymentError(modal, response.message || 'Payment failed');\n            }\n\n        } catch (error) {\n            console.error('Payment processing error:', error);\n            this.handlePaymentError(modal, 'Connection error. Please try again.');\n        }\n    }\n\n    validatePaymentForm(form, paymentMethod) {\n        let isValid = true;\n\n        // Clear previous validation states\n        form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));\n\n        if (paymentMethod === 'card') {\n            const cardNumber = form.querySelector('input[name=\"cardNumber\"]').value.replace(/\\s/g, '');\n            const expiry = form.querySelector('input[name=\"expiry\"]').value;\n            const cvv = form.querySelector('input[name=\"cvv\"]').value;\n\n            // Validate card number\n            if (cardNumber.length < 13 || cardNumber.length > 19) {\n                form.querySelector('input[name=\"cardNumber\"]').classList.add('is-invalid');\n                isValid = false;\n            }\n\n            // Validate expiry\n            if (!/^\\d{2}\\/\\d{2}$/.test(expiry)) {\n                form.querySelector('input[name=\"expiry\"]').classList.add('is-invalid');\n                isValid = false;\n            }\n\n            // Validate CVV\n            if (cvv.length < 3 || cvv.length > 4) {\n                form.querySelector('input[name=\"cvv\"]').classList.add('is-invalid');\n                isValid = false;\n            }\n\n        } else if (paymentMethod === 'paypal') {\n            const email = form.querySelector('input[name=\"paypalEmail\"]').value;\n            if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n                form.querySelector('input[name=\"paypalEmail\"]').classList.add('is-invalid');\n                isValid = false;\n            }\n        }\n\n        if (!isValid) {\n            this.showNotification('Please correct the highlighted fields', 'error');\n        }\n\n        return isValid;\n    }\n\n    collectPaymentDetails(form, paymentMethod) {\n        let details = {};\n\n        switch (paymentMethod) {\n            case 'card':\n                details = {\n                    card_number: form.querySelector('input[name=\"cardNumber\"]').value.replace(/\\s/g, ''),\n                    expiry: form.querySelector('input[name=\"expiry\"]').value,\n                    cvv: form.querySelector('input[name=\"cvv\"]').value\n                };\n                break;\n            case 'paypal':\n                details = {\n                    paypal_email: form.querySelector('input[name=\"paypalEmail\"]').value\n                };\n                break;\n        }\n\n        return details;\n    }\n\n    showPaymentLoading(modal, purchaseBtn) {\n        // Disable purchase button with loading state\n        purchaseBtn.disabled = true;\n        purchaseBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Processing Payment...';\n\n        // Create loading overlay\n        const modalBody = modal.querySelector('.modal-body');\n        const overlay = document.createElement('div');\n        overlay.id = 'paymentOverlay';\n        overlay.className = 'position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center';\n        overlay.style.cssText = 'background: rgba(255,255,255,0.95); z-index: 1050; border-radius: 0.375rem;';\n        overlay.innerHTML = `\n            <div class=\"text-center\">\n                <div class=\"spinner-border text-primary mb-3\" style=\"width: 3rem; height: 3rem;\" role=\"status\">\n                    <span class=\"visually-hidden\">Processing...</span>\n                </div>\n                <h5 class=\"mb-2\">Processing Payment</h5>\n                <p class=\"text-muted mb-0\">Please wait while we process your payment...</p>\n            </div>\n        `;\n\n        modalBody.style.position = 'relative';\n        modalBody.appendChild(overlay);\n    }\n\n    async handlePaymentSuccess(modal, response, bootstrapModal) {\n        const overlay = modal.querySelector('#paymentOverlay');\n\n        // Show success message\n        overlay.innerHTML = `\n            <div class=\"text-center\">\n                <div class=\"text-success mb-3\">\n                    <i class=\"fas fa-check-circle\" style=\"font-size: 4rem;\"></i>\n                </div>\n                <h4 class=\"text-success mb-2\">Payment Successful!</h4>\n                <p class=\"mb-3\">You now have access to \"<strong>${response.data.video_title}</strong>\"</p>\n                <div class=\"spinner-border spinner-border-sm text-primary me-2\" role=\"status\"></div>\n                <small class=\"text-muted\">Updating your library...</small>\n            </div>\n        `;\n\n        // Wait a moment, then refresh data and close modal\n        setTimeout(async () => {\n            try {\n                await this.loadDataFromAPI();\n                this.loadPageSpecificHandlers();\n                bootstrapModal.hide();\n                this.showNotification(`Successfully purchased \"${response.data.video_title}\"!`, 'success');\n            } catch (error) {\n                console.error('Error refreshing data after purchase:', error);\n                bootstrapModal.hide();\n                this.showNotification('Purchase successful! Please refresh the page to see your new video.', 'success');\n            }\n        }, 1500);\n    }\n\n    handlePaymentError(modal, errorMessage) {\n        const overlay = modal.querySelector('#paymentOverlay');\n        const purchaseBtn = modal.querySelector('#purchaseBtn');\n\n        // Show error message\n        overlay.innerHTML = `\n            <div class=\"text-center\">\n                <div class=\"text-danger mb-3\">\n                    <i class=\"fas fa-times-circle\" style=\"font-size: 4rem;\"></i>\n                </div>\n                <h4 class=\"text-danger mb-2\">Payment Failed</h4>\n                <p class=\"mb-3\">${errorMessage}</p>\n                <button class=\"btn btn-primary\" onclick=\"this.closest('#paymentOverlay').remove(); document.querySelector('#purchaseBtn').disabled = false; document.querySelector('#purchaseBtn').innerHTML = '<i class=\\\\'fas fa-credit-card me-2\\\\'></i>Try Again';\">\n                    <i class=\"fas fa-redo me-2\"></i>Try Again\n                </button>\n            </div>\n        `;\n\n        // Reset button after 5 seconds if user doesn't click try again\n        setTimeout(() => {\n            if (overlay && overlay.parentNode) {\n                overlay.remove();\n                if (purchaseBtn) {\n                    purchaseBtn.disabled = false;\n                    purchaseBtn.innerHTML = '<i class=\"fas fa-credit-card me-2\"></i>Try Again';\n                }\n            }\n        }, 5000);\n    }\n\n    showNotification(message, type = 'info') {\n        // Create notification element\n        const notification = document.createElement('div');\n        notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;\n        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';\n        notification.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n\n        document.body.appendChild(notification);\n\n        // Auto remove after 5 seconds\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.remove();\n            }\n        }, 5000);\n    }\n\n    async playVideo(videoId) {\n        const userSession = JSON.parse(localStorage.getItem('userSession') || '{}');\n        const userId = userSession.userId || 8;\n\n        try {\n            // Check if user has access to this video\n            const accessResponse = await window.apiService.get(`/payments/check-access?video_id=${videoId}&user_id=${userId}`);\n\n            if (accessResponse.success && accessResponse.has_access) {\n                // User has access, play the video\n                this.openVideoPlayer(videoId);\n            } else {\n                // User doesn't have access, show purchase option\n                alert('You need to purchase this video to watch it.');\n                this.purchaseVideo(videoId);\n            }\n        } catch (error) {\n            console.error('Access check error:', error);\n            alert('Error checking video access. Please try again.');\n        }\n    }\n\n    openVideoPlayer(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (!video) {\n            alert('Video not found');\n            return;\n        }\n\n        // Create video player modal\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-xl\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${video.title}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body p-0\">\n                        <div class=\"ratio ratio-16x9\">\n                            <video controls class=\"w-100\">\n                                <source src=\"${video.video_url || 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'}\" type=\"video/mp4\">\n                                Your browser does not support the video tag.\n                            </video>\n                        </div>\n                        <div class=\"p-3\">\n                            <h6>${video.title}</h6>\n                            <p class=\"text-muted\">By ${video.creatorName || video.creator_name || 'Unknown Creator'}</p>\n                            <p>${video.description || 'No description available'}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n\n        // Clean up when closed\n        modal.addEventListener('hidden.bs.modal', () => {\n            document.body.removeChild(modal);\n        });\n    }\n\n    toggleFavorite(videoId) {\n        const index = this.favorites.indexOf(videoId);\n        if (index > -1) {\n            this.favorites.splice(index, 1);\n        } else {\n            this.favorites.push(videoId);\n        }\n        // Refresh display\n        this.loadPageSpecificHandlers();\n    }\n\n    showVideoOptions(videoId) {\n        console.log('Showing options for video:', videoId);\n    }\n\n    handlePurchaseFromPreview() {\n        console.log('Handling purchase from preview');\n    }\n\n    handleConfirmPurchase() {\n        console.log('Handling confirm purchase');\n    }\n\n    handleProfileUpdate(event) {\n        event.preventDefault();\n        console.log('Handling profile update');\n    }\n\n    handlePasswordChange(event) {\n        event.preventDefault();\n        console.log('Handling password change');\n    }\n\n    loadProfileData() {\n        console.log('Loading profile data');\n    }\n\n    // Performance optimization: Load metrics with delay to reduce initial load time\n    loadMetricsWithDelay(userId) {\n        setTimeout(async () => {\n            try {\n                const metricsResponse = await window.apiService.get(`/api/metrics?type=viewer&user_id=${userId}`);\n                if (metricsResponse.success) {\n                    this.updateDashboardMetrics(metricsResponse.data);\n                }\n            } catch (error) {\n                console.error('Failed to load metrics:', error);\n            }\n        }, 100);\n    }\n}\n\n// Fallback logout confirmation function for viewer pages\nwindow.showLogoutConfirm = function() {\n    if (window.commonUtils) {\n        window.commonUtils.showLogoutConfirmModal();\n    } else {\n        // Simple fallback if CommonUtils not available\n        if (confirm('Are you sure you want to logout?')) {\n            // Clear session and redirect\n            localStorage.removeItem('userSession');\n            sessionStorage.removeItem('userSession');\n            window.location.href = '/auth/login.html';\n        }\n    }\n};\n\n// Initialize viewer manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.viewerManager = new ViewerManager();\n});\n\n// Initialize viewer manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.viewerManager = new ViewerManager();\n});\n","size_bytes":85115},"assets/js/youtube-api.js":{"content":"/**\n * YouTube Data API v3 Client for VideoHub\n * Handles authentication, token management, video upload, and metadata sync\n */\nclass YouTubeAPIClient {\n    constructor() {\n        this.accessToken = null;\n        this.refreshToken = null;\n        this.tokenExpiry = null;\n        this.clientId =\n            \"824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com\";\n        // Client secret handled server-side for security\n        this.scope =\n            \"https://www.googleapis.com/auth/youtube.upload https://www.googleapis.com/auth/youtube.readonly\";\n        this.isInitialized = false;\n\n        // Initialize tokens from server\n        this.initialize();\n    }\n\n    /**\n     * Initialize the YouTube API client\n     */\n    async initialize() {\n        if (this.isInitialized) {\n            return true;\n        }\n\n        try {\n            await this.initializeTokens();\n            this.isInitialized = true;\n            return true;\n        } catch (error) {\n            console.error(\"Failed to initialize YouTube API client:\", error);\n            this.isInitialized = false;\n            return false;\n        }\n    }\n\n    /**\n     * Initialize tokens from database\n     */\n    async initializeTokens() {\n        // Prevent multiple simultaneous calls\n        if (this.initializingTokens) {\n            // Wait for existing initialization to complete\n            while (this.initializingTokens) {\n                await new Promise((resolve) => setTimeout(resolve, 100));\n            }\n            return;\n        }\n\n        this.initializingTokens = true;\n\n        try {\n            // Use configured base URL for YouTube tokens API\n            const basePath = window.videoHubConfig ? window.videoHubConfig.basePath : '';\n            const response = await fetch(\n                `${basePath}/api/youtube_tokens.php?action=get_tokens`,\n                {\n                    credentials: \"include\",\n                },\n            );\n\n            if (!response.ok) {\n                throw new Error(\n                    `HTTP ${response.status}: ${response.statusText}`,\n                );\n            }\n\n            const data = await response.json();\n\n            if (data.success) {\n                this.accessToken = data.tokens.access_token;\n                this.refreshToken = data.tokens.refresh_token;\n                this.tokenExpiry = new Date(data.tokens.expires_at);\n                console.log(\"YouTube tokens initialized successfully\", {\n                    hasAccessToken: !!this.accessToken,\n                    tokenExpiry: this.tokenExpiry\n                });\n            } else if (data.expired && data.refresh_token) {\n                // Token expired, but still use it for now - refresh in background\n                console.log(\"Token expired, but using stored token...\");\n                this.refreshToken = data.refresh_token;\n                // Don't await refresh to avoid blocking the upload\n                this.refreshAccessToken(data.refresh_token).catch(console.error);\n            } else {\n                console.log(\"No valid tokens found - user needs to authenticate\");\n                this.accessToken = null;\n                this.refreshToken = null;\n                this.tokenExpiry = null;\n            }\n        } catch (error) {\n            console.error(\"Failed to initialize tokens:\", error);\n        } finally {\n            this.initializingTokens = false;\n        }\n    }\n\n    /**\n     * Check if user is signed in\n     */\n    isSignedIn() {\n        return (\n            this.accessToken &&\n            this.tokenExpiry &&\n            new Date() < this.tokenExpiry\n        );\n    }\n\n    /**\n     * Sign in to YouTube\n     */\n    async signIn() {\n        return new Promise((resolve) => {\n            const redirectUri = encodeURIComponent(\n                window.location.origin + \"/api/oauth/youtube.php\",\n            );\n            const authUrl =\n                `https://accounts.google.com/o/oauth2/v2/auth?` +\n                `client_id=${this.clientId}&` +\n                `redirect_uri=${redirectUri}&` +\n                `scope=${encodeURIComponent(this.scope)}&` +\n                `response_type=code&` +\n                `access_type=offline&` +\n                `prompt=consent`;\n\n            const popup = window.open(\n                authUrl,\n                \"youtube-auth\",\n                \"width=500,height=600\",\n            );\n\n            const messageHandler = (event) => {\n                if (event.data.type === \"YOUTUBE_AUTH_SUCCESS\") {\n                    window.removeEventListener(\"message\", messageHandler);\n                    popup.close();\n                    this.initializeTokens().then(() => resolve(true));\n                } else if (event.data.type === \"YOUTUBE_AUTH_ERROR\") {\n                    window.removeEventListener(\"message\", messageHandler);\n                    popup.close();\n                    console.error(\"YouTube auth error:\", event.data.error);\n                    resolve(false);\n                }\n            };\n\n            window.addEventListener(\"message\", messageHandler);\n\n            // Check if popup was closed manually\n            const checkClosed = setInterval(() => {\n                if (popup.closed) {\n                    clearInterval(checkClosed);\n                    window.removeEventListener(\"message\", messageHandler);\n                    resolve(false);\n                }\n            }, 1000);\n        });\n    }\n\n    /**\n     * Refresh access token using refresh token\n     */\n    async refreshAccessToken(refreshToken) {\n        try {\n            // Use configured base URL for YouTube tokens API\n            const basePath = window.videoHubConfig ? window.videoHubConfig.basePath : '';\n            const response = await fetch(`${basePath}/api/youtube_tokens.php`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                credentials: \"include\",\n                body: JSON.stringify({\n                    action: \"refresh_token\",\n                    refresh_token: refreshToken,\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n\n            if (data.success && data.tokens) {\n                this.accessToken = data.tokens.access_token;\n                this.refreshToken = data.tokens.refresh_token || refreshToken;\n                this.tokenExpiry = new Date(Date.now() + (data.tokens.expires_in || 3600) * 1000);\n                console.log(\"Token refreshed successfully\");\n                return true;\n            }\n\n            console.error(\"Token refresh failed:\", data.error || \"Unknown error\");\n            return false;\n        } catch (error) {\n            console.error(\"Token refresh failed:\", error);\n            // Clear tokens on refresh failure\n            this.accessToken = null;\n            this.refreshToken = null;\n            this.tokenExpiry = null;\n            return false;\n        }\n    }\n\n    /**\n     * Ensure we have a valid access token (simplified version)\n     */\n    async ensureValidToken() {\n        // Always initialize tokens first to get the latest from database\n        await this.initializeTokens();\n        \n        if (!this.accessToken) {\n            throw new Error(\"No access token available. Please sign in first.\");\n        }\n\n        // For now, use the stored token directly without complex expiry checking\n        // The token refresh will happen in the background if needed\n        console.log(\"Using access token for API request:\", !!this.accessToken);\n    }\n\n    /**\n     * Update YouTube video metadata\n     * @param {string} videoId - YouTube video ID\n     * @param {Object} metadata - Updated metadata (title, description)\n     * @returns {Promise<Object>} Update result\n     */\n    async updateVideoMetadata(videoId, metadata) {\n        try {\n            console.log('YouTube API updateVideoMetadata called with:', { videoId, metadata });\n            console.log('Current accessToken:', this.accessToken);\n            \n            // Ensure we're initialized first\n            if (!this.isInitialized) {\n                console.log('YouTube client not initialized, initializing now...');\n                await this.initialize();\n            }\n            \n            if (!this.accessToken) {\n                console.error('No YouTube access token available');\n                return {\n                    success: false,\n                    error: 'Not authenticated with YouTube. Please connect your YouTube account first.',\n                    needsAuth: true\n                };\n            }\n\n            await this.ensureValidToken();\n\n            const updateData = {\n                id: videoId,\n                snippet: {\n                    title: metadata.title,\n                    description: metadata.description,\n                    categoryId: \"22\" // People & Blogs category\n                }\n            };\n\n            const response = await fetch(\n                `https://www.googleapis.com/youtube/v3/videos?part=snippet`,\n                {\n                    method: 'PUT',\n                    headers: {\n                        'Authorization': `Bearer ${this.accessToken}`,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(updateData)\n                }\n            );\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(`YouTube API error: ${errorData.error?.message || response.statusText}`);\n            }\n\n            const result = await response.json();\n            console.log('YouTube video updated successfully:', result);\n\n            return {\n                success: true,\n                videoId: result.id,\n                title: result.snippet.title,\n                description: result.snippet.description\n            };\n\n        } catch (error) {\n            console.error('Error updating YouTube video:', error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n\n    /**\n     * Make authenticated request to YouTube API\n     */\n    async makeYouTubeAPIRequest(url, options = {}) {\n        await this.ensureValidToken();\n\n        const headers = {\n            Authorization: `Bearer ${this.accessToken}`,\n            \"Content-Type\": \"application/json\",\n            ...options.headers,\n        };\n\n        return fetch(url, {\n            ...options,\n            headers,\n        });\n    }\n\n    /**\n     * Upload video to YouTube with progress tracking using multipart upload\n     */\n    async uploadVideo(videoFile, metadata, progressCallback = null) {\n    try {\n        console.log(\"Starting video upload to YouTube (resumable)...\");\n        await this.ensureValidToken();\n\n        if (!videoFile || !videoFile.type.startsWith(\"video/\")) {\n            throw new Error(\"Invalid video file\");\n        }\n\n        if (progressCallback) progressCallback(10);\n\n        // Step 1 – Prepare metadata for upload\n        const uploadMetadata = {\n            snippet: {\n                title: metadata.title || \"Untitled Video\",\n                description: metadata.description || \"\",\n                tags: metadata.tags || [],\n                categoryId: metadata.categoryId || \"22\",\n            },\n            status: {\n                privacyStatus: \"private\",\n                embeddable: true,\n                license: \"youtube\",\n            },\n        };\n\n        if (progressCallback) progressCallback(20);\n\n        // Step 2 – Initiate resumable upload session\n        const initRes = await fetch(\n            \"https://www.googleapis.com/upload/youtube/v3/videos?uploadType=resumable&part=snippet,status\",\n            {\n                method: \"POST\",\n                headers: {\n                    Authorization: `Bearer ${this.accessToken}`,\n                    \"Content-Type\": \"application/json; charset=UTF-8\",\n                    \"X-Upload-Content-Length\": videoFile.size,\n                    \"X-Upload-Content-Type\": videoFile.type\n                },\n                body: JSON.stringify(uploadMetadata)\n            }\n        );\n\n        if (!initRes.ok) {\n            throw new Error(`Failed to initiate upload: ${initRes.statusText}`);\n        }\n\n        const uploadUrl = initRes.headers.get(\"Location\");\n        if (!uploadUrl) {\n            throw new Error(\"No upload URL returned by YouTube API\");\n        }\n\n        console.log(\"Resumable upload URL:\", uploadUrl);\n        if (progressCallback) progressCallback(30);\n\n        // Step 3 – Upload file in chunks\n        const chunkSize = 1024 * 1024 * 5; // 5MB\n        let offset = 0;\n\n        while (offset < videoFile.size) {\n            const chunkEnd = Math.min(offset + chunkSize, videoFile.size);\n            const chunk = videoFile.slice(offset, chunkEnd);\n            const contentRange = `bytes ${offset}-${chunkEnd - 1}/${videoFile.size}`;\n\n            const res = await fetch(uploadUrl, {\n                method: \"PUT\",\n                headers: {\n                    Authorization: `Bearer ${this.accessToken}`,\n                    \"Content-Length\": chunk.size,\n                    \"Content-Range\": contentRange,\n                    \"Content-Type\": videoFile.type\n                },\n                body: chunk\n            });\n\n            if (res.status === 308) {\n                // Partial upload, continue\n                const range = res.headers.get(\"Range\");\n                if (range) {\n                    offset = parseInt(range.split(\"-\")[1], 10) + 1;\n                } else {\n                    offset = chunkEnd;\n                }\n            } else if (res.ok) {\n                // Upload complete\n                const result = await res.json();\n                if (progressCallback) progressCallback(100);\n\n                return {\n                    success: true,\n                    videoId: result.id,\n                    thumbnail: result.snippet?.thumbnails?.default?.url || '',\n                    duration: result.contentDetails?.duration || '',\n                    video: result\n                };\n            } else {\n                throw new Error(`Upload failed: ${res.status} ${res.statusText}`);\n            }\n\n            // Progress update\n            const progress = Math.round((offset / videoFile.size) * 100);\n            if (progressCallback) progressCallback(progress);\n        }\n    } catch (error) {\n        console.error(\"Video upload failed:\", error);\n        return {\n            success: false,\n            error: error.message,\n        };\n    }\n}\n\n    /**\n     * Convert file to base64 with progress tracking\n     */\n    async fileToBase64(file, progressCallback = null) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onprogress = (event) => {\n                if (event.lengthComputable && progressCallback) {\n                    const progress = Math.round(\n                        (event.loaded / event.total) * 100,\n                    );\n                    progressCallback(progress);\n                }\n            };\n\n            reader.onload = function () {\n                try {\n                    const base64Data = btoa(\n                        new Uint8Array(reader.result).reduce(\n                            (data, byte) => data + String.fromCharCode(byte),\n                            \"\",\n                        ),\n                    );\n                    resolve(base64Data);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            reader.onerror = () => reject(new Error(\"Failed to read file\"));\n            reader.readAsArrayBuffer(file);\n        });\n    }\n\n    /**\n     * Sync uploaded video metadata with our database\n     */\n    async syncVideoToDatabase(youtubeVideo, price = 0) {\n        try {\n            // Get current user from session\n            const localSession = localStorage.getItem(\"userSession\");\n            const sessionSession = sessionStorage.getItem(\"userSession\");\n            const userSession = JSON.parse(\n                localSession || sessionSession || \"{}\",\n            );\n            const uploaderId = userSession.id;\n\n            if (!uploaderId) {\n                throw new Error(\"No user session found\");\n            }\n\n            // Get detailed statistics for the video\n            const videoDetails = await this.getVideoDetails([youtubeVideo.id]);\n            const detailedVideo = videoDetails[0] || {};\n\n            const videoData = {\n                title: youtubeVideo.snippet?.title || \"Untitled\",\n                description: youtubeVideo.snippet?.description || \"\",\n                youtube_id: youtubeVideo.id,\n                youtube_thumbnail:\n                    youtubeVideo.snippet?.thumbnails?.medium?.url ||\n                    youtubeVideo.snippet?.thumbnails?.default?.url,\n                youtube_channel_id: youtubeVideo.snippet?.channelId,\n                youtube_channel_title: youtubeVideo.snippet?.channelTitle,\n                youtube_views: detailedVideo.views || 0,\n                youtube_likes: detailedVideo.likes || 0,\n                youtube_comments: detailedVideo.comments || 0,\n                is_youtube_synced: true,\n                price: parseFloat(price) || 0,\n                category: \"youtube\",\n                file_path: \"\",\n                uploader_id: uploaderId,\n            };\n\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await fetch(`${apiUrl}/endpoints/videos.php`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                credentials: \"include\",\n                body: JSON.stringify(videoData),\n            });\n\n            const result = await response.json();\n\n            if (!result.success) {\n                console.error(\n                    \"Failed to sync video to database:\",\n                    result.message,\n                );\n            }\n\n            return result.success;\n        } catch (error) {\n            console.error(\"Database sync failed:\", error);\n            return false;\n        }\n    }\n\n    /**\n     * Get detailed video information\n     */\n    async getVideoDetails(videoIds) {\n        try {\n            const ids = Array.isArray(videoIds) ? videoIds.join(\",\") : videoIds;\n            const response = await this.makeYouTubeAPIRequest(\n                `https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=${ids}`,\n            );\n\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch video details\");\n            }\n\n            const data = await response.json();\n            return data.items.map((video) => ({\n                youtube_id: video.id,\n                title: video.snippet.title,\n                description: video.snippet.description,\n                thumbnail:\n                    video.snippet.thumbnails?.medium?.url ||\n                    video.snippet.thumbnails?.default?.url,\n                channel_id: video.snippet.channelId,\n                channel_title: video.snippet.channelTitle,\n                views: parseInt(video.statistics?.viewCount || 0),\n                likes: parseInt(video.statistics?.likeCount || 0),\n                comments: parseInt(video.statistics?.commentCount || 0),\n            }));\n        } catch (error) {\n            console.error(\"Failed to get video details:\", error);\n            return [];\n        }\n    }\n}\n\n// Initialize YouTube API client (singleton pattern)\nif (!window.youtubeAPI) {\n    window.youtubeAPI = new YouTubeAPIClient();\n}\n","size_bytes":19939},"api/config/validation.php":{"content":"\n<?php\n/**\n * Input Validation Helper\n */\n\nclass ValidationHelper {\n    public static function validateEmail($email) {\n        return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n    }\n    \n    public static function validateRequired($value) {\n        return !empty(trim($value));\n    }\n    \n    public static function validateNumeric($value) {\n        return is_numeric($value);\n    }\n    \n    public static function validatePositiveInteger($value) {\n        return is_numeric($value) && intval($value) > 0;\n    }\n    \n    public static function sanitizeString($input) {\n        return htmlspecialchars(strip_tags(trim($input)), ENT_QUOTES, 'UTF-8');\n    }\n    \n    public static function validateVideoTitle($title) {\n        $title = trim($title);\n        return !empty($title) && strlen($title) <= 255;\n    }\n    \n    public static function validatePrice($price) {\n        return is_numeric($price) && floatval($price) >= 0;\n    }\n}\n?>\n","size_bytes":947},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[ ] 3. Verify the project is working using the feedback tool\n[ ] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298},"api/cron/refresh_youtube_tokens.php":{"content":"\n<?php\n/**\n * YouTube Token Refresh Cron Job\n * This script should be run periodically (e.g., every hour) to refresh YouTube access tokens\n * Usage: php api/cron/refresh_youtube_tokens.php\n */\n\n// Set script execution time limit\nset_time_limit(300); // 5 minutes\n\n// Include required files\nrequire_once __DIR__ . '/../config/database.php';\n\nclass YouTubeTokenRefreshCron {\n    private $db;\n    private $clientId = '824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com';\n    private $clientSecret = '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';\n    private $logFile;\n\n    public function __construct() {\n        try {\n            $database = new Database();\n            $this->db = $database->getConnection();\n            $this->logFile = __DIR__ . '/../../logs/token_refresh.log';\n            \n            // Create logs directory if it doesn't exist\n            $logDir = dirname($this->logFile);\n            if (!is_dir($logDir)) {\n                mkdir($logDir, 0755, true);\n            }\n            \n        } catch (Exception $e) {\n            $this->log('CRITICAL', 'Failed to initialize: ' . $e->getMessage());\n            exit(1);\n        }\n    }\n\n    /**\n     * Main execution method\n     */\n    public function run() {\n        $this->log('INFO', 'Starting YouTube token refresh cron job');\n        \n        try {\n            // Get tokens that need refresh (expired or expiring within 5 minutes)\n            $tokensToRefresh = $this->getTokensNeedingRefresh();\n            \n            if (empty($tokensToRefresh)) {\n                $this->log('INFO', 'No tokens need refresh at this time');\n                return;\n            }\n\n            $refreshedCount = 0;\n            $failedCount = 0;\n\n            foreach ($tokensToRefresh as $tokenRecord) {\n                try {\n                    $newAccessToken = $this->refreshAccessToken($tokenRecord['refresh_token']);\n                    \n                    if ($newAccessToken) {\n                        $this->updateTokenInDatabase($tokenRecord['id'], $newAccessToken);\n                        $refreshedCount++;\n                        $this->log('INFO', \"Successfully refreshed token for record ID: {$tokenRecord['id']}\");\n                    } else {\n                        $failedCount++;\n                        $this->log('ERROR', \"Failed to refresh token for record ID: {$tokenRecord['id']}\");\n                    }\n                    \n                } catch (Exception $e) {\n                    $failedCount++;\n                    $this->log('ERROR', \"Exception refreshing token for record ID {$tokenRecord['id']}: \" . $e->getMessage());\n                }\n                \n                // Small delay between requests to avoid rate limiting\n                usleep(500000); // 0.5 seconds\n            }\n\n            $this->log('INFO', \"Cron job completed. Refreshed: $refreshedCount, Failed: $failedCount\");\n            \n        } catch (Exception $e) {\n            $this->log('CRITICAL', 'Cron job failed: ' . $e->getMessage());\n            exit(1);\n        }\n    }\n\n    /**\n     * Get tokens that need refresh (expired or expiring within 5 minutes)\n     */\n    private function getTokensNeedingRefresh() {\n        try {\n            $stmt = $this->db->prepare(\"\n                SELECT id, refresh_token, expires_at \n                FROM youtube_tokens \n                WHERE refresh_token IS NOT NULL \n                AND refresh_token != ''\n                AND (expires_at IS NULL OR expires_at <= DATE_ADD(NOW(), INTERVAL 5 MINUTE))\n                ORDER BY expires_at ASC\n            \");\n            \n            $stmt->execute();\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n            \n        } catch (PDOException $e) {\n            throw new Exception('Database query failed: ' . $e->getMessage());\n        }\n    }\n\n    /**\n     * Refresh access token using refresh token\n     */\n    private function refreshAccessToken($refreshToken) {\n        $tokenUrl = 'https://oauth2.googleapis.com/token';\n        \n        $postData = [\n            'client_id' => $this->clientId,\n            'client_secret' => $this->clientSecret,\n            'refresh_token' => $refreshToken,\n            'grant_type' => 'refresh_token'\n        ];\n\n        $curl = curl_init();\n        \n        curl_setopt_array($curl, [\n            CURLOPT_URL => $tokenUrl,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_ENCODING => '',\n            CURLOPT_MAXREDIRS => 10,\n            CURLOPT_TIMEOUT => 30,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n            CURLOPT_CUSTOMREQUEST => 'POST',\n            CURLOPT_POSTFIELDS => http_build_query($postData),\n            CURLOPT_HTTPHEADER => [\n                'Content-Type: application/x-www-form-urlencoded',\n                'User-Agent: VideoHub-TokenRefresh/1.0'\n            ],\n            CURLOPT_SSL_VERIFYPEER => true,\n            CURLOPT_SSL_VERIFYHOST => 2\n        ]);\n\n        $response = curl_exec($curl);\n        $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n        $curlError = curl_error($curl);\n        curl_close($curl);\n\n        if ($curlError) {\n            throw new Exception('cURL error: ' . $curlError);\n        }\n\n        if ($httpCode !== 200) {\n            $this->log('ERROR', \"Token refresh failed with HTTP code: $httpCode, Response: $response\");\n            return false;\n        }\n\n        $tokenData = json_decode($response, true);\n        \n        if (!$tokenData || !isset($tokenData['access_token'])) {\n            $this->log('ERROR', 'Invalid response from Google OAuth2: ' . $response);\n            return false;\n        }\n\n        return [\n            'access_token' => $tokenData['access_token'],\n            'expires_in' => $tokenData['expires_in'] ?? 3600\n        ];\n    }\n\n    /**\n     * Update token in database\n     */\n    private function updateTokenInDatabase($recordId, $tokenData) {\n        try {\n            $expiresAt = date('Y-m-d H:i:s', time() + $tokenData['expires_in']);\n            \n            $stmt = $this->db->prepare(\"\n                UPDATE youtube_tokens \n                SET access_token = ?, \n                    expires_at = ?, \n                    updated_at = CURRENT_TIMESTAMP \n                WHERE id = ?\n            \");\n            \n            if (!$stmt->execute([$tokenData['access_token'], $expiresAt, $recordId])) {\n                throw new Exception('Failed to update token in database');\n            }\n            \n        } catch (PDOException $e) {\n            throw new Exception('Database update failed: ' . $e->getMessage());\n        }\n    }\n\n    /**\n     * Log messages with timestamp\n     */\n    private function log($level, $message) {\n        $timestamp = date('Y-m-d H:i:s');\n        $logMessage = \"[$timestamp] [$level] $message\" . PHP_EOL;\n        \n        // Write to log file\n        file_put_contents($this->logFile, $logMessage, FILE_APPEND | LOCK_EX);\n        \n        // Also output to console if running from command line\n        if (php_sapi_name() === 'cli') {\n            echo $logMessage;\n        }\n    }\n\n    /**\n     * Clean up old log entries (keep last 30 days)\n     */\n    public function cleanupLogs() {\n        if (file_exists($this->logFile)) {\n            $lines = file($this->logFile);\n            $cutoffDate = date('Y-m-d', strtotime('-30 days'));\n            $filteredLines = [];\n            \n            foreach ($lines as $line) {\n                if (preg_match('/^\\[(\\d{4}-\\d{2}-\\d{2})/', $line, $matches)) {\n                    if ($matches[1] >= $cutoffDate) {\n                        $filteredLines[] = $line;\n                    }\n                }\n            }\n            \n            file_put_contents($this->logFile, implode('', $filteredLines));\n        }\n    }\n}\n\n// Run the cron job if this file is executed directly\nif (php_sapi_name() === 'cli' || basename(__FILE__) === basename($_SERVER['SCRIPT_NAME'])) {\n    try {\n        $cronJob = new YouTubeTokenRefreshCron();\n        $cronJob->run();\n        \n        // Clean up old logs once per day (you can adjust this logic)\n        if (date('H') === '00') {\n            $cronJob->cleanupLogs();\n        }\n        \n    } catch (Exception $e) {\n        error_log('YouTube Token Refresh Cron Job Error: ' . $e->getMessage());\n        exit(1);\n    }\n}\n?>\n","size_bytes":8339},"api/cron/setup_cron.php":{"content":"\n<?php\n/**\n * Cron Job Setup Instructions and Manual Test Script\n * This file provides instructions for setting up the cron job and allows manual testing\n */\n\necho \"=== YouTube Token Refresh Cron Job Setup ===\\n\\n\";\n\necho \"1. To set up automatic token refresh, add this to your crontab:\\n\";\necho \"   # Refresh YouTube tokens every hour\\n\";\necho \"   0 * * * * /usr/bin/php \" . __DIR__ . \"/refresh_youtube_tokens.php\\n\\n\";\n\necho \"2. Alternative: Run every 30 minutes for more frequent checks:\\n\";\necho \"   # Refresh YouTube tokens every 30 minutes\\n\";\necho \"   */30 * * * * /usr/bin/php \" . __DIR__ . \"/refresh_youtube_tokens.php\\n\\n\";\n\necho \"3. To edit crontab (if you have access):\\n\";\necho \"   crontab -e\\n\\n\";\n\necho \"4. To test manually, run:\\n\";\necho \"   php \" . __DIR__ . \"/refresh_youtube_tokens.php\\n\\n\";\n\necho \"5. To check logs:\\n\";\necho \"   tail -f \" . __DIR__ . \"/../../logs/token_refresh.log\\n\\n\";\n\n// Manual test option\nif (isset($_GET['test']) || (isset($argv[1]) && $argv[1] === 'test')) {\n    echo \"=== RUNNING MANUAL TEST ===\\n\";\n    require_once 'refresh_youtube_tokens.php';\n}\n?>\n","size_bytes":1097},"DEPLOYMENT-GUIDE.md":{"content":"# VideoHub Deployment Configuration\n\n## Quick Setup\n\nTo configure VideoHub for different deployment scenarios, simply edit the `deployment-config.js` file in the root directory.\n\n### Option 1: Root Domain Deployment\n```javascript\n// For https://yourdomain.com/\nBASE_PATH: '',\n```\n\n### Option 2: Subfolder Deployment\n```javascript\n// For https://yourdomain.com/video-platform/\nBASE_PATH: '/video-platform',\n\n// For https://yourdomain.com/apps/videohub/\nBASE_PATH: '/apps/videohub',\n```\n\n### Option 3: Auto-Detection\n```javascript\n// Let the system automatically detect the path (works in most cases)\nBASE_PATH: 'auto',\n```\n\n## How It Works\n\n1. **Global Configuration**: The `deployment-config.js` file sets the `VIDEOHUB_DEPLOYMENT_CONFIG.BASE_PATH` variable.\n\n2. **Automatic Loading**: All HTML pages load this config before other scripts, ensuring consistent behavior.\n\n3. **API Calls**: The `APIService` class automatically uses the configured base path for all API calls.\n\n4. **Navigation**: All internal links use the configured path for seamless navigation.\n\n## Example Configurations\n\n### Root Domain\n```javascript\nwindow.VIDEOHUB_DEPLOYMENT_CONFIG = {\n    BASE_PATH: ''  // https://yourdomain.com/\n};\n```\n\n### Subfolder\n```javascript\nwindow.VIDEOHUB_DEPLOYMENT_CONFIG = {\n    BASE_PATH: '/video-platform'  // https://yourdomain.com/video-platform/\n};\n```\n\n## Testing Different Configurations\n\n1. Open `deployment-config.js`\n2. Change the `BASE_PATH` value\n3. Save the file\n4. Refresh your browser\n5. All API calls and navigation will use the new path\n\n## Files That Use This Configuration\n\n- All HTML pages in `auth/`, `admin/`, `creator/`, and `viewer/` folders\n- `assets/js/api.js` - API service for backend communication\n- `assets/js/config.js` - Configuration management\n- `index.html` - Landing page\n\nThe system is designed to work seamlessly regardless of where you deploy VideoHub on your server.","size_bytes":1910},"deployment-config.js":{"content":"/**\n * VideoHub Deployment Configuration\n * Easy configuration for different deployment scenarios\n * \n * INSTRUCTIONS:\n * 1. Choose your deployment scenario below\n * 2. Uncomment the line that matches your deployment\n * 3. Save the file\n * \n * The app will automatically use this configuration for all API calls\n * and navigation throughout the entire application.\n */\n\nwindow.VIDEOHUB_DEPLOYMENT_CONFIG = {\n    // ========================================\n    // CHOOSE YOUR DEPLOYMENT SCENARIO\n    // ========================================\n    \n    // Option 1: Root domain deployment (e.g., https://yourdomain.com/)\n    //BASE_PATH: '',\n    \n    // Option 2: Subfolder deployment (uncomment and modify as needed)\n    BASE_PATH: '/video-platform',\n    \n    // Option 3: Auto-detect (works in most cases but manual is more reliable)\n    // BASE_PATH: 'auto',\n    \n    // ========================================\n    // DEPLOYMENT EXAMPLES\n    // ========================================\n    // For https://yourdomain.com/ → BASE_PATH: ''\n    // For https://yourdomain.com/video-platform/ → BASE_PATH: '/video-platform'\n    // For https://yourdomain.com/apps/videohub/ → BASE_PATH: '/apps/videohub'\n};\n\nconsole.log('VideoHub deployment config loaded:', window.VIDEOHUB_DEPLOYMENT_CONFIG.BASE_PATH || 'root');","size_bytes":1315},"webhook.php":{"content":"<?php\n/**\n * pubsub_callback.php\n * Handles PubSubHubbub callbacks for YouTube Data API v3 push notifications\n */\n\n// 1. Handle verification request (GET) from PubSubHubbub hub\nif ($_SERVER['REQUEST_METHOD'] === 'GET' && isset($_GET['hub_challenge'])) {\n    // Required for verifying subscription/unsubscription\n    header('Content-Type: text/plain');\n    echo $_GET['hub_challenge'];\n    exit;\n}\n\n// 2. Handle POST notifications from YouTube\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $rawPostData = file_get_contents('php://input');\n\n    // Optional: Log raw XML for debugging\n    file_put_contents(__DIR__ . '/pubsub_debug.log', date('c') . \"\\n\" . $rawPostData . \"\\n\\n\", FILE_APPEND);\n\n    // // Parse XML\n    // $xml = @simplexml_load_string($rawPostData, 'SimpleXMLElement', LIBXML_NOCDATA);\n    // if ($xml === false) {\n    //     http_response_code(400);\n    //     exit('Invalid XML');\n    // }\n\n    // // Register namespace to access YouTube-specific tags\n    // $xml->registerXPathNamespace('yt', 'http://www.youtube.com/xml/schemas/2015');\n\n    // // Extract entries (there may be multiple in a feed)\n    // foreach ($xml->entry as $entry) {\n    //     $videoId = (string) $entry->children('yt', true)->videoId;\n    //     $channelId = (string) $entry->children('yt', true)->channelId;\n    //     $title = (string) $entry->title;\n    //     $published = (string) $entry->published;\n\n    //     // Here you can store the data in your database or trigger other actions\n    //     file_put_contents(__DIR__ . '/pubsub_events.log',\n    //         date('c') . \" - New/Updated Video:\\n\" .\n    //         \"Video ID: $videoId\\n\" .\n    //         \"Channel ID: $channelId\\n\" .\n    //         \"Title: $title\\n\" .\n    //         \"Published: $published\\n\\n\",\n    //         FILE_APPEND\n    //     );\n    // }\n\n    http_response_code(204); // No content\n    exit;\n}\n\n// 3. Invalid method\nhttp_response_code(405);\nexit('Method Not Allowed');\n","size_bytes":1944},"assets/js/auth-guard.js":{"content":"\n/**\n * VideoHub Authentication Guard\n * Handles session validation and route protection\n */\n\nclass AuthGuard {\n    constructor() {\n        this.isInitialized = false;\n        this.init();\n    }\n\n    init() {\n        if (this.isInitialized) {\n            console.log('Auth guard already initialized, skipping...');\n            return;\n        }\n        \n        this.isInitialized = true;\n        this.checkAuthStatus();\n        this.setupLogoutHandlers();\n        this.validateTokenPeriodically();\n    }\n\n    async checkAuthStatus() {\n        const currentPath = window.location.pathname;\n        const isAuthPage = this.isAuthenticationPage(currentPath);\n        const isProtectedPage = this.isProtectedPage(currentPath);\n\n        // Immediately show loading overlay for protected pages to prevent content flash\n        if (isProtectedPage) {\n            this.showAuthCheckLoader();\n        }\n\n        try {\n            const isAuthenticated = await this.validateSession();\n            \n            if (isAuthenticated) {\n                const userSession = this.getUserSession();\n                if (isAuthPage && userSession) {\n                    // Redirect authenticated users away from auth pages\n                    this.redirectToUserDashboard(userSession.userType);\n                    return;\n                }\n                \n                if (isProtectedPage && userSession) {\n                    // Check role-based access\n                    const requiredRole = this.getRequiredRole(currentPath);\n                    if (requiredRole && userSession.userType !== requiredRole) {\n                        console.log(`Role mismatch: required ${requiredRole}, user has ${userSession.userType}`);\n                        this.redirectToUserDashboard(userSession.userType);\n                        return;\n                    }\n                    // User is authenticated and has correct role - allow access\n                    this.hideAuthCheckLoader();\n                    return;\n                }\n                \n                // Not a protected page, allow access\n                this.hideAuthCheckLoader();\n            } else {\n                if (isProtectedPage) {\n                    // Redirect unauthenticated users to login\n                    console.log('User not authenticated, redirecting to login');\n                    this.clearUserSession();\n                    this.redirectToLogin();\n                    return;\n                }\n            }\n        } catch (error) {\n            console.error('Auth check failed:', error);\n            if (isProtectedPage) {\n                this.clearUserSession();\n                this.redirectToLogin();\n                return;\n            }\n        }\n        \n        // Always hide loader at the end\n        this.hideAuthCheckLoader();\n    }\n\n    async validateSession() {\n        const userSession = this.getUserSession();\n        const token = this.getAuthToken();\n\n        console.log('Auth guard validation - User session:', !!userSession, 'Token:', !!token);\n\n        if (!userSession || !token) {\n            console.log('No user session or token found');\n            return false;\n        }\n\n        try {\n            // Wait for API service to be available\n            await this.waitForAPIService();\n            \n            // Ensure API service has the current token\n            if (window.apiService && window.apiService.setAuthToken) {\n                window.apiService.setAuthToken(token);\n            }\n            \n            const response = await window.apiService.get('/api/auth/verify');\n            \n            if (response.success && response.data) {\n                // Update user session with fresh data from API\n                const userData = response.data.user;\n                this.updateUserSession({\n                    id: userData.id,\n                    name: userData.name,\n                    email: userData.email,\n                    userType: userData.role\n                });\n                console.log('Session validation successful for user:', userData.role);\n                return true;\n            } else {\n                console.log('Session validation failed:', response.message);\n                this.clearUserSession();\n                return false;\n            }\n        } catch (error) {\n            console.error('Session validation failed:', error);\n            this.clearUserSession();\n            return false;\n        }\n    }\n\n    async logout() {\n        try {\n            // Wait for API service to be available\n            await this.waitForAPIService();\n            \n            // Call logout endpoint\n            await window.apiService.post('/api/auth/logout');\n        } catch (error) {\n            console.error('Logout API call failed:', error);\n        } finally {\n            // Always clear local session regardless of API response\n            this.clearUserSession();\n            this.redirectToLogin();\n        }\n    }\n\n    setupLogoutHandlers() {\n        // Setup logout button handlers\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[data-logout]') || e.target.closest('[data-logout]')) {\n                e.preventDefault();\n                this.confirmLogout();\n            }\n        });\n\n        // Setup automatic logout on tab/window close\n        window.addEventListener('beforeunload', () => {\n            // Only clear session storage, keep localStorage for \"remember me\"\n            sessionStorage.removeItem('userSession');\n        });\n    }\n\n    confirmLogout() {\n        if (confirm('Are you sure you want to logout?')) {\n            this.logout();\n        }\n    }\n\n    validateTokenPeriodically() {\n        // Validate token every 5 minutes\n        setInterval(async () => {\n            const isProtectedPage = this.isProtectedPage(window.location.pathname);\n            if (isProtectedPage) {\n                const isValid = await this.validateSession();\n                if (!isValid) {\n                    this.clearUserSession();\n                    this.redirectToLogin();\n                }\n            }\n        }, 5 * 60 * 1000); // 5 minutes\n        \n        // Also check on browser focus/visibility change\n        document.addEventListener('visibilitychange', async () => {\n            if (!document.hidden) {\n                const isProtectedPage = this.isProtectedPage(window.location.pathname);\n                if (isProtectedPage) {\n                    const isValid = await this.validateSession();\n                    if (!isValid) {\n                        this.clearUserSession();\n                        this.redirectToLogin();\n                    }\n                }\n            }\n        });\n    }\n    \n    showAuthCheckLoader() {\n        // Prevent content flash during auth check\n        const loader = document.createElement('div');\n        loader.id = 'auth-check-loader';\n        loader.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: white;\n            z-index: 9999;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        `;\n        loader.innerHTML = `\n            <div class=\"text-center\">\n                <div class=\"spinner-border text-primary mb-3\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div>Checking authentication...</div>\n            </div>\n        `;\n        document.body.appendChild(loader);\n    }\n    \n    hideAuthCheckLoader() {\n        const loader = document.getElementById('auth-check-loader');\n        if (loader) {\n            loader.remove();\n        }\n    }\n    \n    isAuthenticationPage(path) {\n        return path.includes('/auth/') || path.endsWith('login.html') || path.endsWith('signup.html');\n    }\n    \n    isProtectedPage(path) {\n        return path.includes('/admin/') || path.includes('/creator/') || path.includes('/viewer/');\n    }\n    \n    getRequiredRole(path) {\n        if (path.includes('/admin/')) return 'admin';\n        if (path.includes('/creator/')) return 'creator';\n        if (path.includes('/viewer/')) return 'viewer';\n        return null;\n    }\n    \n    redirectToLogin() {\n        if (window.videoHubConfig) {\n            window.location.href = window.videoHubConfig.getUrl('/auth/login.html');\n        } else {\n            window.location.href = '/auth/login.html';\n        }\n    }\n    \n    redirectToUserDashboard(userType) {\n        const dashboards = {\n            admin: '/admin/dashboard.html',\n            creator: '/creator/dashboard.html',\n            viewer: '/viewer/dashboard.html'\n        };\n        \n        const dashboardUrl = dashboards[userType];\n        if (dashboardUrl) {\n            if (window.videoHubConfig) {\n                window.location.href = window.videoHubConfig.getUrl(dashboardUrl);\n            } else {\n                window.location.href = dashboardUrl;\n            }\n        }\n    }\n    \n    getUserSession() {\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n        const session = localSession || sessionSession;\n        return session ? JSON.parse(session) : null;\n    }\n    \n    updateUserSession(userData) {\n        const existingSession = this.getUserSession();\n        if (existingSession) {\n            const updatedSession = { ...existingSession, ...userData };\n            if (localStorage.getItem('userSession')) {\n                localStorage.setItem('userSession', JSON.stringify(updatedSession));\n            } else {\n                sessionStorage.setItem('userSession', JSON.stringify(updatedSession));\n            }\n        }\n    }\n    \n    clearUserSession() {\n        localStorage.removeItem('userSession');\n        sessionStorage.removeItem('userSession');\n        localStorage.removeItem('authToken');\n        sessionStorage.removeItem('authToken');\n    }\n    \n    getAuthToken() {\n        return localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\n    }\n    \n    async waitForAPIService() {\n        let retries = 0;\n        const maxRetries = 50;\n        \n        while (retries < maxRetries && !window.apiService) {\n            await new Promise(resolve => setTimeout(resolve, 100));\n            retries++;\n        }\n        \n        if (!window.apiService) {\n            throw new Error('API service not available');\n        }\n    }\n}\n\n// Enhanced browser security measures\nwindow.addEventListener('load', () => {\n    // Prevent back button access to protected pages after logout\n    window.addEventListener('pageshow', (event) => {\n        if (event.persisted) {\n            // Page was loaded from cache (back button)\n            const isProtectedPage = window.location.pathname.includes('/admin/') || \n                                   window.location.pathname.includes('/creator/') || \n                                   window.location.pathname.includes('/viewer/');\n            \n            if (isProtectedPage) {\n                const authGuard = new AuthGuard();\n                authGuard.checkAuthStatus();\n            }\n        }\n    });\n});\n\n// Initialize auth guard globally - prevent multiple instances\nif (!window.authGuard) {\n    window.authGuard = new AuthGuard();\n} else {\n    console.log('Auth guard already initialized');\n}\n","size_bytes":11448},"assets/js/config.js":{"content":"/**\n * VideoHub Configuration\n * Handles base path configuration for different deployment scenarios\n */\n\n(function() {\n    'use strict';\n\n    if (window.VideoHubConfig) {\n        return; // Already loaded\n    }\n\n    class VideoHubConfig {\n        constructor() {\n            // Use external deployment config if available, otherwise use auto-detection\n            this.basePath = this.getConfiguredBasePath();\n        }\n        \n        /**\n         * Get the configured base path from deployment config or auto-detect\n         */\n        getConfiguredBasePath() {\n            // Check if deployment config is loaded\n            if (window.VIDEOHUB_DEPLOYMENT_CONFIG && window.VIDEOHUB_DEPLOYMENT_CONFIG.BASE_PATH !== undefined) {\n                const configPath = window.VIDEOHUB_DEPLOYMENT_CONFIG.BASE_PATH;\n                \n                if (configPath === 'auto') {\n                    return this.detectBasePath();\n                }\n                \n                return configPath;\n            }\n            \n            // Fallback to auto-detection if no config found\n            return this.detectBasePath();\n        }\n\n        /**\n         * Auto-detect the base path where the app is deployed\n         * This allows the app to work in subfolders automatically\n         */\n        detectBasePath() {\n            const currentPath = window.location.pathname;\n            \n            // If we're in a subdirectory (auth/, admin/, creator/, viewer/)\n            if (currentPath.includes('/auth/') || currentPath.includes('/admin/') || \n                currentPath.includes('/creator/') || currentPath.includes('/viewer/')) {\n                \n                // Find the position of the subdirectory and get everything before it\n                const match = currentPath.match(/(.*)\\/(?:auth|admin|creator|viewer)\\//);\n                if (match) {\n                    return match[1] || '';\n                }\n            }\n            \n            // If we're on a specific HTML file in the root or subdirectory\n            if (currentPath.endsWith('.html')) {\n                const pathParts = currentPath.split('/');\n                pathParts.pop(); // Remove the HTML file\n                \n                // If we're in auth, admin, creator, or viewer subdirectory, go up one more level\n                const lastDir = pathParts[pathParts.length - 1];\n                if (lastDir === 'auth' || lastDir === 'admin' || lastDir === 'creator' || lastDir === 'viewer') {\n                    pathParts.pop(); // Remove the subdirectory to get to app root\n                }\n                \n                return pathParts.join('/') || '';\n            }\n            \n            // If we're on root or a directory\n            if (currentPath === '/' || currentPath.endsWith('/')) {\n                return currentPath.replace(/\\/$/, '');\n            }\n            \n            // Default case - assume app root\n            const pathParts = currentPath.split('/');\n            if (pathParts.length > 1) {\n                pathParts.pop(); // Remove last segment\n                return pathParts.join('/') || '';\n            }\n            \n            return '';\n        }\n\n        /**\n         * Get API base URL\n         */\n        getApiUrl() {\n            return this.basePath + '/api';\n        }\n\n        /**\n         * Get absolute URL for a relative path\n         */\n        getUrl(relativePath) {\n            if (relativePath.startsWith('/')) {\n                return this.basePath + relativePath;\n            }\n            return this.basePath + '/' + relativePath;\n        }\n\n        /**\n         * Get relative URL from current page to target\n         */\n        getRelativeUrl(targetPath) {\n            const currentPath = window.location.pathname;\n            const currentDir = currentPath.substring(0, currentPath.lastIndexOf('/'));\n            \n            // If target starts with base path, use as-is\n            if (targetPath.startsWith(this.basePath)) {\n                return targetPath;\n            }\n            \n            // For auth pages in subdirectories, calculate relative path\n            if (currentDir.includes('/auth') || currentDir.includes('/admin') || \n                currentDir.includes('/creator') || currentDir.includes('/viewer')) {\n                return '../' + targetPath.replace(/^\\//, '');\n            }\n            \n            return targetPath.replace(/^\\//, '');\n        }\n    }\n\n    // Export to global scope\n    window.VideoHubConfig = VideoHubConfig;\n    window.videoHubConfig = new VideoHubConfig();\n    console.log('VideoHub Config initialized with base path:', window.videoHubConfig.basePath);\n\n})();","size_bytes":4666},"debug_auth.php":{"content":"<?php\nrequire_once 'api/config/database.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\necho \"Checking database connection and user data...\\n\\n\";\n\ntry {\n    // Check if users table exists and get structure\n    echo \"Users table structure:\\n\";\n    $stmt = $db->query(\"DESCRIBE users\");\n    $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    foreach ($columns as $column) {\n        echo \"- {$column['Field']} ({$column['Type']})\\n\";\n    }\n    \n    echo \"\\nChecking for demo users...\\n\";\n    $stmt = $db->prepare(\"SELECT id, name, email, role, email_verified_at FROM users WHERE email IN ('admin@videohub.com', 'creator@videohub.com', 'viewer@videohub.com')\");\n    $stmt->execute();\n    $users = $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \n    if (empty($users)) {\n        echo \"No demo users found. Creating them...\\n\";\n        \n        $demoUsers = [\n            ['admin@videohub.com', 'Admin User', 'admin', 'admin123'],\n            ['creator@videohub.com', 'Creator User', 'creator', 'creator123'],\n            ['viewer@videohub.com', 'Viewer User', 'viewer', 'viewer123']\n        ];\n        \n        foreach ($demoUsers as $user) {\n            $hashedPassword = password_hash($user[3], PASSWORD_DEFAULT);\n            $insertStmt = $db->prepare(\"INSERT INTO users (email, name, role, password, email_verified_at) VALUES (?, ?, ?, ?, NOW())\");\n            $insertStmt->execute([$user[0], $user[1], $user[2], $hashedPassword]);\n            echo \"Created user: {$user[0]} (Role: {$user[2]})\\n\";\n        }\n    } else {\n        echo \"Found demo users:\\n\";\n        foreach ($users as $user) {\n            echo \"- {$user['email']} (Role: {$user['role']}, Verified: \" . ($user['email_verified_at'] ? 'Yes' : 'No') . \")\\n\";\n        }\n    }\n    \n} catch (Exception $e) {\n    echo \"Error: \" . $e->getMessage() . \"\\n\";\n}\n?>","size_bytes":1856},"test_password.php":{"content":"<?php\nrequire_once 'api/config/database.php';\n\n$database = new Database();\n$db = $database->getConnection();\n\necho \"Testing password verification...\\n\\n\";\n\n// Check current password for admin user\n$stmt = $db->prepare(\"SELECT id, email, password FROM users WHERE email = 'admin@videohub.com'\");\n$stmt->execute();\n$user = $stmt->fetch(PDO::FETCH_ASSOC);\n\nif ($user) {\n    echo \"Found user: {$user['email']}\\n\";\n    echo \"Stored password hash: {$user['password']}\\n\";\n    \n    $testPassword = 'admin123';\n    $isValid = password_verify($testPassword, $user['password']);\n    echo \"Password verify result for 'admin123': \" . ($isValid ? 'VALID' : 'INVALID') . \"\\n\";\n    \n    // Update password with correct hash\n    $newHash = password_hash($testPassword, PASSWORD_DEFAULT);\n    echo \"New hash: $newHash\\n\";\n    \n    $updateStmt = $db->prepare(\"UPDATE users SET password = ? WHERE id = ?\");\n    $updateStmt->execute([$newHash, $user['id']]);\n    echo \"Password updated for admin user\\n\";\n    \n    // Do the same for other demo users\n    $demoUsers = [\n        ['creator@videohub.com', 'creator123'],\n        ['viewer@videohub.com', 'viewer123']\n    ];\n    \n    foreach ($demoUsers as $demo) {\n        $newHash = password_hash($demo[1], PASSWORD_DEFAULT);\n        $updateStmt = $db->prepare(\"UPDATE users SET password = ? WHERE email = ?\");\n        $updateStmt->execute([$newHash, $demo[0]]);\n        echo \"Password updated for {$demo[0]}\\n\";\n    }\n} else {\n    echo \"Admin user not found!\\n\";\n}\n?>","size_bytes":1494},"assets/css/styles.css":{"content":"/* VideoHub - Main Styles */\n@import url('app.css');\n\n/* Additional global styles */\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n.bg-gradient-primary {\n    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);\n}\n\n.min-vh-75 {\n    min-height: 75vh;\n}\n\n.demo-card:hover {\n    box-shadow: 0 8px 25px rgba(0,0,0,0.1) !important;\n}\n\n.cursor-pointer {\n    cursor: pointer;\n}\n\n.navbar-brand:hover {\n    transform: scale(1.05);\n    transition: transform 0.2s ease;\n}","size_bytes":526},"assets/js/auth-manager.js":{"content":"/**\n * VideoHub Authentication Manager\n * Centralized, bulletproof authentication system\n */\n\nclass AuthManager {\n    constructor() {\n        this.isInitialized = false;\n        this.currentUser = null;\n        this.authToken = null;\n        this.validationPromise = null;\n        this.retryCount = 0;\n        this.maxRetries = 3;\n        this.init();\n    }\n\n    async init() {\n        if (this.isInitialized) {\n            console.log('AuthManager already initialized');\n            return;\n        }\n\n        this.isInitialized = true;\n        console.log('AuthManager initializing...');\n\n        // Load stored authentication state\n        this.loadStoredAuth();\n        \n        // Start authentication check\n        //await this.checkAuthentication();\n        \n        // Setup periodic validation\n        //this.setupPeriodicValidation();\n        \n        // Setup logout handlers\n         this.setupLogoutHandlers();\n        \n        // Handle browser back/forward\n        // this.setupBrowserHandlers();\n        \n        console.log('AuthManager initialized successfully');\n    }\n\n    loadStoredAuth() {\n        // Get user session from storage\n        const userSession = this.getUserSession();\n        const authToken = this.getAuthToken();\n        \n        if (userSession && authToken) {\n            this.currentUser = userSession;\n            this.authToken = authToken;\n            console.log('Loaded stored auth for user:', userSession.userType);\n        }\n    }\n\n    async checkAuthentication() {\n        const currentPath = window.location.pathname;\n        const isAuthPage = this.isAuthenticationPage(currentPath);\n        const isProtectedPage = this.isProtectedPage(currentPath);\n\n        console.log('Checking authentication - Path:', currentPath, 'Protected:', isProtectedPage, 'Auth Page:', isAuthPage);\n\n        // Silent verification for protected pages - no visual loader\n\n        try {\n            // Validate current session\n            const isValid = await this.validateSession();\n            \n            if (isValid && this.currentUser) {\n                console.log('Authentication valid for user:', this.currentUser.userType);\n                \n                if (isAuthPage) {\n                    // Redirect authenticated users away from auth pages\n                    this.redirectToUserDashboard(this.currentUser.userType);\n                    return;\n                }\n                \n                if (isProtectedPage) {\n                    // Check role-based access\n                    const requiredRole = this.getRequiredRole(currentPath);\n                    if (requiredRole && this.currentUser.userType !== requiredRole) {\n                        console.log(`Role mismatch: required ${requiredRole}, user has ${this.currentUser.userType}`);\n                        this.redirectToUserDashboard(this.currentUser.userType);\n                        return;\n                    }\n                }\n                \n                // Authentication successful - allow access\n                return;\n            }\n            \n            // Authentication failed\n            if (isProtectedPage) {\n                console.log('Authentication failed, redirecting to login');\n                this.clearAuth();\n                this.redirectToLogin();\n                return;\n            }\n            \n            // Not protected page, allow access\n            \n        } catch (error) {\n            console.error('Authentication check failed:', error);\n            \n            if (isProtectedPage) {\n                // On error, clear auth and redirect to login\n                this.clearAuth();\n                this.redirectToLogin();\n                return;\n            }\n            \n            // Silent error handling - no visual feedback\n        }\n    }\n\n    async validateSession() {\n        // Return cached validation if in progress\n        if (this.validationPromise) {\n            return this.validationPromise;\n        }\n\n        if (!this.currentUser || !this.authToken) {\n            console.log('No user session or token available');\n            return false;\n        }\n\n        this.validationPromise = this.performValidation();\n        const result = await this.validationPromise;\n        this.validationPromise = null;\n        \n        return result;\n    }\n\n    async performValidation() {\n        try {\n            // Wait for API service with timeout\n            await this.waitForAPIService();\n            \n            // Make validation request\n            const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n            const response = await this.makeAuthRequest(`${apiUrl}/auth/verify`);\n            \n            if (response.success && response.data && response.data.user) {\n                // Update user data with fresh info\n                const userData = response.data.user;\n                this.updateUserData({\n                    id: userData.id,\n                    name: userData.name,\n                    email: userData.email,\n                    userType: userData.role\n                });\n                \n                this.retryCount = 0; // Reset retry count on success\n                console.log('Session validation successful');\n                return true;\n            }\n            \n            console.log('Session validation failed:', response.message);\n            return false;\n            \n        } catch (error) {\n            console.error('Session validation error:', error);\n            \n            // Retry logic for network errors\n            if (this.retryCount < this.maxRetries && this.isNetworkError(error)) {\n                this.retryCount++;\n                console.log(`Retrying validation (${this.retryCount}/${this.maxRetries})`);\n                await this.delay(1000 * this.retryCount); // Exponential backoff\n                return this.performValidation();\n            }\n            \n            return false;\n        }\n    }\n\n    async makeAuthRequest(endpoint) {\n        const response = await fetch(endpoint, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.authToken}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        return response.json();\n    }\n\n    setAuthentication(userData, token, rememberMe = false) {\n        console.log('Setting authentication for user:', userData.userType);\n        \n        this.currentUser = userData;\n        this.authToken = token;\n        \n        // Store in appropriate storage based on remember me\n        this.storeUserSession(userData, rememberMe);\n        this.storeAuthToken(token, rememberMe);\n        \n        // Sync with API service if available\n        if (window.apiService && window.apiService.setAuthToken) {\n            window.apiService.setAuthToken(token, rememberMe);\n        }\n    }\n\n    clearAuth() {\n        console.log('Clearing authentication');\n        \n        this.currentUser = null;\n        this.authToken = null;\n        this.retryCount = 0;\n        \n        // Clear all storage\n        localStorage.removeItem('userSession');\n        localStorage.removeItem('authToken');\n        sessionStorage.removeItem('userSession');\n        sessionStorage.removeItem('authToken');\n        \n        // Clear API service token\n        if (window.apiService && window.apiService.clearAuthToken) {\n            window.apiService.clearAuthToken();\n        }\n    }\n\n    async logout() {\n        console.log('Logging out user');\n        \n        try {\n            // Attempt to call logout endpoint\n            if (this.authToken) {\n                const apiUrl = window.videoHubConfig ? window.videoHubConfig.getApiUrl() : '/api';\n                await this.makeAuthRequest(`${apiUrl}/api/auth/logout`);\n            }\n        } catch (error) {\n            console.error('Logout API call failed:', error);\n        } finally {\n            // Always clear local auth regardless of API response\n            this.clearAuth();\n            this.redirectToLogin();\n        }\n    }\n\n    // Helper Methods\n    isAuthenticationPage(path) {\n        return path.includes('/auth/') || path.endsWith('login.html') || path.endsWith('signup.html');\n    }\n\n    isProtectedPage(path) {\n        return path.includes('/admin/') || path.includes('/creator/') || path.includes('/viewer/');\n    }\n\n    getRequiredRole(path) {\n        if (path.includes('/admin/')) return 'admin';\n        if (path.includes('/creator/')) return 'creator';\n        if (path.includes('/viewer/')) return 'viewer';\n        return null;\n    }\n\n    getUserSession() {\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n        const session = localSession || sessionSession;\n        return session ? JSON.parse(session) : null;\n    }\n\n    getAuthToken() {\n        return localStorage.getItem('authToken') || sessionStorage.getItem('authToken');\n    }\n\n    storeUserSession(userData, rememberMe) {\n        const sessionData = JSON.stringify(userData);\n        if (rememberMe) {\n            localStorage.setItem('userSession', sessionData);\n            sessionStorage.removeItem('userSession');\n        } else {\n            sessionStorage.setItem('userSession', sessionData);\n            localStorage.removeItem('userSession');\n        }\n    }\n\n    storeAuthToken(token, rememberMe) {\n        if (rememberMe) {\n            localStorage.setItem('authToken', token);\n            sessionStorage.removeItem('authToken');\n        } else {\n            sessionStorage.setItem('authToken', token);\n            localStorage.removeItem('authToken');\n        }\n    }\n\n    updateUserData(newData) {\n        if (this.currentUser) {\n            this.currentUser = { ...this.currentUser, ...newData };\n            \n            // Update stored session\n            const existingSession = this.getUserSession();\n            if (existingSession) {\n                const isRemembered = localStorage.getItem('userSession') !== null;\n                this.storeUserSession(this.currentUser, isRemembered);\n            }\n        }\n    }\n\n    redirectToLogin() {\n        const loginUrl = window.videoHubConfig ? \n            window.videoHubConfig.getUrl('/auth/login.html') : \n            '/auth/login.html';\n        window.location.href = loginUrl;\n    }\n\n    redirectToUserDashboard(userType) {\n        const dashboards = {\n            admin: '/admin/dashboard.html',\n            creator: '/creator/dashboard.html',\n            viewer: '/viewer/dashboard.html'\n        };\n        \n        const dashboardUrl = dashboards[userType];\n        if (dashboardUrl) {\n            const url = window.videoHubConfig ? \n                window.videoHubConfig.getUrl(dashboardUrl) : \n                dashboardUrl;\n            window.location.href = url;\n        }\n    }\n\n    showAuthLoader() {\n        // Remove existing loader first\n        this.hideAuthLoader();\n        \n        const loader = document.createElement('div');\n        loader.id = 'auth-loader';\n        loader.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: white;\n            z-index: 9999;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        `;\n        loader.innerHTML = `\n            <div class=\"text-center\">\n                <div class=\"spinner-border text-primary mb-3\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div>Verifying authentication...</div>\n            </div>\n        `;\n        document.body.appendChild(loader);\n    }\n\n    hideAuthLoader() {\n        const loader = document.getElementById('auth-loader');\n        if (loader) {\n            loader.remove();\n        }\n    }\n\n    setupPeriodicValidation() {\n        // Validate every 5 minutes\n        setInterval(() => {\n            if (this.currentUser && this.authToken && this.isProtectedPage(window.location.pathname)) {\n                this.validateSession().then(isValid => {\n                    if (!isValid) {\n                        console.log('Periodic validation failed, auto-logout');\n                        this.performAutoLogout();\n                    }\n                }).catch(error => {\n                    console.error('Periodic validation failed:', error);\n                    this.performAutoLogout();\n                });\n            }\n        }, 5 * 60 * 1000);\n    }\n\n    setupLogoutHandlers() {\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[data-logout]') || e.target.closest('[data-logout]')) {\n                e.preventDefault();\n                this.confirmLogout();\n            }\n        });\n    }\n\n    setupBrowserHandlers() {\n        // Handle page show events (back button)\n        window.addEventListener('pageshow', (event) => {\n            if (event.persisted && this.isProtectedPage(window.location.pathname)) {\n                // Page loaded from cache, re-check auth\n                this.checkAuthentication();\n            }\n        });\n\n        // Handle visibility change\n        document.addEventListener('visibilitychange', () => {\n            if (!document.hidden && this.currentUser && this.isProtectedPage(window.location.pathname)) {\n                // Page became visible, validate session\n                this.validateSession().then(isValid => {\n                    if (!isValid) {\n                        console.log('Visibility validation failed, auto-logout');\n                        this.performAutoLogout();\n                    }\n                }).catch(error => {\n                    console.error('Visibility validation failed:', error);\n                    this.performAutoLogout();\n                });\n            }\n        });\n    }\n\n    confirmLogout() {\n        if (confirm('Are you sure you want to log out?')) {\n            this.logout();\n        }\n    }\n\n    async waitForAPIService() {\n        let retries = 0;\n        const maxRetries = 50;\n        \n        while (retries < maxRetries && !window.apiService) {\n            await this.delay(100);\n            retries++;\n        }\n        \n        if (!window.apiService) {\n            throw new Error('API service not available');\n        }\n    }\n\n    isNetworkError(error) {\n        return error.name === 'TypeError' || \n               error.name === 'AbortError' || \n               error.message.includes('Failed to fetch') ||\n               error.message.includes('Network error');\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Public API for other components\n    getCurrentUser() {\n        return this.currentUser;\n    }\n\n    getToken() {\n        return this.authToken;\n    }\n\n    isAuthenticated() {\n        return !!(this.currentUser && this.authToken);\n    }\n\n    hasRole(role) {\n        return this.currentUser && this.currentUser.userType === role;\n    }\n\n    performAutoLogout() {\n        console.log('Auto-logout triggered due to failed verification');\n        this.clearAuth();\n        this.redirectToLogin();\n    }\n}\n\n// Initialize global auth manager - prevent multiple instances\nif (!window.authManager) {\n    window.authManager = new AuthManager();\n    console.log('Global AuthManager initialized');\n} else {\n    console.log('AuthManager already exists');\n}\n\n// Export for module usage\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = AuthManager;\n}","size_bytes":15705},"assets/css/modal.css":{"content":"\n/* VideoHub - Modal Styles */\n\n/* ===== MODERN SLEEK MODALS ===== */\n.modal-content {\n    border: none !important;\n    border-radius: 20px !important;\n    box-shadow: 0 20px 80px rgba(0, 0, 0, 0.08), 0 10px 30px rgba(0, 0, 0, 0.04) !important;\n    overflow: hidden !important;\n    background: #ffffff !important;\n    backdrop-filter: blur(20px) !important;\n}\n\n.modal-header {\n    background: #ffffff !important;\n    border-bottom: 1px solid #f1f5f9 !important;\n    padding: 2rem 2rem 1.5rem !important;\n    position: relative !important;\n}\n\n.modal-header::before {\n    content: '' !important;\n    position: absolute !important;\n    bottom: 0 !important;\n    left: 2rem !important;\n    right: 2rem !important;\n    height: 1px !important;\n    background: linear-gradient(90deg, transparent, #e2e8f0, transparent) !important;\n}\n\n.modal-title {\n    font-weight: 600 !important;\n    font-size: 1.25rem !important;\n    color: #0f172a !important;\n    margin: 0 !important;\n    letter-spacing: -0.01em !important;\n    line-height: 1.4 !important;\n    display: flex !important;\n    align-items: center !important;\n}\n\n.modal-title i {\n    margin-right: 0.625rem !important;\n    font-size: 1.125rem !important;\n    opacity: 0.7 !important;\n    color: #6366f1 !important;\n}\n\n.modal-body {\n    padding: 1.5rem 2rem 2rem !important;\n    background: #ffffff !important;\n    line-height: 1.6 !important;\n}\n\n.modal-footer {\n    background: #ffffff !important;\n    border-top: 1px solid #f1f5f9 !important;\n    padding: 1.5rem 2rem 2rem !important;\n    display: flex !important;\n    gap: 0.75rem !important;\n    justify-content: flex-end !important;\n    align-items: center !important;\n}\n\n/* THEME COLORED HEADERS */\n.modal-header.bg-primary {\n    background: linear-gradient(135deg, #0d6efd, #0a58ca) !important;\n    border-color: #0d6efd !important;\n    color: #ffffff !important;\n}\n\n.modal-header.bg-success {\n    background: linear-gradient(135deg, #198754, #146c43) !important;\n    border-color: #198754 !important;\n    color: #ffffff !important;\n}\n\n.modal-header.bg-warning {\n    background: linear-gradient(135deg, #ffc107, #ffca2c) !important;\n    border-color: #ffc107 !important;\n    color: #000000 !important;\n}\n\n.modal-header.bg-danger {\n    background: linear-gradient(135deg, #dc3545, #b02a37) !important;\n    border-color: #dc3545 !important;\n    color: #ffffff !important;\n}\n\n.modal-header.bg-info {\n    background: linear-gradient(135deg, #0dcaf0, #3dd5f3) !important;\n    border-color: #0dcaf0 !important;\n    color: #000000 !important;\n}\n\n/* MODERN MODAL TYPOGRAPHY & FORMS */\n.modal .form-label {\n    font-weight: 600 !important;\n    color: #374151 !important;\n    margin-bottom: 0.5rem !important;\n    font-size: 0.875rem !important;\n    letter-spacing: 0.005em !important;\n}\n\n.modal .form-control,\n.modal .form-select {\n    border: 1px solid #d1d5db !important;\n    border-radius: 8px !important;\n    padding: 0.75rem 1rem !important;\n    font-size: 0.875rem !important;\n    font-weight: 400 !important;\n    transition: all 0.2s ease !important;\n    background-color: #ffffff !important;\n    line-height: 1.5 !important;\n    color: #374151 !important;\n}\n\n.modal .form-control:focus,\n.modal .form-select:focus {\n    border-color: #6366f1 !important;\n    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1) !important;\n    outline: none !important;\n}\n\n.modal .input-group-text {\n    background: #f9fafb !important;\n    border: 1px solid #d1d5db !important;\n    color: #6b7280 !important;\n    border-radius: 8px !important;\n    font-weight: 400 !important;\n    padding: 0.75rem 1rem !important;\n}\n\n.modal p {\n    font-size: 0.875rem !important;\n    line-height: 1.6 !important;\n    color: #6b7280 !important;\n    margin-bottom: 1rem !important;\n}\n\n.modal h6 {\n    font-weight: 600 !important;\n    font-size: 1rem !important;\n    color: #374151 !important;\n    margin-bottom: 0.5rem !important;\n    letter-spacing: 0 !important;\n}\n\n.modal .row {\n    margin-bottom: 1rem !important;\n}\n\n.modal .mb-3 {\n    margin-bottom: 1rem !important;\n}\n\n.modal .mb-4 {\n    margin-bottom: 1.5rem !important;\n}\n\n.modal hr {\n    margin: 1.5rem 0 !important;\n    border: none !important;\n    height: 1px !important;\n    background: #f1f5f9 !important;\n}\n\n.modal .btn {\n    padding: 0.625rem 1.5rem !important;\n    font-weight: 500 !important;\n    border-radius: 8px !important;\n    font-size: 0.875rem !important;\n    border: 1px solid transparent !important;\n    transition: all 0.15s ease !important;\n    letter-spacing: 0 !important;\n    min-width: 80px !important;\n    position: relative !important;\n    overflow: hidden !important;\n}\n\n.modal .btn:hover {\n    transform: none !important;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;\n}\n\n.modal .btn:active {\n    transform: translateY(1px) !important;\n}\n\n.modal .btn::before {\n    display: none !important;\n}\n\n/* MODERN CARD & CONTENT STYLING */\n.modal .alert {\n    border-radius: 12px !important;\n    border: none !important;\n    padding: 1.25rem 1.5rem !important;\n    font-size: 0.9rem !important;\n    font-weight: 500 !important;\n    margin-bottom: 1.5rem !important;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05) !important;\n}\n\n.modal .card {\n    border: none !important;\n    border-radius: 12px !important;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05) !important;\n    margin-bottom: 1.25rem !important;\n    overflow: hidden !important;\n}\n\n.modal .card-body {\n    padding: 1.5rem !important;\n}\n\n.modal .badge {\n    font-size: 0.8rem !important;\n    font-weight: 600 !important;\n    padding: 0.5rem 1rem !important;\n    border-radius: 8px !important;\n    letter-spacing: 0.025em !important;\n}\n\n.modal .row {\n    margin-bottom: 1.25rem !important;\n}\n\n.modal .col-md-6:not(:last-child) {\n    margin-bottom: 1rem !important;\n}\n\n.modal hr {\n    margin: 2rem 0 !important;\n    border: none !important;\n    height: 1px !important;\n    background: linear-gradient(90deg, transparent, #e2e8f0, transparent) !important;\n}\n\n/* RESPONSIVE SPACING */\n@media (max-width: 768px) {\n    .modal-body {\n        padding: 1.5rem 1.25rem !important;\n    }\n    \n    .modal-header {\n        padding: 1.5rem 1.25rem 1rem !important;\n    }\n    \n    .modal-footer {\n        padding: 1rem 1.25rem 1.5rem !important;\n        flex-direction: column !important;\n    }\n    \n    .modal .btn {\n        width: 100% !important;\n        margin-bottom: 0.5rem !important;\n    }\n    \n    .modal .btn:last-child {\n        margin-bottom: 0 !important;\n    }\n}\n\n.modal .alert-light {\n    background-color: #f8fafc !important;\n    color: #475569 !important;\n    border: 1px solid #e2e8f0 !important;\n}\n\n.modal .alert-warning {\n    background-color: #fef3c7 !important;\n    color: #92400e !important;\n    border: 1px solid #fcd34d !important;\n}\n\n/* CLEAN UPLOAD AND INTERACTION AREAS */\n.upload-area {\n    transition: all 0.2s ease !important;\n    cursor: pointer !important;\n    border-radius: 12px !important;\n    border: 2px dashed #d1d5db !important;\n    background-color: #f9fafb !important;\n    padding: 3rem 2rem !important;\n    text-align: center !important;\n}\n\n.upload-area:hover {\n    background-color: #f0f9ff !important;\n    border-color: #6366f1 !important;\n}\n\n.modal .alert {\n    border: none !important;\n    border-radius: 8px !important;\n    padding: 1rem 1.25rem !important;\n    font-size: 0.875rem !important;\n    font-weight: 400 !important;\n    margin-bottom: 1.5rem !important;\n    background-color: #f8fafc !important;\n    color: #475569 !important;\n    border-left: 4px solid #e2e8f0 !important;\n}\n\n.modal .alert-warning {\n    background-color: #fffbeb !important;\n    color: #92400e !important;\n    border-left-color: #f59e0b !important;\n}\n\n.modal .alert-info {\n    background-color: #eff6ff !important;\n    color: #1e40af !important;\n    border-left-color: #3b82f6 !important;\n}\n\n.modal .alert-success {\n    background-color: #f0fdf4 !important;\n    color: #166534 !important;\n    border-left-color: #10b981 !important;\n}\n\n.modal .alert-danger {\n    background-color: #fef2f2 !important;\n    color: #991b1b !important;\n    border-left-color: #ef4444 !important;\n}\n\n/* MODAL BUTTONS STYLING */\n.modal .btn-primary {\n    background: #6366f1 !important;\n    color: #ffffff !important;\n    border-color: #6366f1 !important;\n}\n\n.modal .btn-primary:hover {\n    background: #5b5cf4 !important;\n    border-color: #5b5cf4 !important;\n}\n\n.modal .btn-success {\n    background: #10b981 !important;\n    color: #ffffff !important;\n    border-color: #10b981 !important;\n}\n\n.modal .btn-success:hover {\n    background: #059669 !important;\n    border-color: #059669 !important;\n}\n\n.modal .btn-warning {\n    background: #f59e0b !important;\n    color: #ffffff !important;\n    border-color: #f59e0b !important;\n}\n\n.modal .btn-warning:hover {\n    background: #d97706 !important;\n    border-color: #d97706 !important;\n}\n\n.modal .btn-danger {\n    background: #ef4444 !important;\n    color: #ffffff !important;\n    border-color: #ef4444 !important;\n}\n\n.modal .btn-danger:hover {\n    background: #dc2626 !important;\n    border-color: #dc2626 !important;\n}\n\n.modal .btn-secondary {\n    background: #f3f4f6 !important;\n    color: #374151 !important;\n    border: 1px solid #d1d5db !important;\n}\n\n.modal .btn-secondary:hover {\n    background: #e5e7eb !important;\n    border-color: #d1d5db !important;\n}\n\n.modal .btn-outline-secondary {\n    background: transparent !important;\n    color: #6b7280 !important;\n    border: 1px solid #d1d5db !important;\n}\n\n.modal .btn-outline-secondary:hover {\n    background: #f9fafb !important;\n    color: #374151 !important;\n    border-color: #d1d5db !important;\n}\n\n/* Modal sizing for different screens */\n@media (max-width: 768px) {\n    .modal-xl {\n        max-width: 95% !important;\n    }\n    \n    .modal-dialog {\n        margin: 0.5rem !important;\n    }\n}\n\n/* Video player modal enhancements */\n.modal-fullscreen .modal-content {\n    border-radius: 0 !important;\n}\n\n.modal-fullscreen .modal-body {\n    padding: 0 !important;\n    background-color: #000 !important;\n}\n\n/* GRADIENT BACKGROUNDS FOR CARDS */\n.bg-gradient-primary {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;\n}\n\n.bg-gradient-success {\n    background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%) !important;\n}\n\n.bg-gradient-warning {\n    background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%) !important;\n}\n\n.bg-gradient-info {\n    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%) !important;\n}\n\n.bg-gradient-danger {\n    background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%) !important;\n}\n\n/* UTILITY CLASSES */\n.tracking-wide {\n    letter-spacing: 0.05em !important;\n}\n\n.icon-wrapper {\n    width: 32px !important;\n    height: 32px !important;\n    display: flex !important;\n    align-items: center !important;\n    justify-content: center !important;\n}\n\n.icon-circle {\n    transition: all 0.3s ease !important;\n}\n\n.stat-card:hover .icon-circle {\n    transform: scale(1.1) !important;\n}\n\n.info-card {\n    transition: all 0.3s ease !important;\n    cursor: default !important;\n}\n\n.info-card:hover {\n    transform: translateY(-2px) !important;\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;\n}\n\n/* MODAL BACKDROP */\n.modal-backdrop {\n    background-color: rgba(0, 0, 0, 0.6) !important;\n    backdrop-filter: blur(4px) !important;\n}\n\n/* Loading state for buttons in modals */\n.btn-loading {\n    position: relative !important;\n    color: transparent !important;\n}\n\n.btn-loading:after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 50%;\n    left: 50%;\n    margin-left: -8px;\n    margin-top: -8px;\n    border: 2px solid transparent;\n    border-top-color: #ffffff;\n    border-radius: 50%;\n    animation: button-loading-spinner 0.6s ease infinite;\n}\n\n@keyframes button-loading-spinner {\n    from {\n        transform: rotate(0turn);\n    }\n    to {\n        transform: rotate(1turn);\n    }\n}\n","size_bytes":11894},"assets/js/change-password.js":{"content":"/**\n * Comprehensive Change Password Manager\n * Handles password changes for all user types with proper modal validation,\n * error handling, and smooth UI interactions\n */\nclass ChangePasswordManager {\n    constructor() {\n        this.modalId = '#changePasswordModal';\n        this.formId = '#changePasswordForm';\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.setupValidation();\n    }\n\n    bindEvents() {\n        // Form submission\n        document.addEventListener('submit', (e) => {\n            if (e.target.matches(this.formId)) {\n                this.handlePasswordChange(e);\n            }\n        });\n\n        // Real-time validation\n        document.addEventListener('input', (e) => {\n            if (e.target.closest(this.formId)) {\n                this.validateField(e.target);\n            }\n        });\n\n        // Modal reset on close\n        document.addEventListener('hidden.bs.modal', (e) => {\n            if (e.target.matches(this.modalId)) {\n                this.resetForm();\n            }\n        });\n\n        // Password visibility toggle\n        document.addEventListener('click', (e) => {\n            if (e.target.closest('.password-toggle')) {\n                this.togglePasswordVisibility(e.target.closest('.password-toggle'));\n            }\n        });\n    }\n\n    setupValidation() {\n        // Password strength requirements\n        this.passwordRequirements = {\n            minLength: 8,\n            hasUppercase: /[A-Z]/,\n            hasLowercase: /[a-z]/,\n            hasNumbers: /\\d/,\n            hasSpecialChars: /[!@#$%^&*(),.?\":{}|<>]/\n        };\n    }\n\n    async handlePasswordChange(e) {\n        e.preventDefault();\n        \n        const form = e.target;\n        const formData = this.getFormData(form);\n        \n        // Clear previous validation states\n        this.clearValidation(form);\n\n        // Validate form\n        const validation = this.validateForm(formData);\n        if (!validation.isValid) {\n            this.displayValidationErrors(form, validation.errors);\n            return;\n        }\n\n        // Show loading state\n        this.setLoadingState(form, true);\n\n        try {\n            const userSession = this.getUserSession();\n            if (!userSession?.id) {\n                throw new Error('User session not found');\n            }\n\n            const response = await window.apiService.post('/api/auth/change-password', {\n                user_id: userSession.id,\n                current_password: formData.currentPassword,\n                new_password: formData.newPassword\n            });\n\n            if (response.success) {\n                this.handleSuccess(form);\n            } else {\n                this.handleError(form, response.message || 'Failed to update password');\n            }\n\n        } catch (error) {\n            console.error('Password change error:', error);\n            this.handleError(form, 'An error occurred while updating your password. Please try again.');\n        } finally {\n            this.setLoadingState(form, false);\n        }\n    }\n\n    getFormData(form) {\n        return {\n            currentPassword: form.querySelector('#currentPassword')?.value || '',\n            newPassword: form.querySelector('#newPassword')?.value || '',\n            confirmPassword: form.querySelector('#confirmPassword')?.value || ''\n        };\n    }\n\n    validateForm(data) {\n        const errors = {};\n        let isValid = true;\n\n        // Current password validation\n        if (!data.currentPassword) {\n            errors.currentPassword = 'Current password is required';\n            isValid = false;\n        }\n\n        // New password validation\n        if (!data.newPassword) {\n            errors.newPassword = 'New password is required';\n            isValid = false;\n        } else {\n            const passwordValidation = this.validatePasswordStrength(data.newPassword);\n            if (!passwordValidation.isValid) {\n                errors.newPassword = passwordValidation.message;\n                isValid = false;\n            }\n        }\n\n        // Confirm password validation\n        if (!data.confirmPassword) {\n            errors.confirmPassword = 'Please confirm your new password';\n            isValid = false;\n        } else if (data.newPassword !== data.confirmPassword) {\n            errors.confirmPassword = 'Passwords do not match';\n            isValid = false;\n        }\n\n        // Check if new password is different from current\n        if (data.currentPassword && data.newPassword && data.currentPassword === data.newPassword) {\n            errors.newPassword = 'New password must be different from current password';\n            isValid = false;\n        }\n\n        return { isValid, errors };\n    }\n\n    validatePasswordStrength(password) {\n        const req = this.passwordRequirements;\n        \n        if (password.length < req.minLength) {\n            return { \n                isValid: false, \n                message: `Password must be at least ${req.minLength} characters long` \n            };\n        }\n\n        if (!req.hasUppercase.test(password)) {\n            return { \n                isValid: false, \n                message: 'Password must contain at least one uppercase letter' \n            };\n        }\n\n        if (!req.hasLowercase.test(password)) {\n            return { \n                isValid: false, \n                message: 'Password must contain at least one lowercase letter' \n            };\n        }\n\n        if (!req.hasNumbers.test(password)) {\n            return { \n                isValid: false, \n                message: 'Password must contain at least one number' \n            };\n        }\n\n        if (!req.hasSpecialChars.test(password)) {\n            return { \n                isValid: false, \n                message: 'Password must contain at least one special character' \n            };\n        }\n\n        return { isValid: true, message: '' };\n    }\n\n    validateField(field) {\n        const form = field.closest('form');\n        const formData = this.getFormData(form);\n        \n        // Clear previous validation\n        this.clearFieldValidation(field);\n        \n        let isValid = true;\n        let message = '';\n\n        switch (field.id) {\n            case 'currentPassword':\n                if (!formData.currentPassword) {\n                    isValid = false;\n                    message = 'Current password is required';\n                }\n                break;\n                \n            case 'newPassword':\n                if (formData.newPassword) {\n                    const validation = this.validatePasswordStrength(formData.newPassword);\n                    if (!validation.isValid) {\n                        isValid = false;\n                        message = validation.message;\n                    }\n                    \n                    // Also validate confirm password if it has a value\n                    const confirmField = form.querySelector('#confirmPassword');\n                    if (formData.confirmPassword) {\n                        this.validateField(confirmField);\n                    }\n                }\n                break;\n                \n            case 'confirmPassword':\n                if (formData.confirmPassword) {\n                    if (formData.newPassword !== formData.confirmPassword) {\n                        isValid = false;\n                        message = 'Passwords do not match';\n                    }\n                }\n                break;\n        }\n\n        if (!isValid) {\n            this.setFieldError(field, message);\n        } else {\n            this.setFieldValid(field);\n        }\n\n        return isValid;\n    }\n\n    displayValidationErrors(form, errors) {\n        Object.keys(errors).forEach(fieldName => {\n            const field = form.querySelector(`#${fieldName}`);\n            if (field) {\n                this.setFieldError(field, errors[fieldName]);\n            }\n        });\n\n        // Focus on first error field\n        const firstErrorField = form.querySelector('.is-invalid');\n        if (firstErrorField) {\n            firstErrorField.focus();\n        }\n    }\n\n    setFieldError(field, message) {\n        field.classList.remove('is-valid');\n        field.classList.add('is-invalid');\n        \n        const feedback = field.parentNode.querySelector('.invalid-feedback') || \n                        field.nextElementSibling?.classList.contains('invalid-feedback') ? \n                        field.nextElementSibling : null;\n        \n        if (feedback) {\n            feedback.textContent = message;\n        }\n    }\n\n    setFieldValid(field) {\n        field.classList.remove('is-invalid');\n        field.classList.add('is-valid');\n    }\n\n    clearFieldValidation(field) {\n        field.classList.remove('is-invalid', 'is-valid');\n    }\n\n    clearValidation(form) {\n        form.querySelectorAll('.is-invalid, .is-valid').forEach(field => {\n            field.classList.remove('is-invalid', 'is-valid');\n        });\n        \n        form.querySelectorAll('.invalid-feedback').forEach(feedback => {\n            feedback.textContent = '';\n        });\n    }\n\n    setLoadingState(form, isLoading) {\n        const submitBtn = form.querySelector('button[type=\"submit\"]') || \n                         document.querySelector('button[form=\"changePasswordForm\"]');\n        const cancelBtn = form.querySelector('button[data-bs-dismiss=\"modal\"]') || \n                         document.querySelector('#changePasswordModal button[data-bs-dismiss=\"modal\"]');\n        \n        if (isLoading) {\n            if (submitBtn) {\n                submitBtn.disabled = true;\n                submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Updating Password...';\n            }\n            if (cancelBtn) {\n                cancelBtn.disabled = true;\n            }\n            \n            // Disable form fields\n            form.querySelectorAll('input').forEach(input => {\n                input.disabled = true;\n            });\n        } else {\n            if (submitBtn) {\n                submitBtn.disabled = false;\n                submitBtn.innerHTML = '<i class=\"fas fa-key me-2\"></i>Update Password';\n            }\n            if (cancelBtn) {\n                cancelBtn.disabled = false;\n            }\n            \n            // Enable form fields\n            form.querySelectorAll('input').forEach(input => {\n                input.disabled = false;\n            });\n        }\n    }\n\n    handleSuccess(form) {\n        // Reset form\n        this.resetForm();\n        \n        // Close modal\n        const modal = bootstrap.Modal.getInstance(document.querySelector(this.modalId));\n        if (modal) {\n            modal.hide();\n        }\n        \n        // Show success message\n        this.showSuccessMessage('Password updated successfully!');\n    }\n\n    handleError(form, message) {\n        // Show error alert in modal\n        this.showModalError(form, message);\n    }\n\n    showModalError(form, message) {\n        // Remove existing alerts\n        const existingAlert = form.parentNode.querySelector('.alert');\n        if (existingAlert) {\n            existingAlert.remove();\n        }\n        \n        // Create new alert\n        const alertDiv = document.createElement('div');\n        alertDiv.className = 'alert alert-danger alert-dismissible fade show mb-3';\n        alertDiv.innerHTML = `\n            <i class=\"fas fa-exclamation-triangle me-2\"></i>\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        // Insert before form\n        form.parentNode.insertBefore(alertDiv, form);\n        \n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            if (alertDiv.parentNode) {\n                alertDiv.remove();\n            }\n        }, 5000);\n    }\n\n    showSuccessMessage(message) {\n        // Create success alert in main content area\n        const alertDiv = document.createElement('div');\n        alertDiv.className = 'alert alert-success alert-dismissible fade show';\n        alertDiv.innerHTML = `\n            <i class=\"fas fa-check-circle me-2\"></i>\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        const container = document.querySelector('main .container-fluid') || document.querySelector('main');\n        if (container) {\n            container.insertBefore(alertDiv, container.firstChild);\n            \n            // Auto-remove after 5 seconds\n            setTimeout(() => {\n                if (alertDiv.parentNode) {\n                    alertDiv.remove();\n                }\n            }, 5000);\n        }\n    }\n\n    resetForm() {\n        const form = document.querySelector(this.formId);\n        if (form) {\n            form.reset();\n            this.clearValidation(form);\n            \n            // Reset any error alerts in modal\n            const modalAlerts = form.parentNode.querySelectorAll('.alert');\n            modalAlerts.forEach(alert => alert.remove());\n        }\n    }\n\n    togglePasswordVisibility(button) {\n        const input = button.parentNode.querySelector('input[type=\"password\"], input[type=\"text\"]');\n        const icon = button.querySelector('i');\n        \n        if (input.type === 'password') {\n            input.type = 'text';\n            icon.className = 'fas fa-eye-slash';\n        } else {\n            input.type = 'password';\n            icon.className = 'fas fa-eye';\n        }\n    }\n\n    getUserSession() {\n        try {\n            const session = localStorage.getItem('userSession') || sessionStorage.getItem('userSession');\n            return session ? JSON.parse(session) : null;\n        } catch (error) {\n            console.error('Error parsing user session:', error);\n            return null;\n        }\n    }\n}\n\n// Initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.changePasswordManager = new ChangePasswordManager();\n});","size_bytes":13992},"assets/js/global-functions.js":{"content":"/**\n * Global Functions for VideoHub\n * Contains global utility functions accessible from all pages\n */\n\n// Global function to navigate to user details page\nfunction viewUserDetailsPage(userId) {\n    if (userId) {\n        window.location.href = `user-detail.html?id=${userId}`;\n    } else {\n        console.error('User ID is required to view user details');\n    }\n}\n\n// Global function to watch video in modal\nfunction watchVideo(youtubeId, title = '') {\n    if (!youtubeId) {\n        console.error('YouTube ID is required to watch video');\n        return;\n    }\n    \n    // Create or show modal for video viewing\n    let modal = document.getElementById('videoModal');\n    if (!modal) {\n        // Create modal if it doesn't exist\n        modal = document.createElement('div');\n        modal.id = 'videoModal';\n        modal.className = 'modal fade';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-lg\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${title}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body p-0\">\n                        <div class=\"ratio ratio-16x9\">\n                            <iframe id=\"videoFrame\" src=\"\" frameborder=\"0\" allowfullscreen></iframe>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        document.body.appendChild(modal);\n    }\n    \n    // Update video source\n    const iframe = modal.querySelector('#videoFrame');\n    iframe.src = `https://www.youtube.com/embed/${youtubeId}?autoplay=1`;\n    \n    // Update title\n    const modalTitle = modal.querySelector('.modal-title');\n    modalTitle.textContent = title || 'Video Player';\n    \n    // Show modal\n    const bootstrapModal = new bootstrap.Modal(modal);\n    bootstrapModal.show();\n    \n    // Clear iframe when modal is hidden\n    modal.addEventListener('hidden.bs.modal', function() {\n        iframe.src = '';\n    });\n}\n\n// Global function to export users\nfunction exportUsers() {\n    if (window.adminManager && typeof window.adminManager.exportUsers === 'function') {\n        window.adminManager.exportUsers();\n    } else {\n        console.warn('Export function not available');\n    }\n}\n\n// Global function to show confirmation modal\nfunction showGlobalConfirmModal(message, onConfirm, title = 'Confirm Action') {\n    let modal = document.getElementById('globalConfirmModal');\n    if (!modal) {\n        // Create modal if it doesn't exist\n        modal = document.createElement('div');\n        modal.id = 'globalConfirmModal';\n        modal.className = 'modal fade';\n        modal.innerHTML = `\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${title}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <p id=\"globalConfirmMessage\">${message}</p>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                        <button type=\"button\" class=\"btn btn-primary\" id=\"globalConfirmBtn\">Confirm</button>\n                    </div>\n                </div>\n            </div>\n        `;\n        document.body.appendChild(modal);\n    }\n    \n    // Update message and title\n    modal.querySelector('#globalConfirmMessage').textContent = message;\n    modal.querySelector('.modal-title').textContent = title;\n    \n    // Set up confirm button\n    const confirmBtn = modal.querySelector('#globalConfirmBtn');\n    confirmBtn.onclick = function() {\n        const bootstrapModal = bootstrap.Modal.getInstance(modal);\n        bootstrapModal.hide();\n        if (typeof onConfirm === 'function') {\n            onConfirm();\n        }\n    };\n    \n    // Show modal\n    const bootstrapModal = new bootstrap.Modal(modal);\n    bootstrapModal.show();\n}","size_bytes":4243},"assets/js/notifications.js":{"content":"/**\n * VideoHub Notification System\n * Provides toast notifications, loading states, and form validation\n */\n\nclass NotificationManager {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.createToastContainer();\n        this.setupGlobalErrorHandling();\n    }\n\n    createToastContainer() {\n        // Check if toast container already exists\n        if (document.getElementById('toast-container')) return;\n\n        const container = document.createElement('div');\n        container.id = 'toast-container';\n        container.className = 'toast-container position-fixed top-0 end-0 p-3';\n        container.style.zIndex = '9999';\n        document.body.appendChild(container);\n    }\n\n    showToast(message, type = 'info', duration = 4000) {\n        const toastContainer = document.getElementById('toast-container');\n        if (!toastContainer) return;\n\n        // Create toast element\n        const toastId = 'toast-' + Date.now();\n        const toast = document.createElement('div');\n        toast.id = toastId;\n        toast.className = `toast align-items-center border-0`;\n        toast.setAttribute('role', 'alert');\n        toast.setAttribute('aria-live', 'assertive');\n        toast.setAttribute('aria-atomic', 'true');\n\n        // Set toast styling based on type\n        const typeClasses = {\n            success: 'text-bg-success',\n            error: 'text-bg-danger',\n            warning: 'text-bg-warning',\n            info: 'text-bg-primary'\n        };\n        toast.classList.add(typeClasses[type] || typeClasses.info);\n\n        // Set toast content\n        toast.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body fw-medium\">\n                    <i class=\"fas ${this.getIconForType(type)} me-2\"></i>\n                    ${message}\n                </div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n            </div>\n        `;\n\n        // Add toast to container\n        toastContainer.appendChild(toast);\n\n        // Initialize and show toast\n        const bsToast = new bootstrap.Toast(toast, {\n            autohide: duration > 0,\n            delay: duration\n        });\n        \n        bsToast.show();\n\n        // Remove toast from DOM after it's hidden\n        toast.addEventListener('hidden.bs.toast', () => {\n            toast.remove();\n        });\n\n        return toastId;\n    }\n\n    getIconForType(type) {\n        const icons = {\n            success: 'fa-check-circle',\n            error: 'fa-exclamation-triangle',\n            warning: 'fa-exclamation-circle',\n            info: 'fa-info-circle'\n        };\n        return icons[type] || icons.info;\n    }\n\n    showSuccess(message) {\n        return this.showToast(message, 'success');\n    }\n\n    showError(message) {\n        return this.showToast(message, 'error', 6000);\n    }\n\n    showWarning(message) {\n        return this.showToast(message, 'warning', 5000);\n    }\n\n    showInfo(message) {\n        return this.showToast(message, 'info');\n    }\n\n    setupGlobalErrorHandling() {\n        // Handle unhandled promise rejections\n        window.addEventListener('unhandledrejection', (event) => {\n            console.error('Unhandled promise rejection:', event.reason);\n            this.showError('An unexpected error occurred. Please try again.');\n        });\n\n        // Handle JavaScript errors\n        window.addEventListener('error', (event) => {\n            console.error('JavaScript error:', event.error);\n            // Only show user-friendly errors for non-development environments\n            if (!window.location.hostname.includes('localhost') && !window.location.hostname.includes('127.0.0.1')) {\n                this.showError('Something went wrong. Please refresh the page and try again.');\n            }\n        });\n    }\n}\n\n/**\n * Button Loading Manager\n * Handles button loading states with spinners\n */\nclass ButtonLoader {\n    static setLoading(button, loadingText = 'Processing...') {\n        if (!button) return;\n\n        // Store original content and state\n        button.dataset.originalText = button.innerHTML;\n        button.dataset.originalDisabled = button.disabled;\n\n        // Set loading state\n        button.disabled = true;\n        button.innerHTML = `<i class=\"fas fa-spinner fa-spin me-2\"></i>${loadingText}`;\n    }\n\n    static removeLoading(button) {\n        if (!button) return;\n\n        // Restore original content and state\n        if (button.dataset.originalText) {\n            button.innerHTML = button.dataset.originalText;\n        }\n        \n        if (button.dataset.originalDisabled === 'false') {\n            button.disabled = false;\n        }\n\n        // Clean up data attributes\n        delete button.dataset.originalText;\n        delete button.dataset.originalDisabled;\n    }\n}\n\n/**\n * Form Validation Manager\n * Provides comprehensive form validation with Bootstrap styling\n */\nclass FormValidator {\n    constructor(form) {\n        this.form = form;\n        this.rules = {};\n        this.init();\n    }\n\n    init() {\n        if (!this.form) return;\n\n        // Add Bootstrap validation classes\n        this.form.classList.add('needs-validation');\n        this.form.noValidate = true;\n\n        // Setup real-time validation\n        this.setupRealTimeValidation();\n    }\n\n    addRule(fieldName, rules) {\n        this.rules[fieldName] = rules;\n        return this;\n    }\n\n    setupRealTimeValidation() {\n        const inputs = this.form.querySelectorAll('input, select, textarea');\n        \n        inputs.forEach(input => {\n            // Validate on blur\n            input.addEventListener('blur', () => {\n                this.validateField(input);\n            });\n\n            // Clear validation on input (for better UX)\n            input.addEventListener('input', () => {\n                if (input.classList.contains('is-invalid')) {\n                    this.clearFieldValidation(input);\n                }\n            });\n        });\n    }\n\n    validateField(field) {\n        const fieldName = field.name || field.id;\n        const rules = this.rules[fieldName];\n        \n        if (!rules) {\n            // Basic HTML5 validation\n            return this.validateHtml5(field);\n        }\n\n        // Custom validation rules\n        for (const rule of rules) {\n            const isValid = rule.validator(field.value, field);\n            if (!isValid) {\n                this.showFieldError(field, rule.message);\n                return false;\n            }\n        }\n\n        this.showFieldValid(field);\n        return true;\n    }\n\n    validateHtml5(field) {\n        if (field.checkValidity()) {\n            this.showFieldValid(field);\n            return true;\n        } else {\n            this.showFieldError(field, field.validationMessage);\n            return false;\n        }\n    }\n\n    showFieldError(field, message) {\n        field.classList.remove('is-valid');\n        field.classList.add('is-invalid');\n\n        // Find or create feedback element\n        let feedback = field.parentNode.querySelector('.invalid-feedback');\n        if (!feedback) {\n            feedback = document.createElement('div');\n            feedback.className = 'invalid-feedback';\n            field.parentNode.appendChild(feedback);\n        }\n        feedback.textContent = message;\n    }\n\n    showFieldValid(field) {\n        field.classList.remove('is-invalid');\n        field.classList.add('is-valid');\n\n        // Remove error feedback\n        const feedback = field.parentNode.querySelector('.invalid-feedback');\n        if (feedback) {\n            feedback.remove();\n        }\n    }\n\n    clearFieldValidation(field) {\n        field.classList.remove('is-valid', 'is-invalid');\n        const feedback = field.parentNode.querySelector('.invalid-feedback');\n        if (feedback) {\n            feedback.remove();\n        }\n    }\n\n    validateForm() {\n        let isValid = true;\n        const inputs = this.form.querySelectorAll('input, select, textarea');\n\n        inputs.forEach(input => {\n            if (!this.validateField(input)) {\n                isValid = false;\n            }\n        });\n\n        return isValid;\n    }\n\n    reset() {\n        const inputs = this.form.querySelectorAll('input, select, textarea');\n        inputs.forEach(input => {\n            this.clearFieldValidation(input);\n        });\n    }\n\n    // Common validation rules\n    static rules = {\n        required: (value) => value && value.toString().trim() !== '',\n        email: (value) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value),\n        minLength: (min) => (value) => value && value.length >= min,\n        maxLength: (max) => (value) => !value || value.length <= max,\n        numeric: (value) => !value || /^\\d+$/.test(value),\n        decimal: (value) => !value || /^\\d*\\.?\\d+$/.test(value),\n        password: (value) => value && value.length >= 8 && /(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(value),\n        match: (matchField) => (value, field) => {\n            const matchElement = field.form.querySelector(`[name=\"${matchField}\"], #${matchField}`);\n            return matchElement && value === matchElement.value;\n        }\n    };\n}\n\n/**\n * Loading Overlay Manager\n * Provides full-screen loading overlays\n */\nclass LoadingOverlay {\n    static show(message = 'Loading...') {\n        // Remove existing overlay\n        this.hide();\n\n        const overlay = document.createElement('div');\n        overlay.id = 'loading-overlay';\n        overlay.className = 'position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center';\n        overlay.style.cssText = `\n            background: rgba(0, 0, 0, 0.7);\n            z-index: 99999;\n            backdrop-filter: blur(2px);\n        `;\n\n        overlay.innerHTML = `\n            <div class=\"text-center text-white\">\n                <div class=\"spinner-border mb-3\" role=\"status\" style=\"width: 3rem; height: 3rem;\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"h5\">${message}</div>\n            </div>\n        `;\n\n        document.body.appendChild(overlay);\n    }\n\n    static hide() {\n        const overlay = document.getElementById('loading-overlay');\n        if (overlay) {\n            overlay.remove();\n        }\n    }\n}\n\n// Initialize notification system when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.notificationManager = new NotificationManager();\n    \n    // Make utilities globally available\n    window.ButtonLoader = ButtonLoader;\n    window.FormValidator = FormValidator;\n    window.LoadingOverlay = LoadingOverlay;\n    \n    // Legacy compatibility\n    window.commonUtils = {\n        showToast: (message, type) => window.notificationManager.showToast(message, type),\n        showSuccess: (message) => window.notificationManager.showSuccess(message),\n        showError: (message) => window.notificationManager.showError(message),\n        showWarning: (message) => window.notificationManager.showWarning(message),\n        showInfo: (message) => window.notificationManager.showInfo(message)\n    };\n});","size_bytes":11117},"api/endpoints/config.php":{"content":"<?php\n/**\n * Configuration API Endpoints for VideoHub\n * Provides frontend with necessary configuration data\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\n// Parse input data\n$input = json_decode(file_get_contents('php://input'), true);\n\ntry {\n    switch ($method) {\n        case 'GET':\n            if (isset($path_parts[1]) && $path_parts[1] === 'stripe-key') {\n                // Return Stripe publishable key\n                $publishableKey = $_ENV['STRIPE_PUBLISHABLE_KEY'] ?? getenv('STRIPE_PUBLISHABLE_KEY');\n                \n                if (!$publishableKey) {\n                    http_response_code(500);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Stripe configuration not found'\n                    ]);\n                    return;\n                }\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'publishable_key' => $publishableKey\n                ]);\n                \n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Config endpoint not found'\n                ]);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":1896},"api/services/StripeService.php":{"content":"<?php\n/**\n * Stripe Payment Service for VideoHub\n * Handles all Stripe payment processing and webhook management\n */\n\nrequire_once __DIR__ . '/../../vendor/autoload.php';\n\nclass StripeService {\n    private $stripe;\n    private $db;\n    private $logger;\n\n    public function __construct($database) {\n        $this->db = $database->getConnection();\n        \n        // Initialize Stripe\n        \\Stripe\\Stripe::setApiKey($_ENV['STRIPE_SECRET_KEY'] ?? getenv('STRIPE_SECRET_KEY'));\n        \n        // Initialize logging\n        $this->initializeLogger();\n    }\n\n    private function initializeLogger() {\n        $logDir = __DIR__ . '/../../logs';\n        if (!file_exists($logDir)) {\n            mkdir($logDir, 0755, true);\n        }\n        $this->logger = $logDir . '/stripe_payments.log';\n    }\n\n    private function log($message, $data = null) {\n        $timestamp = date('Y-m-d H:i:s');\n        $logEntry = \"[{$timestamp}] {$message}\";\n        if ($data) {\n            $logEntry .= \" | Data: \" . json_encode($data, JSON_UNESCAPED_SLASHES);\n        }\n        file_put_contents($this->logger, $logEntry . PHP_EOL, FILE_APPEND);\n    }\n\n    /**\n     * Create a Payment Intent for one-time payment\n     */\n    public function createPaymentIntent($amount, $currency = 'usd', $metadata = []) {\n        try {\n            $this->log(\"Creating Payment Intent\", ['amount' => $amount, 'currency' => $currency]);\n\n            $paymentIntent = \\Stripe\\PaymentIntent::create([\n                'amount' => $amount * 100, // Convert to cents\n                'currency' => $currency,\n                'metadata' => $metadata,\n                'payment_method_types' => ['card'],\n                'capture_method' => 'automatic',\n            ]);\n\n            $this->log(\"Payment Intent created successfully\", ['id' => $paymentIntent->id]);\n\n            return [\n                'success' => true,\n                'client_secret' => $paymentIntent->client_secret,\n                'payment_intent_id' => $paymentIntent->id\n            ];\n\n        } catch (\\Stripe\\Exception\\CardException $e) {\n            $this->log(\"Card error\", ['error' => $e->getError()->message]);\n            return [\n                'success' => false,\n                'error' => $e->getError()->message\n            ];\n        } catch (\\Stripe\\Exception\\RateLimitException $e) {\n            $this->log(\"Rate limit error\");\n            return [\n                'success' => false,\n                'error' => 'Too many requests made to the API too quickly'\n            ];\n        } catch (\\Stripe\\Exception\\InvalidRequestException $e) {\n            $this->log(\"Invalid parameters\", ['error' => $e->getMessage()]);\n            return [\n                'success' => false,\n                'error' => 'Invalid parameters'\n            ];\n        } catch (\\Stripe\\Exception\\AuthenticationException $e) {\n            $this->log(\"Authentication failed\");\n            return [\n                'success' => false,\n                'error' => 'Authentication with Stripe failed'\n            ];\n        } catch (\\Stripe\\Exception\\ApiConnectionException $e) {\n            $this->log(\"Network error\");\n            return [\n                'success' => false,\n                'error' => 'Network communication with Stripe failed'\n            ];\n        } catch (\\Stripe\\Exception\\ApiErrorException $e) {\n            $this->log(\"Generic API error\", ['error' => $e->getMessage()]);\n            return [\n                'success' => false,\n                'error' => 'Payment processing error'\n            ];\n        }\n    }\n\n    /**\n     * Confirm a Payment Intent\n     */\n    public function confirmPayment($paymentIntentId) {\n        try {\n            $paymentIntent = \\Stripe\\PaymentIntent::retrieve($paymentIntentId);\n            \n            if ($paymentIntent->status === 'requires_payment_method') {\n                return [\n                    'success' => false,\n                    'error' => 'Payment method required'\n                ];\n            }\n\n            $this->log(\"Payment confirmed\", ['payment_intent_id' => $paymentIntentId, 'status' => $paymentIntent->status]);\n\n            return [\n                'success' => true,\n                'status' => $paymentIntent->status,\n                'payment_intent' => $paymentIntent\n            ];\n\n        } catch (\\Exception $e) {\n            $this->log(\"Payment confirmation error\", ['error' => $e->getMessage()]);\n            return [\n                'success' => false,\n                'error' => $e->getMessage()\n            ];\n        }\n    }\n\n    /**\n     * Store payment transaction in database\n     */\n    public function storePaymentRecord($paymentIntentId, $videoId, $userId, $amount) {\n        try {\n            $stmt = $this->db->prepare(\"\n                INSERT INTO stripe_payments \n                (payment_intent_id, video_id, user_id, amount, status, created_at) \n                VALUES (?, ?, ?, ?, 'pending', NOW())\n            \");\n            \n            $result = $stmt->execute([$paymentIntentId, $videoId, $userId, $amount]);\n            \n            if ($result) {\n                $paymentId = $this->db->lastInsertId();\n                $this->log(\"Payment record stored\", ['payment_id' => $paymentId, 'payment_intent_id' => $paymentIntentId]);\n                return $paymentId;\n            }\n            \n            return false;\n            \n        } catch (Exception $e) {\n            $this->log(\"Database error storing payment\", ['error' => $e->getMessage()]);\n            return false;\n        }\n    }\n\n    /**\n     * Update payment status in database\n     */\n    public function updatePaymentStatus($paymentIntentId, $status, $metadata = []) {\n        try {\n            $stmt = $this->db->prepare(\"\n                UPDATE stripe_payments \n                SET status = ?, updated_at = NOW(), metadata = ? \n                WHERE payment_intent_id = ?\n            \");\n            \n            $result = $stmt->execute([$status, json_encode($metadata), $paymentIntentId]);\n            \n            if ($result && $status === 'succeeded') {\n                // Also create purchase record for successful payments\n                $this->createPurchaseRecord($paymentIntentId);\n            }\n            \n            $this->log(\"Payment status updated\", ['payment_intent_id' => $paymentIntentId, 'status' => $status]);\n            return $result;\n            \n        } catch (Exception $e) {\n            $this->log(\"Error updating payment status\", ['error' => $e->getMessage()]);\n            return false;\n        }\n    }\n\n    /**\n     * Create purchase record after successful payment\n     */\n    private function createPurchaseRecord($paymentIntentId) {\n        try {\n            // Get payment details\n            $stmt = $this->db->prepare(\"SELECT * FROM stripe_payments WHERE payment_intent_id = ?\");\n            $stmt->execute([$paymentIntentId]);\n            $payment = $stmt->fetch(PDO::FETCH_ASSOC);\n            \n            if (!$payment) {\n                return false;\n            }\n            \n            // Check if purchase already exists\n            $stmt = $this->db->prepare(\"SELECT id FROM purchases WHERE video_id = ? AND user_id_new = ?\");\n            $stmt->execute([$payment['video_id'], $payment['user_id']]);\n            $existingPurchase = $stmt->fetch();\n            \n            if ($existingPurchase) {\n                $this->log(\"Purchase already exists\", ['payment_intent_id' => $paymentIntentId]);\n                return $existingPurchase['id'];\n            }\n            \n            // Create new purchase record\n            $stmt = $this->db->prepare(\"\n                INSERT INTO purchases (video_id, user_id_new, amount, purchased_at, payment_intent_id) \n                VALUES (?, ?, ?, NOW(), ?)\n            \");\n            \n            $result = $stmt->execute([\n                $payment['video_id'],\n                $payment['user_id'],\n                $payment['amount'],\n                $paymentIntentId\n            ]);\n            \n            if ($result) {\n                $purchaseId = $this->db->lastInsertId();\n                $this->log(\"Purchase record created\", ['purchase_id' => $purchaseId, 'payment_intent_id' => $paymentIntentId]);\n                return $purchaseId;\n            }\n            \n            return false;\n            \n        } catch (Exception $e) {\n            $this->log(\"Error creating purchase record\", ['error' => $e->getMessage()]);\n            return false;\n        }\n    }\n\n    /**\n     * Handle Stripe webhook events\n     */\n    public function handleWebhook($payload, $sigHeader) {\n        $endpoint_secret = $_ENV['STRIPE_WEBHOOK_SECRET'] ?? getenv('STRIPE_WEBHOOK_SECRET');\n        \n        if (!$endpoint_secret) {\n            $this->log(\"Webhook secret not configured\");\n            return false;\n        }\n\n        try {\n            $event = \\Stripe\\Webhook::constructEvent($payload, $sigHeader, $endpoint_secret);\n            $this->log(\"Webhook received\", ['type' => $event->type, 'id' => $event->id]);\n\n            switch ($event->type) {\n                case 'payment_intent.succeeded':\n                    $paymentIntent = $event->data->object;\n                    $this->updatePaymentStatus($paymentIntent->id, 'succeeded', $paymentIntent->toArray());\n                    break;\n                    \n                case 'payment_intent.payment_failed':\n                    $paymentIntent = $event->data->object;\n                    $this->updatePaymentStatus($paymentIntent->id, 'failed', $paymentIntent->toArray());\n                    break;\n                    \n                case 'payment_intent.canceled':\n                    $paymentIntent = $event->data->object;\n                    $this->updatePaymentStatus($paymentIntent->id, 'canceled', $paymentIntent->toArray());\n                    break;\n                    \n                default:\n                    $this->log(\"Unhandled webhook event\", ['type' => $event->type]);\n            }\n\n            return true;\n\n        } catch (\\UnexpectedValueException $e) {\n            $this->log(\"Webhook signature verification failed\", ['error' => $e->getMessage()]);\n            return false;\n        } catch (\\Stripe\\Exception\\SignatureVerificationException $e) {\n            $this->log(\"Webhook signature verification failed\", ['error' => $e->getMessage()]);\n            return false;\n        }\n    }\n\n    /**\n     * Get payment details by Payment Intent ID\n     */\n    public function getPaymentDetails($paymentIntentId) {\n        try {\n            $stmt = $this->db->prepare(\"SELECT * FROM stripe_payments WHERE payment_intent_id = ?\");\n            $stmt->execute([$paymentIntentId]);\n            return $stmt->fetch(PDO::FETCH_ASSOC);\n        } catch (Exception $e) {\n            $this->log(\"Error getting payment details\", ['error' => $e->getMessage()]);\n            return false;\n        }\n    }\n\n    /**\n     * Get all payments for a user\n     */\n    public function getUserPayments($userId) {\n        try {\n            $stmt = $this->db->prepare(\"\n                SELECT sp.*, v.title as video_title \n                FROM stripe_payments sp \n                LEFT JOIN videos v ON sp.video_id = v.id \n                WHERE sp.user_id = ? \n                ORDER BY sp.created_at DESC\n            \");\n            $stmt->execute([$userId]);\n            return $stmt->fetchAll(PDO::FETCH_ASSOC);\n        } catch (Exception $e) {\n            $this->log(\"Error getting user payments\", ['error' => $e->getMessage()]);\n            return [];\n        }\n    }\n}\n?>","size_bytes":11542},"assets/js/stripe-payment.js":{"content":"/**\n * VideoHub Stripe Payment Module\n * Handles real Stripe payment processing for video purchases\n */\n\nclass StripePaymentManager {\n    constructor() {\n        this.stripe = null;\n        this.elements = null;\n        this.cardElement = null;\n        this.currentPaymentIntent = null;\n        this.publishableKey = null;\n        this.init();\n    }\n\n    async init() {\n        await this.loadStripeKey();\n        this.initializeStripe();\n        this.bindEvents();\n    }\n\n    async loadStripeKey() {\n        try {\n            // Load Stripe publishable key from environment\n            const response = await fetch(this.getApiUrl('/config/stripe-key'));\n            if (response.ok) {\n                const data = await response.json();\n                this.publishableKey = data.publishable_key;\n            } else {\n                // Fallback to environment variable if API endpoint doesn't exist\n                this.publishableKey = window.STRIPE_PUBLISHABLE_KEY || null;\n            }\n        } catch (error) {\n            console.warn('Could not load Stripe key from API, using fallback');\n            this.publishableKey = window.STRIPE_PUBLISHABLE_KEY || null;\n        }\n    }\n\n    initializeStripe() {\n        if (!this.publishableKey) {\n            console.error('Stripe publishable key not found');\n            this.showError('Payment system is not properly configured');\n            return;\n        }\n\n        // Initialize Stripe\n        this.stripe = Stripe(this.publishableKey);\n        this.elements = this.stripe.elements();\n\n        // Create card element with custom styling\n        const style = {\n            base: {\n                fontSize: '16px',\n                color: '#424770',\n                '::placeholder': {\n                    color: '#aab7c4',\n                },\n            },\n            invalid: {\n                color: '#9e2146',\n            },\n        };\n\n        this.cardElement = this.elements.create('card', {style: style});\n    }\n\n    bindEvents() {\n        // Payment form submission\n        document.addEventListener('submit', (e) => {\n            if (e.target.id === 'stripe-payment-form' || e.target.classList.contains('stripe-payment-form')) {\n                e.preventDefault();\n                this.processStripePayment(e.target);\n            }\n        });\n\n        // Purchase button clicks\n        document.addEventListener('click', (e) => {\n            if (e.target.classList.contains('purchase-video-btn')) {\n                e.preventDefault();\n                const videoId = e.target.dataset.videoId;\n                const videoTitle = e.target.dataset.videoTitle;\n                const videoPrice = parseFloat(e.target.dataset.videoPrice);\n                this.initiateVideoPurchase(videoId, videoTitle, videoPrice);\n            }\n        });\n    }\n\n    async initiateVideoPurchase(videoId, videoTitle, videoPrice) {\n        try {\n            const userId = this.getCurrentUserId();\n            if (!userId) {\n                this.showError('Please log in to purchase videos');\n                return;\n            }\n\n            // Show payment modal\n            this.showPaymentModal(videoId, videoTitle, videoPrice);\n\n        } catch (error) {\n            console.error('Error initiating purchase:', error);\n            this.showError('Failed to start purchase process');\n        }\n    }\n\n    showPaymentModal(videoId, videoTitle, videoPrice) {\n        const modalHtml = `\n            <div class=\"modal fade\" id=\"stripePaymentModal\" tabindex=\"-1\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">Purchase Video</h5>\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <div class=\"purchase-summary mb-4\">\n                                <h6>${videoTitle}</h6>\n                                <p class=\"text-muted mb-2\">One-time purchase</p>\n                                <div class=\"d-flex justify-content-between\">\n                                    <span>Price:</span>\n                                    <strong>$${videoPrice.toFixed(2)}</strong>\n                                </div>\n                            </div>\n                            \n                            <form id=\"stripe-payment-form\" class=\"stripe-payment-form\">\n                                <div class=\"mb-3\">\n                                    <label class=\"form-label\">Card Details</label>\n                                    <div id=\"card-element\" class=\"form-control\" style=\"height: 45px; padding: 10px;\"></div>\n                                    <div id=\"card-errors\" class=\"text-danger mt-2\" style=\"display: none;\"></div>\n                                </div>\n                                \n                                <input type=\"hidden\" id=\"video-id\" value=\"${videoId}\">\n                                <input type=\"hidden\" id=\"video-price\" value=\"${videoPrice}\">\n                                \n                                <button type=\"submit\" id=\"submit-payment\" class=\"btn btn-primary w-100\" disabled>\n                                    <span class=\"spinner-border spinner-border-sm me-2\" style=\"display: none;\"></span>\n                                    Pay $${videoPrice.toFixed(2)}\n                                </button>\n                            </form>\n                            \n                            <div class=\"mt-3 text-center\">\n                                <small class=\"text-muted\">Secured by Stripe</small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        // Remove existing modal if any\n        const existingModal = document.getElementById('stripePaymentModal');\n        if (existingModal) {\n            existingModal.remove();\n        }\n\n        // Add modal to page\n        document.body.insertAdjacentHTML('beforeend', modalHtml);\n\n        // Show modal and mount Stripe element\n        const modal = new bootstrap.Modal(document.getElementById('stripePaymentModal'));\n        modal.show();\n\n        // Mount card element after modal is shown\n        setTimeout(() => {\n            this.mountCardElement();\n        }, 300);\n    }\n\n    mountCardElement() {\n        const cardElementContainer = document.getElementById('card-element');\n        const cardErrors = document.getElementById('card-errors');\n        const submitButton = document.getElementById('submit-payment');\n\n        if (!cardElementContainer || !this.cardElement) {\n            console.error('Card element container not found or Stripe not initialized');\n            return;\n        }\n\n        // Mount the card element\n        this.cardElement.mount('#card-element');\n\n        // Handle real-time validation errors\n        this.cardElement.on('change', (event) => {\n            if (event.error) {\n                cardErrors.textContent = event.error.message;\n                cardErrors.style.display = 'block';\n                submitButton.disabled = true;\n            } else {\n                cardErrors.style.display = 'none';\n                submitButton.disabled = event.empty;\n            }\n        });\n    }\n\n    async processStripePayment(form) {\n        const videoId = form.querySelector('#video-id').value;\n        const videoPrice = parseFloat(form.querySelector('#video-price').value);\n        const submitButton = form.querySelector('#submit-payment');\n        const spinner = submitButton.querySelector('.spinner-border');\n        \n        // Show loading state\n        submitButton.disabled = true;\n        spinner.style.display = 'inline-block';\n\n        try {\n            // Step 1: Create Payment Intent\n            const paymentIntentResponse = await this.createPaymentIntent(videoId, videoPrice);\n            \n            if (!paymentIntentResponse.success) {\n                throw new Error(paymentIntentResponse.message);\n            }\n\n            // Step 2: Confirm payment with Stripe\n            const {error, paymentIntent} = await this.stripe.confirmCardPayment(\n                paymentIntentResponse.client_secret,\n                {\n                    payment_method: {\n                        card: this.cardElement,\n                        billing_details: {\n                            // You can collect billing details if needed\n                        }\n                    }\n                }\n            );\n\n            if (error) {\n                throw new Error(error.message);\n            }\n\n            // Step 3: Confirm payment on backend\n            await this.confirmPaymentOnBackend(paymentIntent.id);\n\n            // Success!\n            this.handlePaymentSuccess(paymentIntent);\n\n        } catch (error) {\n            console.error('Payment error:', error);\n            this.handlePaymentError(error.message);\n        } finally {\n            // Hide loading state\n            submitButton.disabled = false;\n            spinner.style.display = 'none';\n        }\n    }\n\n    async createPaymentIntent(videoId, amount) {\n        try {\n            const response = await fetch(this.getApiUrl('/payments/create-payment-intent'), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    video_id: parseInt(videoId),\n                    user_id: this.getCurrentUserId()\n                })\n            });\n\n            const data = await response.json();\n            return data;\n\n        } catch (error) {\n            console.error('Error creating payment intent:', error);\n            return {\n                success: false,\n                message: 'Failed to initialize payment'\n            };\n        }\n    }\n\n    async confirmPaymentOnBackend(paymentIntentId) {\n        try {\n            const response = await fetch(this.getApiUrl('/payments/confirm-payment'), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    payment_intent_id: paymentIntentId\n                })\n            });\n\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.message);\n            }\n            \n            return data;\n\n        } catch (error) {\n            console.error('Error confirming payment:', error);\n            throw error;\n        }\n    }\n\n    handlePaymentSuccess(paymentIntent) {\n        // Close payment modal\n        const modal = bootstrap.Modal.getInstance(document.getElementById('stripePaymentModal'));\n        if (modal) {\n            modal.hide();\n        }\n\n        // Show success message\n        this.showSuccess('Payment successful! You now have access to the video.');\n\n        // Redirect to video or refresh page\n        setTimeout(() => {\n            window.location.reload();\n        }, 2000);\n    }\n\n    handlePaymentError(errorMessage) {\n        this.showError(`Payment failed: ${errorMessage}`);\n    }\n\n    // Utility methods\n    getCurrentUserId() {\n        // Get current user ID from localStorage or session\n        const user = JSON.parse(localStorage.getItem('user') || sessionStorage.getItem('user') || '{}');\n        return user.id || null;\n    }\n\n    getApiUrl(endpoint) {\n        const config = window.VIDEOHUB_DEPLOYMENT_CONFIG || { BASE_PATH: '' };\n        const basePath = config.BASE_PATH || '';\n        return `${basePath}/api${endpoint}`;\n    }\n\n    showError(message) {\n        if (window.notificationManager) {\n            window.notificationManager.error(message);\n        } else {\n            alert(message);\n        }\n    }\n\n    showSuccess(message) {\n        if (window.notificationManager) {\n            window.notificationManager.success(message);\n        } else {\n            alert(message);\n        }\n    }\n}\n\n// Initialize the Stripe Payment Manager when the page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Only initialize if Stripe is available\n    if (typeof Stripe !== 'undefined') {\n        window.stripePaymentManager = new StripePaymentManager();\n    } else {\n        console.error('Stripe.js is not loaded. Please include it in your HTML.');\n    }\n});\n\n// Backward compatibility - keep the old class name as alias\nwindow.PaymentManager = StripePaymentManager;","size_bytes":12611},"vendor/autoload.php":{"content":"<?php\n\n// autoload.php @generated by Composer\n\nif (PHP_VERSION_ID < 50600) {\n    if (!headers_sent()) {\n        header('HTTP/1.1 500 Internal Server Error');\n    }\n    $err = 'Composer 2.3.0 dropped support for autoloading on PHP <5.6 and you are running '.PHP_VERSION.', please upgrade PHP or use Composer 2.2 LTS via \"composer self-update --2.2\". Aborting.'.PHP_EOL;\n    if (!ini_get('display_errors')) {\n        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {\n            fwrite(STDERR, $err);\n        } elseif (!headers_sent()) {\n            echo $err;\n        }\n    }\n    throw new RuntimeException($err);\n}\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInit8305b34fc54444e2a130ed13dd73f2d8::getLoader();\n","size_bytes":748},"vendor/composer/ClassLoader.php":{"content":"<?php\n\n/*\n * This file is part of Composer.\n *\n * (c) Nils Adermann <naderman@naderman.de>\n *     Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Composer\\Autoload;\n\n/**\n * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.\n *\n *     $loader = new \\Composer\\Autoload\\ClassLoader();\n *\n *     // register classes with namespaces\n *     $loader->add('Symfony\\Component', __DIR__.'/component');\n *     $loader->add('Symfony',           __DIR__.'/framework');\n *\n *     // activate the autoloader\n *     $loader->register();\n *\n *     // to enable searching the include path (eg. for PEAR packages)\n *     $loader->setUseIncludePath(true);\n *\n * In this example, if you try to use a class in the Symfony\\Component\n * namespace or one of its children (Symfony\\Component\\Console for instance),\n * the autoloader will first look for the class under the component/\n * directory, and it will then fallback to the framework/ directory if not\n * found before giving up.\n *\n * This class is loosely based on the Symfony UniversalClassLoader.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Jordi Boggiano <j.boggiano@seld.be>\n * @see    https://www.php-fig.org/psr/psr-0/\n * @see    https://www.php-fig.org/psr/psr-4/\n */\nclass ClassLoader\n{\n    /** @var \\Closure(string):void */\n    private static $includeFile;\n\n    /** @var string|null */\n    private $vendorDir;\n\n    // PSR-4\n    /**\n     * @var array<string, array<string, int>>\n     */\n    private $prefixLengthsPsr4 = array();\n    /**\n     * @var array<string, list<string>>\n     */\n    private $prefixDirsPsr4 = array();\n    /**\n     * @var list<string>\n     */\n    private $fallbackDirsPsr4 = array();\n\n    // PSR-0\n    /**\n     * List of PSR-0 prefixes\n     *\n     * Structured as array('F (first letter)' => array('Foo\\Bar (full prefix)' => array('path', 'path2')))\n     *\n     * @var array<string, array<string, list<string>>>\n     */\n    private $prefixesPsr0 = array();\n    /**\n     * @var list<string>\n     */\n    private $fallbackDirsPsr0 = array();\n\n    /** @var bool */\n    private $useIncludePath = false;\n\n    /**\n     * @var array<string, string>\n     */\n    private $classMap = array();\n\n    /** @var bool */\n    private $classMapAuthoritative = false;\n\n    /**\n     * @var array<string, bool>\n     */\n    private $missingClasses = array();\n\n    /** @var string|null */\n    private $apcuPrefix;\n\n    /**\n     * @var array<string, self>\n     */\n    private static $registeredLoaders = array();\n\n    /**\n     * @param string|null $vendorDir\n     */\n    public function __construct($vendorDir = null)\n    {\n        $this->vendorDir = $vendorDir;\n        self::initializeIncludeClosure();\n    }\n\n    /**\n     * @return array<string, list<string>>\n     */\n    public function getPrefixes()\n    {\n        if (!empty($this->prefixesPsr0)) {\n            return call_user_func_array('array_merge', array_values($this->prefixesPsr0));\n        }\n\n        return array();\n    }\n\n    /**\n     * @return array<string, list<string>>\n     */\n    public function getPrefixesPsr4()\n    {\n        return $this->prefixDirsPsr4;\n    }\n\n    /**\n     * @return list<string>\n     */\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirsPsr0;\n    }\n\n    /**\n     * @return list<string>\n     */\n    public function getFallbackDirsPsr4()\n    {\n        return $this->fallbackDirsPsr4;\n    }\n\n    /**\n     * @return array<string, string> Array of classname => path\n     */\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n    /**\n     * @param array<string, string> $classMap Class to filename map\n     *\n     * @return void\n     */\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n    /**\n     * Registers a set of PSR-0 directories for a given prefix, either\n     * appending or prepending to the ones previously set for this prefix.\n     *\n     * @param string              $prefix  The prefix\n     * @param list<string>|string $paths   The PSR-0 root directories\n     * @param bool                $prepend Whether to prepend the directories\n     *\n     * @return void\n     */\n    public function add($prefix, $paths, $prepend = false)\n    {\n        $paths = (array) $paths;\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $paths,\n                    $this->fallbackDirsPsr0\n                );\n            } else {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $this->fallbackDirsPsr0,\n                    $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixesPsr0[$first][$prefix])) {\n            $this->prefixesPsr0[$first][$prefix] = $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $paths,\n                $this->prefixesPsr0[$first][$prefix]\n            );\n        } else {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $this->prefixesPsr0[$first][$prefix],\n                $paths\n            );\n        }\n    }\n\n    /**\n     * Registers a set of PSR-4 directories for a given namespace, either\n     * appending or prepending to the ones previously set for this namespace.\n     *\n     * @param string              $prefix  The prefix/namespace, with trailing '\\\\'\n     * @param list<string>|string $paths   The PSR-4 base directories\n     * @param bool                $prepend Whether to prepend the directories\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return void\n     */\n    public function addPsr4($prefix, $paths, $prepend = false)\n    {\n        $paths = (array) $paths;\n        if (!$prefix) {\n            // Register directories for the root namespace.\n            if ($prepend) {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $paths,\n                    $this->fallbackDirsPsr4\n                );\n            } else {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $this->fallbackDirsPsr4,\n                    $paths\n                );\n            }\n        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {\n            // Register directories for a new namespace.\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = $paths;\n        } elseif ($prepend) {\n            // Prepend directories for an already registered namespace.\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $paths,\n                $this->prefixDirsPsr4[$prefix]\n            );\n        } else {\n            // Append directories for an already registered namespace.\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $this->prefixDirsPsr4[$prefix],\n                $paths\n            );\n        }\n    }\n\n    /**\n     * Registers a set of PSR-0 directories for a given prefix,\n     * replacing any others previously set for this prefix.\n     *\n     * @param string              $prefix The prefix\n     * @param list<string>|string $paths  The PSR-0 base directories\n     *\n     * @return void\n     */\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr0 = (array) $paths;\n        } else {\n            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;\n        }\n    }\n\n    /**\n     * Registers a set of PSR-4 directories for a given namespace,\n     * replacing any others previously set for this namespace.\n     *\n     * @param string              $prefix The prefix/namespace, with trailing '\\\\'\n     * @param list<string>|string $paths  The PSR-4 base directories\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return void\n     */\n    public function setPsr4($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr4 = (array) $paths;\n        } else {\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        }\n    }\n\n    /**\n     * Turns on searching the include path for class files.\n     *\n     * @param bool $useIncludePath\n     *\n     * @return void\n     */\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n    /**\n     * Can be used to check if the autoloader uses the include path to check\n     * for classes.\n     *\n     * @return bool\n     */\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n    /**\n     * Turns off searching the prefix and fallback directories for classes\n     * that have not been registered with the class map.\n     *\n     * @param bool $classMapAuthoritative\n     *\n     * @return void\n     */\n    public function setClassMapAuthoritative($classMapAuthoritative)\n    {\n        $this->classMapAuthoritative = $classMapAuthoritative;\n    }\n\n    /**\n     * Should class lookup fail if not found in the current class map?\n     *\n     * @return bool\n     */\n    public function isClassMapAuthoritative()\n    {\n        return $this->classMapAuthoritative;\n    }\n\n    /**\n     * APCu prefix to use to cache found/not-found classes, if the extension is enabled.\n     *\n     * @param string|null $apcuPrefix\n     *\n     * @return void\n     */\n    public function setApcuPrefix($apcuPrefix)\n    {\n        $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;\n    }\n\n    /**\n     * The APCu prefix in use, or null if APCu caching is not enabled.\n     *\n     * @return string|null\n     */\n    public function getApcuPrefix()\n    {\n        return $this->apcuPrefix;\n    }\n\n    /**\n     * Registers this instance as an autoloader.\n     *\n     * @param bool $prepend Whether to prepend the autoloader or not\n     *\n     * @return void\n     */\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n\n        if (null === $this->vendorDir) {\n            return;\n        }\n\n        if ($prepend) {\n            self::$registeredLoaders = array($this->vendorDir => $this) + self::$registeredLoaders;\n        } else {\n            unset(self::$registeredLoaders[$this->vendorDir]);\n            self::$registeredLoaders[$this->vendorDir] = $this;\n        }\n    }\n\n    /**\n     * Unregisters this instance as an autoloader.\n     *\n     * @return void\n     */\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n\n        if (null !== $this->vendorDir) {\n            unset(self::$registeredLoaders[$this->vendorDir]);\n        }\n    }\n\n    /**\n     * Loads the given class or interface.\n     *\n     * @param  string    $class The name of the class\n     * @return true|null True if loaded, null otherwise\n     */\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            $includeFile = self::$includeFile;\n            $includeFile($file);\n\n            return true;\n        }\n\n        return null;\n    }\n\n    /**\n     * Finds the path to the file where the class is defined.\n     *\n     * @param string $class The name of the class\n     *\n     * @return string|false The path if found, false otherwise\n     */\n    public function findFile($class)\n    {\n        // class map lookup\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n        if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {\n            return false;\n        }\n        if (null !== $this->apcuPrefix) {\n            $file = apcu_fetch($this->apcuPrefix.$class, $hit);\n            if ($hit) {\n                return $file;\n            }\n        }\n\n        $file = $this->findFileWithExtension($class, '.php');\n\n        // Search for Hack files if we are running on HHVM\n        if (false === $file && defined('HHVM_VERSION')) {\n            $file = $this->findFileWithExtension($class, '.hh');\n        }\n\n        if (null !== $this->apcuPrefix) {\n            apcu_add($this->apcuPrefix.$class, $file);\n        }\n\n        if (false === $file) {\n            // Remember that this class does not exist.\n            $this->missingClasses[$class] = true;\n        }\n\n        return $file;\n    }\n\n    /**\n     * Returns the currently registered loaders keyed by their corresponding vendor directories.\n     *\n     * @return array<string, self>\n     */\n    public static function getRegisteredLoaders()\n    {\n        return self::$registeredLoaders;\n    }\n\n    /**\n     * @param  string       $class\n     * @param  string       $ext\n     * @return string|false\n     */\n    private function findFileWithExtension($class, $ext)\n    {\n        // PSR-4 lookup\n        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;\n\n        $first = $class[0];\n        if (isset($this->prefixLengthsPsr4[$first])) {\n            $subPath = $class;\n            while (false !== $lastPos = strrpos($subPath, '\\\\')) {\n                $subPath = substr($subPath, 0, $lastPos);\n                $search = $subPath . '\\\\';\n                if (isset($this->prefixDirsPsr4[$search])) {\n                    $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);\n                    foreach ($this->prefixDirsPsr4[$search] as $dir) {\n                        if (file_exists($file = $dir . $pathEnd)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n        // PSR-4 fallback dirs\n        foreach ($this->fallbackDirsPsr4 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {\n                return $file;\n            }\n        }\n\n        // PSR-0 lookup\n        if (false !== $pos = strrpos($class, '\\\\')) {\n            // namespaced class name\n            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)\n                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);\n        } else {\n            // PEAR-like class name\n            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;\n        }\n\n        if (isset($this->prefixesPsr0[$first])) {\n            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n        // PSR-0 fallback dirs\n        foreach ($this->fallbackDirsPsr0 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                return $file;\n            }\n        }\n\n        // PSR-0 include paths.\n        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {\n            return $file;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return void\n     */\n    private static function initializeIncludeClosure()\n    {\n        if (self::$includeFile !== null) {\n            return;\n        }\n\n        /**\n         * Scope isolated include.\n         *\n         * Prevents access to $this/self from included files.\n         *\n         * @param  string $file\n         * @return void\n         */\n        self::$includeFile = \\Closure::bind(static function($file) {\n            include $file;\n        }, null, null);\n    }\n}\n","size_bytes":16378},"vendor/composer/InstalledVersions.php":{"content":"<?php\n\n/*\n * This file is part of Composer.\n *\n * (c) Nils Adermann <naderman@naderman.de>\n *     Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Composer;\n\nuse Composer\\Autoload\\ClassLoader;\nuse Composer\\Semver\\VersionParser;\n\n/**\n * This class is copied in every Composer installed project and available to all\n *\n * See also https://getcomposer.org/doc/07-runtime.md#installed-versions\n *\n * To require its presence, you can require `composer-runtime-api ^2.0`\n *\n * @final\n */\nclass InstalledVersions\n{\n    /**\n     * @var string|null if set (by reflection by Composer), this should be set to the path where this class is being copied to\n     * @internal\n     */\n    private static $selfDir = null;\n\n    /**\n     * @var mixed[]|null\n     * @psalm-var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}|array{}|null\n     */\n    private static $installed;\n\n    /**\n     * @var bool\n     */\n    private static $installedIsLocalDir;\n\n    /**\n     * @var bool|null\n     */\n    private static $canGetVendors;\n\n    /**\n     * @var array[]\n     * @psalm-var array<string, array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>\n     */\n    private static $installedByVendor = array();\n\n    /**\n     * Returns a list of all package names which are present, either by being installed, replaced or provided\n     *\n     * @return string[]\n     * @psalm-return list<string>\n     */\n    public static function getInstalledPackages()\n    {\n        $packages = array();\n        foreach (self::getInstalled() as $installed) {\n            $packages[] = array_keys($installed['versions']);\n        }\n\n        if (1 === \\count($packages)) {\n            return $packages[0];\n        }\n\n        return array_keys(array_flip(\\call_user_func_array('array_merge', $packages)));\n    }\n\n    /**\n     * Returns a list of all package names with a specific type e.g. 'library'\n     *\n     * @param  string   $type\n     * @return string[]\n     * @psalm-return list<string>\n     */\n    public static function getInstalledPackagesByType($type)\n    {\n        $packagesByType = array();\n\n        foreach (self::getInstalled() as $installed) {\n            foreach ($installed['versions'] as $name => $package) {\n                if (isset($package['type']) && $package['type'] === $type) {\n                    $packagesByType[] = $name;\n                }\n            }\n        }\n\n        return $packagesByType;\n    }\n\n    /**\n     * Checks whether the given package is installed\n     *\n     * This also returns true if the package name is provided or replaced by another package\n     *\n     * @param  string $packageName\n     * @param  bool   $includeDevRequirements\n     * @return bool\n     */\n    public static function isInstalled($packageName, $includeDevRequirements = true)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (isset($installed['versions'][$packageName])) {\n                return $includeDevRequirements || !isset($installed['versions'][$packageName]['dev_requirement']) || $installed['versions'][$packageName]['dev_requirement'] === false;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the given package satisfies a version constraint\n     *\n     * e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:\n     *\n     *   Composer\\InstalledVersions::satisfies(new VersionParser, 'foo/bar', '^2.3')\n     *\n     * @param  VersionParser $parser      Install composer/semver to have access to this class and functionality\n     * @param  string        $packageName\n     * @param  string|null   $constraint  A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package\n     * @return bool\n     */\n    public static function satisfies(VersionParser $parser, $packageName, $constraint)\n    {\n        $constraint = $parser->parseConstraints((string) $constraint);\n        $provided = $parser->parseConstraints(self::getVersionRanges($packageName));\n\n        return $provided->matches($constraint);\n    }\n\n    /**\n     * Returns a version constraint representing all the range(s) which are installed for a given package\n     *\n     * It is easier to use this via isInstalled() with the $constraint argument if you need to check\n     * whether a given version of a package is installed, and not just whether it exists\n     *\n     * @param  string $packageName\n     * @return string Version constraint usable with composer/semver\n     */\n    public static function getVersionRanges($packageName)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (!isset($installed['versions'][$packageName])) {\n                continue;\n            }\n\n            $ranges = array();\n            if (isset($installed['versions'][$packageName]['pretty_version'])) {\n                $ranges[] = $installed['versions'][$packageName]['pretty_version'];\n            }\n            if (array_key_exists('aliases', $installed['versions'][$packageName])) {\n                $ranges = array_merge($ranges, $installed['versions'][$packageName]['aliases']);\n            }\n            if (array_key_exists('replaced', $installed['versions'][$packageName])) {\n                $ranges = array_merge($ranges, $installed['versions'][$packageName]['replaced']);\n            }\n            if (array_key_exists('provided', $installed['versions'][$packageName])) {\n                $ranges = array_merge($ranges, $installed['versions'][$packageName]['provided']);\n            }\n\n            return implode(' || ', $ranges);\n        }\n\n        throw new \\OutOfBoundsException('Package \"' . $packageName . '\" is not installed');\n    }\n\n    /**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present\n     */\n    public static function getVersion($packageName)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (!isset($installed['versions'][$packageName])) {\n                continue;\n            }\n\n            if (!isset($installed['versions'][$packageName]['version'])) {\n                return null;\n            }\n\n            return $installed['versions'][$packageName]['version'];\n        }\n\n        throw new \\OutOfBoundsException('Package \"' . $packageName . '\" is not installed');\n    }\n\n    /**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present\n     */\n    public static function getPrettyVersion($packageName)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (!isset($installed['versions'][$packageName])) {\n                continue;\n            }\n\n            if (!isset($installed['versions'][$packageName]['pretty_version'])) {\n                return null;\n            }\n\n            return $installed['versions'][$packageName]['pretty_version'];\n        }\n\n        throw new \\OutOfBoundsException('Package \"' . $packageName . '\" is not installed');\n    }\n\n    /**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as reference\n     */\n    public static function getReference($packageName)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (!isset($installed['versions'][$packageName])) {\n                continue;\n            }\n\n            if (!isset($installed['versions'][$packageName]['reference'])) {\n                return null;\n            }\n\n            return $installed['versions'][$packageName]['reference'];\n        }\n\n        throw new \\OutOfBoundsException('Package \"' . $packageName . '\" is not installed');\n    }\n\n    /**\n     * @param  string      $packageName\n     * @return string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path.\n     */\n    public static function getInstallPath($packageName)\n    {\n        foreach (self::getInstalled() as $installed) {\n            if (!isset($installed['versions'][$packageName])) {\n                continue;\n            }\n\n            return isset($installed['versions'][$packageName]['install_path']) ? $installed['versions'][$packageName]['install_path'] : null;\n        }\n\n        throw new \\OutOfBoundsException('Package \"' . $packageName . '\" is not installed');\n    }\n\n    /**\n     * @return array\n     * @psalm-return array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}\n     */\n    public static function getRootPackage()\n    {\n        $installed = self::getInstalled();\n\n        return $installed[0]['root'];\n    }\n\n    /**\n     * Returns the raw installed.php data for custom implementations\n     *\n     * @deprecated Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect.\n     * @return array[]\n     * @psalm-return array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}\n     */\n    public static function getRawData()\n    {\n        @trigger_error('getRawData only returns the first dataset loaded, which may not be what you expect. Use getAllRawData() instead which returns all datasets for all autoloaders present in the process.', E_USER_DEPRECATED);\n\n        if (null === self::$installed) {\n            // only require the installed.php file if this file is loaded from its dumped location,\n            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937\n            if (substr(__DIR__, -8, 1) !== 'C') {\n                self::$installed = include __DIR__ . '/installed.php';\n            } else {\n                self::$installed = array();\n            }\n        }\n\n        return self::$installed;\n    }\n\n    /**\n     * Returns the raw data of all installed.php which are currently loaded for custom implementations\n     *\n     * @return array[]\n     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>\n     */\n    public static function getAllRawData()\n    {\n        return self::getInstalled();\n    }\n\n    /**\n     * Lets you reload the static array from another file\n     *\n     * This is only useful for complex integrations in which a project needs to use\n     * this class but then also needs to execute another project's autoloader in process,\n     * and wants to ensure both projects have access to their version of installed.php.\n     *\n     * A typical case would be PHPUnit, where it would need to make sure it reads all\n     * the data it needs from this class, then call reload() with\n     * `require $CWD/vendor/composer/installed.php` (or similar) as input to make sure\n     * the project in which it runs can then also use this class safely, without\n     * interference between PHPUnit's dependencies and the project's dependencies.\n     *\n     * @param  array[] $data A vendor/composer/installed.php data set\n     * @return void\n     *\n     * @psalm-param array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $data\n     */\n    public static function reload($data)\n    {\n        self::$installed = $data;\n        self::$installedByVendor = array();\n\n        // when using reload, we disable the duplicate protection to ensure that self::$installed data is\n        // always returned, but we cannot know whether it comes from the installed.php in __DIR__ or not,\n        // so we have to assume it does not, and that may result in duplicate data being returned when listing\n        // all installed packages for example\n        self::$installedIsLocalDir = false;\n    }\n\n    /**\n     * @return string\n     */\n    private static function getSelfDir()\n    {\n        if (self::$selfDir === null) {\n            self::$selfDir = strtr(__DIR__, '\\\\', '/');\n        }\n\n        return self::$selfDir;\n    }\n\n    /**\n     * @return array[]\n     * @psalm-return list<array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>}>\n     */\n    private static function getInstalled()\n    {\n        if (null === self::$canGetVendors) {\n            self::$canGetVendors = method_exists('Composer\\Autoload\\ClassLoader', 'getRegisteredLoaders');\n        }\n\n        $installed = array();\n        $copiedLocalDir = false;\n\n        if (self::$canGetVendors) {\n            $selfDir = self::getSelfDir();\n            foreach (ClassLoader::getRegisteredLoaders() as $vendorDir => $loader) {\n                $vendorDir = strtr($vendorDir, '\\\\', '/');\n                if (isset(self::$installedByVendor[$vendorDir])) {\n                    $installed[] = self::$installedByVendor[$vendorDir];\n                } elseif (is_file($vendorDir.'/composer/installed.php')) {\n                    /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */\n                    $required = require $vendorDir.'/composer/installed.php';\n                    self::$installedByVendor[$vendorDir] = $required;\n                    $installed[] = $required;\n                    if (self::$installed === null && $vendorDir.'/composer' === $selfDir) {\n                        self::$installed = $required;\n                        self::$installedIsLocalDir = true;\n                    }\n                }\n                if (self::$installedIsLocalDir && $vendorDir.'/composer' === $selfDir) {\n                    $copiedLocalDir = true;\n                }\n            }\n        }\n\n        if (null === self::$installed) {\n            // only require the installed.php file if this file is loaded from its dumped location,\n            // and not from its source location in the composer/composer package, see https://github.com/composer/composer/issues/9937\n            if (substr(__DIR__, -8, 1) !== 'C') {\n                /** @var array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array<string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}>} $required */\n                $required = require __DIR__ . '/installed.php';\n                self::$installed = $required;\n            } else {\n                self::$installed = array();\n            }\n        }\n\n        if (self::$installed !== array() && !$copiedLocalDir) {\n            $installed[] = self::$installed;\n        }\n\n        return $installed;\n    }\n}\n","size_bytes":17395},"vendor/composer/autoload_classmap.php":{"content":"<?php\n\n// autoload_classmap.php @generated by Composer\n\n$vendorDir = dirname(__DIR__);\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'Composer\\\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',\n);\n","size_bytes":222},"vendor/composer/autoload_namespaces.php":{"content":"<?php\n\n// autoload_namespaces.php @generated by Composer\n\n$vendorDir = dirname(__DIR__);\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n","size_bytes":139},"vendor/composer/autoload_psr4.php":{"content":"<?php\n\n// autoload_psr4.php @generated by Composer\n\n$vendorDir = dirname(__DIR__);\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'VideoHub\\\\' => array($baseDir . '/api'),\n    'Stripe\\\\' => array($vendorDir . '/stripe/stripe-php/lib'),\n);\n","size_bytes":243},"vendor/composer/autoload_real.php":{"content":"<?php\n\n// autoload_real.php @generated by Composer\n\nclass ComposerAutoloaderInit8305b34fc54444e2a130ed13dd73f2d8\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    /**\n     * @return \\Composer\\Autoload\\ClassLoader\n     */\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        require __DIR__ . '/platform_check.php';\n\n        spl_autoload_register(array('ComposerAutoloaderInit8305b34fc54444e2a130ed13dd73f2d8', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader(\\dirname(__DIR__));\n        spl_autoload_unregister(array('ComposerAutoloaderInit8305b34fc54444e2a130ed13dd73f2d8', 'loadClassLoader'));\n\n        require __DIR__ . '/autoload_static.php';\n        call_user_func(\\Composer\\Autoload\\ComposerStaticInit8305b34fc54444e2a130ed13dd73f2d8::getInitializer($loader));\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n","size_bytes":1137},"vendor/composer/autoload_static.php":{"content":"<?php\n\n// autoload_static.php @generated by Composer\n\nnamespace Composer\\Autoload;\n\nclass ComposerStaticInit8305b34fc54444e2a130ed13dd73f2d8\n{\n    public static $prefixLengthsPsr4 = array (\n        'V' => \n        array (\n            'VideoHub\\\\' => 9,\n        ),\n        'S' => \n        array (\n            'Stripe\\\\' => 7,\n        ),\n    );\n\n    public static $prefixDirsPsr4 = array (\n        'VideoHub\\\\' => \n        array (\n            0 => __DIR__ . '/../..' . '/api',\n        ),\n        'Stripe\\\\' => \n        array (\n            0 => __DIR__ . '/..' . '/stripe/stripe-php/lib',\n        ),\n    );\n\n    public static $classMap = array (\n        'Composer\\\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php',\n    );\n\n    public static function getInitializer(ClassLoader $loader)\n    {\n        return \\Closure::bind(function () use ($loader) {\n            $loader->prefixLengthsPsr4 = ComposerStaticInit8305b34fc54444e2a130ed13dd73f2d8::$prefixLengthsPsr4;\n            $loader->prefixDirsPsr4 = ComposerStaticInit8305b34fc54444e2a130ed13dd73f2d8::$prefixDirsPsr4;\n            $loader->classMap = ComposerStaticInit8305b34fc54444e2a130ed13dd73f2d8::$classMap;\n\n        }, null, ClassLoader::class);\n    }\n}\n","size_bytes":1234},"vendor/composer/installed.php":{"content":"<?php return array(\n    'root' => array(\n        'name' => 'videohub/platform',\n        'pretty_version' => 'dev-master',\n        'version' => 'dev-master',\n        'reference' => 'a034c7f33b0f19a6d1fc2d6a2490312cdda520bb',\n        'type' => 'project',\n        'install_path' => __DIR__ . '/../../',\n        'aliases' => array(),\n        'dev' => true,\n    ),\n    'versions' => array(\n        'stripe/stripe-php' => array(\n            'pretty_version' => 'v10.21.0',\n            'version' => '10.21.0.0',\n            'reference' => 'b4ab319731958077227fad1874a3671458c5d593',\n            'type' => 'library',\n            'install_path' => __DIR__ . '/../stripe/stripe-php',\n            'aliases' => array(),\n            'dev_requirement' => false,\n        ),\n        'videohub/platform' => array(\n            'pretty_version' => 'dev-master',\n            'version' => 'dev-master',\n            'reference' => 'a034c7f33b0f19a6d1fc2d6a2490312cdda520bb',\n            'type' => 'project',\n            'install_path' => __DIR__ . '/../../',\n            'aliases' => array(),\n            'dev_requirement' => false,\n        ),\n    ),\n);\n","size_bytes":1132},"vendor/composer/platform_check.php":{"content":"<?php\n\n// platform_check.php @generated by Composer\n\n$issues = array();\n\nif (!(PHP_VERSION_ID >= 50600)) {\n    $issues[] = 'Your Composer dependencies require a PHP version \">= 5.6.0\". You are running ' . PHP_VERSION . '.';\n}\n\nif ($issues) {\n    if (!headers_sent()) {\n        header('HTTP/1.1 500 Internal Server Error');\n    }\n    if (!ini_get('display_errors')) {\n        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {\n            fwrite(STDERR, 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . implode(PHP_EOL, $issues) . PHP_EOL.PHP_EOL);\n        } elseif (!headers_sent()) {\n            echo 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . str_replace('You are running '.PHP_VERSION.'.', '', implode(PHP_EOL, $issues)) . PHP_EOL.PHP_EOL;\n        }\n    }\n    throw new \\RuntimeException(\n        'Composer detected issues in your platform: ' . implode(' ', $issues)\n    );\n}\n","size_bytes":917},"vendor/stripe/stripe-php/CHANGELOG.md":{"content":"# Changelog\n\n## 10.21.0 - 2023-08-10\n* [#1546](https://github.com/stripe/stripe-php/pull/1546) Update generated code\n  * Add support for new value `payment_reversal` on enum `BalanceTransaction.type`\r\n  * Add support for new value `adjusted_for_overdraft` on enum `CustomerBalanceTransaction.type`\r\n\n## 10.20.0 - 2023-08-03\n* [#1539](https://github.com/stripe/stripe-php/pull/1539) Update generated code\n  * Add support for `subscription_details` on `Invoice`\n  * Add support for new values `sepa_debit_fingerprint` and `us_bank_account_fingerprint` on enum `Radar.ValueList.item_type`\n\n## 10.19.0 - 2023-07-27\n* [#1534](https://github.com/stripe/stripe-php/pull/1534) Update generated code\n  * Improve PHPDoc type for `ApplicationFee.refunds`\n  * Add support for `deleted` on `Apps.Secret`\n* [#1526](https://github.com/stripe/stripe-php/pull/1526) Add constants for payment intent cancellation reasons\n* [#1533](https://github.com/stripe/stripe-php/pull/1533) Update generated code\n  * Add support for new value `service_tax` on enum `TaxRate.tax_type`\n* [#1487](https://github.com/stripe/stripe-php/pull/1487) PHPDoc: use union of literals for $method parameter throughout\n\n## 10.18.0 - 2023-07-20\n* [#1533](https://github.com/stripe/stripe-php/pull/1533) Update generated code\n  * Add support for new value `service_tax` on enum `TaxRate.tax_type`\n* [#1526](https://github.com/stripe/stripe-php/pull/1526) Add constants for payment intent cancellation reasons\n* [#1487](https://github.com/stripe/stripe-php/pull/1487) PHPDoc: use union of literals for $method parameter throughout\n\n## 10.17.0 - 2023-07-13\n* [#1525](https://github.com/stripe/stripe-php/pull/1525) Update generated code\n  * Add support for new resource `Tax.Settings`\n  * Add support for `retrieve` and `update` methods on resource `Settings`\n  * Add support for new value `invalid_tax_location` on enum `StripeError.code`\n  * Add support for `product` on `Tax.TransactionLineItem`\n  * Add constant for `tax.settings.updated` webhook event\n* [#1520](https://github.com/stripe/stripe-php/pull/1520) Update generated code\n  * Release specs are identical.\n\n## 10.16.0 - 2023-06-29\n* [#1517](https://github.com/stripe/stripe-php/pull/1517) Update generated code\n  * Add support for new value `application_fees_not_allowed` on enum `StripeError.code`\n  * Add support for `effective_at` on `CreditNote` and `Invoice`\n  * Add support for `on_behalf_of` on `Mandate`\n* [#1514](https://github.com/stripe/stripe-php/pull/1514) Update generated code\n  * Release specs are identical.\n* [#1512](https://github.com/stripe/stripe-php/pull/1512) Update generated code\n  * Change type of `Checkout.Session.success_url` from `string` to `nullable(string)`\n\n## 10.15.0 - 2023-06-08\n* [#1506](https://github.com/stripe/stripe-php/pull/1506) Update generated code\n  * Add support for `preferred_locales` on `Issuing.Cardholder`\n\n## 10.14.0 - 2023-05-25\n* [#1503](https://github.com/stripe/stripe-php/pull/1503) Update generated code\n  * Add support for `zip` on `PaymentMethod`\n  * Add support for new value `zip` on enum `PaymentMethod.type`\n* [#1502](https://github.com/stripe/stripe-php/pull/1502) Generate error codes\n* [#1501](https://github.com/stripe/stripe-php/pull/1501) Update generated code\n\n* [#1499](https://github.com/stripe/stripe-php/pull/1499) Update generated code\n  * Add support for new values `amusement_tax` and `communications_tax` on enum `TaxRate.tax_type`\n\n## 10.13.0 - 2023-05-11\n* [#1490](https://github.com/stripe/stripe-php/pull/1490) Update generated code\n  * Add support for `paypal` on `PaymentMethod`\n  * Add support for `effective_percentage` on `TaxRate`\n* [#1488](https://github.com/stripe/stripe-php/pull/1488) Increment PHPStan to strictness level 2\n* [#1483](https://github.com/stripe/stripe-php/pull/1483) Update generated code\n\n* [#1480](https://github.com/stripe/stripe-php/pull/1480) Update generated code\n  * Change type of `Identity.VerificationSession.options` from `VerificationSessionOptions` to `nullable(VerificationSessionOptions)`\n  * Change type of `Identity.VerificationSession.type` from `enum('document'|'id_number')` to `nullable(enum('document'|'id_number'))`\n* [#1478](https://github.com/stripe/stripe-php/pull/1478) Update generated code\n  * Release specs are identical.\n* [#1475](https://github.com/stripe/stripe-php/pull/1475) Update generated code\n\n\n## 10.12.1 - 2023-04-04\n* [#1473](https://github.com/stripe/stripe-php/pull/1473) Update generated code\n  * Add back `deleted` from `Invoice.status`.\n\n## 10.12.0 - 2023-03-30\n* [#1470](https://github.com/stripe/stripe-php/pull/1470) Update generated code\n  * Remove support for `create` method on resource `Tax.Transaction`\n    * This is not a breaking change, as this method was deprecated before the Tax Transactions API was released in favor of the `createFromCalculation` method.\n  * Remove support for value `deleted` from enum `Invoice.status`\n    * This is not a breaking change, as the value was never returned or accepted as input.\n* [#1468](https://github.com/stripe/stripe-php/pull/1468) Trigger workflow for tags\n* [#1467](https://github.com/stripe/stripe-php/pull/1467) Update generated code (new)\n  * Release specs are identical.\n\n## 10.11.0 - 2023-03-23\n* [#1458](https://github.com/stripe/stripe-php/pull/1458) Update generated code\n  * Add support for new resources `Tax.CalculationLineItem`, `Tax.Calculation`, `Tax.TransactionLineItem`, and `Tax.Transaction`\n  * Add support for `create` and `list_line_items` methods on resource `Calculation`\n  * Add support for `create_from_calculation`, `create_reversal`, `create`, `list_line_items`, and `retrieve` methods on resource `Transaction`\n  * Add support for `currency_conversion` on `Checkout.Session`\n  * Add support for new value `automatic_async` on enum `PaymentIntent.capture_method`\n  * Add support for new value `link` on enum `PaymentLink.payment_method_types[]`\n  * Add support for `automatic_payment_methods` on `SetupIntent`\n\n## 10.10.0 - 2023-03-16\n* [#1457](https://github.com/stripe/stripe-php/pull/1457) API Updates\n  * Add support for `future_requirements` and `requirements` on `BankAccount`\n  * Add support for new value `automatic_async` on enum `PaymentIntent.capture_method`\n  * Add support for new value `cashapp` on enum `PaymentLink.payment_method_types[]`\n  * Add support for `cashapp` on `PaymentMethod`\n  * Add support for new value `cashapp` on enum `PaymentMethod.type`\n* [#1454](https://github.com/stripe/stripe-php/pull/1454) Update generated code (new)\n  * Add support for new value `cashapp` on enum `PaymentLink.payment_method_types[]`\n  * Add support for `cashapp` on `PaymentMethod`\n  * Add support for new value `cashapp` on enum `PaymentMethod.type`\n\n## 10.9.1 - 2023-03-14\n* [#1453](https://github.com/stripe/stripe-php/pull/1453) Restore StripeClient.getService\n\n## 10.9.0 - 2023-03-09\n* [#1450](https://github.com/stripe/stripe-php/pull/1450) API Updates\n  * Add support for `cancellation_details` on `Subscription`\n  * Fix return types on custom methods (extends https://github.com/stripe/stripe-php/pull/1446)\n\n* [#1446](https://github.com/stripe/stripe-php/pull/1446) stripe->customers->retrievePaymentMethod returns the wrong class (type hint)\n\n## 10.8.0 - 2023-03-02\n* [#1447](https://github.com/stripe/stripe-php/pull/1447) API Updates\n  * Add support for `reconciliation_status` on `Payout`\n  * Add support for new value `lease_tax` on enum `TaxRate.tax_type`\n\n## 10.7.0 - 2023-02-23\n* [#1444](https://github.com/stripe/stripe-php/pull/1444) API Updates\n  * Add support for new value `igst` on enum `TaxRate.tax_type`\n\n## 10.6.1 - 2023-02-21\n* [#1443](https://github.com/stripe/stripe-php/pull/1443) Remove init.php from the list of ignored files\n\n## 10.6.0 - 2023-02-16\n* [#1441](https://github.com/stripe/stripe-php/pull/1441) API Updates\n  * Add support for `refund_payment` method on resource `Terminal.Reader`\n  * Add support for `custom_fields` on `Checkout.Session` and `PaymentLink`\n* [#1236](https://github.com/stripe/stripe-php/pull/1236) subscription_proration_date not always presented in Invoice\n* [#1431](https://github.com/stripe/stripe-php/pull/1431) Fix: Do not use unbounded version constraint for `actions/checkout`\n* [#1436](https://github.com/stripe/stripe-php/pull/1436) Enhancement: Enable and configure `visibility_required` fixer\n* [#1432](https://github.com/stripe/stripe-php/pull/1432) Enhancement: Update `actions/cache`\n* [#1434](https://github.com/stripe/stripe-php/pull/1434) Fix: Remove parentheses\n* [#1433](https://github.com/stripe/stripe-php/pull/1433) Enhancement: Run tests on PHP 8.2\n* [#1438](https://github.com/stripe/stripe-php/pull/1438) Update .gitattributes\n\n## 10.5.0 - 2023-02-02\n* [#1439](https://github.com/stripe/stripe-php/pull/1439) API Updates\n  * Add support for `resume` method on resource `Subscription`\n  * Add support for `amount_shipping` and `shipping_cost` on `CreditNote` and `Invoice`\n  * Add support for `shipping_details` on `Invoice`\n  * Add support for `invoice_creation` on `PaymentLink`\n  * Add support for `trial_settings` on `Subscription`\n  * Add support for new value `paused` on enum `Subscription.status`\n\n## 10.4.0 - 2023-01-19\n* [#1381](https://github.com/stripe/stripe-php/pull/1381) Add getService methods to StripeClient and AbstractServiceFactory to allow mocking\n* [#1424](https://github.com/stripe/stripe-php/pull/1424) API Updates\n\n  * Added `REFUND_CREATED`, `REFUND_UPDATED` event definitions.\n* [#1426](https://github.com/stripe/stripe-php/pull/1426) Ignore PHP version for formatting\n* [#1425](https://github.com/stripe/stripe-php/pull/1425) Fix Stripe::setAccountId parameter type\n* [#1418](https://github.com/stripe/stripe-php/pull/1418) Switch to mb_convert_encoding to fix utf8_encode deprecation warning\n\n## 10.3.0 - 2022-12-22\n* [#1413](https://github.com/stripe/stripe-php/pull/1413) API Updates\n  Change `CheckoutSession.cancel_url` to be nullable.\n\n## 10.2.0 - 2022-12-15\n* [#1411](https://github.com/stripe/stripe-php/pull/1411) API Updates\n  * Add support for new value `invoice_overpaid` on enum `CustomerBalanceTransaction.type`\n* [#1407](https://github.com/stripe/stripe-php/pull/1407) API Updates\n\n\n## 10.1.0 - 2022-12-06\n* [#1405](https://github.com/stripe/stripe-php/pull/1405) API Updates\n  * Add support for `flow` on `BillingPortal.Session`\n* [#1404](https://github.com/stripe/stripe-php/pull/1404) API Updates\n  * Remove support for resources `Order` and `Sku`\n  * Remove support for `all`, `cancel`, `create`, `list_line_items`, `reopen`, `retrieve`, `submit`, and `update` methods on resource `Order`\n  * Remove support for `all`, `create`, `delete`, `retrieve`, and `update` methods on resource `Sku`\n  * Add support for `custom_text` on `Checkout.Session` and `PaymentLink`\n  * Add support for `invoice_creation` and `invoice` on `Checkout.Session`\n  * Remove support for `product` on `LineItem`\n  * Add support for `latest_charge` on `PaymentIntent`\n  * Remove support for `charges` on `PaymentIntent`\n\n## 10.0.0 - 2022-11-16\n* [#1392](https://github.com/stripe/stripe-php/pull/1392) Next major release changes\n\nBreaking changes that arose during code generation of the library that we postponed for the next major version. For changes to the Stripe products, read more at https://stripe.com/docs/upgrades#2022-11-15.\n\n\"⚠️\" symbol highlights breaking changes.\n\n### Deprecated\n* [#1382](https://github.com/stripe/stripe-php/pull/1382) Mark `resource.save` as deprecated. Prefer the static update method that doesn't require retrieval of the resource to update it.\n```PHP\n// before\n$resource = Price::retrieve(self::TEST_RESOURCE_ID);\n$resource->metadata['key'] = 'value';\n$resource->save();\n\n// after\n$resource = Price::update('price_123', [\n    'metadata' => ['key' => 'value'],\n]);\n```\n\n### ⚠️ Removed\n- [#1377](https://github.com/stripe/stripe-php/pull/1377) Removed deprecated `Sku` resource and service\n- [#1375](https://github.com/stripe/stripe-php/pull/1375) Removed deprecated `Orders` resource and service\n- [#1375](https://github.com/stripe/stripe-php/pull/1375) Removed deprecated `Product` field from the `LineItem`\n- [#1388](https://github.com/stripe/stripe-php/pull/1388) Removed deprecated `AlipayAccount` resource\n- [#1396](https://github.com/stripe/stripe-php/pull/1396) Removed `charges` field on `PaymentIntent` and replace it with `latest_charge`.\n\n\n## 9.9.0 - 2022-11-08\n* [#1394](https://github.com/stripe/stripe-php/pull/1394) API Updates\n  * Add support for new values `eg_tin`, `ph_tin`, and `tr_tin` on enum `TaxId.type`\n* [#1389](https://github.com/stripe/stripe-php/pull/1389) API Updates\n  * Add support for `on_behalf_of` on `Subscription`\n* [#1379](https://github.com/stripe/stripe-php/pull/1379) Do not run Coveralls in PR-s\n\n## 9.8.0 - 2022-10-20\n* [#1383](https://github.com/stripe/stripe-php/pull/1383) API Updates\n  * Add support for new values `jp_trn` and `ke_pin` on enum `TaxId.type`\n* [#1293](https://github.com/stripe/stripe-php/pull/1293) Install deps in the install step of CI\n* [#1291](https://github.com/stripe/stripe-php/pull/1291) Fix: Configure finder for `friendsofphp/php-cs-fixer`\n\n## 9.7.0 - 2022-10-13\n* [#1376](https://github.com/stripe/stripe-php/pull/1376) API Updates\n  * Add support for `network_data` on `Issuing.Authorization`\n* [#1374](https://github.com/stripe/stripe-php/pull/1374) Add request_log_url on ErrorObject\n* [#1370](https://github.com/stripe/stripe-php/pull/1370) API Updates\n  * Add support for `created` on `Checkout.Session`\n\n## 9.6.0 - 2022-09-15\n* [#1365](https://github.com/stripe/stripe-php/pull/1365) API Updates\n  * Add support for `from_invoice` and `latest_revision` on `Invoice`\n  * Add support for new value `pix` on enum `PaymentLink.payment_method_types[]`\n  * Add support for `pix` on `PaymentMethod`\n  * Add support for new value `pix` on enum `PaymentMethod.type`\n  * Add support for `created` on `Treasury.CreditReversal` and `Treasury.DebitReversal`\n\n## 9.5.0 - 2022-09-06\n* [#1364](https://github.com/stripe/stripe-php/pull/1364) API Updates\n  * Add support for new value `terminal_reader_splashscreen` on enum `File.purpose`\n* [#1363](https://github.com/stripe/stripe-php/pull/1363) chore: Update PHP tests to handle search methods.\n\n## 9.4.0 - 2022-08-26\n* [#1362](https://github.com/stripe/stripe-php/pull/1362) API Updates\n  * Add support for `login_page` on `BillingPortal.Configuration`\n* [#1360](https://github.com/stripe/stripe-php/pull/1360) Add test coverage using Coveralls\n* [#1361](https://github.com/stripe/stripe-php/pull/1361) fix: Fix type hints for error objects.\n  * Update `Invoice.last_finalization_error`, `PaymentIntent.last_payment_error`, `SetupAttempt.setup_error` and `SetupIntent.setup_error` type to be `StripeObject`.\n    * Addresses https://github.com/stripe/stripe-php/issues/1353. The library today does not actually return a `ErrorObject` for these fields, so the type annotation was incorrect.\n* [#1356](https://github.com/stripe/stripe-php/pull/1356) Add beta readme.md section\n\n## 9.3.0 - 2022-08-23\n* [#1355](https://github.com/stripe/stripe-php/pull/1355) API Updates\n  * Change type of `Treasury.OutboundTransfer.destination_payment_method` from `string` to `string | null`\n  * Change the return type of `CustomerService.fundCashBalance` test helper from `CustomerBalanceTransaction` to `CustomerCashBalanceTransaction`.\n    * This would generally be considered a breaking change, but we've worked with all existing users to migrate and are comfortable releasing this as a minor as it is solely a test helper method. This was essentially broken prior to this change.\n\n## 9.2.0 - 2022-08-19\n* [#1352](https://github.com/stripe/stripe-php/pull/1352) API Updates\n  * Add support for new resource `CustomerCashBalanceTransaction`\n  * Add support for `currency` on `PaymentLink`\n  * Add constant for `customer_cash_balance_transaction.created` webhook event.\n* [#1351](https://github.com/stripe/stripe-php/pull/1351) Add a support section to the readme\n* [#1304](https://github.com/stripe/stripe-php/pull/1304) Allow passing PSR-3 loggers to setLogger as they are compatible\n\n## 9.1.0 - 2022-08-11\n* [#1348](https://github.com/stripe/stripe-php/pull/1348) API Updates\n  * Add support for `payment_method_collection` on `Checkout.Session` and `PaymentLink`\n\n* [#1346](https://github.com/stripe/stripe-php/pull/1346) API Updates\n  * Add support for `expires_at` on `Apps.Secret`\n\n## 9.0.0 - 2022-08-02\n\nBreaking changes that arose during code generation of the library that we postponed for the next major version. For changes to the SDK, read more detailed description at https://github.com/stripe/stripe-php/wiki/Migration-guide-for-v9. For changes to the Stripe products, read more at https://stripe.com/docs/upgrades#2022-08-01.\n\n\"⚠️\" symbol highlights breaking changes.\n\n* [#1344](https://github.com/stripe/stripe-php/pull/1344) API Updates\n* [#1337](https://github.com/stripe/stripe-php/pull/1337) API Updates\n* [#1273](https://github.com/stripe/stripe-php/pull/1273) Add some PHPDoc return types and fixes\n* [#1341](https://github.com/stripe/stripe-php/pull/1341) Next major release changes\n\n### Added\n* Add `alternate_statement_descriptors`, `authorization_code`, and `level3` properties to `Charge` resource.\n* Add `previewLines` method to `CreditNote` resource.\n* Add `transfer_data` property to `Subscription` resource.\n* Add `SOURCE_TYPE_FPX` constant to `Transfer` resource.\n* Add new error code constants to `ErrorObject`.\n* Add support for `shipping_cost` and `shipping_details` on `Checkout.Session`\n\n### ⚠️ Changed\n* Updated certificate bundle ([#1314](https://github.com/stripe/stripe-php/pull/1314))\n* Add `params` parameter to `close` method in `Dispute` resource.\n\n### ⚠️ Removed\n* Remove deprecated `AlipayAccount`, `BitcoinReceiver`, `BitcoinTransaction`, `Recipient`, `RecipientTransfer`, and `ThreeDSecure` resources.\n* Remove `CAPABILITY_CARD_PAYMENTS`, `CAPABILITY_LEGACY_PAYMENTS`, `CAPABILITY_PLATFORM_PAYMENTS`, `CAPABILITY_TRANSFERS`, `CAPABILITY_STATUS_ACTIVE`, `CAPABILITY_STATUS_INACTIVE`, and `CAPABILITY_STATUS_PENDING` constants from `Account` resource. Please use up-to-date values from https://stripe.com/docs/connect/account-capabilities.\n* Remove `AssociatedObjects` array property from `EphemeralKey` resource. The field was undocumented and unsupported.\n* Remove `details` method from `Card` resource. The endpoint was deprecated and no longer exists.\n* Remove `recipient` property from `Card` resource. The property was deprecated.\n* Remove ability to list `Card` resources for a particular `Recipient`.\n* Remove `sources` property from `Card` resource. The property was deprecated.\n* Remove `FAILURE_REASON` constant from `Refund` resource. The value was deprecated.\n* Remove `Recipient` resource. The resource was deprecated.\n* Remove `OrderItem` resource. The resource was deprecated.\n* Remove `all` method from `LineItem`.\n* Remove `cancel` method from `Transfer` and `TransferService`. This method is deprecated.\n* Remove `allTransactions` method from `SourceService` service. Please use `allSourceTransactions` method instead.\n* Remove `persons` method from `Account` resource. Please use `allPersons` method instead.\n* Remove `sourceTransactions` method from `Source` resource. Please use `allSourceTransactions` method instead.\n* Remove `usageRecordSummaries` method from `SubscriptionItem` resource. Please use `allUsageRecordSummaries` method instead.\n* Remove `SOURCE_TYPE_ALIPAY_ACCOUNT` and `SOURCE_TYPE_FINANCING` constants from `Transfer` resource. The values were deprecated and are no longer in use.\n* Remove deprecated error code constants from `ErrorObject`: `CODE_ACCOUNT_ALREADY_EXISTS`, `CODE_ORDER_CREATION_FAILED`, `CODE_ORDER_REQUIRED_SETTINGS`, `CODE_ORDER_STATUS_INVALID`, `CODE_ORDER_UPSTREAM_TIMEOUT`, and `CODE_UPSTREAM_ORDER_CREATION_FAILED`.\n* Remove deprecated event constants from `Webhook`: `ISSUER_FRAUD_RECORD_CREATED`, ` ORDER_PAYMENT_FAILED`, `ORDER_PAYMENT_SUCCEEDED`, `ORDER_UPDATED`, `ORDER_RETURN_CREATED`, `PAYMENT_METHOD_CARD_AUTOMATICALLY_UPDATED`, `PING`, `PROMOTION_CODE_DELETED`, and `TREASURY_RECEIVED_CREDIT_REVERSED`. The events are deprecated and no longer sent by Stripe.\n\n## 8.12.0 - 2022-07-25\n* [#1332](https://github.com/stripe/stripe-php/pull/1332) API Updates\n  * Add support for `default_currency` and `invoice_credit_balance` on `Customer`\n\n\n## 8.11.0 - 2022-07-18\n* [#1324](https://github.com/stripe/stripe-php/pull/1324) API Updates\n  * Add support for new value `blik` on enum `PaymentLink.payment_method_types[]`\n  * Add support for `blik` on `PaymentMethod`\n  * Add support for new value `blik` on enum `PaymentMethod.type`\n  * Add `Invoice.upcomingLines` method.\n  * Add `SourceService.allSourceTransactions` method.\n* [#1322](https://github.com/stripe/stripe-php/pull/1322) API Updates\n  * Change type of `source_type` on `Transfer` from nullable string to string (comment-only change)\n\n## 8.10.0 - 2022-07-07\n* [#1319](https://github.com/stripe/stripe-php/pull/1319) API Updates\n  * Add support for `currency_options` on `Coupon` and `Price`\n  * Add support for `currency` on `Subscription`\n* [#1318](https://github.com/stripe/stripe-php/pull/1318) API Updates\n  * Add support for new values financial_connections.account.created, financial_connections.account.deactivated, financial_connections.account.disconnected, financial_connections.account.reactivated, and financial_connections.account.refreshed_balance on `Event`.\n\n## 8.9.0 - 2022-06-29\n* [#1316](https://github.com/stripe/stripe-php/pull/1316) API Updates\n  * Add support for `deliver_card`, `fail_card`, `return_card`, and `ship_card` test helper methods on resource `Issuing.Card`\n  * Add support for `subtotal_excluding_tax` on `CreditNote` and `Invoice`\n  * Add support for `amount_excluding_tax` and `unit_amount_excluding_tax` on `CreditNoteLineItem` and `InvoiceLineItem`\n  * Add support for `total_excluding_tax` on `Invoice`\n  * Change type of `PaymentLink.payment_method_types[]` from `literal('card')` to `enum`\n  * Add support for `promptpay` on `PaymentMethod`\n  * Add support for new value `promptpay` on enum `PaymentMethod.type`\n  * Add support for `hosted_regulatory_receipt_url` and `reversal_details` on `Treasury.ReceivedCredit` and `Treasury.ReceivedDebit`\n\n## 8.8.0 - 2022-06-23\n* [#1302](https://github.com/stripe/stripe-php/pull/1302) API Updates\n  * Add support for `custom_unit_amount` on `Price`\n* [#1301](https://github.com/stripe/stripe-php/pull/1301) API Updates\n\n  Documentation updates.\n\n## 8.7.0 - 2022-06-17\n* [#1306](https://github.com/stripe/stripe-php/pull/1306) API Updates\n  * Add support for `fund_cash_balance` test helper method on resource `Customer`\n  * Add support for `total_excluding_tax` on `CreditNote`\n  * Add support for `rendering_options` on `Invoice`\n* [#1307](https://github.com/stripe/stripe-php/pull/1307) Support updating pre-release versions\n* [#1305](https://github.com/stripe/stripe-php/pull/1305) Trigger workflows on beta branches\n* [#1302](https://github.com/stripe/stripe-php/pull/1302) API Updates\n  * Add support for `custom_unit_amount` on `Price`\n* [#1301](https://github.com/stripe/stripe-php/pull/1301) API Updates\n\n  Documentation updates.\n\n## 8.6.0 - 2022-06-08\n* [#1300](https://github.com/stripe/stripe-php/pull/1300) API Updates\n  * Add support for `attach_to_self` and `flow_directions` on `SetupAttempt`\n\n## 8.5.0 - 2022-06-01\n* [#1298](https://github.com/stripe/stripe-php/pull/1298) API Updates\n  * Add support for `radar_options` on `Charge` and `PaymentMethod`\n  * Add support for new value `simulated_wisepos_e` on enum `Terminal.Reader.device_type`\n\n## 8.4.0 - 2022-05-26\n* [#1296](https://github.com/stripe/stripe-php/pull/1296) API Updates\n  * Add support for `persons` method on resource `Account`\n  * Add support for `balance_transactions` method on resource `Customer`\n  * Add support for `id_number_secondary_provided` on `Person`\n* [#1295](https://github.com/stripe/stripe-php/pull/1295) API Updates\n\n\n## 8.3.0 - 2022-05-23\n* [#1294](https://github.com/stripe/stripe-php/pull/1294) API Updates\n  * Add support for new resource `Apps.Secret`\n  * Add support for `affirm` and `link` on `PaymentMethod`\n  * Add support for new values `affirm` and `link` on enum `PaymentMethod.type`\n* [#1289](https://github.com/stripe/stripe-php/pull/1289) fix: Update RequestOptions#redactedApiKey to stop exploding null.\n\n## 8.2.0 - 2022-05-19\n* [#1286](https://github.com/stripe/stripe-php/pull/1286) API Updates\n  * Add support for new resources `Treasury.CreditReversal`, `Treasury.DebitReversal`, `Treasury.FinancialAccountFeatures`, `Treasury.FinancialAccount`, `Treasury.FlowDetails`, `Treasury.InboundTransfer`, `Treasury.OutboundPayment`, `Treasury.OutboundTransfer`, `Treasury.ReceivedCredit`, `Treasury.ReceivedDebit`, `Treasury.TransactionEntry`, and `Treasury.Transaction`\n  * Add support for `retrieve_payment_method` method on resource `Customer`\n  * Add support for `all` and `list_owners` methods on resource `FinancialConnections.Account`\n  * Add support for `treasury` on `Issuing.Authorization`, `Issuing.Dispute`, and `Issuing.Transaction`\n  * Add support for `financial_account` on `Issuing.Card`\n  * Add support for `client_secret` on `Order`\n  * Add support for `attach_to_self` and `flow_directions` on `SetupIntent`\n\n## 8.1.0 - 2022-05-11\n* [#1284](https://github.com/stripe/stripe-php/pull/1284) API Updates\n  * Add support for `consent_collection`, `customer_creation`, `payment_intent_data`, `shipping_options`, `submit_type`, and `tax_id_collection` on `PaymentLink`\n  * Add support for `description` on `Subscription`\n\n## 8.0.0 - 2022-05-09\n* [#1283](https://github.com/stripe/stripe-php/pull/1283) Major version release of v8.0.0. The [migration guide](https://github.com/stripe/stripe-php/wiki/Migration-Guide-for-v8) contains more information.\n  (⚠️ = breaking changes):\n  * ⚠️ Replace the legacy `Order` API with the new `Order` API.\n    * Resource modified: `Order`.\n    * New methods: `cancel`, `list_line_items`, `reopen`, and `submit`\n    * Removed methods: `pay` and `return_order`\n    * Removed resources: `OrderItem` and `OrderReturn`\n    * Removed references from other resources: `Charge.order`\n  * ⚠️ Rename `\\FinancialConnections\\Account.refresh` method to `\\FinancialConnections\\Account.refresh_account`\n  * Add support for `amount_discount`, `amount_tax`, and `product` on `LineItem`\n\n## 7.128.0 - 2022-05-05\n* [#1282](https://github.com/stripe/stripe-php/pull/1282) API Updates\n  * Add support for `default_price` on `Product`\n  * Add support for `instructions_email` on `Refund`\n\n\n## 7.127.0 - 2022-05-05\n* [#1281](https://github.com/stripe/stripe-php/pull/1281) API Updates\n  * Add support for new resources `FinancialConnections.AccountOwner`, `FinancialConnections.AccountOwnership`, `FinancialConnections.Account`, and `FinancialConnections.Session`\n* [#1278](https://github.com/stripe/stripe-php/pull/1278) Pin setup-php action version.\n* [#1277](https://github.com/stripe/stripe-php/pull/1277) API Updates\n  * Add support for `registered_address` on `Person`\n\n## 7.126.0 - 2022-05-03\n* [#1276](https://github.com/stripe/stripe-php/pull/1276) API Updates\n  * Add support for new resource `CashBalance`\n  * Change type of `BillingPortal.Configuration.application` from `$Application` to `deletable($Application)`\n  * Add support for `cash_balance` on `Customer`\n  * Add support for `application` on `Invoice`, `Quote`, `SubscriptionSchedule`, and `Subscription`\n  * Add support for new value `eu_oss_vat` on enum `TaxId.type`\n* [#1274](https://github.com/stripe/stripe-php/pull/1274) Fix PHPDoc on Discount for nullable properties\n* [#1272](https://github.com/stripe/stripe-php/pull/1272) Allow users to pass a custom IPRESOLVE cURL option.\n\n## 7.125.0 - 2022-04-21\n* [#1270](https://github.com/stripe/stripe-php/pull/1270) API Updates\n  * Add support for `expire` test helper method on resource `Refund`\n\n## 7.124.0 - 2022-04-18\n* [#1265](https://github.com/stripe/stripe-php/pull/1265) API Updates\n  * Add support for new resources `FundingInstructions` and `Terminal.Configuration`\n  * Add support for `create_funding_instructions` method on resource `Customer`\n  * Add support for `amount_details` on `PaymentIntent`\n  * Add support for `customer_balance` on `PaymentMethod`\n  * Add support for new value `customer_balance` on enum `PaymentMethod.type`\n  * Add support for `configuration_overrides` on `Terminal.Location`\n\n\n## 7.123.0 - 2022-04-13\n* [#1263](https://github.com/stripe/stripe-php/pull/1263) API Updates\n  * Add support for `increment_authorization` method on resource `PaymentIntent`\n* [#1262](https://github.com/stripe/stripe-php/pull/1262) Add support for updating the version of the repo\n* [#1230](https://github.com/stripe/stripe-php/pull/1230) Add PHPDoc return types\n* [#1242](https://github.com/stripe/stripe-php/pull/1242) Fix some PHPDoc in tests\n\n## 7.122.0 - 2022-04-08\n* [#1261](https://github.com/stripe/stripe-php/pull/1261) API Updates\n  * Add support for `apply_customer_balance` method on resource `PaymentIntent`\n* [#1259](https://github.com/stripe/stripe-php/pull/1259) API Updates\n\n  * Add `payment_intent.partially_funded`, `terminal.reader.action_failed`, and `terminal.reader.action_succeeded` events.\n\n## 7.121.0 - 2022-03-30\n* [#1258](https://github.com/stripe/stripe-php/pull/1258) API Updates\n  * Add support for `cancel_action`, `process_payment_intent`, `process_setup_intent`, and `set_reader_display` methods on resource `Terminal.Reader`\n  * Add support for `action` on `Terminal.Reader`\n\n## 7.120.0 - 2022-03-29\n* [#1257](https://github.com/stripe/stripe-php/pull/1257) API Updates\n  * Add support for Search API\n    * Add support for `search` method on resources `Charge`, `Customer`, `Invoice`, `PaymentIntent`, `Price`, `Product`, and `Subscription`\n\n## 7.119.0 - 2022-03-25\n* [#1256](https://github.com/stripe/stripe-php/pull/1256) API Updates\n  * Add support for PayNow and US Bank Accounts Debits payments\n      * Add support for `paynow` and `us_bank_account` on `PaymentMethod`\n      * Add support for new values `paynow` and `us_bank_account` on enum `PaymentMethod.type`\n  * Add support for `failure_balance_transaction` on `Charge`\n\n## 7.118.0 - 2022-03-23\n* [#1255](https://github.com/stripe/stripe-php/pull/1255) API Updates\n  * Add support for `cancel` method on resource `Refund`\n  * Add support for new values `bg_uic`, `hu_tin`, and `si_tin` on enum `TaxId.type`\n  * Add  `test_helpers.test_clock.advancing`, `test_helpers.test_clock.created`, `test_helpers.test_clock.deleted`, `test_helpers.test_clock.internal_failure`, and `test_helpers.test_clock.ready` events.\n\n\n## 7.117.0 - 2022-03-18\n* [#1254](https://github.com/stripe/stripe-php/pull/1254) API Updates\n  * Add support for `status` on `Card`\n* [#1251](https://github.com/stripe/stripe-php/pull/1251) Add support for SearchResult objects.\n* [#1249](https://github.com/stripe/stripe-php/pull/1249) Add missing constant for payment_behavior\n\n## 7.116.0 - 2022-03-02\n* [#1248](https://github.com/stripe/stripe-php/pull/1248) API Updates\n  * Add support for `proration_details` on `InvoiceLineItem`\n\n\n## 7.115.0 - 2022-03-01\n* [#1245](https://github.com/stripe/stripe-php/pull/1245) [#1247](https://github.com/stripe/stripe-php/pull/1247) API Updates\n  * Add support for new resource `TestHelpers.TestClock`\n  * Add support for `test_clock` on `Customer`, `Invoice`, `InvoiceItem`, `Quote`, `Subscription`, and `SubscriptionSchedule`\n  * Add support for `next_action` on `Refund`\n  * Add support for `konbini` on `PaymentMethod`\n* [#1244](https://github.com/stripe/stripe-php/pull/1244) API Updates\n  * Add support for new values `bbpos_wisepad3` and `stripe_m2` on enum `Terminal.Reader.device_type`\n\n## 7.114.0 - 2022-02-15\n* [#1243](https://github.com/stripe/stripe-php/pull/1243) Add test\n* [#1240](https://github.com/stripe/stripe-php/pull/1240) API Updates\n  * Add support for `verify_microdeposits` method on resources `PaymentIntent` and `SetupIntent`\n* [#1241](https://github.com/stripe/stripe-php/pull/1241) Add generic parameter to \\Stripe\\Collection usages\n\n## 7.113.0 - 2022-02-03\n* [#1239](https://github.com/stripe/stripe-php/pull/1239) API Updates\n  * Add `REASON_EXPIRED_UNCAPTURED_CHARGE` enum value on `Refund`.\n\n## 7.112.0 - 2022-01-25\n* [#1235](https://github.com/stripe/stripe-php/pull/1235) API Updates\n  * Add support for `phone_number_collection` on `PaymentLink`\n  * Add support for new value `is_vat` on enum `TaxId.type`\n\n\n## 7.111.0 - 2022-01-20\n* [#1233](https://github.com/stripe/stripe-php/pull/1233) API Updates\n  * Add support for new resource `PaymentLink`\n  * Add support for `payment_link` on `Checkout.Session`\n\n## 7.110.0 - 2022-01-13\n* [#1232](https://github.com/stripe/stripe-php/pull/1232) API Updates\n  * Add support for `paid_out_of_band` on `Invoice`\n\n## 7.109.0 - 2022-01-12\n* [#1231](https://github.com/stripe/stripe-php/pull/1231) API Updates\n  * Add support for `customer_creation` on `Checkout.Session`\n* [#1227](https://github.com/stripe/stripe-php/pull/1227) Update docs URLs\n\n## 7.108.0 - 2021-12-22\n* [#1226](https://github.com/stripe/stripe-php/pull/1226) Upgrade php-cs-fixer to 3.4.0.\n* [#1222](https://github.com/stripe/stripe-php/pull/1222) API Updates\n  * Add support for `processing` on `PaymentIntent`\n* [#1220](https://github.com/stripe/stripe-php/pull/1220) API Updates\n\n## 7.107.0 - 2021-12-09\n* [#1219](https://github.com/stripe/stripe-php/pull/1219) API Updates\n  * Add support for `metadata` on `BillingPortal.Configuration`\n  * Add support for `wallets` on `Issuing.Card`\n\n## 7.106.0 - 2021-12-09\n* [#1218](https://github.com/stripe/stripe-php/pull/1218) API Updates\n  * Add support for new values `ge_vat` and `ua_vat` on enum `TaxId.type`\n* [#1216](https://github.com/stripe/stripe-php/pull/1216) Fix namespaced classes in @return PHPDoc.\n* [#1214](https://github.com/stripe/stripe-php/pull/1214) Announce PHP8 support in CHANGELOG.md\n\n## 7.105.0 - 2021-12-06\n* [#1213](https://github.com/stripe/stripe-php/pull/1213) PHP 8.1 missing ReturnTypeWillChange annotations.\n* As of this version, PHP 8.1 is officially supported.\n\n## 7.104.0 - 2021-12-01\n* [#1211](https://github.com/stripe/stripe-php/pull/1211) PHPStan compatibility with PHP8.x\n* [#1209](https://github.com/stripe/stripe-php/pull/1209) PHPUnit compatibility with PHP 8.x\n\n## 7.103.0 - 2021-11-19\n* [#1206](https://github.com/stripe/stripe-php/pull/1206) API Updates\n  * Add support for new value `jct` on enum `TaxRate.tax_type`\n\n## 7.102.0 - 2021-11-17\n* [#1205](https://github.com/stripe/stripe-php/pull/1205) API Updates\n  * Add support for `automatic_payment_methods` on `PaymentIntent`\n\n## 7.101.0 - 2021-11-16\n* [#1203](https://github.com/stripe/stripe-php/pull/1203) API Updates\n  * Add support for new resource `ShippingRate`\n  * Add support for `shipping_options` and `shipping_rate` on `Checkout.Session`\n  * Add support for `expire` method on resource `Checkout.Session`\n  * Add support for `status` on `Checkout.Session`\n\n## 7.100.0 - 2021-10-11\n* [#1190](https://github.com/stripe/stripe-php/pull/1190) API Updates\n  * Add support for `klarna` on `PaymentMethod`.\n\n## 7.99.0 - 2021-10-11\n* [#1188](https://github.com/stripe/stripe-php/pull/1188) API Updates\n  * Add support for `list_payment_methods` method on resource `Customer`\n\n## 7.98.0 - 2021-10-07\n* [#1187](https://github.com/stripe/stripe-php/pull/1187) API Updates\n  * Add support for `phone_number_collection` on `Checkout.Session`\n  * Add support for new value `customer_id` on enum `Radar.ValueList.item_type`\n  * Add support for new value `bbpos_wisepos_e` on enum `Terminal.Reader.device_type`\n\n## 7.97.0 - 2021-09-16\n* [#1181](https://github.com/stripe/stripe-php/pull/1181) API Updates\n  * Add support for `full_name_aliases` on `Person`\n\n## 7.96.0 - 2021-09-15\n* [#1178](https://github.com/stripe/stripe-php/pull/1178) API Updates\n  * Add support for livemode on Reporting.ReportType\n  * Add support for new value `rst` on enum `TaxRate.tax_type`\n\n## 7.95.0 - 2021-09-01\n* [#1177](https://github.com/stripe/stripe-php/pull/1177) API Updates\n  * Add support for `future_requirements` on `Account`, `Capability`, and `Person`\n  * Add support for `after_expiration`, `consent`, `consent_collection`, `expires_at`, and `recovered_from` on `Checkout.Session`\n\n## 7.94.0 - 2021-08-19\n* [#1173](https://github.com/stripe/stripe-php/pull/1173) API Updates\n  * Add support for new value `fil` on enum `Checkout.Session.locale`\n  * Add support for new value `au_arn` on enum `TaxId.type`\n\n## 7.93.0 - 2021-08-11\n* [#1172](https://github.com/stripe/stripe-php/pull/1172) API Updates\n  * Add support for `locale` on `BillingPortal.Session`\n\n* [#1171](https://github.com/stripe/stripe-php/pull/1171) Fix typo in docblock `CurlClient::executeStreamingRequestWithRetries`\n\n## 7.92.0 - 2021-07-28\n* [#1167](https://github.com/stripe/stripe-php/pull/1167) API Updates\n  * Add support for `account_type` on `BankAccount`\n  * Add support for new value `redacted` on enum `Review.closed_reason`\n\n## 7.91.0 - 2021-07-22\n* [#1164](https://github.com/stripe/stripe-php/pull/1164) API Updates\n  * Add support for new values `hr`, `ko`, and `vi` on enum `Checkout.Session.locale`\n  * Add support for `payment_settings` on `Subscription`\n\n## 7.90.0 - 2021-07-20\n* [#1163](https://github.com/stripe/stripe-php/pull/1163) API Updates\n  * Add support for `wallet` on `Issuing.Transaction`\n* [#1160](https://github.com/stripe/stripe-php/pull/1160) Remove unused API error types from docs.\n\n## 7.89.0 - 2021-07-14\n* [#1158](https://github.com/stripe/stripe-php/pull/1158) API Updates\n  * Add support for `list_computed_upfront_line_items` method on resource `Quote`\n* [#1157](https://github.com/stripe/stripe-php/pull/1157) Improve readme for old PHP versions\n\n## 7.88.0 - 2021-07-09\n* [#1152](https://github.com/stripe/stripe-php/pull/1152) API Updates\n  * Add support for new resource `Quote`\n  * Add support for `quote` on `Invoice`\n  * Add support for new value `quote_accept` on enum `Invoice.billing_reason`\n* [#1155](https://github.com/stripe/stripe-php/pull/1155) Add streaming methods to Service infra\n  * Add support for `setStreamingHttpClient` and `streamingHttpClient` to `ApiRequestor`\n  * Add support for `getStreamingClient` and `requestStream` to `AbstractService`\n  * Add support for `requestStream` to `BaseStripeClient`\n  * `\\Stripe\\RequestOptions::parse` now clones its input if it is already a `RequestOptions` object, to prevent accidental mutation.\n* [#1151](https://github.com/stripe/stripe-php/pull/1151) Add `mode` constants into Checkout\\Session\n\n## 7.87.0 - 2021-06-30\n* [#1149](https://github.com/stripe/stripe-php/pull/1149) API Updates\n  * Add support for `wechat_pay` on `PaymentMethod`\n* [#1143](https://github.com/stripe/stripe-php/pull/1143) Streaming requests\n* [#1138](https://github.com/stripe/stripe-php/pull/1138) Deprecate travis\n\n## 7.86.0 - 2021-06-25\n* [#1145](https://github.com/stripe/stripe-php/pull/1145) API Updates\n  * Add support for `boleto` on `PaymentMethod`.\n  * Add support for `il_vat` as a member of the `TaxID.Type` enum.\n\n## 7.85.0 - 2021-06-18\n* [#1142](https://github.com/stripe/stripe-php/pull/1142) API Updates\n  * Add support for new TaxId types: `ca_pst_mb`, `ca_pst_bc`, `ca_gst_hst`, and `ca_pst_sk`.\n\n## 7.84.0 - 2021-06-16\n* [#1141](https://github.com/stripe/stripe-php/pull/1141) Update PHPDocs\n  * Add support for `url` on `Checkout\\Session`\n\n\n## 7.83.0 - 2021-06-07\n* [#1140](https://github.com/stripe/stripe-php/pull/1140) API Updates\n  * Added support for `tax_id_collection` on `Checkout\\Session` and `Checkout\\Session#create`\n  * Update `Location` to be expandable on `Terminal\\Reader`\n\n## 7.82.0 - 2021-06-04\n* [#1136](https://github.com/stripe/stripe-php/pull/1136) Update PHPDocs\n  * Add support for `controller` on `Account`.\n\n## 7.81.0 - 2021-06-04\n* [#1135](https://github.com/stripe/stripe-php/pull/1135) API Updates\n  * Add support for new resource `TaxCode`\n  * Add support for `automatic_tax` `Invoice` and`Checkout.Session`.\n  * Add support for `tax_behavior` on `Price`\n  * Add support for `tax_code` on `Product`\n  * Add support for `tax` on `Customer`\n  * Add support for `tax_type` enum on `TaxRate`\n\n## 7.80.0 - 2021-05-26\n* [#1130](https://github.com/stripe/stripe-php/pull/1130) Update PHPDocs\n\n## 7.79.0 - 2021-05-19\n* [#1126](https://github.com/stripe/stripe-php/pull/1126) API Updates\n  * Added support for new resource `Identity.VerificationReport`\n  * Added support for new resource `Identity.VerificationSession`\n  * `File#list.purpose` and `File.purpose` added new enum members: `identity_document_downloadable` and `selfie`.\n\n## 7.78.0 - 2021-05-05\n* [#1120](https://github.com/stripe/stripe-php/pull/1120) Update PHPDocs\n  * Add support for `Radar.EarlyFraudWarning.payment_intent`\n\n## 7.77.0 - 2021-04-12\n* [#1110](https://github.com/stripe/stripe-php/pull/1110) Update PHPDocs\n  * Add support for `acss_debit` on `PaymentMethod`\n  * Add support for `payment_method_options` on `Checkout\\Session`\n* [#1107](https://github.com/stripe/stripe-php/pull/1107) Remove duplicate object phpdoc\n\n## 7.76.0 - 2021-03-22\n* [#1100](https://github.com/stripe/stripe-php/pull/1100) Update PHPDocs\n  * Added support for `amount_shipping` on `Checkout.Session.total_details`\n* [#1088](https://github.com/stripe/stripe-php/pull/1088) Make possibility to extend CurlClient\n\n## 7.75.0 - 2021-02-22\n* [#1094](https://github.com/stripe/stripe-php/pull/1094) Add support for Billing Portal Configuration API\n\n## 7.74.0 - 2021-02-17\n* [#1093](https://github.com/stripe/stripe-php/pull/1093) Update PHPDocs\n  * Add support for on_behalf_of to Invoice\n\n## 7.73.0 - 2021-02-16\n* [#1091](https://github.com/stripe/stripe-php/pull/1091) Update PHPDocs\n  * Add support for `afterpay_clearpay` on `PaymentMethod`.\n\n## 7.72.0 - 2021-02-08\n* [#1089](https://github.com/stripe/stripe-php/pull/1089) Update PHPDocs\n  * Add support for `afterpay_clearpay_payments` on `Account.capabilities`\n  * Add support for `payment_settings` on `Invoice`\n\n## 7.71.0 - 2021-02-05\n* [#1087](https://github.com/stripe/stripe-php/pull/1087) Update PHPDocs\n* [#1086](https://github.com/stripe/stripe-php/pull/1086) Update CA cert bundle URL\n\n## 7.70.0 - 2021-02-03\n* [#1085](https://github.com/stripe/stripe-php/pull/1085) Update PHPDocs\n  * Add support for `nationality` on `Person`\n  * Add member `gb_vat` of `TaxID` enum\n\n\n## 7.69.0 - 2021-01-21\n* [#1079](https://github.com/stripe/stripe-php/pull/1079) Update PHPDocs\n\n## 7.68.0 - 2021-01-14\n* [#1063](https://github.com/stripe/stripe-php/pull/1063) Multiple API changes\n* [#1061](https://github.com/stripe/stripe-php/pull/1061) Bump phpDocumentor to 3.0.0\n\n## 7.67.0 - 2020-12-09\n* [#1060](https://github.com/stripe/stripe-php/pull/1060) Improve PHPDocs for `Discount`\n* [#1059](https://github.com/stripe/stripe-php/pull/1059) Upgrade PHPStan to 0.12.59\n* [#1057](https://github.com/stripe/stripe-php/pull/1057) Bump PHP-CS-Fixer and update code\n\n## 7.66.1 - 2020-12-01\n* [#1054](https://github.com/stripe/stripe-php/pull/1054) Improve error message for invalid keys in StripeClient\n\n## 7.66.0 - 2020-11-24\n* [#1053](https://github.com/stripe/stripe-php/pull/1053) Update PHPDocs\n\n## 7.65.0 - 2020-11-19\n* [#1050](https://github.com/stripe/stripe-php/pull/1050) Added constants for `proration_behavior` on `Subscription`\n\n## 7.64.0 - 2020-11-18\n* [#1049](https://github.com/stripe/stripe-php/pull/1049) Update PHPDocs\n\n## 7.63.0 - 2020-11-17\n* [#1048](https://github.com/stripe/stripe-php/pull/1048) Update PHPDocs\n* [#1046](https://github.com/stripe/stripe-php/pull/1046) Force IPv4 resolving\n\n## 7.62.0 - 2020-11-09\n* [#1041](https://github.com/stripe/stripe-php/pull/1041) Add missing constants on `Event`\n* [#1038](https://github.com/stripe/stripe-php/pull/1038) Update PHPDocs\n\n## 7.61.0 - 2020-10-20\n* [#1030](https://github.com/stripe/stripe-php/pull/1030) Add support for `jp_rn` and `ru_kpp` as a `type` on `TaxId`\n\n## 7.60.0 - 2020-10-15\n* [#1027](https://github.com/stripe/stripe-php/pull/1027) Warn if opts are in params\n\n## 7.58.0 - 2020-10-14\n* [#1026](https://github.com/stripe/stripe-php/pull/1026) Add support for the Payout Reverse API\n\n## 7.57.0 - 2020-09-29\n* [#1020](https://github.com/stripe/stripe-php/pull/1020) Add support for the `SetupAttempt` resource and List API\n\n## 7.56.0 - 2020-09-25\n* [#1019](https://github.com/stripe/stripe-php/pull/1019) Update PHPDocs\n\n## 7.55.0 - 2020-09-24\n* [#1018](https://github.com/stripe/stripe-php/pull/1018) Multiple API changes\n  * Updated PHPDocs\n  * Added `TYPE_CONTRIBUTION` as a constant on `BalanceTransaction`\n\n## 7.54.0 - 2020-09-23\n* [#1017](https://github.com/stripe/stripe-php/pull/1017) Updated PHPDoc\n\n## 7.53.1 - 2020-09-22\n* [#1015](https://github.com/stripe/stripe-php/pull/1015) Bugfix: don't error on systems with php_uname in disablefunctions with whitespace\n\n## 7.53.0 - 2020-09-21\n* [#1016](https://github.com/stripe/stripe-php/pull/1016) Updated PHPDocs\n\n## 7.52.0 - 2020-09-08\n* [#1010](https://github.com/stripe/stripe-php/pull/1010) Update PHPDocs\n\n## 7.51.0 - 2020-09-02\n* [#1007](https://github.com/stripe/stripe-php/pull/1007) Multiple API changes\n  * Add support for the Issuing Dispute Submit API\n  * Add constants for `payment_status` on Checkout `Session`\n* [#1003](https://github.com/stripe/stripe-php/pull/1003) Add trim to getSignatures to allow for leading whitespace.\n\n## 7.50.0 - 2020-08-28\n* [#1005](https://github.com/stripe/stripe-php/pull/1005) Updated PHPDocs\n\n## 7.49.0 - 2020-08-19\n* [#998](https://github.com/stripe/stripe-php/pull/998) PHPDocs updated\n\n## 7.48.0 - 2020-08-17\n* [#997](https://github.com/stripe/stripe-php/pull/997) PHPDocs updated\n* [#996](https://github.com/stripe/stripe-php/pull/996) Fixing telemetry\n\n## 7.47.0 - 2020-08-13\n* [#994](https://github.com/stripe/stripe-php/pull/994) Nullable balance_transactions on issuing disputes\n* [#991](https://github.com/stripe/stripe-php/pull/991) Fix invalid return types in OAuthService\n\n## 7.46.1 - 2020-08-07\n* [#990](https://github.com/stripe/stripe-php/pull/990) PHPdoc changes\n\n## 7.46.0 - 2020-08-05\n* [#989](https://github.com/stripe/stripe-php/pull/989) Add support for the `PromotionCode` resource and APIs\n\n## 7.45.0 - 2020-07-28\n* [#981](https://github.com/stripe/stripe-php/pull/981) PHPdoc updates\n\n## 7.44.0 - 2020-07-20\n* [#948](https://github.com/stripe/stripe-php/pull/948) Add `first()` and `last()` functions to `Collection`\n\n## 7.43.0 - 2020-07-17\n* [#975](https://github.com/stripe/stripe-php/pull/975) Add support for `political_exposure` on `Person`\n\n## 7.42.0 - 2020-07-15\n* [#974](https://github.com/stripe/stripe-php/pull/974) Add new constants for `purpose` on `File`\n\n## 7.41.1 - 2020-07-15\n* [#973](https://github.com/stripe/stripe-php/pull/973) Multiple PHPDoc fixes\n\n## 7.41.0 - 2020-07-14\n* [#971](https://github.com/stripe/stripe-php/pull/971) Adds enum values for `billing_address_collection` on Checkout `Session`\n\n## 7.40.0 - 2020-07-06\n* [#964](https://github.com/stripe/stripe-php/pull/964) Add OAuthService\n\n## 7.39.0 - 2020-06-25\n* [#960](https://github.com/stripe/stripe-php/pull/960) Add constants for `payment_behavior` on `Subscription`\n\n## 7.38.0 - 2020-06-24\n* [#959](https://github.com/stripe/stripe-php/pull/959) Add multiple constants missing for `Event`\n\n## 7.37.2 - 2020-06-23\n* [#957](https://github.com/stripe/stripe-php/pull/957) Updated PHPDocs\n\n## 7.37.1 - 2020-06-11\n* [#952](https://github.com/stripe/stripe-php/pull/952) Improve PHPDoc\n\n## 7.37.0 - 2020-06-09\n* [#950](https://github.com/stripe/stripe-php/pull/950) Add support for `id_npwp` and `my_frp` as `type` on `TaxId`\n\n## 7.36.2 - 2020-06-03\n* [#946](https://github.com/stripe/stripe-php/pull/946) Update PHPDoc\n\n## 7.36.1 - 2020-05-28\n* [#938](https://github.com/stripe/stripe-php/pull/938) Remove extra array_keys() call.\n* [#942](https://github.com/stripe/stripe-php/pull/942) fix autopagination for service methods\n\n## 7.36.0 - 2020-05-21\n* [#937](https://github.com/stripe/stripe-php/pull/937) Add support for `ae_trn`, `cl_tin` and `sa_vat` as `type` on `TaxId`\n\n## 7.35.0 - 2020-05-20\n* [#936](https://github.com/stripe/stripe-php/pull/936) Add `anticipation_repayment` as a `type` on `BalanceTransaction`\n\n## 7.34.0 - 2020-05-18\n* [#934](https://github.com/stripe/stripe-php/pull/934) Add support for `issuing_dispute` as a `type` on `BalanceTransaction`\n\n## 7.33.1 - 2020-05-15\n* [#933](https://github.com/stripe/stripe-php/pull/933) Services bugfix: convert nested null params to empty strings\n\n## 7.33.0 - 2020-05-14\n* [#771](https://github.com/stripe/stripe-php/pull/771) Introduce client/services API. The [migration guide](https://github.com/stripe/stripe-php/wiki/Migration-to-StripeClient-and-services-in-7.33.0) contains before & after examples of the backwards-compatible changes.\n\n## 7.32.1 - 2020-05-13\n* [#932](https://github.com/stripe/stripe-php/pull/932) Fix multiple PHPDoc\n\n## 7.32.0 - 2020-05-11\n* [#931](https://github.com/stripe/stripe-php/pull/931) Add support for the `LineItem` resource and APIs\n\n## 7.31.0 - 2020-05-01\n* [#927](https://github.com/stripe/stripe-php/pull/927) Add support for new tax IDs\n\n## 7.30.0 - 2020-04-29\n* [#924](https://github.com/stripe/stripe-php/pull/924) Add support for the `Price` resource and APIs\n\n## 7.29.0 - 2020-04-22\n* [#920](https://github.com/stripe/stripe-php/pull/920) Add support for the `Session` resource and APIs on the `BillingPortal` namespace\n\n## 7.28.1 - 2020-04-10\n* [#915](https://github.com/stripe/stripe-php/pull/915) Improve PHPdocs for many classes\n\n## 7.28.0 - 2020-04-03\n* [#912](https://github.com/stripe/stripe-php/pull/912) Preserve backwards compatibility for typoed `TYPE_ADJUSTEMENT` enum.\n* [#911](https://github.com/stripe/stripe-php/pull/911) Codegenerated PHPDoc for nested resources\n* [#902](https://github.com/stripe/stripe-php/pull/902) Update docstrings for nested resources\n\n## 7.27.3 - 2020-03-18\n* [#899](https://github.com/stripe/stripe-php/pull/899) Convert keys to strings in `StripeObject::toArray()`\n\n## 7.27.2 - 2020-03-13\n* [#894](https://github.com/stripe/stripe-php/pull/894) Multiple PHPDocs changes\n\n## 7.27.1 - 2020-03-03\n* [#890](https://github.com/stripe/stripe-php/pull/890) Update PHPdoc\n\n## 7.27.0 - 2020-02-28\n* [#889](https://github.com/stripe/stripe-php/pull/889) Add new constants for `type` on `TaxId`\n\n## 7.26.0 - 2020-02-26\n* [#886](https://github.com/stripe/stripe-php/pull/886) Add support for listing Checkout `Session`\n* [#883](https://github.com/stripe/stripe-php/pull/883) Add PHPDoc class descriptions\n\n## 7.25.0 - 2020-02-14\n* [#879](https://github.com/stripe/stripe-php/pull/879) Make `\\Stripe\\Collection` implement `\\Countable`\n* [#875](https://github.com/stripe/stripe-php/pull/875) Last set of PHP-CS-Fixer updates\n* [#874](https://github.com/stripe/stripe-php/pull/874) Enable php_unit_internal_class rule\n* [#873](https://github.com/stripe/stripe-php/pull/873) Add support for phpDocumentor in Makefile\n* [#872](https://github.com/stripe/stripe-php/pull/872) Another batch of PHP-CS-Fixer rule updates\n* [#871](https://github.com/stripe/stripe-php/pull/871) Fix a few PHPDoc comments\n* [#870](https://github.com/stripe/stripe-php/pull/870) More PHP-CS-Fixer tweaks\n\n## 7.24.0 - 2020-02-10\n* [#862](https://github.com/stripe/stripe-php/pull/862) Better PHPDoc\n* [#865](https://github.com/stripe/stripe-php/pull/865) Get closer to `@PhpCsFixer` standard ruleset\n\n## 7.23.0 - 2020-02-05\n* [#860](https://github.com/stripe/stripe-php/pull/860) Add PHPDoc types for expandable fields\n* [#858](https://github.com/stripe/stripe-php/pull/858) Use `native_function_invocation` PHPStan rule\n* [#857](https://github.com/stripe/stripe-php/pull/857) Update PHPDoc on nested resources\n* [#855](https://github.com/stripe/stripe-php/pull/855) PHPDoc: `StripeObject` -> `ErrorObject` where appropriate\n* [#837](https://github.com/stripe/stripe-php/pull/837) Autogen diff\n* [#854](https://github.com/stripe/stripe-php/pull/854) Upgrade PHPStan and fix settings\n* [#850](https://github.com/stripe/stripe-php/pull/850) Yet more PHPDoc updates\n\n## 7.22.0 - 2020-01-31\n* [#849](https://github.com/stripe/stripe-php/pull/849) Add new constants for `type` on `TaxId`\n* [#843](https://github.com/stripe/stripe-php/pull/843) Even more PHPDoc fixes\n* [#841](https://github.com/stripe/stripe-php/pull/841) More PHPDoc fixes\n\n## 7.21.1 - 2020-01-29\n* [#840](https://github.com/stripe/stripe-php/pull/840) Update phpdocs across multiple resources.\n\n## 7.21.0 - 2020-01-28\n* [#839](https://github.com/stripe/stripe-php/pull/839) Add support for `TYPE_ES_CIF` on `TaxId`\n\n## 7.20.0 - 2020-01-23\n* [#836](https://github.com/stripe/stripe-php/pull/836) Add new type values for `TaxId`\n\n## 7.19.1 - 2020-01-14\n* [#831](https://github.com/stripe/stripe-php/pull/831) Fix incorrect `UnexpectedValueException` instantiation\n\n## 7.19.0 - 2020-01-14\n* [#830](https://github.com/stripe/stripe-php/pull/830) Add support for `CreditNoteLineItem`\n\n## 7.18.0 - 2020-01-13\n* [#829](https://github.com/stripe/stripe-php/pull/829) Don't call php_uname function if disabled by php.ini\n\n## 7.17.0 - 2020-01-08\n* [#821](https://github.com/stripe/stripe-php/pull/821) Improve PHPDoc types for `ApiErrorException.get/setJsonBody()` methods\n\n## 7.16.0 - 2020-01-06\n* [#826](https://github.com/stripe/stripe-php/pull/826) Rename remaining `$options` to `$opts`\n* [#825](https://github.com/stripe/stripe-php/pull/825) Update PHPDoc\n\n## 7.15.0 - 2020-01-06\n* [#824](https://github.com/stripe/stripe-php/pull/824) Add constant `TYPE_SG_UEN` to `TaxId`\n\n## 7.14.2 - 2019-12-04\n* [#816](https://github.com/stripe/stripe-php/pull/816) Disable autoloader when checking for `Throwable`\n\n## 7.14.1 - 2019-11-26\n* [#812](https://github.com/stripe/stripe-php/pull/812) Fix invalid PHPdoc on `Subscription`\n\n## 7.14.0 - 2019-11-26\n* [#811](https://github.com/stripe/stripe-php/pull/811) Add support for `CreditNote` preview.\n\n## 7.13.0 - 2019-11-19\n* [#808](https://github.com/stripe/stripe-php/pull/808) Add support for listing lines on an Invoice directly via `Invoice::allLines()`\n\n## 7.12.0 - 2019-11-08\n\n-   [#805](https://github.com/stripe/stripe-php/pull/805) Add Source::allSourceTransactions and SubscriptionItem::allUsageRecordSummaries\n-   [#798](https://github.com/stripe/stripe-php/pull/798) The argument of `array_key_exists` cannot be `null`\n-   [#803](https://github.com/stripe/stripe-php/pull/803) Removed unwanted got\n\n## 7.11.0 - 2019-11-06\n\n-   [#797](https://github.com/stripe/stripe-php/pull/797) Add support for reverse pagination\n\n## 7.10.0 - 2019-11-05\n\n-   [#795](https://github.com/stripe/stripe-php/pull/795) Add support for `Mandate`\n\n## 7.9.0 - 2019-11-05\n\n-   [#794](https://github.com/stripe/stripe-php/pull/794) Add PHPDoc to `ApiResponse`\n-   [#792](https://github.com/stripe/stripe-php/pull/792) Use single quotes for `OBJECT_NAME` constants\n\n## 7.8.0 - 2019-11-05\n\n-   [#790](https://github.com/stripe/stripe-php/pull/790) Mark nullable fields in PHPDoc\n-   [#788](https://github.com/stripe/stripe-php/pull/788) Early codegen fixes\n-   [#787](https://github.com/stripe/stripe-php/pull/787) Use PHPStan in Travis CI\n\n## 7.7.1 - 2019-10-25\n\n-   [#781](https://github.com/stripe/stripe-php/pull/781) Fix telemetry header\n-   [#780](https://github.com/stripe/stripe-php/pull/780) Contributor Convenant\n\n## 7.7.0 - 2019-10-23\n\n-   [#776](https://github.com/stripe/stripe-php/pull/776) Add `CAPABILITY_TRANSFERS` to `Account`\n-   [#778](https://github.com/stripe/stripe-php/pull/778) Add support for `TYPE_MX_RFC` type on `TaxId`\n\n## 7.6.0 - 2019-10-22\n\n-   [#770](https://github.com/stripe/stripe-php/pull/770) Add missing constants for Customer's `TaxId`\n\n## 7.5.0 - 2019-10-18\n\n-   [#768](https://github.com/stripe/stripe-php/pull/768) Redact API key in `RequestOptions` debug info\n\n## 7.4.0 - 2019-10-15\n\n-   [#764](https://github.com/stripe/stripe-php/pull/764) Add support for HTTP request monitoring callback\n\n## 7.3.1 - 2019-10-07\n\n-   [#755](https://github.com/stripe/stripe-php/pull/755) Respect Stripe-Should-Retry and Retry-After headers\n\n## 7.3.0 - 2019-10-02\n\n-   [#752](https://github.com/stripe/stripe-php/pull/752) Add `payment_intent.canceled` and `setup_intent.canceled` events\n-   [#749](https://github.com/stripe/stripe-php/pull/749) Call `toArray()` on objects only\n\n## 7.2.2 - 2019-09-24\n\n-   [#746](https://github.com/stripe/stripe-php/pull/746) Add missing decline codes\n\n## 7.2.1 - 2019-09-23\n\n-   [#744](https://github.com/stripe/stripe-php/pull/744) Added new PHPDoc\n\n## 7.2.0 - 2019-09-17\n\n-   [#738](https://github.com/stripe/stripe-php/pull/738) Added missing constants for `SetupIntent` events\n\n## 7.1.1 - 2019-09-16\n\n-   [#737](https://github.com/stripe/stripe-php/pull/737) Added new PHPDoc\n\n## 7.1.0 - 2019-09-13\n\n-   [#736](https://github.com/stripe/stripe-php/pull/736) Make `CaseInsensitiveArray` countable and traversable\n\n## 7.0.2 - 2019-09-06\n\n-   [#729](https://github.com/stripe/stripe-php/pull/729) Fix usage of `SignatureVerificationException` in PHPDoc blocks\n\n## 7.0.1 - 2019-09-05\n\n-   [#728](https://github.com/stripe/stripe-php/pull/728) Clean up Collection\n\n## 7.0.0 - 2019-09-03\n\nMajor version release. The [migration guide](https://github.com/stripe/stripe-php/wiki/Migration-guide-for-v7) contains a detailed list of backwards-incompatible changes with upgrade instructions.\n\nPull requests included in this release (cf. [#552](https://github.com/stripe/stripe-php/pull/552)) (⚠️ = breaking changes):\n\n-   ⚠️ Drop support for PHP 5.4 ([#551](https://github.com/stripe/stripe-php/pull/551))\n-   ⚠️ Drop support for PHP 5.5 ([#554](https://github.com/stripe/stripe-php/pull/554))\n-   Bump dependencies ([#553](https://github.com/stripe/stripe-php/pull/553))\n-   Remove `CURLFile` check ([#555](https://github.com/stripe/stripe-php/pull/555))\n-   Update constant definitions for PHP >= 5.6 ([#556](https://github.com/stripe/stripe-php/pull/556))\n-   ⚠️ Remove `FileUpload` alias ([#557](https://github.com/stripe/stripe-php/pull/557))\n-   Remove `curl_reset` check ([#570](https://github.com/stripe/stripe-php/pull/570))\n-   Use `\\Stripe\\<class>::class` constant instead of strings ([#643](https://github.com/stripe/stripe-php/pull/643))\n-   Use `array_column` to flatten params ([#686](https://github.com/stripe/stripe-php/pull/686))\n-   ⚠️ Remove deprecated methods ([#692](https://github.com/stripe/stripe-php/pull/692))\n-   ⚠️ Remove `IssuerFraudRecord` ([#696](https://github.com/stripe/stripe-php/pull/696))\n-   Update constructors of Stripe exception classes ([#559](https://github.com/stripe/stripe-php/pull/559))\n-   Fix remaining TODOs ([#700](https://github.com/stripe/stripe-php/pull/700))\n-   Use yield for autopagination ([#703](https://github.com/stripe/stripe-php/pull/703))\n-   ⚠️ Rename fake magic methods and rewrite array conversion ([#704](https://github.com/stripe/stripe-php/pull/704))\n-   Add `ErrorObject` to Stripe exceptions ([#705](https://github.com/stripe/stripe-php/pull/705))\n-   Start using PHP CS Fixer ([#706](https://github.com/stripe/stripe-php/pull/706))\n-   Update error messages for nested resource operations ([#708](https://github.com/stripe/stripe-php/pull/708))\n-   Upgrade retry logic ([#707](https://github.com/stripe/stripe-php/pull/707))\n-   ⚠️ `Collection` improvements / fixes ([#715](https://github.com/stripe/stripe-php/pull/715))\n-   ⚠️ Modernize exceptions ([#709](https://github.com/stripe/stripe-php/pull/709))\n-   Add constants for error codes ([#716](https://github.com/stripe/stripe-php/pull/716))\n-   Update certificate bundle ([#717](https://github.com/stripe/stripe-php/pull/717))\n-   Retry requests on a 429 that's a lock timeout ([#718](https://github.com/stripe/stripe-php/pull/718))\n-   Fix `toArray()` calls ([#719](https://github.com/stripe/stripe-php/pull/719))\n-   Couple of fixes for PHP 7.4 ([#725](https://github.com/stripe/stripe-php/pull/725))\n\n## 6.43.1 - 2019-08-29\n\n-   [#722](https://github.com/stripe/stripe-php/pull/722) Make `LoggerInterface::error` compatible with its PSR-3 counterpart\n-   [#714](https://github.com/stripe/stripe-php/pull/714) Add `pending_setup_intent` property in `Subscription`\n-   [#713](https://github.com/stripe/stripe-php/pull/713) Add typehint to `ApiResponse`\n-   [#712](https://github.com/stripe/stripe-php/pull/712) Fix comment\n-   [#701](https://github.com/stripe/stripe-php/pull/701) Start testing PHP 7.3\n\n## 6.43.0 - 2019-08-09\n\n-   [#694](https://github.com/stripe/stripe-php/pull/694) Add `SubscriptionItem::createUsageRecord` method\n\n## 6.42.0 - 2019-08-09\n\n-   [#688](https://github.com/stripe/stripe-php/pull/688) Remove `SubscriptionScheduleRevision`\n    -   Note that this is technically a breaking change, however we've chosen to release it as a minor version in light of the fact that this resource and its API methods were virtually unused.\n\n## 6.41.0 - 2019-07-31\n\n-   [#683](https://github.com/stripe/stripe-php/pull/683) Move the List Balance History API to `/v1/balance_transactions`\n\n## 6.40.0 - 2019-06-27\n\n-   [#675](https://github.com/stripe/stripe-php/pull/675) Add support for `SetupIntent` resource and APIs\n\n## 6.39.2 - 2019-06-26\n\n-   [#676](https://github.com/stripe/stripe-php/pull/676) Fix exception message in `CustomerBalanceTransaction::update()`\n\n## 6.39.1 - 2019-06-25\n\n-   [#674](https://github.com/stripe/stripe-php/pull/674) Add new constants for `collection_method` on `Invoice`\n\n## 6.39.0 - 2019-06-24\n\n-   [#673](https://github.com/stripe/stripe-php/pull/673) Enable request latency telemetry by default\n\n## 6.38.0 - 2019-06-17\n\n-   [#649](https://github.com/stripe/stripe-php/pull/649) Add support for `CustomerBalanceTransaction` resource and APIs\n\n## 6.37.2 - 2019-06-17\n\n-   [#671](https://github.com/stripe/stripe-php/pull/671) Add new PHPDoc\n-   [#672](https://github.com/stripe/stripe-php/pull/672) Add constants for `submit_type` on Checkout `Session`\n\n## 6.37.1 - 2019-06-14\n\n-   [#670](https://github.com/stripe/stripe-php/pull/670) Add new PHPDoc\n\n## 6.37.0 - 2019-05-23\n\n-   [#663](https://github.com/stripe/stripe-php/pull/663) Add support for `radar.early_fraud_warning` resource\n\n## 6.36.0 - 2019-05-22\n\n-   [#661](https://github.com/stripe/stripe-php/pull/661) Add constants for new TaxId types\n-   [#662](https://github.com/stripe/stripe-php/pull/662) Add constants for BalanceTransaction types\n\n## 6.35.2 - 2019-05-20\n\n-   [#655](https://github.com/stripe/stripe-php/pull/655) Add constants for payment intent statuses\n-   [#659](https://github.com/stripe/stripe-php/pull/659) Fix PHPDoc for various nested Account actions\n-   [#660](https://github.com/stripe/stripe-php/pull/660) Fix various PHPDoc\n\n## 6.35.1 - 2019-05-20\n\n-   [#658](https://github.com/stripe/stripe-php/pull/658) Use absolute value when checking timestamp tolerance\n\n## 6.35.0 - 2019-05-14\n\n-   [#651](https://github.com/stripe/stripe-php/pull/651) Add support for the Capability resource and APIs\n\n## 6.34.6 - 2019-05-13\n\n-   [#654](https://github.com/stripe/stripe-php/pull/654) Fix typo in definition of `Event::PAYMENT_METHOD_ATTACHED` constant\n\n## 6.34.5 - 2019-05-06\n\n-   [#647](https://github.com/stripe/stripe-php/pull/647) Set the return type to static for more operations\n\n## 6.34.4 - 2019-05-06\n\n-   [#650](https://github.com/stripe/stripe-php/pull/650) Add missing constants for Event types\n\n## 6.34.3 - 2019-05-01\n\n-   [#644](https://github.com/stripe/stripe-php/pull/644) Update return type to `static` to improve static analysis\n-   [#645](https://github.com/stripe/stripe-php/pull/645) Fix constant for `payment_intent.payment_failed`\n\n## 6.34.2 - 2019-04-26\n\n-   [#642](https://github.com/stripe/stripe-php/pull/642) Fix an issue where existing idempotency keys would be overwritten when using automatic retries\n\n## 6.34.1 - 2019-04-25\n\n-   [#640](https://github.com/stripe/stripe-php/pull/640) Add missing phpdocs\n\n## 6.34.0 - 2019-04-24\n\n-   [#626](https://github.com/stripe/stripe-php/pull/626) Add support for the `TaxRate` resource and APIs\n-   [#639](https://github.com/stripe/stripe-php/pull/639) Fix multiple phpdoc issues\n\n## 6.33.0 - 2019-04-22\n\n-   [#630](https://github.com/stripe/stripe-php/pull/630) Add support for the `TaxId` resource and APIs\n\n## 6.32.1 - 2019-04-19\n\n-   [#636](https://github.com/stripe/stripe-php/pull/636) Correct type of `$personId` in PHPDoc\n\n## 6.32.0 - 2019-04-18\n\n-   [#621](https://github.com/stripe/stripe-php/pull/621) Add support for `CreditNote`\n\n## 6.31.5 - 2019-04-12\n\n-   [#628](https://github.com/stripe/stripe-php/pull/628) Add constants for `person.*` event types\n-   [#628](https://github.com/stripe/stripe-php/pull/628) Add missing constants for `Account` and `Person`\n\n## 6.31.4 - 2019-04-05\n\n-   [#624](https://github.com/stripe/stripe-php/pull/624) Fix encoding of nested parameters in multipart requests\n\n## 6.31.3 - 2019-04-02\n\n-   [#623](https://github.com/stripe/stripe-php/pull/623) Only use HTTP/2 with curl >= 7.60.0\n\n## 6.31.2 - 2019-03-25\n\n-   [#619](https://github.com/stripe/stripe-php/pull/619) Fix PHPDoc return types for list methods for nested resources\n\n## 6.31.1 - 2019-03-22\n\n-   [#612](https://github.com/stripe/stripe-php/pull/612) Add a lot of constants\n-   [#614](https://github.com/stripe/stripe-php/pull/614) Add missing subscription status constants\n\n## 6.31.0 - 2019-03-18\n\n-   [#600](https://github.com/stripe/stripe-php/pull/600) Add support for the `PaymentMethod` resource and APIs\n-   [#606](https://github.com/stripe/stripe-php/pull/606) Add support for retrieving a Checkout `Session`\n-   [#611](https://github.com/stripe/stripe-php/pull/611) Add support for deleting a Terminal `Location` and `Reader`\n\n## 6.30.5 - 2019-03-11\n\n-   [#607](https://github.com/stripe/stripe-php/pull/607) Correctly handle case where a metadata key is called `metadata`\n\n## 6.30.4 - 2019-02-27\n\n-   [#602](https://github.com/stripe/stripe-php/pull/602) Add `subscription_schedule` to `Subscription` for PHPDoc.\n\n## 6.30.3 - 2019-02-26\n\n-   [#603](https://github.com/stripe/stripe-php/pull/603) Improve PHPDoc on the `Source` object to cover all types of Sources currently supported.\n\n## 6.30.2 - 2019-02-25\n\n-   [#601](https://github.com/stripe/stripe-php/pull/601) Fix PHPDoc across multiple resources and add support for new events.\n\n## 6.30.1 - 2019-02-16\n\n-   [#599](https://github.com/stripe/stripe-php/pull/599) Fix PHPDoc for `SubscriptionSchedule` and `SubscriptionScheduleRevision`\n\n## 6.30.0 - 2019-02-12\n\n-   [#590](https://github.com/stripe/stripe-php/pull/590) Add support for `SubscriptionSchedule` and `SubscriptionScheduleRevision`\n\n## 6.29.3 - 2019-01-31\n\n-   [#592](https://github.com/stripe/stripe-php/pull/592) Some more PHPDoc fixes\n\n## 6.29.2 - 2019-01-31\n\n-   [#591](https://github.com/stripe/stripe-php/pull/591) Fix PHPDoc for nested resources\n\n## 6.29.1 - 2019-01-25\n\n-   [#566](https://github.com/stripe/stripe-php/pull/566) Fix dangling message contents\n-   [#586](https://github.com/stripe/stripe-php/pull/586) Don't overwrite `CURLOPT_HTTP_VERSION` option\n\n## 6.29.0 - 2019-01-23\n\n-   [#579](https://github.com/stripe/stripe-php/pull/579) Rename `CheckoutSession` to `Session` and move it under the `Checkout` namespace. This is a breaking change, but we've reached out to affected merchants and all new merchants would use the new approach.\n\n## 6.28.1 - 2019-01-21\n\n-   [#580](https://github.com/stripe/stripe-php/pull/580) Properly serialize `individual` on `Account` objects\n\n## 6.28.0 - 2019-01-03\n\n-   [#576](https://github.com/stripe/stripe-php/pull/576) Add support for iterating directly over `Collection` instances\n\n## 6.27.0 - 2018-12-21\n\n-   [#571](https://github.com/stripe/stripe-php/pull/571) Add support for the `CheckoutSession` resource\n\n## 6.26.0 - 2018-12-11\n\n-   [#568](https://github.com/stripe/stripe-php/pull/568) Enable persistent connections\n\n## 6.25.0 - 2018-12-10\n\n-   [#567](https://github.com/stripe/stripe-php/pull/567) Add support for account links\n\n## 6.24.0 - 2018-11-28\n\n-   [#562](https://github.com/stripe/stripe-php/pull/562) Add support for the Review resource\n-   [#564](https://github.com/stripe/stripe-php/pull/564) Add event name constants for subscription schedule aborted/expiring\n\n## 6.23.0 - 2018-11-27\n\n-   [#542](https://github.com/stripe/stripe-php/pull/542) Add support for `ValueList` and `ValueListItem` for Radar\n\n## 6.22.1 - 2018-11-20\n\n-   [#561](https://github.com/stripe/stripe-php/pull/561) Add cast and some docs to telemetry introduced in 6.22.0/549\n\n## 6.22.0 - 2018-11-15\n\n-   [#549](https://github.com/stripe/stripe-php/pull/549) Add support for client telemetry\n\n## 6.21.1 - 2018-11-12\n\n-   [#548](https://github.com/stripe/stripe-php/pull/548) Don't mutate `Exception` class properties from `OAuthBase` error\n\n## 6.21.0 - 2018-11-08\n\n-   [#537](https://github.com/stripe/stripe-php/pull/537) Add new API endpoints for the `Invoice` resource.\n\n## 6.20.1 - 2018-11-07\n\n-   [#546](https://github.com/stripe/stripe-php/pull/546) Drop files from the Composer package that aren't needed in the release\n\n## 6.20.0 - 2018-10-30\n\n-   [#536](https://github.com/stripe/stripe-php/pull/536) Add support for the `Person` resource\n-   [#541](https://github.com/stripe/stripe-php/pull/541) Add support for the `WebhookEndpoint` resource\n\n## 6.19.5 - 2018-10-17\n\n-   [#539](https://github.com/stripe/stripe-php/pull/539) Fix methods on `\\Stripe\\PaymentIntent` to properly pass arguments to the API.\n\n## 6.19.4 - 2018-10-11\n\n-   [#534](https://github.com/stripe/stripe-php/pull/534) Fix PSR-4 autoloading for `\\Stripe\\FileUpload` class alias\n\n## 6.19.3 - 2018-10-09\n\n-   [#530](https://github.com/stripe/stripe-php/pull/530) Add constants for `flow` (`FLOW_*`), `status` (`STATUS_*`) and `usage` (`USAGE_*`) on `\\Stripe\\Source`\n\n## 6.19.2 - 2018-10-08\n\n-   [#531](https://github.com/stripe/stripe-php/pull/531) Store HTTP response headers in case-insensitive array\n\n## 6.19.1 - 2018-09-25\n\n-   [#526](https://github.com/stripe/stripe-php/pull/526) Ignore null values in request parameters\n\n## 6.19.0 - 2018-09-24\n\n-   [#523](https://github.com/stripe/stripe-php/pull/523) Add support for Stripe Terminal\n\n## 6.18.0 - 2018-09-24\n\n-   [#520](https://github.com/stripe/stripe-php/pull/520) Rename `\\Stripe\\FileUpload` to `\\Stripe\\File`\n\n## 6.17.2 - 2018-09-18\n\n-   [#522](https://github.com/stripe/stripe-php/pull/522) Fix warning when adding a new additional owner to an existing array\n\n## 6.17.1 - 2018-09-14\n\n-   [#517](https://github.com/stripe/stripe-php/pull/517) Integer-index encode all sequential arrays\n\n## 6.17.0 - 2018-09-05\n\n-   [#514](https://github.com/stripe/stripe-php/pull/514) Add support for reporting resources\n\n## 6.16.0 - 2018-08-23\n\n-   [#509](https://github.com/stripe/stripe-php/pull/509) Add support for usage record summaries\n\n## 6.15.0 - 2018-08-03\n\n-   [#504](https://github.com/stripe/stripe-php/pull/504) Add cancel support for topups\n\n## 6.14.0 - 2018-08-02\n\n-   [#505](https://github.com/stripe/stripe-php/pull/505) Add support for file links\n\n## 6.13.0 - 2018-07-31\n\n-   [#502](https://github.com/stripe/stripe-php/pull/502) Add `isDeleted()` method to `\\Stripe\\StripeObject`\n\n## 6.12.0 - 2018-07-28\n\n-   [#501](https://github.com/stripe/stripe-php/pull/501) Add support for scheduled query runs (`\\Stripe\\Sigma\\ScheduledQueryRun`) for Sigma\n\n## 6.11.0 - 2018-07-26\n\n-   [#500](https://github.com/stripe/stripe-php/pull/500) Add support for Stripe Issuing\n\n## 6.10.4 - 2018-07-19\n\n-   [#498](https://github.com/stripe/stripe-php/pull/498) Internal improvements to the `\\Stripe\\ApiResource.classUrl()` method\n\n## 6.10.3 - 2018-07-16\n\n-   [#497](https://github.com/stripe/stripe-php/pull/497) Use HTTP/2 only for HTTPS requests\n\n## 6.10.2 - 2018-07-11\n\n-   [#494](https://github.com/stripe/stripe-php/pull/494) Enable HTTP/2 support\n\n## 6.10.1 - 2018-07-10\n\n-   [#493](https://github.com/stripe/stripe-php/pull/493) Add PHPDoc for `auto_advance` on `\\Stripe\\Invoice`\n\n## 6.10.0 - 2018-06-28\n\n-   [#488](https://github.com/stripe/stripe-php/pull/488) Add support for `$appPartnerId` to `Stripe::setAppInfo()`\n\n## 6.9.0 - 2018-06-28\n\n-   [#487](https://github.com/stripe/stripe-php/pull/487) Add support for payment intents\n\n## 6.8.2 - 2018-06-24\n\n-   [#486](https://github.com/stripe/stripe-php/pull/486) Make `Account.deauthorize()` return the `StripeObject` from the API\n\n## 6.8.1 - 2018-06-13\n\n-   [#472](https://github.com/stripe/stripe-php/pull/472) Added phpDoc for `ApiRequestor` and others, especially regarding thrown errors\n\n## 6.8.0 - 2018-06-13\n\n-   [#481](https://github.com/stripe/stripe-php/pull/481) Add new `\\Stripe\\Discount` and `\\Stripe\\OrderItem` classes, add more PHPDoc describing object attributes\n\n## 6.7.4 - 2018-05-29\n\n-   [#480](https://github.com/stripe/stripe-php/pull/480) PHPDoc changes for API version 2018-05-21 and the addition of the new `CHARGE_EXPIRED` event type\n\n## 6.7.3 - 2018-05-28\n\n-   [#479](https://github.com/stripe/stripe-php/pull/479) Fix unnecessary traits on `\\Stripe\\InvoiceLineItem`\n\n## 6.7.2 - 2018-05-28\n\n-   [#471](https://github.com/stripe/stripe-php/pull/471) Add `OBJECT_NAME` constant to all API resource classes, add `\\Stripe\\InvoiceLineItem` class\n\n## 6.7.1 - 2018-05-13\n\n-   [#468](https://github.com/stripe/stripe-php/pull/468) Update fields in PHP docs for accuracy\n\n## 6.7.0 - 2018-05-09\n\n-   [#466](https://github.com/stripe/stripe-php/pull/466) Add support for issuer fraud records\n\n## 6.6.0 - 2018-04-11\n\n-   [#460](https://github.com/stripe/stripe-php/pull/460) Add support for flexible billing primitives\n\n## 6.5.0 - 2018-04-05\n\n-   [#461](https://github.com/stripe/stripe-php/pull/461) Don't zero keys on non-`metadata` subobjects\n\n## 6.4.2 - 2018-03-17\n\n-   [#458](https://github.com/stripe/stripe-php/pull/458) Add PHPDoc for `account` on `\\Stripe\\Event`\n\n## 6.4.1 - 2018-03-02\n\n-   [#455](https://github.com/stripe/stripe-php/pull/455) Fix namespaces in PHPDoc\n-   [#456](https://github.com/stripe/stripe-php/pull/456) Fix namespaces for some exceptions\n\n## 6.4.0 - 2018-02-28\n\n-   [#453](https://github.com/stripe/stripe-php/pull/453) Add constants for `reason` (`REASON_*`) and `status` (`STATUS_*`) on `\\Stripe\\Dispute`\n\n## 6.3.2 - 2018-02-27\n\n-   [#452](https://github.com/stripe/stripe-php/pull/452) Add PHPDoc for `amount_paid` and `amount_remaining` on `\\Stripe\\Invoice`\n\n## 6.3.1 - 2018-02-26\n\n-   [#443](https://github.com/stripe/stripe-php/pull/443) Add event types as constants to `\\Stripe\\Event` class\n\n## 6.3.0 - 2018-02-23\n\n-   [#450](https://github.com/stripe/stripe-php/pull/450) Add support for `code` attribute on all Stripe exceptions\n\n## 6.2.0 - 2018-02-21\n\n-   [#440](https://github.com/stripe/stripe-php/pull/440) Add support for topups\n-   [#442](https://github.com/stripe/stripe-php/pull/442) Fix PHPDoc for `\\Stripe\\Error\\SignatureVerification`\n\n## 6.1.0 - 2018-02-12\n\n-   [#435](https://github.com/stripe/stripe-php/pull/435) Fix header persistence on `Collection` objects\n-   [#436](https://github.com/stripe/stripe-php/pull/436) Introduce new `Idempotency` error class\n\n## 6.0.0 - 2018-02-07\n\nMajor version release. List of backwards incompatible changes to watch out for:\n\n-   The minimum PHP version is now 5.4.0. If you're using PHP 5.3 or older, consider upgrading to a more recent version.\n\n*   `\\Stripe\\AttachedObject` no longer exists. Attributes that used to be instances of `\\Stripe\\AttachedObject` (such as `metadata`) are now instances of `\\Stripe\\StripeObject`.\n\n-   Attributes that used to be PHP arrays (such as `legal_entity->additional_owners` on `\\Stripe\\Account` instances) are now instances of `\\Stripe\\StripeObject`, except when they are empty. `\\Stripe\\StripeObject` has array semantics so this should not be an issue unless you are actively checking types.\n\n*   `\\Stripe\\Collection` now derives from `\\Stripe\\StripeObject` rather than from `\\Stripe\\ApiResource`.\n\nPull requests included in this release:\n\n-   [#410](https://github.com/stripe/stripe-php/pull/410) Drop support for PHP 5.3\n-   [#411](https://github.com/stripe/stripe-php/pull/411) Use traits for common API operations\n-   [#414](https://github.com/stripe/stripe-php/pull/414) Use short array syntax\n-   [#404](https://github.com/stripe/stripe-php/pull/404) Fix serialization logic\n-   [#417](https://github.com/stripe/stripe-php/pull/417) Remove `ExternalAccount` class\n-   [#418](https://github.com/stripe/stripe-php/pull/418) Increase test coverage\n-   [#421](https://github.com/stripe/stripe-php/pull/421) Update CA bundle and add script for future updates\n-   [#422](https://github.com/stripe/stripe-php/pull/422) Use vendored CA bundle for all requests\n-   [#428](https://github.com/stripe/stripe-php/pull/428) Support for automatic request retries\n\n## 5.9.2 - 2018-02-07\n\n-   [#431](https://github.com/stripe/stripe-php/pull/431) Update PHPDoc @property tags for latest API version\n\n## 5.9.1 - 2018-02-06\n\n-   [#427](https://github.com/stripe/stripe-php/pull/427) Add and update PHPDoc @property tags on all API resources\n\n## 5.9.0 - 2018-01-17\n\n-   [#421](https://github.com/stripe/stripe-php/pull/421) Updated bundled CA certificates\n-   [#423](https://github.com/stripe/stripe-php/pull/423) Escape unsanitized input in OAuth example\n\n## 5.8.0 - 2017-12-20\n\n-   [#403](https://github.com/stripe/stripe-php/pull/403) Add `__debugInfo()` magic method to `StripeObject`\n\n## 5.7.0 - 2017-11-28\n\n-   [#390](https://github.com/stripe/stripe-php/pull/390) Remove some unsupported API methods\n-   [#391](https://github.com/stripe/stripe-php/pull/391) Alphabetize the list of API resources in `Util::convertToStripeObject()` and add missing resources\n-   [#393](https://github.com/stripe/stripe-php/pull/393) Fix expiry date update for card sources\n\n## 5.6.0 - 2017-10-31\n\n-   [#386](https://github.com/stripe/stripe-php/pull/386) Support for exchange rates APIs\n\n## 5.5.1 - 2017-10-30\n\n-   [#387](https://github.com/stripe/stripe-php/pull/387) Allow `personal_address_kana` and `personal_address_kanji` to be updated on an account\n\n## 5.5.0 - 2017-10-27\n\n-   [#385](https://github.com/stripe/stripe-php/pull/385) Support for listing source transactions\n\n## 5.4.0 - 2017-10-24\n\n-   [#383](https://github.com/stripe/stripe-php/pull/383) Add static methods to manipulate resources from parent\n    -   `Account` gains methods for external accounts and login links (e.g. `createExternalAccount`, `createLoginLink`)\n    -   `ApplicationFee` gains methods for refunds\n    -   `Customer` gains methods for sources\n    -   `Transfer` gains methods for reversals\n\n## 5.3.0 - 2017-10-11\n\n-   [#378](https://github.com/stripe/stripe-php/pull/378) Rename source `delete` to `detach` (and deprecate the former)\n\n## 5.2.3 - 2017-09-27\n\n-   Add PHPDoc for `Card`\n\n## 5.2.2 - 2017-09-20\n\n-   Fix deserialization mapping of `FileUpload` objects\n\n## 5.2.1 - 2017-09-14\n\n-   Serialized `shipping` nested attribute\n\n## 5.2.0 - 2017-08-29\n\n-   Add support for `InvalidClient` OAuth error\n\n## 5.1.3 - 2017-08-14\n\n-   Allow `address_kana` and `address_kanji` to be updated for custom accounts\n\n## 5.1.2 - 2017-08-01\n\n-   Fix documented return type of `autoPagingIterator()` (was missing namespace)\n\n## 5.1.1 - 2017-07-03\n\n-   Fix order returns to use the right URL `/v1/order_returns`\n\n## 5.1.0 - 2017-06-30\n\n-   Add support for OAuth\n\n## 5.0.0 - 2017-06-27\n\n-   `pay` on invoice now takes params as well as opts\n\n## 4.13.0 - 2017-06-19\n\n-   Add support for ephemeral keys\n\n## 4.12.0 - 2017-06-05\n\n-   Clients can implement `getUserAgentInfo()` to add additional user agent information\n\n## 4.11.0 - 2017-06-05\n\n-   Implement `Countable` for `AttachedObject` (`metadata` and `additional_owners`)\n\n## 4.10.0 - 2017-05-25\n\n-   Add support for login links\n\n## 4.9.1 - 2017-05-10\n\n-   Fix docs to include arrays on `$id` parameter for retrieve methods\n\n## 4.9.0 - 2017-04-28\n\n-   Support for checking webhook signatures\n\n## 4.8.1 - 2017-04-24\n\n-   Allow nested field `payout_schedule` to be updated\n\n## 4.8.0 - 2017-04-20\n\n-   Add `\\Stripe\\Stripe::setLogger()` to support an external PSR-3 compatible logger\n\n## 4.7.0 - 2017-04-10\n\n-   Add support for payouts and recipient transfers\n\n## 4.6.0 - 2017-04-06\n\n-   Please see 4.7.0 instead (no-op release)\n\n## 4.5.1 - 2017-03-22\n\n-   Remove hard dependency on cURL\n\n## 4.5.0 - 2017-03-20\n\n-   Support for detaching sources from customers\n\n## 4.4.2 - 2017-02-27\n\n-   Correct handling of `owner` parameter when updating sources\n\n## 4.4.1 - 2017-02-24\n\n-   Correct the error check on a bad JSON decoding\n\n## 4.4.0 - 2017-01-18\n\n-   Add support for updating sources\n\n## 4.3.0 - 2016-11-30\n\n-   Add support for verifying sources\n\n## 4.2.0 - 2016-11-21\n\n-   Add retrieve method for 3-D Secure resources\n\n## 4.1.1 - 2016-10-21\n\n-   Add docblock with model properties for `Plan`\n\n## 4.1.0 - 2016-10-18\n\n-   Support for 403 status codes (permission denied)\n\n## 4.0.1 - 2016-10-17\n\n-   Fix transfer reversal materialization\n-   Fixes for some property definitions in docblocks\n\n## 4.0.0 - 2016-09-28\n\n-   Support for subscription items\n-   Drop attempt to force TLS 1.2: please note that this could be breaking if you're using old OS distributions or packages and upgraded recently (so please make sure to test your integration!)\n\n## 3.23.0 - 2016-09-15\n\n-   Add support for Apple Pay domains\n\n## 3.22.0 - 2016-09-13\n\n-   Add `Stripe::setAppInfo` to allow plugins to register user agent information\n\n## 3.21.0 - 2016-08-25\n\n-   Add `Source` model for generic payment sources\n\n## 3.20.0 - 2016-08-08\n\n-   Add `getDeclineCode` to card errors\n\n## 3.19.0 - 2016-07-29\n\n-   Opt requests directly into TLS 1.2 where OpenSSL >= 1.0.1 (see #277 for context)\n\n## 3.18.0 - 2016-07-28\n\n-   Add new `STATUS_` constants for subscriptions\n\n## 3.17.1 - 2016-07-28\n\n-   Fix auto-paging iterator so that it plays nicely with `iterator_to_array`\n\n## 3.17.0 - 2016-07-14\n\n-   Add field annotations to model classes for better editor hinting\n\n## 3.16.0 - 2016-07-12\n\n-   Add `ThreeDSecure` model for 3-D secure payments\n\n## 3.15.0 - 2016-06-29\n\n-   Add static `update` method to all resources that can be changed.\n\n## 3.14.3 - 2016-06-20\n\n-   Make sure that cURL never sends `Expects: 100-continue`, even on large request bodies\n\n## 3.14.2 - 2016-06-03\n\n-   Add `inventory` under `SKU` to list of keys that have nested data and can be updated\n\n## 3.14.1 - 2016-05-27\n\n-   Fix some inconsistencies in PHPDoc\n\n## 3.14.0 - 2016-05-25\n\n-   Add support for returning Relay orders\n\n## 3.13.0 - 2016-05-04\n\n-   Add `list`, `create`, `update`, `retrieve`, and `delete` methods to the Subscription class\n\n## 3.12.1 - 2016-04-07\n\n-   Additional check on value arrays for some extra safety\n\n## 3.12.0 - 2016-03-31\n\n-   Fix bug `refreshFrom` on `StripeObject` would not take an `$opts` array\n-   Fix bug where `$opts` not passed to parent `save` method in `Account`\n-   Fix bug where non-existent variable was referenced in `reverse` in `Transfer`\n-   Update CA cert bundle for compatibility with OpenSSL versions below 1.0.1\n\n## 3.11.0 - 2016-03-22\n\n-   Allow `CurlClient` to be initialized with default `CURLOPT_*` options\n\n## 3.10.1 - 2016-03-22\n\n-   Fix bug where request params and options were ignored in `ApplicationFee`'s `refund.`\n\n## 3.10.0 - 2016-03-15\n\n-   Add `reject` on `Account` to support the new API feature\n\n## 3.9.2 - 2016-03-04\n\n-   Fix error when an object's metadata is set more than once\n\n## 3.9.1 - 2016-02-24\n\n-   Fix encoding behavior of nested arrays for requests (see #227)\n\n## 3.9.0 - 2016-02-09\n\n-   Add automatic pagination mechanism with `autoPagingIterator()`\n-   Allow global account ID to be set with `Stripe::setAccountId()`\n\n## 3.8.0 - 2016-02-08\n\n-   Add `CountrySpec` model for looking up country payment information\n\n## 3.7.1 - 2016-02-01\n\n-   Update bundled CA certs\n\n## 3.7.0 - 2016-01-27\n\n-   Support deleting Relay products and SKUs\n\n## 3.6.0 - 2016-01-05\n\n-   Allow configuration of HTTP client timeouts\n\n## 3.5.0 - 2015-12-01\n\n-   Add a verification routine for external accounts\n\n## 3.4.0 - 2015-09-14\n\n-   Products, SKUs, and Orders -- https://stripe.com/relay\n\n## 3.3.0 - 2015-09-11\n\n-   Add support for 429 Rate Limit response\n\n## 3.2.0 - 2015-08-17\n\n-   Add refund listing and retrieval without an associated charge\n\n## 3.1.0 - 2015-08-03\n\n-   Add dispute listing and retrieval\n-   Add support for manage account deletion\n\n## 3.0.0 - 2015-07-28\n\n-   Rename `\\Stripe\\Object` to `\\Stripe\\StripeObject` (PHP 7 compatibility)\n-   Rename `getCode` and `getParam` in exceptions to `getStripeCode` and `getStripeParam`\n-   Add support for calling `json_encode` on Stripe objects in PHP 5.4+\n-   Start supporting/testing PHP 7\n\n## 2.3.0 - 2015-07-06\n\n-   Add request ID to all Stripe exceptions\n\n## 2.2.0 - 2015-06-01\n\n-   Add support for Alipay accounts as sources\n-   Add support for bank accounts as sources (private beta)\n-   Add support for bank accounts and cards as external_accounts on Account objects\n\n## 2.1.4 - 2015-05-13\n\n-   Fix CA certificate file path (thanks @lphilps & @matthewarkin)\n\n## 2.1.3 - 2015-05-12\n\n-   Fix to account updating to permit `tos_acceptance` and `personal_address` to be set properly\n-   Fix to Transfer reversal creation (thanks @neatness!)\n-   Network requests are now done through a swappable class for easier mocking\n\n## 2.1.2 - 2015-04-10\n\n-   Remove SSL cert revokation checking (all pre-Heartbleed certs have expired)\n-   Bug fixes to account updating\n\n## 2.1.1 - 2015-02-27\n\n-   Support transfer reversals\n\n## 2.1.0 - 2015-02-19\n\n-   Support new API version (2015-02-18)\n-   Added Bitcoin Receiever update and delete actions\n-   Edited tests to prefer \"source\" over \"card\" as per new API version\n\n## 2.0.1 - 2015-02-16\n\n-   Fix to fetching endpoints that use a non-default baseUrl (`FileUpload`)\n\n## 2.0.0 - 2015-02-14\n\n-   Bumped minimum version to 5.3.3\n-   Switched to Stripe namespace instead of Stripe\\_ class name prefiexes (thanks @chadicus!)\n-   Switched tests to PHPUnit (thanks @chadicus!)\n-   Switched style guide to PSR2 (thanks @chadicus!)\n-   Added \\$opts hash to the end of most methods: this permits passing 'idempotency_key', 'stripe_account', or 'stripe_version'. The last 2 will persist across multiple object loads.\n-   Added support for retrieving Account by ID\n\n## 1.18.0 - 2015-01-21\n\n-   Support making bitcoin charges through BitcoinReceiver source object\n\n## 1.17.5 - 2014-12-23\n\n-   Adding support for creating file uploads.\n\n## 1.17.4 - 2014-12-15\n\n-   Saving objects fetched with a custom key now works (thanks @JustinHook & @jpasilan)\n-   Added methods for reporting charges as safe or fraudulent and for specifying the reason for refunds\n\n## 1.17.3 - 2014-11-06\n\n-   Better handling of HHVM support for SSL certificate blacklist checking.\n\n## 1.17.2 - 2014-09-23\n\n-   Coupons now are backed by a `Stripe_Coupon` instead of `Stripe_Object`, and support updating metadata\n-   Running operations (`create`, `retrieve`, `all`) on upcoming invoice items now works\n\n## 1.17.1 - 2014-07-31\n\n-   Requests now send Content-Type header\n\n## 1.17.0 - 2014-07-29\n\n-   Application Fee refunds now a list instead of array\n-   HHVM now works\n-   Small bug fixes (thanks @bencromwell & @fastest963)\n-   `__toString` now returns the name of the object in addition to its JSON representation\n\n## 1.16.0 - 2014-06-17\n\n-   Add metadata for refunds and disputes\n\n## 1.15.0 - 2014-05-28\n\n-   Support canceling transfers\n\n## 1.14.1 - 2014-05-21\n\n-   Support cards for recipients.\n\n## 1.13.1 - 2014-05-15\n\n-   Fix bug in account resource where `id` wasn't in the result\n\n## 1.13.0 - 2014-04-10\n\n-   Add support for certificate blacklisting\n-   Update ca bundle\n-   Drop support for HHVM (Temporarily)\n\n## 1.12.0 - 2014-04-01\n\n-   Add Stripe_RateLimitError for catching rate limit errors.\n-   Update to Zend coding style (thanks, @jpiasetz)\n\n## 1.11.0 - 2014-01-29\n\n-   Add support for multiple subscriptions per customer\n\n## 1.10.1 - 2013-12-02\n\n-   Add new ApplicationFee\n\n## 1.9.1 - 2013-11-08\n\n-   Fix a bug where a null nestable object causes warnings to fire.\n\n## 1.9.0 - 2013-10-16\n\n-   Add support for metadata API.\n\n## 1.8.4 - 2013-09-18\n\n-   Add support for closing disputes.\n\n## 1.8.3 - 2013-08-13\n\n-   Add new Balance and BalanceTransaction\n\n## 1.8.2 - 2013-08-12\n\n-   Add support for unsetting attributes by updating to NULL. Setting properties to a blank string is now an error.\n\n## 1.8.1 - 2013-07-12\n\n-   Add support for multiple cards API (Stripe API version 2013-07-12: https://stripe.com/docs/upgrades#2013-07-05)\n\n## 1.8.0 - 2013-04-11\n\n-   Allow Transfers to be creatable\n-   Add new Recipient resource\n\n## 1.7.15 - 2013-02-21\n\n-   Add 'id' to the list of permanent object attributes\n\n## 1.7.14 - 2013-02-20\n\n-   Don't re-encode strings that are already encoded in UTF-8. If you were previously using plan or coupon objects with UTF-8 IDs, they may have been treated as ISO-8859-1 (Latin-1) and encoded to UTF-8 a 2nd time. You may now need to pass the IDs to utf8_encode before passing them to Stripe_Plan::retrieve or Stripe_Coupon::retrieve.\n-   Ensure that all input is encoded in UTF-8 before submitting it to Stripe's servers. (github issue #27)\n\n## 1.7.13 - 2013-02-01\n\n-   Add support for passing options when retrieving Stripe objects e.g., Stripe_Charge::retrieve(array(\"id\"=>\"foo\", \"expand\" => array(\"customer\"))); Stripe_Charge::retrieve(\"foo\") will continue to work\n\n## 1.7.12 - 2013-01-15\n\n-   Add support for setting a Stripe API version override\n\n## 1.7.11 - 2012-12-30\n\n-   Version bump to cleanup constants and such (fix issue #26)\n\n## 1.7.10 - 2012-11-08\n\n-   Add support for updating charge disputes.\n-   Fix bug preventing retrieval of null attributes\n\n## 1.7.9 - 2012-11-08\n\n-   Fix usage under autoloaders such as the one generated by composer (fix issue #22)\n\n## 1.7.8 - 2012-10-30\n\n-   Add support for creating invoices.\n-   Add support for new invoice lines return format\n-   Add support for new list objects\n\n## 1.7.7 - 2012-09-14\n\n-   Get all of the various version numbers in the repo in sync (no other changes)\n\n## 1.7.6 - 2012-08-31\n\n-   Add update and pay methods to Invoice resource\n\n## 1.7.5 - 2012-08-23\n\n-   Change internal function names so that Stripe_SingletonApiRequest is E_STRICT-clean (github issue #16)\n\n## 1.7.4 - 2012-08-21\n\n-   Bugfix so that Stripe objects (e.g. Customer, Charge objects) used in API calls are transparently converted to their object IDs\n\n## 1.7.3 - 2012-08-15\n\n-   Add new Account resource\n\n## 1.7.2 - 2012-06-26\n\n-   Make clearer that you should be including lib/Stripe.php, not test/Stripe.php (github issue #14)\n\n## 1.7.1 - 2012-05-24\n\n-   Add missing argument to Stripe_InvalidRequestError constructor in Stripe_ApiResource::instanceUrl. Fixes a warning when Stripe_ApiResource::instanceUrl is called on a resource with no ID (fix issue #12)\n\n## 1.7.0 - 2012-05-17\n\n-   Support Composer and Packagist (github issue #9)\n-   Add new deleteDiscount method to Stripe_Customer\n-   Add new Transfer resource\n-   Switch from using HTTP Basic auth to Bearer auth. (Note: Stripe will support Basic auth for the indefinite future, but recommends Bearer auth when possible going forward)\n-   Numerous test suite improvements\n","size_bytes":91155}}}