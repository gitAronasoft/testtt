{"file_contents":{"replit.md":{"content":"# VideoHub - Video Management Platform\n\n## Overview\n\nVideoHub is a comprehensive video management platform designed for creators, viewers, and administrators. The platform enables video content monetization, user management, and analytics tracking. It features a multi-role architecture with distinct interfaces for admins, creators, and viewers, each with tailored functionality for their specific needs.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nProject focus: Simple web app for demo purposes without complex analytics or payout features.\nDesign preference: Improved and streamlined layout structure.\nViewer interface: Simplified dashboard with metrics and all videos section. Removed browse videos page and menu items for cleaner navigation.\nPurchases page: Removed metrics and recent purchases sections, keeping only all purchased videos section.\nData loading: All sections now load dynamically from JSON files instead of static data.\n\n## System Architecture\n\n### Frontend Architecture\n- **Pure HTML/CSS/JavaScript**: Client-side implementation using vanilla JavaScript modules for maintainability\n- **Bootstrap 5**: CSS framework for responsive design and UI components\n- **Font Awesome**: Icon library for consistent iconography\n- **Chart.js**: Data visualization library for analytics dashboards\n- **Modular JavaScript**: Organized into separate modules (auth.js, admin.js, creator.js, viewer.js, payment.js, common.js)\n\n### Multi-Role User Interface\n- **Landing Page**: Marketing-focused homepage with user registration/login\n- **Admin Panel**: User management, video moderation, system analytics with dark theme and left sidebar navigation\n- **Creator Studio**: Video upload, earnings tracking, content analytics with green theme and left sidebar navigation  \n- **Viewer Interface**: Dashboard, video browsing, purchasing, playback with primary blue theme and unified navigation with dashboard and left sidebar structure\n\n### Authentication & Authorization\n- **Role-based Access Control**: Three distinct user types (admin, creator, viewer)\n- **Demo Authentication**: Hardcoded credentials for demonstration purposes\n- **Session Management**: Client-side session handling with localStorage\n- **Email Verification**: Mock email verification workflow for user onboarding\n\n### Video Management System\n- **Content Organization**: Categorized video library with metadata (title, description, price, duration)\n- **Monetization**: Pay-per-video model with earnings tracking\n- **Video Player**: HTML5 video player with custom controls and playback features\n- **Content Moderation**: Admin tools for video approval and management\n\n### Payment Processing\n- **Mock Payment System**: Simulated payment processing for demonstration\n- **Multiple Payment Methods**: Support for cards, PayPal, and mobile wallets\n- **Transaction Management**: Purchase history and earnings tracking\n- **Demo Mode**: Simplified payment flow for testing and demonstration\n\n### Simple Statistics\n- **Basic Overview Cards**: Simple statistics display without complex charts\n- **Clean Interface**: Streamlined design focused on core functionality\n\n### API Integration\n- **Structured API Calls**: Prepared API functions for backend connectivity\n- **RESTful Design**: Following REST conventions for all endpoints\n- **Error Handling**: Comprehensive error handling for API responses\n\n## External Dependencies\n\n### Frontend Libraries\n- **Bootstrap 5.3.0**: UI framework and responsive grid system\n- **Font Awesome 6.0.0**: Icon font library for consistent iconography\n\n### Content Delivery\n- **Bootstrap CDN**: External CSS and JavaScript delivery\n- **Font Awesome CDN**: Icon font delivery\n\n### Mock Services\n- **Placeholder Images**: Via.placeholder.com for demo video thumbnails\n- **Demo Payment Processing**: Simulated payment workflows\n- **Mock Video Content**: Placeholder video files and metadata\n\n### Architecture Considerations\n- **Static File Hosting**: Designed for deployment on static hosting platforms\n- **No Backend Dependencies**: Pure client-side implementation for simplicity\n- **Scalable Structure**: Modular design allows for future backend integration\n- **Cross-browser Compatibility**: Standard HTML5/CSS3/ES6 features\n- **Consistent UI/UX**: All user interfaces now follow consistent sidebar navigation pattern\n- **Unified Branding**: Consistent VideoHub branding across all user panels (VideoHub Admin, VideoHub Creator, VideoHub Viewer)\n- **Simplified Design**: Removed complex analytics and payout features for demo simplicity  \n- **Clean Navigation**: Streamlined sidebar navigation without analytics sections\n- **Modern Bootstrap 5**: Latest Bootstrap features for responsive design\n- **API-Ready**: Structured for easy backend integration","size_bytes":4773},"assets/css/styles.css":{"content":"/* VideoHub - Custom Styles */\n\n/* Global Variables */\n:root {\n    --primary-color: #4f46e5;\n    --primary-dark: #3730a3;\n    --secondary-color: #6366f1;\n    --success-color: #059669;\n    --danger-color: #dc2626;\n    --warning-color: #d97706;\n    --info-color: #0891b2;\n    --light-color: #f8fafc;\n    --dark-color: #1e293b;\n    --gray-50: #f8fafc;\n    --gray-100: #f1f5f9;\n    --gray-200: #e2e8f0;\n    --gray-300: #cbd5e1;\n    --gray-500: #64748b;\n    --gray-600: #475569;\n    --gray-700: #334155;\n    --gray-800: #1e293b;\n    --border-radius: 0.75rem;\n    --border-radius-sm: 0.5rem;\n    --box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n    --box-shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --box-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n    --box-shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n/* General Styles */\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n    line-height: 1.6;\n    color: var(--gray-800);\n    background-color: var(--gray-50);\n}\n\n.auth-bg {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);\n    min-height: 100vh;\n}\n\n/* Modern gradients */\n.bg-gradient-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);\n}\n\n.bg-gradient-success {\n    background: linear-gradient(135deg, var(--success-color) 0%, #047857 100%);\n}\n\n.bg-gradient-danger {\n    background: linear-gradient(135deg, var(--danger-color) 0%, #b91c1c 100%);\n}\n\n/* Typography */\n.fw-semibold {\n    font-weight: 600;\n}\n\n.text-xs {\n    font-size: 0.75rem;\n}\n\n.text-sm {\n    font-size: 0.875rem;\n}\n\n/* Spacing utilities */\n.space-y-4 > * + * {\n    margin-top: 1rem;\n}\n\n.space-y-6 > * + * {\n    margin-top: 1.5rem;\n}\n\n/* Modern Cards */\n.card {\n    border: none;\n    box-shadow: var(--box-shadow);\n    border-radius: var(--border-radius);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    background: white;\n}\n\n.card:hover, .hover-lift:hover {\n    box-shadow: var(--box-shadow-xl);\n    transform: translateY(-4px);\n}\n\n.card-modern {\n    border-radius: var(--border-radius);\n    border: 1px solid var(--gray-200);\n    transition: all 0.2s ease;\n}\n\n.card-modern:hover {\n    border-color: var(--primary-color);\n    box-shadow: var(--box-shadow-lg);\n}\n\n/* Stats Cards */\n.stat-card {\n    background: white;\n    border-radius: var(--border-radius);\n    padding: 1.5rem;\n    border: 1px solid var(--gray-200);\n    transition: all 0.2s ease;\n}\n\n.stat-card:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--box-shadow-lg);\n}\n\n.stat-icon {\n    width: 3rem;\n    height: 3rem;\n    border-radius: var(--border-radius-sm);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto;\n}\n\n.min-vh-75 {\n    min-height: 75vh;\n}\n\n/* Buttons */\n.btn-modern {\n    border-radius: var(--border-radius-sm);\n    font-weight: 500;\n    padding: 0.75rem 1.5rem;\n    transition: all 0.2s ease;\n    border: none;\n}\n\n.btn-modern:hover {\n    transform: translateY(-1px);\n    box-shadow: var(--box-shadow-md);\n}\n\n.card-header {\n    background-color: #f8f9fa;\n    border-bottom: 1px solid #dee2e6;\n    font-weight: 600;\n}\n\n/* Border Left Colors for Cards */\n.border-left-primary {\n    border-left: 0.25rem solid var(--primary-color) !important;\n}\n\n.border-left-success {\n    border-left: 0.25rem solid var(--success-color) !important;\n}\n\n.border-left-info {\n    border-left: 0.25rem solid var(--info-color) !important;\n}\n\n.border-left-warning {\n    border-left: 0.25rem solid var(--warning-color) !important;\n}\n\n/* Modern Sidebar */\n.sidebar {\n    border-right: 1px solid var(--gray-200);\n}\n\n.sidebar .nav-link {\n    color: var(--gray-700);\n    font-weight: 500;\n    margin-bottom: 0.125rem;\n    border-radius: var(--border-radius-sm);\n    transition: all 0.2s ease;\n}\n\n.sidebar .nav-link:hover {\n    color: var(--primary-color);\n    background-color: var(--gray-100);\n    transform: translateX(2px);\n}\n\n.sidebar .nav-link.active {\n    color: var(--primary-color);\n    background-color: rgba(79, 70, 229, 0.1);\n    font-weight: 600;\n}\n\n.sidebar .nav-link i {\n    width: 1.5rem;\n}\n\n/* Avatar */\n.avatar {\n    width: 2.5rem;\n    height: 2.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n    font-size: 0.875rem;\n}\n\n/* Utility classes for custom colors */\n.bg-gray-50 { background-color: var(--gray-50) !important; }\n.bg-gray-100 { background-color: var(--gray-100) !important; }\n.bg-gray-200 { background-color: var(--gray-200) !important; }\n.text-gray-500 { color: var(--gray-500) !important; }\n.text-gray-600 { color: var(--gray-600) !important; }\n.text-gray-700 { color: var(--gray-700) !important; }\n.text-gray-800 { color: var(--gray-800) !important; }\n\n/* Video Thumbnails */\n.video-thumbnail {\n    position: relative;\n    overflow: hidden;\n    border-radius: var(--border-radius);\n    background-color: #000;\n    aspect-ratio: 16/9;\n}\n\n.video-thumbnail img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    transition: transform 0.3s ease;\n}\n\n.video-thumbnail:hover img {\n    transform: scale(1.05);\n}\n\n.video-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    color: white;\n}\n\n.video-thumbnail:hover .video-overlay {\n    opacity: 1;\n}\n\n.video-duration {\n    position: absolute;\n    bottom: 8px;\n    right: 8px;\n    background: rgba(0, 0, 0, 0.8);\n    color: white;\n    padding: 2px 6px;\n    border-radius: 3px;\n    font-size: 0.75rem;\n}\n\n.video-price {\n    position: absolute;\n    top: 8px;\n    left: 8px;\n    background: var(--success-color);\n    color: white;\n    padding: 4px 8px;\n    border-radius: var(--border-radius);\n    font-size: 0.75rem;\n    font-weight: 600;\n}\n\n/* Video Player Styles */\n.video-player-body {\n    background-color: #000;\n    color: #fff;\n}\n\n.video-player-container {\n    background-color: #000;\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n.video-wrapper {\n    position: relative;\n    width: 100%;\n    height: 0;\n    padding-bottom: 56.25%; /* 16:9 aspect ratio */\n    background-color: #000;\n}\n\n.video-player {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n    outline: none;\n}\n\n.video-loading-overlay,\n.video-error-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.8);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    z-index: 10;\n}\n\n/* Modal Video Player Styles */\n#videoPlayerModal .modal-xl {\n    max-width: 95%;\n}\n\n#videoPlayerModal .video-wrapper {\n    height: 400px;\n    padding-bottom: 0;\n}\n\n#videoPlayerModal .video-player {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.related-video-item {\n    cursor: pointer;\n    padding: 8px;\n    border-radius: 4px;\n    transition: background-color 0.2s;\n}\n\n.related-video-item:hover {\n    background-color: #f8f9fa;\n}\n\n.cursor-pointer {\n    cursor: pointer;\n}\n\n.custom-video-controls {\n    background: rgba(255, 255, 255, 0.1);\n    padding: 1rem;\n    border-radius: 0 0 var(--border-radius) var(--border-radius);\n}\n\n/* Video Cards */\n.video-card {\n    transition: all 0.3s ease;\n    border: none;\n    box-shadow: var(--box-shadow);\n}\n\n.video-card:hover {\n    box-shadow: var(--box-shadow-lg);\n    transform: translateY(-5px);\n}\n\n.video-card .card-body {\n    padding: 1rem;\n}\n\n.video-title {\n    font-size: 1rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n    color: #212529;\n    text-decoration: none;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n.video-title:hover {\n    color: var(--primary-color);\n}\n\n.video-creator {\n    color: #6c757d;\n    font-size: 0.875rem;\n    margin-bottom: 0.5rem;\n}\n\n.video-stats {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 0.75rem;\n    color: #6c757d;\n}\n\n/* Authentication Forms */\n.auth-card {\n    border: none;\n    box-shadow: var(--box-shadow-lg);\n    border-radius: var(--border-radius);\n}\n\n/* Password Strength Indicator */\n.password-strength {\n    margin-top: 0.5rem;\n}\n\n.strength-bar {\n    height: 4px;\n    background-color: #e9ecef;\n    border-radius: 2px;\n    transition: background-color 0.3s ease;\n}\n\n.strength-bar.weak {\n    background-color: var(--danger-color);\n}\n\n.strength-bar.fair {\n    background-color: var(--warning-color);\n}\n\n.strength-bar.good {\n    background-color: var(--info-color);\n}\n\n.strength-bar.strong {\n    background-color: var(--success-color);\n}\n\n/* Buttons */\n.btn {\n    border-radius: var(--border-radius);\n    font-weight: 500;\n    transition: all 0.3s ease;\n}\n\n.btn:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.btn-group .btn:hover {\n    transform: none;\n}\n\n/* Tables */\n.table th {\n    border-top: none;\n    font-weight: 600;\n    color: #495057;\n    background-color: #f8f9fa;\n}\n\n.table-responsive {\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n/* Pagination */\n.pagination .page-link {\n    border-radius: var(--border-radius);\n    margin: 0 2px;\n    border: 1px solid #dee2e6;\n    color: #495057;\n}\n\n.pagination .page-item.active .page-link {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n/* Form Controls */\n.form-control:focus,\n.form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);\n}\n\n/* Alerts */\n.alert {\n    border: none;\n    border-radius: var(--border-radius);\n}\n\n/* Demo Notice */\n.demo-notice {\n    border-radius: 0;\n}\n\n/* Loading States */\n.loading-spinner {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border: 3px solid rgba(255, 255, 255, 0.3);\n    border-radius: 50%;\n    border-top-color: #fff;\n    animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n/* Chart Container */\n.chart-container {\n    position: relative;\n    height: 400px;\n}\n\n/* Progress Bars */\n.progress {\n    height: 8px;\n    border-radius: 4px;\n    background-color: #e9ecef;\n}\n\n.progress-bar {\n    border-radius: 4px;\n    transition: width 0.3s ease;\n}\n\n/* Modals */\n.modal-content {\n    border: none;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow-lg);\n}\n\n.modal-header {\n    border-bottom: 1px solid #dee2e6;\n}\n\n.modal-footer {\n    border-top: 1px solid #dee2e6;\n}\n\n/* User Avatar */\n.user-avatar {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    object-fit: cover;\n}\n\n/* Comments */\n.comment-item {\n    border-bottom: 1px solid #e9ecef;\n    padding: 1rem 0;\n}\n\n.comment-item:last-child {\n    border-bottom: none;\n}\n\n.comment-avatar {\n    width: 48px;\n    height: 48px;\n    border-radius: 50%;\n    background-color: #e9ecef;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: #6c757d;\n}\n\n/* Related Videos */\n.related-videos-container {\n    max-height: 400px;\n    overflow-y: auto;\n}\n\n.related-video-item {\n    display: flex;\n    align-items: flex-start;\n    padding: 0.75rem;\n    margin-bottom: 0.5rem;\n    border-radius: 8px;\n    text-decoration: none;\n    color: inherit;\n    transition: all 0.3s ease;\n    background-color: #f8f9fa;\n    border: 1px solid #e9ecef;\n}\n\n.related-video-item:hover {\n    background-color: #e9ecef;\n    color: inherit;\n    transform: translateY(-1px);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.related-video-item:last-child {\n    margin-bottom: 0;\n}\n\n.related-video-thumbnail {\n    width: 80px;\n    height: 45px;\n    background-color: #000;\n    border-radius: 6px;\n    margin-right: 0.75rem;\n    flex-shrink: 0;\n    object-fit: cover;\n    position: relative;\n}\n\n.related-video-thumbnail::after {\n    content: '\\f04b';\n    font-family: 'Font Awesome 6 Free';\n    font-weight: 900;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: white;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    font-size: 12px;\n}\n\n.related-video-item:hover .related-video-thumbnail::after {\n    opacity: 1;\n}\n\n.related-video-info {\n    flex: 1;\n    min-width: 0;\n}\n\n.related-video-title {\n    font-size: 0.85rem;\n    font-weight: 600;\n    margin-bottom: 0.25rem;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    line-height: 1.3;\n    color: #212529;\n}\n\n.related-video-creator {\n    font-size: 0.75rem;\n    color: #6c757d;\n    margin-bottom: 0.125rem;\n}\n\n.related-video-duration {\n    font-size: 0.7rem;\n    color: #28a745;\n    font-weight: 500;\n}\n\n/* Enhanced Modal Sidebar */\n#videoPlayerModal .modal-xl .col-lg-4 {\n    border-left: 2px solid #e9ecef;\n}\n\n#videoPlayerModal .progress {\n    background-color: #e9ecef;\n    border-radius: 10px;\n}\n\n#videoPlayerModal .progress-bar {\n    border-radius: 10px;\n    background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);\n}\n\n#videoPlayerModal .form-control {\n    resize: none;\n    transition: all 0.3s ease;\n}\n\n#videoPlayerModal .form-control:focus {\n    border-color: #007bff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    background-color: white;\n}\n\n/* Custom scrollbar for related videos */\n.related-videos-container::-webkit-scrollbar {\n    width: 6px;\n}\n\n.related-videos-container::-webkit-scrollbar-track {\n    background: #f1f1f1;\n    border-radius: 3px;\n}\n\n.related-videos-container::-webkit-scrollbar-thumb {\n    background: #c1c1c1;\n    border-radius: 3px;\n}\n\n.related-videos-container::-webkit-scrollbar-thumb:hover {\n    background: #a8a8a8;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .sidebar {\n        position: static;\n        height: auto;\n        padding: 0;\n    }\n    \n    .video-wrapper {\n        padding-bottom: 75%; /* Adjust for mobile */\n    }\n    \n    .custom-video-controls .row {\n        flex-direction: column;\n        gap: 1rem;\n    }\n    \n    .video-stats {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 0.5rem;\n    }\n    \n    .related-video-item {\n        flex-direction: column;\n        text-align: center;\n    }\n    \n    .related-video-thumbnail {\n        width: 100%;\n        height: auto;\n        margin-right: 0;\n        margin-bottom: 0.5rem;\n    }\n}\n\n/* Dark Theme Support */\n@media (prefers-color-scheme: dark) {\n    .video-player-body {\n        background-color: #121212;\n        color: #ffffff;\n    }\n    \n    .video-player-body .card {\n        background-color: #1e1e1e;\n        color: #ffffff;\n    }\n    \n    .video-player-body .card-header {\n        background-color: #2d2d2d;\n        border-bottom-color: #404040;\n    }\n}\n\n/* Print Styles */\n@media print {\n    .navbar,\n    .sidebar,\n    .btn,\n    .modal {\n        display: none !important;\n    }\n    \n    .container-fluid {\n        margin: 0;\n        padding: 0;\n    }\n    \n    .card {\n        box-shadow: none;\n        border: 1px solid #dee2e6;\n    }\n}\n\n/* Accessibility */\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n/* Focus styles for keyboard navigation */\n.btn:focus,\n.form-control:focus,\n.form-select:focus {\n    outline: 2px solid var(--primary-color);\n    outline-offset: 2px;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .card {\n        border: 2px solid #000;\n    }\n    \n    .btn {\n        border-width: 2px;\n    }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}\n","size_bytes":16110},"assets/js/admin.js":{"content":"/**\n * VideoHub Admin Panel Module\n * Handles admin dashboard functionality with API integration\n */\n\nclass AdminManager {\n    constructor() {\n        this.users = [];\n        this.videos = [];\n        this.stats = {};\n        this.init();\n    }\n\n    async init() {\n        this.loadMockData(); // Fallback for demo\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n        await this.loadDashboardData();\n    }\n\n    loadMockData() {\n        // Initialize empty arrays - data will be loaded from dataService\n        this.users = [];\n        this.videos = [];\n        this.stats = {};\n    }\n\n    async loadDashboardData() {\n        try {\n            // Wait for services to be ready\n            if (!window.apiService || !window.dataService) {\n                setTimeout(() => this.loadDashboardData(), 100);\n                return;\n            }\n\n            // Try to load real data from API\n            const [statsResult, usersResult, videosResult] = await Promise.all([\n                window.apiService.getAdminStats(),\n                window.apiService.getUsers({ limit: 10 }),\n                window.apiService.getVideos({ status: 'all', limit: 10 })\n            ]);\n\n            if (statsResult.success) {\n                this.stats = statsResult.data;\n            }\n            if (usersResult.success) {\n                this.users = usersResult.data.users || usersResult.data;\n            }\n            if (videosResult.success) {\n                this.videos = videosResult.data.videos || videosResult.data;\n            }\n\n            this.updateDashboardDisplay();\n        } catch (error) {\n            console.log('API not available, using demo data');\n            this.updateDashboardDisplay();\n        }\n    }\n\n    updateDashboardDisplay() {\n        // Update stats cards\n        document.getElementById('totalUsers')?.textContent = this.stats.totalUsers || '--';\n        document.getElementById('totalVideos')?.textContent = this.stats.totalVideos || '--';\n        document.getElementById('pendingVideos')?.textContent = this.stats.pendingVideos || '--';\n        document.getElementById('totalViews')?.textContent = this.formatNumber(this.stats.totalViews) || '--';\n\n        // Update recent activity\n        this.loadRecentActivity();\n    }\n\n    loadRecentActivity() {\n        const activityContainer = document.getElementById('recentActivity');\n        if (!activityContainer) return;\n\n        const activities = [\n            {\n                icon: 'fa-user', color: 'primary',\n                text: `New user <strong>${this.users[0]?.firstName || 'John'} ${this.users[0]?.lastName || 'Doe'}</strong> registered`,\n                time: '2 minutes ago'\n            },\n            {\n                icon: 'fa-video', color: 'success',\n                text: `Video <strong>\"${this.videos[0]?.title || 'Tutorial Series #1'}\"</strong> was approved`,\n                time: '15 minutes ago'\n            },\n            {\n                icon: 'fa-exclamation-triangle', color: 'warning',\n                text: `Video flagged for review by <strong>${this.users[1]?.firstName || 'Mike'} ${this.users[1]?.lastName || 'Smith'}</strong>`,\n                time: '1 hour ago'\n            }\n        ];\n\n        activityContainer.innerHTML = activities.map(activity => `\n            <div class=\"d-flex align-items-center\">\n                <div class=\"avatar bg-${activity.color} bg-opacity-10 text-${activity.color} rounded-circle p-2 me-3\">\n                    <i class=\"fas ${activity.icon}\"></i>\n                </div>\n                <div class=\"flex-grow-1\">\n                    <p class=\"mb-1\">${activity.text}</p>\n                    <p class=\"text-muted text-sm mb-0\">${activity.time}</p>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    formatNumber(num) {\n        if (!num) return '0';\n        return new Intl.NumberFormat().format(num);\n    }\n\n    bindEvents() {\n        // Refresh button\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[onclick*=\"refresh\"]') || \n                e.target.closest('[onclick*=\"refresh\"]')) {\n                e.preventDefault();\n                this.refreshDashboard();\n            }\n        });\n    }\n\n    async refreshDashboard() {\n        // Show loading state\n        const refreshBtn = document.querySelector('[onclick*=\"refresh\"]');\n        if (refreshBtn) {\n            refreshBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> Refreshing...';\n            refreshBtn.disabled = true;\n        }\n\n        await this.loadDashboardData();\n\n        // Reset button\n        if (refreshBtn) {\n            refreshBtn.innerHTML = '<i class=\"fas fa-refresh me-1\"></i> Refresh';\n            refreshBtn.disabled = false;\n        }\n\n        if (window.apiService) {\n            window.apiService.showSuccessMessage('Dashboard refreshed successfully');\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        switch (currentPage) {\n            case 'dashboard.html':\n                this.setupDashboard();\n                break;\n            case 'users.html':\n                this.setupUsersPage();\n                break;\n            case 'videos.html':\n                this.setupVideosPage();\n                break;\n            case 'profile.html':\n                this.setupProfilePage();\n                break;\n        }\n    }\n\n    setupDashboard() {\n        // Dashboard is already set up in init()\n    }\n\n    async setupUsersPage() {\n        try {\n            // Wait for services to be ready\n            if (!window.apiService || !window.dataService) {\n                setTimeout(() => this.setupUsersPage(), 100);\n                return;\n            }\n\n            const result = await window.apiService.getUsers();\n            if (result.success) {\n                this.renderUsersTable(result.data.users || result.data);\n            } else {\n                this.renderUsersTable(this.users);\n            }\n        } catch (error) {\n            console.error('Error loading users:', error);\n            this.renderUsersTable(this.users);\n        }\n    }\n\n    renderUsersTable(users) {\n        const tbody = document.getElementById('usersTableBody');\n        if (!tbody) return;\n\n        tbody.innerHTML = users.map(user => `\n            <tr>\n                <td>\n                    <div class=\"d-flex align-items-center\">\n                        <div class=\"avatar bg-primary bg-opacity-10 text-primary rounded-circle p-2 me-3\">\n                            <i class=\"fas fa-user\"></i>\n                        </div>\n                        <div>\n                            <div class=\"fw-semibold\">${user.firstName} ${user.lastName}</div>\n                            <div class=\"text-muted text-sm\">${user.email}</div>\n                        </div>\n                    </div>\n                </td>\n                <td>\n                    <span class=\"badge bg-${user.type === 'creator' ? 'success' : 'info'} bg-opacity-10 text-${user.type === 'creator' ? 'success' : 'info'}\">\n                        ${user.type.charAt(0).toUpperCase() + user.type.slice(1)}\n                    </span>\n                </td>\n                <td>\n                    <span class=\"badge bg-${user.status === 'active' ? 'success' : 'secondary'}\">\n                        ${user.status.charAt(0).toUpperCase() + user.status.slice(1)}\n                    </span>\n                </td>\n                <td class=\"text-muted\">${new Date(user.joinDate).toLocaleDateString()}</td>\n                <td>\n                    <div class=\"dropdown\">\n                        <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\">\n                            Actions\n                        </button>\n                        <ul class=\"dropdown-menu\">\n                            <li><a class=\"dropdown-item\" href=\"#\" onclick=\"editUser(${user.id})\">Edit</a></li>\n                            <li><a class=\"dropdown-item\" href=\"#\" onclick=\"viewUser(${user.id})\">View Details</a></li>\n                            <li><hr class=\"dropdown-divider\"></li>\n                            <li><a class=\"dropdown-item text-danger\" href=\"#\" onclick=\"deleteUser(${user.id})\">Delete</a></li>\n                        </ul>\n                    </div>\n                </td>\n            </tr>\n        `).join('');\n    }\n\n    async setupVideosPage() {\n        try {\n            // Wait for services to be ready\n            if (!window.apiService || !window.dataService) {\n                setTimeout(() => this.setupVideosPage(), 100);\n                return;\n            }\n\n            const result = await window.apiService.getVideos({ status: 'all' });\n            if (result.success) {\n                this.renderVideosTable(result.data.videos || result.data);\n            } else {\n                this.renderVideosTable(this.videos);\n            }\n        } catch (error) {\n            console.error('Error loading videos:', error);\n            this.renderVideosTable(this.videos);\n        }\n    }\n\n    renderVideosTable(videos) {\n        const tbody = document.getElementById('videosTableBody');\n        if (!tbody) return;\n\n        tbody.innerHTML = videos.map(video => `\n            <tr>\n                <td>\n                    <div class=\"d-flex align-items-center\">\n                        <div class=\"video-thumbnail me-3\" style=\"width: 60px; height: 40px; background: #f0f0f0; border-radius: 4px; display: flex; align-items: center; justify-content: center;\">\n                            <i class=\"fas fa-play text-muted\"></i>\n                        </div>\n                        <div>\n                            <div class=\"fw-semibold\">${video.title}</div>\n                            <div class=\"text-muted text-sm\">by ${video.creator}</div>\n                        </div>\n                    </div>\n                </td>\n                <td>\n                    <span class=\"badge bg-${this.getStatusColor(video.status)} bg-opacity-10 text-${this.getStatusColor(video.status)}\">\n                        ${video.status.charAt(0).toUpperCase() + video.status.slice(1)}\n                    </span>\n                </td>\n                <td class=\"text-muted\">${new Date(video.uploadDate).toLocaleDateString()}</td>\n                <td class=\"text-muted\">${this.formatNumber(video.views)}</td>\n                <td class=\"text-muted\">${video.duration}</td>\n                <td>\n                    <div class=\"dropdown\">\n                        <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\">\n                            Actions\n                        </button>\n                        <ul class=\"dropdown-menu\">\n                            <li><a class=\"dropdown-item\" href=\"#\" onclick=\"viewVideo(${video.id})\">View</a></li>\n                            ${video.status === 'pending' ? \n                                '<li><a class=\"dropdown-item text-success\" href=\"#\" onclick=\"approveVideo(' + video.id + ')\">Approve</a></li>' +\n                                '<li><a class=\"dropdown-item text-warning\" href=\"#\" onclick=\"rejectVideo(' + video.id + ')\">Reject</a></li>'\n                                : ''\n                            }\n                            <li><hr class=\"dropdown-divider\"></li>\n                            <li><a class=\"dropdown-item text-danger\" href=\"#\" onclick=\"deleteVideo(${video.id})\">Delete</a></li>\n                        </ul>\n                    </div>\n                </td>\n            </tr>\n        `).join('');\n    }\n\n    getStatusColor(status) {\n        const colors = {\n            approved: 'success',\n            pending: 'warning',\n            rejected: 'danger',\n            active: 'success',\n            inactive: 'secondary'\n        };\n        return colors[status] || 'secondary';\n    }\n\n    setupProfilePage() {\n        // Profile page setup\n        console.log('Profile page loaded');\n    }\n}\n\n// Global functions for onclick handlers\nwindow.showAddUserModal = function() {\n    if (window.apiService) {\n        window.apiService.showSuccessMessage('Add User modal would open here');\n    }\n};\n\nwindow.exportData = function() {\n    if (window.apiService) {\n        window.apiService.showSuccessMessage('Export functionality would start here');\n    }\n};\n\nwindow.checkSystemHealth = async function() {\n    try {\n        const result = await window.apiService.getSystemHealth();\n        if (result.success) {\n            window.apiService.showSuccessMessage('System health check completed');\n        } else {\n            window.apiService.handleApiError(result, 'Health check failed');\n        }\n    } catch (error) {\n        window.apiService.showSuccessMessage('Demo mode: System health check simulated');\n    }\n};\n\nwindow.viewSystemLogs = function() {\n    window.apiService.showSuccessMessage('System logs would be displayed here');\n};\n\nwindow.editUser = async function(userId) {\n    console.log('Edit user:', userId);\n    window.apiService.showSuccessMessage(`Edit user ${userId} functionality would open here`);\n};\n\nwindow.viewUser = async function(userId) {\n    console.log('View user:', userId);\n    window.apiService.showSuccessMessage(`User ${userId} details would be displayed here`);\n};\n\nwindow.deleteUser = async function(userId) {\n    if (confirm('Are you sure you want to delete this user?')) {\n        try {\n            const result = await window.apiService.deleteUser(userId);\n            if (result.success) {\n                window.apiService.showSuccessMessage('User deleted successfully');\n                // Refresh the users table\n                window.adminManager.setupUsersPage();\n            } else {\n                window.apiService.handleApiError(result, 'Failed to delete user');\n            }\n        } catch (error) {\n            window.apiService.showSuccessMessage('Demo mode: User deletion simulated');\n        }\n    }\n};\n\nwindow.viewVideo = function(videoId) {\n    window.apiService.showSuccessMessage(`Video ${videoId} details would be displayed here`);\n};\n\nwindow.approveVideo = async function(videoId) {\n    try {\n        const result = await window.apiService.approveVideo(videoId);\n        if (result.success) {\n            window.apiService.showSuccessMessage('Video approved successfully');\n            window.adminManager.setupVideosPage();\n        } else {\n            window.apiService.handleApiError(result, 'Failed to approve video');\n        }\n    } catch (error) {\n        window.apiService.showSuccessMessage('Demo mode: Video approval simulated');\n    }\n};\n\nwindow.rejectVideo = async function(videoId) {\n    const reason = prompt('Please provide a reason for rejection:');\n    if (reason) {\n        try {\n            const result = await window.apiService.rejectVideo(videoId, reason);\n            if (result.success) {\n                window.apiService.showSuccessMessage('Video rejected successfully');\n                window.adminManager.setupVideosPage();\n            } else {\n                window.apiService.handleApiError(result, 'Failed to reject video');\n            }\n        } catch (error) {\n            window.apiService.showSuccessMessage('Demo mode: Video rejection simulated');\n        }\n    }\n};\n\nwindow.deleteVideo = async function(videoId) {\n    if (confirm('Are you sure you want to delete this video?')) {\n        try {\n            const result = await window.apiService.deleteVideo(videoId);\n            if (result.success) {\n                window.apiService.showSuccessMessage('Video deleted successfully');\n                window.adminManager.setupVideosPage();\n            } else {\n                window.apiService.handleApiError(result, 'Failed to delete video');\n            }\n        } catch (error) {\n            window.apiService.showSuccessMessage('Demo mode: Video deletion simulated');\n        }\n    }\n};\n\n// Initialize admin manager\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.adminManager = new AdminManager();\n});","size_bytes":16076},"assets/js/auth.js":{"content":"/**\n * VideoHub Authentication Module\n * Handles user registration, login, password reset, and email verification\n */\n\nclass AuthManager {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n    }\n\n    bindEvents() {\n        // Login form\n        const loginForm = document.getElementById('loginForm');\n        if (loginForm) {\n            loginForm.addEventListener('submit', this.handleLogin.bind(this));\n        }\n\n        // Signup form\n        const signupForm = document.getElementById('signupForm');\n        if (signupForm) {\n            signupForm.addEventListener('submit', this.handleSignup.bind(this));\n        }\n\n        // Forgot password form\n        const forgotPasswordForm = document.getElementById('forgotPasswordForm');\n        if (forgotPasswordForm) {\n            forgotPasswordForm.addEventListener('submit', this.handleForgotPassword.bind(this));\n        }\n\n        // Set password form\n        const setPasswordForm = document.getElementById('setPasswordForm');\n        if (setPasswordForm) {\n            setPasswordForm.addEventListener('submit', this.handleSetPassword.bind(this));\n        }\n\n        // Email verification actions\n        const verifyButton = document.getElementById('verifyButton');\n        if (verifyButton) {\n            verifyButton.addEventListener('click', this.handleEmailVerification.bind(this));\n        }\n\n        const resendEmail = document.getElementById('resendEmail');\n        if (resendEmail) {\n            resendEmail.addEventListener('click', this.handleResendEmail.bind(this));\n        }\n\n        // Password strength checker\n        const newPasswordInput = document.getElementById('newPassword');\n        if (newPasswordInput) {\n            newPasswordInput.addEventListener('input', this.checkPasswordStrength.bind(this));\n        }\n\n        // Password toggle\n        const togglePassword = document.getElementById('togglePassword');\n        if (togglePassword) {\n            togglePassword.addEventListener('click', this.togglePasswordVisibility.bind(this));\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        // Handle demo login prefill\n        this.setupDemoLogin();\n        \n        // Handle URL parameters for verification\n        this.handleUrlParameters();\n    }\n\n    setupDemoLogin() {\n        const demoButtons = document.querySelectorAll('.demo-login-btn');\n        demoButtons.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const userType = e.target.dataset.userType;\n                this.prefillDemoCredentials(userType);\n            });\n        });\n    }\n\n    prefillDemoCredentials(userType) {\n        const emailInput = document.getElementById('email');\n        const passwordInput = document.getElementById('password');\n        \n        if (!emailInput || !passwordInput) return;\n\n        const credentials = {\n            admin: { email: 'admin@videohub.com', password: 'admin123' },\n            creator: { email: 'creator@videohub.com', password: 'creator123' },\n            viewer: { email: 'viewer@videohub.com', password: 'viewer123' }\n        };\n\n        if (credentials[userType]) {\n            emailInput.value = credentials[userType].email;\n            passwordInput.value = credentials[userType].password;\n        }\n    }\n\n    handleUrlParameters() {\n        const urlParams = new URLSearchParams(window.location.search);\n        const email = urlParams.get('email');\n        const token = urlParams.get('token');\n\n        if (email) {\n            const userEmailSpan = document.getElementById('userEmail');\n            if (userEmailSpan) {\n                userEmailSpan.textContent = email;\n            }\n        }\n\n        if (token) {\n            // Auto-verify if token is present\n            setTimeout(() => {\n                this.handleEmailVerification();\n            }, 1000);\n        }\n    }\n\n    async handleLogin(e) {\n        e.preventDefault();\n        \n        const email = document.getElementById('email').value;\n        const password = document.getElementById('password').value;\n        const rememberMe = document.getElementById('rememberMe').checked;\n\n        try {\n            this.showLoading('Signing in...');\n            \n            // Simulate API call\n            await this.delay(1500);\n            \n            // Demo authentication\n            const userType = this.getUserTypeFromEmail(email);\n            \n            if (userType) {\n                // Store user session\n                this.setUserSession({\n                    email: email,\n                    userType: userType,\n                    rememberMe: rememberMe\n                });\n\n                this.showSuccess('Login successful! Redirecting...');\n                \n                // Redirect based on user type\n                setTimeout(() => {\n                    this.redirectToUserDashboard(userType);\n                }, 1000);\n            } else {\n                throw new Error('Invalid credentials');\n            }\n            \n        } catch (error) {\n            this.showError('Invalid email or password. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleSignup(e) {\n        e.preventDefault();\n        \n        const formData = {\n            firstName: document.getElementById('firstName').value,\n            lastName: document.getElementById('lastName').value,\n            email: document.getElementById('email').value,\n            userType: document.getElementById('userType').value,\n            password: document.getElementById('password').value,\n            confirmPassword: document.getElementById('confirmPassword').value,\n            agreeTerms: document.getElementById('agreeTerms').checked\n        };\n\n        try {\n            // Validate form\n            this.validateSignupForm(formData);\n            \n            this.showLoading('Creating your account...');\n            \n            // Simulate API call\n            await this.delay(2000);\n            \n            this.showSuccess('Account created successfully! Please check your email for verification.');\n            \n            // Redirect to email verification\n            setTimeout(() => {\n                window.location.href = `email-verification.html?email=${encodeURIComponent(formData.email)}`;\n            }, 1500);\n            \n        } catch (error) {\n            this.showError(error.message);\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleForgotPassword(e) {\n        e.preventDefault();\n        \n        const email = document.getElementById('email').value;\n\n        try {\n            this.showLoading('Sending reset link...');\n            \n            // Simulate API call\n            await this.delay(1500);\n            \n            // Hide form and show success message\n            document.getElementById('emailForm').style.display = 'none';\n            document.getElementById('successMessage').classList.remove('d-none');\n            \n        } catch (error) {\n            this.showError('Failed to send reset email. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleEmailVerification() {\n        try {\n            this.showLoading('Verifying email...');\n            \n            // Simulate API call\n            await this.delay(1500);\n            \n            // Hide pending verification and show success\n            document.getElementById('pendingVerification').style.display = 'none';\n            document.getElementById('verificationSuccess').classList.remove('d-none');\n            \n        } catch (error) {\n            this.showError('Verification failed. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleResendEmail() {\n        try {\n            this.showLoading('Resending verification email...');\n            \n            // Simulate API call\n            await this.delay(1000);\n            \n            this.showSuccess('Verification email sent successfully!');\n            \n        } catch (error) {\n            this.showError('Failed to resend email. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleSetPassword(e) {\n        e.preventDefault();\n        \n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n\n        try {\n            // Validate passwords\n            if (newPassword !== confirmPassword) {\n                throw new Error('Passwords do not match');\n            }\n            \n            if (!this.isPasswordStrong(newPassword)) {\n                throw new Error('Password does not meet strength requirements');\n            }\n            \n            this.showLoading('Setting password...');\n            \n            // Simulate API call\n            await this.delay(1500);\n            \n            this.showSuccess('Password set successfully! You can now log in.');\n            \n            // Redirect to login\n            setTimeout(() => {\n                window.location.href = 'login.html';\n            }, 1500);\n            \n        } catch (error) {\n            this.showError(error.message);\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    validateSignupForm(formData) {\n        if (!formData.firstName.trim()) {\n            throw new Error('First name is required');\n        }\n        \n        if (!formData.lastName.trim()) {\n            throw new Error('Last name is required');\n        }\n        \n        if (!this.isValidEmail(formData.email)) {\n            throw new Error('Please enter a valid email address');\n        }\n        \n        if (!formData.userType) {\n            throw new Error('Please select an account type');\n        }\n        \n        if (formData.password.length < 8) {\n            throw new Error('Password must be at least 8 characters long');\n        }\n        \n        if (formData.password !== formData.confirmPassword) {\n            throw new Error('Passwords do not match');\n        }\n        \n        if (!formData.agreeTerms) {\n            throw new Error('You must agree to the Terms of Service');\n        }\n    }\n\n    checkPasswordStrength(e) {\n        const password = e.target.value;\n        const strengthBars = document.querySelectorAll('.strength-bar');\n        const strengthText = document.getElementById('strengthText');\n        \n        if (!strengthBars.length || !strengthText) return;\n\n        const strength = this.calculatePasswordStrength(password);\n        \n        // Reset all bars\n        strengthBars.forEach(bar => {\n            bar.className = 'strength-bar';\n        });\n        \n        // Fill bars based on strength\n        for (let i = 0; i < strength.score; i++) {\n            strengthBars[i].classList.add(strength.class);\n        }\n        \n        strengthText.textContent = strength.text;\n        strengthText.className = `text-${strength.class}`;\n    }\n\n    calculatePasswordStrength(password) {\n        let score = 0;\n        let feedback = [];\n        \n        if (password.length >= 8) score++;\n        if (/[a-z]/.test(password)) score++;\n        if (/[A-Z]/.test(password)) score++;\n        if (/[0-9]/.test(password)) score++;\n        if (/[^A-Za-z0-9]/.test(password)) score++;\n        \n        const strengthLevels = {\n            0: { class: 'muted', text: 'Enter a password' },\n            1: { class: 'danger', text: 'Very weak' },\n            2: { class: 'warning', text: 'Weak' },\n            3: { class: 'info', text: 'Fair' },\n            4: { class: 'success', text: 'Good' },\n            5: { class: 'success', text: 'Strong' }\n        };\n        \n        return { score, ...strengthLevels[score] };\n    }\n\n    isPasswordStrong(password) {\n        return password.length >= 8 && \n               /[a-z]/.test(password) && \n               /[A-Z]/.test(password) && \n               /[0-9]/.test(password);\n    }\n\n    togglePasswordVisibility() {\n        const passwordInput = document.getElementById('newPassword');\n        const toggleButton = document.getElementById('togglePassword');\n        \n        if (passwordInput.type === 'password') {\n            passwordInput.type = 'text';\n            toggleButton.innerHTML = '<i class=\"fas fa-eye-slash\"></i>';\n        } else {\n            passwordInput.type = 'password';\n            toggleButton.innerHTML = '<i class=\"fas fa-eye\"></i>';\n        }\n    }\n\n    getUserTypeFromEmail(email) {\n        if (email.includes('admin@')) return 'admin';\n        if (email.includes('creator@')) return 'creator';\n        if (email.includes('viewer@')) return 'viewer';\n        return null;\n    }\n\n    redirectToUserDashboard(userType) {\n        const dashboardUrls = {\n            admin: '../admin/dashboard.html',\n            creator: '../creator/dashboard.html',\n            viewer: '../viewer/browse.html'\n        };\n        \n        window.location.href = dashboardUrls[userType];\n    }\n\n    setUserSession(userData) {\n        const sessionData = {\n            ...userData,\n            timestamp: new Date().toISOString()\n        };\n        \n        if (userData.rememberMe) {\n            localStorage.setItem('userSession', JSON.stringify(sessionData));\n        } else {\n            sessionStorage.setItem('userSession', JSON.stringify(sessionData));\n        }\n    }\n\n    getUserSession() {\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n        \n        const session = localSession || sessionSession;\n        return session ? JSON.parse(session) : null;\n    }\n\n    clearUserSession() {\n        localStorage.removeItem('userSession');\n        sessionStorage.removeItem('userSession');\n    }\n\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    showLoading(message = 'Loading...') {\n        // Create or update loading indicator\n        let loader = document.getElementById('globalLoader');\n        if (!loader) {\n            loader = document.createElement('div');\n            loader.id = 'globalLoader';\n            loader.className = 'position-fixed top-50 start-50 translate-middle';\n            loader.style.zIndex = '9999';\n            document.body.appendChild(loader);\n        }\n        \n        loader.innerHTML = `\n            <div class=\"bg-white p-4 rounded shadow text-center\">\n                <div class=\"spinner-border text-primary mb-2\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div>${message}</div>\n            </div>\n        `;\n        loader.style.display = 'block';\n    }\n\n    hideLoading() {\n        const loader = document.getElementById('globalLoader');\n        if (loader) {\n            loader.style.display = 'none';\n        }\n    }\n\n    showSuccess(message) {\n        this.showToast(message, 'success');\n    }\n\n    showError(message) {\n        this.showToast(message, 'danger');\n    }\n\n    showToast(message, type = 'info') {\n        // Create toast container if it doesn't exist\n        let toastContainer = document.getElementById('toastContainer');\n        if (!toastContainer) {\n            toastContainer = document.createElement('div');\n            toastContainer.id = 'toastContainer';\n            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';\n            toastContainer.style.zIndex = '9999';\n            document.body.appendChild(toastContainer);\n        }\n\n        // Create toast element\n        const toastId = 'toast-' + Date.now();\n        const toastElement = document.createElement('div');\n        toastElement.id = toastId;\n        toastElement.className = `toast align-items-center text-bg-${type} border-0`;\n        toastElement.setAttribute('role', 'alert');\n        toastElement.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">${message}</div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        `;\n\n        toastContainer.appendChild(toastElement);\n\n        // Initialize and show toast\n        const toast = new bootstrap.Toast(toastElement, {\n            autohide: true,\n            delay: 5000\n        });\n        toast.show();\n\n        // Remove toast element after it's hidden\n        toastElement.addEventListener('hidden.bs.toast', () => {\n            toastElement.remove();\n        });\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n}\n\n// Initialize authentication manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new AuthManager();\n});\n\n// Export for other modules\nwindow.AuthManager = AuthManager;\n","size_bytes":16937},"assets/js/common.js":{"content":"/**\n * VideoHub Common Utilities Module\n * Shared functionality and utilities used across all modules\n */\n\nclass CommonUtils {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.setupGlobalErrorHandler();\n        this.setupToastContainer();\n        this.bindCommonEvents();\n        this.checkUserSession();\n    }\n\n    setupGlobalErrorHandler() {\n        window.addEventListener('error', (event) => {\n            console.error('Global error:', event.error);\n            this.showToast('An unexpected error occurred. Please try again.', 'danger');\n        });\n\n        window.addEventListener('unhandledrejection', (event) => {\n            console.error('Unhandled promise rejection:', event.reason);\n            this.showToast('An unexpected error occurred. Please try again.', 'danger');\n        });\n    }\n\n    setupToastContainer() {\n        if (!document.getElementById('toastContainer')) {\n            const toastContainer = document.createElement('div');\n            toastContainer.id = 'toastContainer';\n            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';\n            toastContainer.style.zIndex = '9999';\n            document.body.appendChild(toastContainer);\n        }\n    }\n\n    bindCommonEvents() {\n        // Handle logout links\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('a[href*=\"login.html\"]') && e.target.textContent.includes('Logout')) {\n                e.preventDefault();\n                this.handleLogout();\n            }\n        });\n\n        // Handle demo mode notifications\n        this.showDemoModeNotification();\n    }\n\n    showDemoModeNotification() {\n        if (window.location.pathname.includes('admin/') || \n            window.location.pathname.includes('creator/') || \n            window.location.pathname.includes('viewer/')) {\n            \n            setTimeout(() => {\n                this.showToast('You are in demo mode. All data and actions are simulated.', 'info', 8000);\n            }, 2000);\n        }\n    }\n\n    checkUserSession() {\n        const session = this.getUserSession();\n        if (session && this.isSessionExpired(session)) {\n            this.clearUserSession();\n            if (!window.location.pathname.includes('auth/')) {\n                this.showToast('Your session has expired. Please log in again.', 'warning');\n                setTimeout(() => {\n                    window.location.href = '/auth/login.html';\n                }, 2000);\n            }\n        }\n    }\n\n    // Session Management\n    getUserSession() {\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n        \n        const session = localSession || sessionSession;\n        return session ? JSON.parse(session) : null;\n    }\n\n    setUserSession(userData) {\n        const sessionData = {\n            ...userData,\n            timestamp: new Date().toISOString(),\n            expires: new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString() // 24 hours\n        };\n        \n        if (userData.rememberMe) {\n            localStorage.setItem('userSession', JSON.stringify(sessionData));\n        } else {\n            sessionStorage.setItem('userSession', JSON.stringify(sessionData));\n        }\n    }\n\n    clearUserSession() {\n        localStorage.removeItem('userSession');\n        sessionStorage.removeItem('userSession');\n    }\n\n    isSessionExpired(session) {\n        if (!session.expires) return false;\n        return new Date() > new Date(session.expires);\n    }\n\n    handleLogout() {\n        this.clearUserSession();\n        this.showToast('Logged out successfully!', 'success');\n        setTimeout(() => {\n            window.location.href = '/auth/login.html';\n        }, 1000);\n    }\n\n    // Toast Notifications\n    showToast(message, type = 'info', delay = 5000) {\n        const toastContainer = document.getElementById('toastContainer');\n        if (!toastContainer) return;\n\n        const toastId = 'toast-' + Date.now();\n        const toastElement = document.createElement('div');\n        toastElement.id = toastId;\n        toastElement.className = `toast align-items-center text-bg-${type} border-0`;\n        toastElement.setAttribute('role', 'alert');\n        \n        const iconMap = {\n            success: 'fas fa-check-circle',\n            danger: 'fas fa-exclamation-circle',\n            warning: 'fas fa-exclamation-triangle',\n            info: 'fas fa-info-circle'\n        };\n\n        toastElement.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">\n                    <i class=\"${iconMap[type] || iconMap.info} me-2\"></i>\n                    ${message}\n                </div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        `;\n\n        toastContainer.appendChild(toastElement);\n\n        const toast = new bootstrap.Toast(toastElement, {\n            autohide: true,\n            delay: delay\n        });\n        toast.show();\n\n        toastElement.addEventListener('hidden.bs.toast', () => {\n            toastElement.remove();\n        });\n    }\n\n    // Loading States\n    showLoading(message = 'Loading...', target = null) {\n        const loaderId = 'loader-' + Date.now();\n        const loader = document.createElement('div');\n        loader.id = loaderId;\n        loader.className = 'position-absolute top-50 start-50 translate-middle';\n        loader.style.zIndex = '9999';\n        loader.innerHTML = `\n            <div class=\"bg-white p-4 rounded shadow text-center\">\n                <div class=\"spinner-border text-primary mb-2\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div>${message}</div>\n            </div>\n        `;\n\n        if (target) {\n            target.style.position = 'relative';\n            target.appendChild(loader);\n        } else {\n            loader.className = 'position-fixed top-50 start-50 translate-middle';\n            document.body.appendChild(loader);\n        }\n\n        return loaderId;\n    }\n\n    hideLoading(loaderId = null) {\n        if (loaderId) {\n            const loader = document.getElementById(loaderId);\n            if (loader) loader.remove();\n        } else {\n            // Remove all loaders\n            document.querySelectorAll('[id^=\"loader-\"]').forEach(loader => {\n                loader.remove();\n            });\n        }\n    }\n\n    // Form Validation\n    validateEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    validatePassword(password) {\n        return {\n            length: password.length >= 8,\n            uppercase: /[A-Z]/.test(password),\n            lowercase: /[a-z]/.test(password),\n            number: /[0-9]/.test(password),\n            special: /[^A-Za-z0-9]/.test(password)\n        };\n    }\n\n    sanitizeInput(input) {\n        const div = document.createElement('div');\n        div.textContent = input;\n        return div.innerHTML;\n    }\n\n    // Date and Time Utilities\n    formatDate(date, format = 'short') {\n        const d = new Date(date);\n        const options = {\n            short: { year: 'numeric', month: 'short', day: 'numeric' },\n            long: { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' },\n            time: { hour: '2-digit', minute: '2-digit' }\n        };\n        return d.toLocaleDateString('en-US', options[format] || options.short);\n    }\n\n    formatDuration(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n\n        if (hours > 0) {\n            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        }\n        return `${minutes}:${secs.toString().padStart(2, '0')}`;\n    }\n\n    timeAgo(date) {\n        const now = new Date();\n        const past = new Date(date);\n        const diff = now - past;\n\n        const seconds = Math.floor(diff / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        const weeks = Math.floor(days / 7);\n        const months = Math.floor(days / 30);\n        const years = Math.floor(days / 365);\n\n        if (years > 0) return `${years} year${years > 1 ? 's' : ''} ago`;\n        if (months > 0) return `${months} month${months > 1 ? 's' : ''} ago`;\n        if (weeks > 0) return `${weeks} week${weeks > 1 ? 's' : ''} ago`;\n        if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;\n        if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n        if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n        return 'Just now';\n    }\n\n    // URL and Navigation Utilities\n    getQueryParam(param) {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get(param);\n    }\n\n    setQueryParam(param, value) {\n        const url = new URL(window.location);\n        url.searchParams.set(param, value);\n        window.history.pushState({}, '', url);\n    }\n\n    removeQueryParam(param) {\n        const url = new URL(window.location);\n        url.searchParams.delete(param);\n        window.history.pushState({}, '', url);\n    }\n\n    // Local Storage Utilities\n    setLocalData(key, data) {\n        try {\n            localStorage.setItem(key, JSON.stringify(data));\n            return true;\n        } catch (error) {\n            console.error('Error saving to localStorage:', error);\n            return false;\n        }\n    }\n\n    getLocalData(key) {\n        try {\n            const data = localStorage.getItem(key);\n            return data ? JSON.parse(data) : null;\n        } catch (error) {\n            console.error('Error reading from localStorage:', error);\n            return null;\n        }\n    }\n\n    removeLocalData(key) {\n        try {\n            localStorage.removeItem(key);\n            return true;\n        } catch (error) {\n            console.error('Error removing from localStorage:', error);\n            return false;\n        }\n    }\n\n    // Network Utilities\n    async makeRequest(url, options = {}) {\n        const defaultOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const mergedOptions = { ...defaultOptions, ...options };\n        \n        try {\n            const response = await fetch(url, mergedOptions);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error('Request failed:', error);\n            throw error;\n        }\n    }\n\n    // File Utilities\n    formatFileSize(bytes) {\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        if (bytes === 0) return '0 Bytes';\n        const i = Math.floor(Math.log(bytes) / Math.log(1024));\n        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    }\n\n    isValidImageFile(file) {\n        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n        return validTypes.includes(file.type);\n    }\n\n    isValidVideoFile(file) {\n        const validTypes = ['video/mp4', 'video/avi', 'video/mov', 'video/wmv', 'video/webm'];\n        return validTypes.includes(file.type);\n    }\n\n    // Animation Utilities\n    fadeIn(element, duration = 300) {\n        element.style.opacity = '0';\n        element.style.display = 'block';\n        \n        let start = null;\n        const animate = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            element.style.opacity = Math.min(progress / duration, 1);\n            \n            if (progress < duration) {\n                requestAnimationFrame(animate);\n            }\n        };\n        \n        requestAnimationFrame(animate);\n    }\n\n    fadeOut(element, duration = 300) {\n        let start = null;\n        const animate = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            element.style.opacity = Math.max(1 - (progress / duration), 0);\n            \n            if (progress < duration) {\n                requestAnimationFrame(animate);\n            } else {\n                element.style.display = 'none';\n            }\n        };\n        \n        requestAnimationFrame(animate);\n    }\n\n    // Utility Functions\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n\n    throttle(func, limit) {\n        let inThrottle;\n        return function() {\n            const args = arguments;\n            const context = this;\n            if (!inThrottle) {\n                func.apply(context, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Currency Formatting\n    formatCurrency(amount, currency = 'USD') {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: currency\n        }).format(amount);\n    }\n\n    // Number Formatting\n    formatNumber(number) {\n        return new Intl.NumberFormat('en-US').format(number);\n    }\n\n    // Copy to Clipboard\n    async copyToClipboard(text) {\n        try {\n            await navigator.clipboard.writeText(text);\n            this.showToast('Copied to clipboard!', 'success');\n            return true;\n        } catch (error) {\n            console.error('Failed to copy:', error);\n            this.showToast('Failed to copy to clipboard', 'danger');\n            return false;\n        }\n    }\n\n    // Device Detection\n    isMobile() {\n        return window.innerWidth <= 768;\n    }\n\n    isTablet() {\n        return window.innerWidth > 768 && window.innerWidth <= 1024;\n    }\n\n    isDesktop() {\n        return window.innerWidth > 1024;\n    }\n\n    // Event Emitter\n    createEventEmitter() {\n        const events = {};\n        \n        return {\n            on(event, callback) {\n                if (!events[event]) events[event] = [];\n                events[event].push(callback);\n            },\n            \n            emit(event, data) {\n                if (events[event]) {\n                    events[event].forEach(callback => callback(data));\n                }\n            },\n            \n            off(event, callback) {\n                if (events[event]) {\n                    events[event] = events[event].filter(cb => cb !== callback);\n                }\n            }\n        };\n    }\n}\n\n// Global Toast Function\nwindow.showToast = function(message, type = 'info', delay = 5000) {\n    if (window.commonUtils) {\n        window.commonUtils.showToast(message, type, delay);\n    } else {\n        console.log(`${type.toUpperCase()}: ${message}`);\n    }\n};\n\n// Initialize common utilities when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.commonUtils = new CommonUtils();\n});\n\n// Export for other modules\nwindow.CommonUtils = CommonUtils;\n","size_bytes":15718},"assets/js/creator.js":{"content":"/**\n * VideoHub Creator Module\n * Handles creator dashboard functionality with API integration\n */\n\nclass CreatorManager {\n    constructor() {\n        this.stats = {};\n        this.videos = [];\n        this.earnings = [];\n        this.init();\n    }\n\n    async init() {\n        this.loadMockData(); // Fallback for demo\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n        await this.loadDashboardData();\n    }\n\n    loadMockData() {\n        // Initialize empty arrays - data will be loaded from dataService\n        this.stats = {};\n        this.videos = [];\n        this.earnings = [];\n    }\n\n    async loadDashboardData() {\n        try {\n            // Try to load real data from API\n            const [statsResult, videosResult, earningsResult] = await Promise.all([\n                window.apiService.getCreatorStats(),\n                window.apiService.getCreatorVideos({ limit: 5 }),\n                window.apiService.getCreatorEarnings({ limit: 10 })\n            ]);\n\n            if (statsResult.success) {\n                this.stats = statsResult.data;\n            }\n            if (videosResult.success) {\n                this.videos = videosResult.data.videos || videosResult.data;\n            }\n            if (earningsResult.success) {\n                this.earnings = earningsResult.data.earnings || earningsResult.data;\n            }\n\n            this.updateDashboardDisplay();\n        } catch (error) {\n            console.log('API not available, using demo data');\n            this.updateDashboardDisplay();\n        }\n    }\n\n    updateDashboardDisplay() {\n        // Update stats cards\n        document.getElementById('totalVideos')?.textContent = this.stats.totalVideos || '--';\n        document.getElementById('totalViews')?.textContent = this.formatNumber(this.stats.totalViews) || '--';\n        document.getElementById('totalEarnings')?.textContent = this.formatCurrency(this.stats.totalEarnings) || '--';\n        document.getElementById('subscribers')?.textContent = this.stats.subscribers || '--';\n\n        // Update earnings table and recent videos\n        this.loadEarningsTable();\n        this.loadRecentVideos();\n    }\n\n    loadEarningsTable() {\n        const tbody = document.getElementById('earningsTableBody');\n        if (!tbody) return;\n\n        tbody.innerHTML = this.earnings.slice(0, 10).map(earning => `\n            <tr>\n                <td class=\"px-4 py-3\">\n                    <div class=\"d-flex align-items-center\">\n                        <div class=\"video-thumbnail me-3\" style=\"width: 40px; height: 24px; background: #f0f0f0; border-radius: 4px; display: flex; align-items: center; justify-content: center;\">\n                            <i class=\"fas fa-play text-muted\" style=\"font-size: 10px;\"></i>\n                        </div>\n                        <div>\n                            <div class=\"fw-semibold text-sm\">${earning.videoTitle}</div>\n                        </div>\n                    </div>\n                </td>\n                <td class=\"px-4 py-3\">\n                    <div>\n                        <div class=\"fw-semibold text-sm\">${earning.viewerName}</div>\n                        <div class=\"text-muted text-xs\">${earning.viewerEmail}</div>\n                    </div>\n                </td>\n                <td class=\"px-4 py-3 text-muted text-sm\">${new Date(earning.purchaseDate).toLocaleDateString()}</td>\n                <td class=\"px-4 py-3\">\n                    <span class=\"fw-bold text-success\">${this.formatCurrency(earning.price)}</span>\n                </td>\n                <td class=\"px-4 py-3\">\n                    <span class=\"badge bg-${earning.status === 'completed' ? 'success' : 'warning'} bg-opacity-10 text-${earning.status === 'completed' ? 'success' : 'warning'}\">\n                        ${earning.status.charAt(0).toUpperCase() + earning.status.slice(1)}\n                    </span>\n                </td>\n            </tr>\n        `).join('');\n    }\n\n    loadRecentVideos() {\n        const container = document.getElementById('recentVideos');\n        if (!container) return;\n\n        container.innerHTML = this.videos.slice(0, 5).map(video => `\n            <div class=\"d-flex align-items-center justify-content-between\">\n                <div class=\"d-flex align-items-center\">\n                    <div class=\"video-thumbnail me-3\" style=\"width: 50px; height: 30px; background: #f0f0f0; border-radius: 4px; display: flex; align-items: center; justify-content: center;\">\n                        <i class=\"fas fa-play text-muted\" style=\"font-size: 12px;\"></i>\n                    </div>\n                    <div>\n                        <div class=\"fw-semibold text-sm\">${video.title}</div>\n                        <div class=\"text-muted text-xs\">${new Date(video.uploadDate).toLocaleDateString()}</div>\n                    </div>\n                </div>\n                <div class=\"text-end\">\n                    <div class=\"fw-bold text-sm\">${this.formatNumber(video.views)}</div>\n                    <div class=\"text-muted text-xs\">views</div>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    formatNumber(num) {\n        if (!num) return '0';\n        return new Intl.NumberFormat().format(num);\n    }\n\n    formatCurrency(amount) {\n        if (!amount) return '$0.00';\n        return new Intl.NumberFormat('en-US', { \n            style: 'currency', \n            currency: 'USD' \n        }).format(amount);\n    }\n\n    bindEvents() {\n        // Upload video form submission\n        const uploadForm = document.getElementById('uploadVideoForm');\n        if (uploadForm) {\n            uploadForm.addEventListener('submit', (e) => this.handleVideoUpload(e));\n        }\n\n        // Refresh button\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('[onclick*=\"refresh\"]') || \n                e.target.closest('[onclick*=\"refresh\"]')) {\n                e.preventDefault();\n                this.refreshDashboard();\n            }\n        });\n    }\n\n    async refreshDashboard() {\n        const refreshBtn = document.querySelector('[onclick*=\"refresh\"]');\n        if (refreshBtn) {\n            refreshBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> Refreshing...';\n            refreshBtn.disabled = true;\n        }\n\n        await this.loadDashboardData();\n\n        if (refreshBtn) {\n            refreshBtn.innerHTML = '<i class=\"fas fa-refresh me-1\"></i> Refresh';\n            refreshBtn.disabled = false;\n        }\n\n        window.apiService.showSuccessMessage('Dashboard refreshed successfully');\n    }\n\n    async handleVideoUpload(e) {\n        e.preventDefault();\n        \n        const form = e.target;\n        const formData = new FormData(form);\n        const videoData = {\n            title: formData.get('videoTitle'),\n            description: formData.get('videoDescription'),\n            price: parseFloat(formData.get('videoPrice')),\n            category: formData.get('videoCategory')\n        };\n\n        // Validate form\n        if (!this.validateVideoForm(form, videoData)) {\n            return;\n        }\n\n        // Show loading state\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> Uploading...';\n        submitBtn.disabled = true;\n\n        try {\n            const result = await window.apiService.uploadVideo(videoData, formData.get('videoFile'));\n            \n            if (result.success) {\n                // Close modal and reset form\n                const modal = bootstrap.Modal.getInstance(document.getElementById('uploadVideoModal'));\n                modal.hide();\n                form.reset();\n                form.classList.remove('was-validated');\n                \n                // Refresh videos list\n                await this.loadDashboardData();\n                \n                window.apiService.showSuccessMessage('Video uploaded successfully');\n            } else {\n                window.apiService.handleApiError(result, 'Failed to upload video');\n            }\n        } catch (error) {\n            // Demo mode\n            const modal = bootstrap.Modal.getInstance(document.getElementById('uploadVideoModal'));\n            modal.hide();\n            form.reset();\n            form.classList.remove('was-validated');\n            window.apiService.showSuccessMessage('Video uploaded successfully (demo mode)');\n        } finally {\n            // Reset button\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    }\n\n    validateVideoForm(form, data) {\n        let isValid = true;\n        \n        // Title validation\n        const titleInput = form.querySelector('#videoTitle');\n        if (!data.title || data.title.length < 3) {\n            titleInput.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            titleInput.classList.remove('is-invalid');\n            titleInput.classList.add('is-valid');\n        }\n        \n        // Price validation\n        const priceInput = form.querySelector('#videoPrice');\n        if (!data.price || data.price < 0) {\n            priceInput.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            priceInput.classList.remove('is-invalid');\n            priceInput.classList.add('is-valid');\n        }\n\n        // Category validation\n        const categoryInput = form.querySelector('#videoCategory');\n        if (!data.category) {\n            categoryInput.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            categoryInput.classList.remove('is-invalid');\n            categoryInput.classList.add('is-valid');\n        }\n\n        // File validation\n        const fileInput = form.querySelector('#videoFile');\n        if (!fileInput.files || fileInput.files.length === 0) {\n            fileInput.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            fileInput.classList.remove('is-invalid');\n            fileInput.classList.add('is-valid');\n        }\n\n        form.classList.add('was-validated');\n        return isValid;\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        switch (currentPage) {\n            case 'dashboard.html':\n                this.setupDashboard();\n                break;\n            case 'videos.html':\n                this.setupVideosPage();\n                break;\n            case 'profile.html':\n                this.setupProfilePage();\n                break;\n        }\n    }\n\n    setupDashboard() {\n        // Dashboard is already set up in init()\n    }\n\n    async setupVideosPage() {\n        try {\n            const result = await window.apiService.getCreatorVideos();\n            if (result.success) {\n                this.renderVideosGrid(result.data.videos || result.data);\n            } else {\n                this.renderVideosGrid(this.videos);\n            }\n        } catch (error) {\n            this.renderVideosGrid(this.videos);\n        }\n    }\n\n    renderVideosGrid(videos) {\n        const grid = document.getElementById('videosGrid');\n        if (!grid) return;\n\n        grid.innerHTML = videos.map(video => `\n            <div class=\"col-lg-4 col-md-6 mb-4\">\n                <div class=\"card video-card shadow-sm border-0\">\n                    <div class=\"position-relative\">\n                        <img src=\"${video.thumbnail}\" class=\"card-img-top\" alt=\"${video.title}\" style=\"height: 200px; object-fit: cover;\">\n                        <div class=\"video-overlay position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center\">\n                            <div class=\"play-button bg-success bg-opacity-75 text-white rounded-circle d-flex align-items-center justify-content-center\" style=\"width: 50px; height: 50px;\">\n                                <i class=\"fas fa-play\"></i>\n                            </div>\n                        </div>\n                        <div class=\"position-absolute top-0 end-0 m-2\">\n                            <span class=\"badge bg-${this.getStatusColor(video.status)} bg-opacity-90\">\n                                ${video.status.charAt(0).toUpperCase() + video.status.slice(1)}\n                            </span>\n                        </div>\n                        <div class=\"position-absolute bottom-0 end-0 m-2\">\n                            <span class=\"badge bg-dark bg-opacity-75 text-white\">\n                                ${video.duration || '00:00'}\n                            </span>\n                        </div>\n                    </div>\n                    <div class=\"card-body p-3\">\n                        <h6 class=\"card-title fw-bold mb-2\">${video.title}</h6>\n                        <p class=\"card-text text-muted small mb-3\" style=\"height: 40px; overflow: hidden;\">\n                            ${video.description || 'No description available'}\n                        </p>\n                        \n                        <div class=\"d-flex justify-content-between align-items-center mb-2\">\n                            <span class=\"text-success fw-bold\">${this.formatCurrency(video.price || 0)}</span>\n                            <span class=\"text-muted small\">\n                                <i class=\"fas fa-eye me-1\"></i>\n                                ${this.formatNumber(video.views)}\n                            </span>\n                        </div>\n                        \n                        <div class=\"d-flex justify-content-between align-items-center mb-3\">\n                            <span class=\"text-muted small\">\n                                <i class=\"fas fa-heart me-1\"></i>\n                                ${this.formatNumber(video.likes || 0)}\n                            </span>\n                            <span class=\"text-success fw-semibold\">\n                                ${video.earnings ? this.formatCurrency(video.earnings) : '$0.00'} earned\n                            </span>\n                        </div>\n                        \n                        <div class=\"text-muted small mb-3\">\n                            Uploaded ${new Date(video.uploadDate).toLocaleDateString()}\n                        </div>\n                        \n                        <div class=\"btn-group w-100\" role=\"group\">\n                            <button type=\"button\" class=\"btn btn-sm btn-outline-primary\" onclick=\"editVideo(${video.id})\" title=\"Edit video\">\n                                <i class=\"fas fa-edit\"></i>\n                            </button>\n                            <button type=\"button\" class=\"btn btn-sm btn-outline-success\" onclick=\"viewVideoStats(${video.id})\" title=\"View stats\">\n                                <i class=\"fas fa-chart-bar\"></i>\n                            </button>\n                            <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\" onclick=\"duplicateVideo(${video.id})\" title=\"Duplicate\">\n                                <i class=\"fas fa-copy\"></i>\n                            </button>\n                            <button type=\"button\" class=\"btn btn-sm btn-outline-danger\" onclick=\"deleteVideo(${video.id})\" title=\"Delete video\">\n                                <i class=\"fas fa-trash\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `).join('');\n\n        // Add hover effects with CSS if not already added\n        if (!document.getElementById('video-card-styles')) {\n            const style = document.createElement('style');\n            style.id = 'video-card-styles';\n            style.textContent = `\n                .video-card {\n                    transition: transform 0.2s ease, box-shadow 0.2s ease;\n                }\n                .video-card:hover {\n                    transform: translateY(-5px);\n                    box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;\n                }\n                .video-overlay {\n                    opacity: 0;\n                    transition: opacity 0.2s ease;\n                    background: rgba(0,0,0,0.3);\n                }\n                .video-card:hover .video-overlay {\n                    opacity: 1;\n                }\n                .play-button {\n                    transform: scale(0.8);\n                    transition: transform 0.2s ease;\n                }\n                .video-card:hover .play-button {\n                    transform: scale(1);\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    }\n\n    getStatusColor(status) {\n        const colors = {\n            published: 'success',\n            pending: 'warning',\n            draft: 'secondary',\n            rejected: 'danger'\n        };\n        return colors[status] || 'secondary';\n    }\n\n    setupProfilePage() {\n        // Profile page is handled by profile.js\n    }\n}\n\n// Global functions\nwindow.exportEarnings = function() {\n    window.apiService.showSuccessMessage('Earnings export would start here');\n};\n\nwindow.editVideo = function(videoId) {\n    window.apiService.showSuccessMessage(`Edit video ${videoId} functionality would open here`);\n};\n\nwindow.viewVideoStats = function(videoId) {\n    window.apiService.showSuccessMessage(`Video ${videoId} stats would be displayed here`);\n};\n\nwindow.deleteVideo = async function(videoId) {\n    if (confirm('Are you sure you want to delete this video?')) {\n        try {\n            const result = await window.apiService.deleteVideo(videoId);\n            if (result.success) {\n                window.apiService.showSuccessMessage('Video deleted successfully');\n                window.creatorManager.setupVideosPage();\n            } else {\n                window.apiService.handleApiError(result, 'Failed to delete video');\n            }\n        } catch (error) {\n            window.apiService.showSuccessMessage('Demo mode: Video deletion simulated');\n        }\n    }\n};\n\nwindow.duplicateVideo = async function(videoId) {\n    try {\n        const result = await window.apiService.duplicateVideo(videoId);\n        if (result.success) {\n            window.apiService.showSuccessMessage('Video duplicated successfully');\n            window.creatorManager.setupVideosPage();\n        } else {\n            window.apiService.handleApiError(result, 'Failed to duplicate video');\n        }\n    } catch (error) {\n        window.apiService.showSuccessMessage('Demo mode: Video duplication simulated');\n    }\n};\n\n// Initialize creator manager\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.creatorManager = new CreatorManager();\n});","size_bytes":18746},"assets/js/payment.js":{"content":"/**\n * VideoHub Payment Module\n * Handles payment processing, validation, and transaction management\n */\n\nclass PaymentManager {\n    constructor() {\n        this.currentTransaction = null;\n        this.paymentMethods = [];\n        this.init();\n    }\n\n    init() {\n        this.loadPaymentMethods();\n        this.bindEvents();\n        this.setupDemoMode();\n    }\n\n    loadPaymentMethods() {\n        // Mock payment methods\n        this.paymentMethods = [\n            {\n                id: 'card',\n                name: 'Credit/Debit Card',\n                icon: 'fas fa-credit-card',\n                enabled: true,\n                processingFee: 0.99\n            },\n            {\n                id: 'paypal',\n                name: 'PayPal',\n                icon: 'fab fa-paypal',\n                enabled: true,\n                processingFee: 0.50\n            },\n            {\n                id: 'apple_pay',\n                name: 'Apple Pay',\n                icon: 'fab fa-apple',\n                enabled: false,\n                processingFee: 0.30\n            },\n            {\n                id: 'google_pay',\n                name: 'Google Pay',\n                icon: 'fab fa-google',\n                enabled: false,\n                processingFee: 0.30\n            }\n        ];\n    }\n\n    bindEvents() {\n        // Payment method selection\n        document.addEventListener('change', (e) => {\n            if (e.target.name === 'paymentMethod') {\n                this.handlePaymentMethodChange(e.target.value);\n            }\n        });\n\n        // Payment form submission\n        document.addEventListener('submit', (e) => {\n            if (e.target.id === 'paymentForm') {\n                e.preventDefault();\n                this.processPayment();\n            }\n        });\n\n        // Card input formatting\n        document.addEventListener('input', (e) => {\n            if (e.target.id === 'cardNumber') {\n                this.formatCardNumber(e.target);\n            }\n            if (e.target.id === 'expiryDate') {\n                this.formatExpiryDate(e.target);\n            }\n            if (e.target.id === 'cvv') {\n                this.formatCVV(e.target);\n            }\n        });\n\n        // Real-time validation\n        document.addEventListener('blur', (e) => {\n            if (e.target.classList.contains('payment-input')) {\n                this.validateField(e.target);\n            }\n        });\n    }\n\n    setupDemoMode() {\n        // Add demo mode notification to payment forms\n        const paymentForms = document.querySelectorAll('.payment-form, #paymentForm');\n        paymentForms.forEach(form => {\n            if (!form.querySelector('.demo-notice')) {\n                const demoNotice = document.createElement('div');\n                demoNotice.className = 'alert alert-info demo-notice';\n                demoNotice.innerHTML = `\n                    <i class=\"fas fa-info-circle me-2\"></i>\n                    <strong>Demo Mode:</strong> No real payments will be processed. Use test card: 4242 4242 4242 4242\n                `;\n                form.insertBefore(demoNotice, form.firstChild);\n            }\n        });\n    }\n\n    // Payment Processing Methods\n    async processPayment() {\n        const paymentData = this.collectPaymentData();\n        \n        if (!this.validatePaymentData(paymentData)) {\n            return;\n        }\n\n        try {\n            this.showPaymentProcessing();\n            \n            // Simulate payment processing\n            const result = await this.simulatePaymentProcessing(paymentData);\n            \n            if (result.success) {\n                this.handlePaymentSuccess(result);\n            } else {\n                this.handlePaymentError(result.error);\n            }\n            \n        } catch (error) {\n            this.handlePaymentError('Payment processing failed. Please try again.');\n        } finally {\n            this.hidePaymentProcessing();\n        }\n    }\n\n    async simulatePaymentProcessing(paymentData) {\n        // Simulate API call delay\n        await this.delay(2000 + Math.random() * 2000);\n        \n        // Simulate different payment outcomes\n        const random = Math.random();\n        \n        if (random < 0.85) {\n            // Success (85% chance)\n            return {\n                success: true,\n                transactionId: this.generateTransactionId(),\n                amount: paymentData.amount,\n                currency: paymentData.currency,\n                paymentMethod: paymentData.paymentMethod,\n                timestamp: new Date().toISOString()\n            };\n        } else if (random < 0.95) {\n            // Decline (10% chance)\n            return {\n                success: false,\n                error: 'Payment declined. Please check your payment details or try a different payment method.'\n            };\n        } else {\n            // Error (5% chance)\n            return {\n                success: false,\n                error: 'Payment processing error. Please try again later.'\n            };\n        }\n    }\n\n    collectPaymentData() {\n        const form = document.getElementById('paymentForm') || document.querySelector('.payment-form');\n        if (!form) return null;\n\n        const paymentMethod = form.querySelector('input[name=\"paymentMethod\"]:checked')?.value || 'card';\n        const amount = parseFloat(form.querySelector('#amount')?.value || document.getElementById('purchasePrice')?.textContent || 0);\n        \n        const data = {\n            paymentMethod: paymentMethod,\n            amount: amount,\n            currency: 'USD',\n            processingFee: this.getProcessingFee(paymentMethod),\n            total: amount + this.getProcessingFee(paymentMethod)\n        };\n\n        // Collect payment method specific data\n        if (paymentMethod === 'card') {\n            data.card = {\n                number: form.querySelector('#cardNumber')?.value?.replace(/\\s/g, '') || '',\n                expiryDate: form.querySelector('#expiryDate')?.value || '',\n                cvv: form.querySelector('#cvv')?.value || '',\n                holderName: form.querySelector('#cardHolderName')?.value || ''\n            };\n        } else if (paymentMethod === 'paypal') {\n            data.paypal = {\n                email: form.querySelector('#paypalEmail')?.value || ''\n            };\n        }\n\n        return data;\n    }\n\n    validatePaymentData(data) {\n        if (!data) {\n            this.showPaymentError('Please fill in all required fields.');\n            return false;\n        }\n\n        if (!data.amount || data.amount <= 0) {\n            this.showPaymentError('Invalid payment amount.');\n            return false;\n        }\n\n        if (data.paymentMethod === 'card') {\n            return this.validateCardData(data.card);\n        } else if (data.paymentMethod === 'paypal') {\n            return this.validatePayPalData(data.paypal);\n        }\n\n        return true;\n    }\n\n    validateCardData(card) {\n        if (!this.validateCardNumber(card.number)) {\n            this.showPaymentError('Please enter a valid card number.');\n            return false;\n        }\n\n        if (!this.validateExpiryDate(card.expiryDate)) {\n            this.showPaymentError('Please enter a valid expiry date.');\n            return false;\n        }\n\n        if (!this.validateCVV(card.cvv)) {\n            this.showPaymentError('Please enter a valid CVV.');\n            return false;\n        }\n\n        if (!card.holderName.trim()) {\n            this.showPaymentError('Please enter the cardholder name.');\n            return false;\n        }\n\n        return true;\n    }\n\n    validatePayPalData(paypal) {\n        if (!this.validateEmail(paypal.email)) {\n            this.showPaymentError('Please enter a valid PayPal email address.');\n            return false;\n        }\n        return true;\n    }\n\n    // Card Validation Methods\n    validateCardNumber(cardNumber) {\n        // Remove spaces and check if it's numeric\n        const cleaned = cardNumber.replace(/\\s/g, '');\n        \n        if (!/^\\d+$/.test(cleaned) || cleaned.length < 13 || cleaned.length > 19) {\n            return false;\n        }\n\n        // Luhn algorithm\n        return this.luhnCheck(cleaned);\n    }\n\n    luhnCheck(cardNumber) {\n        let sum = 0;\n        let isEven = false;\n        \n        for (let i = cardNumber.length - 1; i >= 0; i--) {\n            let digit = parseInt(cardNumber.charAt(i));\n            \n            if (isEven) {\n                digit *= 2;\n                if (digit > 9) {\n                    digit -= 9;\n                }\n            }\n            \n            sum += digit;\n            isEven = !isEven;\n        }\n        \n        return sum % 10 === 0;\n    }\n\n    validateExpiryDate(expiryDate) {\n        if (!/^\\d{2}\\/\\d{2}$/.test(expiryDate)) {\n            return false;\n        }\n\n        const [month, year] = expiryDate.split('/').map(num => parseInt(num, 10));\n        const currentDate = new Date();\n        const currentYear = currentDate.getFullYear() % 100;\n        const currentMonth = currentDate.getMonth() + 1;\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (year < currentYear || (year === currentYear && month < currentMonth)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    validateCVV(cvv) {\n        return /^\\d{3,4}$/.test(cvv);\n    }\n\n    validateEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    // Card Type Detection\n    detectCardType(cardNumber) {\n        const cleaned = cardNumber.replace(/\\s/g, '');\n        \n        const cardTypes = {\n            visa: /^4/,\n            mastercard: /^5[1-5]/,\n            amex: /^3[47]/,\n            discover: /^6(?:011|5)/,\n            dinersclub: /^3[0689]/,\n            jcb: /^35/\n        };\n\n        for (const [type, pattern] of Object.entries(cardTypes)) {\n            if (pattern.test(cleaned)) {\n                return type;\n            }\n        }\n\n        return 'unknown';\n    }\n\n    // Input Formatting Methods\n    formatCardNumber(input) {\n        let value = input.value.replace(/\\s/g, '').replace(/[^0-9]/gi, '');\n        const matches = value.match(/\\d{4,16}/g);\n        const match = matches && matches[0] || '';\n        const parts = [];\n\n        for (let i = 0, len = match.length; i < len; i += 4) {\n            parts.push(match.substring(i, i + 4));\n        }\n\n        if (parts.length) {\n            input.value = parts.join(' ');\n        } else {\n            input.value = value;\n        }\n\n        // Update card type icon\n        this.updateCardTypeIcon(input, value);\n    }\n\n    formatExpiryDate(input) {\n        let value = input.value.replace(/\\D/g, '');\n        \n        if (value.length >= 2) {\n            value = value.substring(0, 2) + '/' + value.substring(2, 4);\n        }\n        \n        input.value = value;\n    }\n\n    formatCVV(input) {\n        input.value = input.value.replace(/\\D/g, '').substring(0, 4);\n    }\n\n    updateCardTypeIcon(input, cardNumber) {\n        const cardType = this.detectCardType(cardNumber);\n        const iconElement = input.parentNode.querySelector('.card-type-icon');\n        \n        if (iconElement) {\n            const icons = {\n                visa: 'fab fa-cc-visa',\n                mastercard: 'fab fa-cc-mastercard',\n                amex: 'fab fa-cc-amex',\n                discover: 'fab fa-cc-discover',\n                dinersclub: 'fab fa-cc-diners-club',\n                jcb: 'fab fa-cc-jcb',\n                unknown: 'fas fa-credit-card'\n            };\n            \n            iconElement.className = `card-type-icon ${icons[cardType] || icons.unknown}`;\n        }\n    }\n\n    // Payment Method Management\n    handlePaymentMethodChange(method) {\n        this.showPaymentMethodForm(method);\n        this.updatePaymentSummary(method);\n    }\n\n    showPaymentMethodForm(method) {\n        // Hide all payment forms\n        const forms = document.querySelectorAll('.payment-method-form');\n        forms.forEach(form => form.style.display = 'none');\n\n        // Show selected payment method form\n        const selectedForm = document.getElementById(`${method}Form`);\n        if (selectedForm) {\n            selectedForm.style.display = 'block';\n        }\n    }\n\n    updatePaymentSummary(method) {\n        const processingFee = this.getProcessingFee(method);\n        const amount = parseFloat(document.getElementById('purchasePrice')?.textContent || 0);\n        const total = amount + processingFee;\n\n        const processingFeeElement = document.querySelector('.processing-fee');\n        const totalElement = document.querySelector('.total-amount');\n\n        if (processingFeeElement) {\n            processingFeeElement.textContent = `$${processingFee.toFixed(2)}`;\n        }\n\n        if (totalElement) {\n            totalElement.textContent = `$${total.toFixed(2)}`;\n        }\n    }\n\n    getProcessingFee(method) {\n        const paymentMethod = this.paymentMethods.find(pm => pm.id === method);\n        return paymentMethod ? paymentMethod.processingFee : 0.99;\n    }\n\n    // UI State Management\n    showPaymentProcessing() {\n        const submitButton = document.querySelector('#paymentForm button[type=\"submit\"], .payment-submit');\n        if (submitButton) {\n            submitButton.disabled = true;\n            submitButton.innerHTML = `\n                <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\n                Processing...\n            `;\n        }\n\n        // Show processing overlay\n        this.showProcessingOverlay();\n    }\n\n    hidePaymentProcessing() {\n        const submitButton = document.querySelector('#paymentForm button[type=\"submit\"], .payment-submit');\n        if (submitButton) {\n            submitButton.disabled = false;\n            submitButton.innerHTML = `\n                <i class=\"fas fa-credit-card me-2\"></i>Complete Payment\n            `;\n        }\n\n        this.hideProcessingOverlay();\n    }\n\n    showProcessingOverlay() {\n        const overlay = document.createElement('div');\n        overlay.id = 'paymentProcessingOverlay';\n        overlay.className = 'payment-processing-overlay';\n        overlay.innerHTML = `\n            <div class=\"processing-content\">\n                <div class=\"spinner-border text-primary mb-3\" role=\"status\">\n                    <span class=\"visually-hidden\">Processing...</span>\n                </div>\n                <h5>Processing Payment</h5>\n                <p class=\"text-muted\">Please do not refresh or close this page</p>\n            </div>\n        `;\n        document.body.appendChild(overlay);\n    }\n\n    hideProcessingOverlay() {\n        const overlay = document.getElementById('paymentProcessingOverlay');\n        if (overlay) {\n            overlay.remove();\n        }\n    }\n\n    // Payment Result Handling\n    handlePaymentSuccess(result) {\n        this.currentTransaction = result;\n        \n        // Store transaction for receipt\n        this.storeTransaction(result);\n        \n        // Show success message\n        this.showPaymentSuccess(result);\n        \n        // Trigger success callback if available\n        if (window.onPaymentSuccess) {\n            window.onPaymentSuccess(result);\n        }\n        \n        // Redirect or update UI\n        setTimeout(() => {\n            this.redirectAfterPayment(result);\n        }, 3000);\n    }\n\n    handlePaymentError(error) {\n        this.showPaymentError(error);\n        \n        // Trigger error callback if available\n        if (window.onPaymentError) {\n            window.onPaymentError(error);\n        }\n    }\n\n    showPaymentSuccess(result) {\n        window.commonUtils?.showToast(`Payment successful! Transaction ID: ${result.transactionId}`, 'success', 8000);\n        \n        // Update modal content if in modal\n        const modal = document.querySelector('.modal.show');\n        if (modal) {\n            this.showSuccessInModal(modal, result);\n        }\n    }\n\n    showSuccessInModal(modal, result) {\n        const modalBody = modal.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.innerHTML = `\n                <div class=\"text-center\">\n                    <i class=\"fas fa-check-circle fa-5x text-success mb-4\"></i>\n                    <h4 class=\"text-success\">Payment Successful!</h4>\n                    <p class=\"text-muted mb-4\">Your purchase has been completed successfully.</p>\n                    <div class=\"card bg-light\">\n                        <div class=\"card-body\">\n                            <div class=\"row text-start\">\n                                <div class=\"col-6\"><strong>Transaction ID:</strong></div>\n                                <div class=\"col-6\">${result.transactionId}</div>\n                                <div class=\"col-6\"><strong>Amount:</strong></div>\n                                <div class=\"col-6\">$${result.amount.toFixed(2)}</div>\n                                <div class=\"col-6\"><strong>Date:</strong></div>\n                                <div class=\"col-6\">${new Date(result.timestamp).toLocaleDateString()}</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }\n\n        const modalFooter = modal.querySelector('.modal-footer');\n        if (modalFooter) {\n            modalFooter.innerHTML = `\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"window.location.reload()\">\n                    Continue\n                </button>\n            `;\n        }\n    }\n\n    showPaymentError(error) {\n        window.commonUtils?.showToast(error, 'danger', 8000);\n    }\n\n    // Transaction Management\n    storeTransaction(transaction) {\n        const transactions = this.getStoredTransactions();\n        transactions.push(transaction);\n        localStorage.setItem('videohub_transactions', JSON.stringify(transactions));\n    }\n\n    getStoredTransactions() {\n        const stored = localStorage.getItem('videohub_transactions');\n        return stored ? JSON.parse(stored) : [];\n    }\n\n    getTransaction(transactionId) {\n        const transactions = this.getStoredTransactions();\n        return transactions.find(t => t.transactionId === transactionId);\n    }\n\n    redirectAfterPayment(result) {\n        // Default redirect logic\n        const currentPage = window.location.pathname;\n        \n        if (currentPage.includes('browse.html')) {\n            // Refresh browse page to update purchased status\n            window.location.reload();\n        } else if (currentPage.includes('purchases.html')) {\n            // Refresh purchases page\n            window.location.reload();\n        } else {\n            // Go to purchases page\n            window.location.href = 'purchases.html';\n        }\n    }\n\n    // Field Validation\n    validateField(field) {\n        const fieldType = field.id || field.name;\n        let isValid = true;\n        let errorMessage = '';\n\n        switch (fieldType) {\n            case 'cardNumber':\n                isValid = this.validateCardNumber(field.value);\n                errorMessage = 'Please enter a valid card number';\n                break;\n            case 'expiryDate':\n                isValid = this.validateExpiryDate(field.value);\n                errorMessage = 'Please enter a valid expiry date (MM/YY)';\n                break;\n            case 'cvv':\n                isValid = this.validateCVV(field.value);\n                errorMessage = 'Please enter a valid CVV';\n                break;\n            case 'cardHolderName':\n                isValid = field.value.trim().length >= 2;\n                errorMessage = 'Please enter the cardholder name';\n                break;\n            case 'paypalEmail':\n                isValid = this.validateEmail(field.value);\n                errorMessage = 'Please enter a valid email address';\n                break;\n        }\n\n        this.updateFieldValidation(field, isValid, errorMessage);\n        return isValid;\n    }\n\n    updateFieldValidation(field, isValid, errorMessage) {\n        field.classList.remove('is-valid', 'is-invalid');\n        \n        // Remove existing feedback\n        const existingFeedback = field.parentNode.querySelector('.invalid-feedback');\n        if (existingFeedback) {\n            existingFeedback.remove();\n        }\n\n        if (field.value.trim() === '') {\n            // Don't show validation for empty fields unless they've been focused\n            return;\n        }\n\n        if (isValid) {\n            field.classList.add('is-valid');\n        } else {\n            field.classList.add('is-invalid');\n            \n            // Add error feedback\n            const feedback = document.createElement('div');\n            feedback.className = 'invalid-feedback';\n            feedback.textContent = errorMessage;\n            field.parentNode.appendChild(feedback);\n        }\n    }\n\n    // Utility Methods\n    generateTransactionId() {\n        const timestamp = Date.now().toString();\n        const random = Math.random().toString(36).substr(2, 5).toUpperCase();\n        return `TXN_${timestamp}_${random}`;\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Public API Methods\n    initializePayment(options = {}) {\n        this.currentTransaction = null;\n        \n        // Set up payment form with options\n        if (options.amount) {\n            const amountElement = document.getElementById('amount');\n            if (amountElement) {\n                amountElement.value = options.amount;\n            }\n        }\n\n        if (options.currency) {\n            this.currency = options.currency;\n        }\n\n        // Initialize default payment method\n        const defaultMethod = options.defaultMethod || 'card';\n        const methodRadio = document.querySelector(`input[name=\"paymentMethod\"][value=\"${defaultMethod}\"]`);\n        if (methodRadio) {\n            methodRadio.checked = true;\n            this.handlePaymentMethodChange(defaultMethod);\n        }\n    }\n\n    getPaymentMethods() {\n        return this.paymentMethods.filter(method => method.enabled);\n    }\n\n    setPaymentCallback(onSuccess, onError) {\n        window.onPaymentSuccess = onSuccess;\n        window.onPaymentError = onError;\n    }\n}\n\n// CSS for payment processing overlay\nconst paymentStyles = `\n    .payment-processing-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: 9999;\n    }\n\n    .processing-content {\n        background: white;\n        padding: 2rem;\n        border-radius: 0.5rem;\n        text-align: center;\n        max-width: 300px;\n    }\n\n    .card-type-icon {\n        position: absolute;\n        right: 10px;\n        top: 50%;\n        transform: translateY(-50%);\n        font-size: 1.2rem;\n        color: #6c757d;\n    }\n\n    .payment-method-form {\n        display: none;\n        margin-top: 1rem;\n    }\n\n    .payment-method-form.active {\n        display: block;\n    }\n\n    .payment-input {\n        position: relative;\n    }\n`;\n\n// Inject styles\nconst styleSheet = document.createElement('style');\nstyleSheet.textContent = paymentStyles;\ndocument.head.appendChild(styleSheet);\n\n// Initialize payment manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.paymentManager = new PaymentManager();\n});\n\n// Export for other modules\nwindow.PaymentManager = PaymentManager;\n","size_bytes":23524},"assets/js/viewer.js":{"content":"/**\n * VideoHub Viewer Module\n * Handles viewer functionality including browsing, purchasing, and watching videos\n */\n\nclass ViewerManager {\n    constructor() {\n        this.videos = [];\n        this.purchases = [];\n        this.favorites = [];\n        this.currentVideo = null;\n        this.player = null;\n        this.filteredVideos = [];\n        this.currentViewerId = 2; // Demo viewer ID (Sarah Davis)\n        this.favorites = [1, 2]; // Demo favorites - videos 1 and 2\n        this.init();\n    }\n\n    async init() {\n        await this.loadDataFromJSON();\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n        this.initializePlayer();\n    }\n\n    async loadDataFromJSON() {\n        try {\n            // Wait for data service to be available and load data\n            let retries = 0;\n            const maxRetries = 50; // 5 seconds\n            \n            while (retries < maxRetries && (!window.dataService || !window.dataService.cache.videos)) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n                retries++;\n            }\n            \n            if (window.dataService && window.dataService.cache.videos) {\n                // Use data service cache\n                this.videos = window.dataService.cache.videos || [];\n                this.purchases = window.dataService.cache.purchases || [];\n            } else {\n                // Fallback: Load directly\n                const [videosResponse, purchasesResponse] = await Promise.all([\n                    fetch('/data/videos.json'),\n                    fetch('/data/purchases.json')\n                ]);\n                \n                const videosData = await videosResponse.json();\n                const purchasesData = await purchasesResponse.json();\n                \n                this.videos = videosData.videos || [];\n                this.purchases = purchasesData.purchases || [];\n            }\n            \n            // Filter purchases for current viewer\n            this.purchases = this.purchases.filter(p => p.viewerId === this.currentViewerId);\n            \n            // Enrich purchases with video data\n            this.purchases = this.purchases.map(purchase => {\n                const video = this.videos.find(v => v.id === purchase.videoId);\n                return {\n                    ...purchase,\n                    video: video ? {\n                        ...video,\n                        creator: video.creatorName || 'Unknown Creator',\n                        thumbnail: video.thumbnail || 'https://via.placeholder.com/400x225/666/fff?text=Video',\n                        rating: 4.5 // Default rating\n                    } : null\n                };\n            }).filter(p => p.video); // Remove purchases without video data\n            \n            console.log('Viewer data loaded:', { videos: this.videos.length, purchases: this.purchases.length });\n        } catch (error) {\n            console.error('Error loading viewer data:', error);\n            this.videos = [];\n            this.purchases = [];\n        }\n    }\n\n    bindEvents() {\n        // Filter and search events\n        const categoryFilter = document.getElementById('categoryFilter');\n        const statusFilter = document.getElementById('statusFilter');\n        const searchInput = document.getElementById('searchInput');\n        const applyFilters = document.getElementById('applyFilters');\n        \n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', () => this.applyFilters());\n        }\n        if (statusFilter) {\n            statusFilter.addEventListener('change', () => this.applyFilters());\n        }\n        if (searchInput) {\n            searchInput.addEventListener('input', () => this.applyFilters());\n        }\n        if (applyFilters) {\n            applyFilters.addEventListener('click', () => this.applyFilters());\n        }\n\n        // View mode toggle\n        const gridView = document.getElementById('gridView');\n        const listView = document.getElementById('listView');\n        \n        if (gridView) {\n            gridView.addEventListener('click', () => this.switchViewMode('grid'));\n        }\n        if (listView) {\n            listView.addEventListener('click', () => this.switchViewMode('list'));\n        }\n\n        // Purchase modal events\n        const purchaseFromPreviewBtn = document.getElementById('purchaseFromPreview');\n        const confirmPurchaseBtn = document.getElementById('confirmPurchase');\n        if (purchaseFromPreviewBtn) {\n            purchaseFromPreviewBtn.addEventListener('click', this.handlePurchaseFromPreview.bind(this));\n        }\n        if (confirmPurchaseBtn) {\n            confirmPurchaseBtn.addEventListener('click', this.handleConfirmPurchase.bind(this));\n        }\n\n        // Profile form events\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', this.handleProfileUpdate.bind(this));\n        }\n\n        const passwordForm = document.getElementById('passwordForm');\n        if (passwordForm) {\n            passwordForm.addEventListener('submit', this.handlePasswordChange.bind(this));\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        switch (currentPage) {\n            case 'dashboard.html':\n                this.loadDashboardPage();\n                break;\n            case 'purchases.html':\n                this.loadPurchasesPage();\n                break;\n            case 'profile.html':\n                this.loadProfilePage();\n                break;\n        }\n    }\n\n    loadDashboardPage() {\n        this.renderPurchaseStats();\n        this.renderAllVideos();\n        this.bindAllVideosEvents();\n    }\n\n    loadPurchasesPage() {\n        this.renderPurchasedVideos();\n    }\n\n    loadProfilePage() {\n        this.loadProfileData();\n    }\n\n    renderAllVideos() {\n        const container = document.getElementById('allVideos');\n        if (!container) return;\n\n        this.filteredVideos = this.videos;\n        this.displayVideos();\n    }\n\n    displayVideos() {\n        const container = document.getElementById('allVideos');\n        if (!container) return;\n\n        container.innerHTML = '';\n\n        this.filteredVideos.forEach(video => {\n            const col = document.createElement('div');\n            col.className = 'col-lg-3 col-md-4 col-sm-6 mb-4';\n            col.innerHTML = this.createVideoCard(video);\n            container.appendChild(col);\n        });\n    }\n\n    bindAllVideosEvents() {\n        // Search functionality\n        const searchInput = document.getElementById('videoSearch');\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                this.filterVideos();\n            });\n        }\n\n        // Category filter\n        const categoryFilter = document.getElementById('categoryFilter');\n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', () => {\n                this.filterVideos();\n            });\n        }\n\n        // Sort functionality\n        const sortBy = document.getElementById('sortBy');\n        if (sortBy) {\n            sortBy.addEventListener('change', () => {\n                this.sortVideos();\n            });\n        }\n\n        // View mode toggle\n        const gridView = document.getElementById('gridView');\n        const listView = document.getElementById('listView');\n        \n        if (gridView) {\n            gridView.addEventListener('change', () => {\n                if (gridView.checked) {\n                    this.switchViewMode('grid');\n                }\n            });\n        }\n        \n        if (listView) {\n            listView.addEventListener('change', () => {\n                if (listView.checked) {\n                    this.switchViewMode('list');\n                }\n            });\n        }\n    }\n\n    filterVideos() {\n        const searchTerm = document.getElementById('videoSearch')?.value.toLowerCase() || '';\n        const selectedCategory = document.getElementById('categoryFilter')?.value || '';\n\n        this.filteredVideos = this.videos.filter(video => {\n            const matchesSearch = video.title.toLowerCase().includes(searchTerm) ||\n                                video.description.toLowerCase().includes(searchTerm) ||\n                                video.creatorName.toLowerCase().includes(searchTerm);\n            \n            const matchesCategory = !selectedCategory || video.category === selectedCategory;\n\n            return matchesSearch && matchesCategory;\n        });\n\n        this.sortVideos();\n    }\n\n    sortVideos() {\n        const sortBy = document.getElementById('sortBy')?.value || 'newest';\n\n        switch (sortBy) {\n            case 'newest':\n                this.filteredVideos.sort((a, b) => new Date(b.uploadDate) - new Date(a.uploadDate));\n                break;\n            case 'oldest':\n                this.filteredVideos.sort((a, b) => new Date(a.uploadDate) - new Date(b.uploadDate));\n                break;\n            case 'price-low':\n                this.filteredVideos.sort((a, b) => a.price - b.price);\n                break;\n            case 'price-high':\n                this.filteredVideos.sort((a, b) => b.price - a.price);\n                break;\n            case 'rating':\n                this.filteredVideos.sort((a, b) => (b.rating || 4.5) - (a.rating || 4.5));\n                break;\n        }\n\n        this.displayVideos();\n    }\n\n    switchViewMode(mode) {\n        const container = document.getElementById('allVideos');\n        if (!container) return;\n\n        if (mode === 'list') {\n            // Create table view\n            container.innerHTML = `\n                <div class=\"table-responsive\">\n                    <table class=\"table table-hover\">\n                        <thead>\n                            <tr>\n                                <th>Video</th>\n                                <th>Creator</th>\n                                <th>Duration</th>\n                                <th>Price</th>\n                                <th>Category</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"videosTableBody\">\n                        </tbody>\n                    </table>\n                </div>\n            `;\n            \n            const tbody = document.getElementById('videosTableBody');\n            this.filteredVideos.forEach(video => {\n                const isPurchased = this.purchases.some(p => p.videoId === video.id);\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>\n                        <div class=\"d-flex align-items-center\">\n                            <img src=\"${video.thumbnail}\" width=\"60\" height=\"34\" class=\"rounded me-3\" alt=\"${video.title}\">\n                            <div>\n                                <strong>${video.title}</strong><br>\n                                <small class=\"text-muted\">${video.category}</small>\n                            </div>\n                        </div>\n                    </td>\n                    <td>${video.creatorName}</td>\n                    <td>${video.duration}</td>\n                    <td>${isPurchased ? 'Owned' : '$' + video.price.toFixed(2)}</td>\n                    <td><span class=\"badge bg-secondary\">${video.category}</span></td>\n                    <td>\n                        <div class=\"btn-group btn-group-sm\">\n                            <button class=\"btn btn-outline-primary\" onclick=\"viewerManager.${isPurchased ? 'playVideo' : 'showVideoPreview'}(${video.id})\">\n                                <i class=\"fas fa-${isPurchased ? 'play' : 'eye'}\"></i>\n                            </button>\n                            ${!isPurchased ? `\n                                <button class=\"btn btn-outline-success\" onclick=\"viewerManager.showPurchaseModal(${video.id})\">\n                                    <i class=\"fas fa-shopping-cart\"></i>\n                                </button>\n                            ` : ''}\n                        </div>\n                    </td>\n                `;\n                tbody.appendChild(row);\n            });\n        } else {\n            // Grid view is the default\n            this.displayVideos();\n        }\n    }\n\n    createVideoCard(video) {\n        const isPurchased = this.purchases.some(p => p.videoId === video.id);\n        const isFavorite = this.favorites.includes(video.id);\n\n        return `\n            <div class=\"card video-card h-100\">\n                <div class=\"video-thumbnail\">\n                    <img src=\"${video.thumbnail}\" class=\"card-img-top\" alt=\"${video.title}\">\n                    <div class=\"video-duration\">${video.duration}</div>\n                    <div class=\"video-price\">${isPurchased ? 'Owned' : '$' + video.price.toFixed(2)}</div>\n                    <div class=\"video-overlay\" onclick=\"viewerManager.${isPurchased ? 'playVideo' : 'showVideoPreview'}(${video.id})\">\n                        <i class=\"fas fa-${isPurchased ? 'play' : 'eye'} fa-2x\"></i>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <h6 class=\"video-title\">${video.title}</h6>\n                    <p class=\"video-creator\">By ${video.creatorName}</p>\n                    <div class=\"video-stats\">\n                        <small class=\"text-muted\">\n                            <i class=\"fas fa-eye me-1\"></i>${video.views ? video.views.toLocaleString() : '0'} views\n                            <i class=\"fas fa-star me-1 ms-2\"></i>${video.rating || '4.5'}\n                        </small>\n                        <div class=\"video-actions\">\n                            <button class=\"btn btn-sm ${isFavorite ? 'btn-warning' : 'btn-outline-warning'}\" \n                                    onclick=\"viewerManager.toggleFavorite(${video.id})\" title=\"Add to favorites\">\n                                <i class=\"fas fa-heart\"></i>\n                            </button>\n                            ${!isPurchased ? `\n                                <button class=\"btn btn-sm btn-success ms-1\" \n                                        onclick=\"viewerManager.showPurchaseModal(${video.id})\" title=\"Purchase\">\n                                    <i class=\"fas fa-shopping-cart\"></i>\n                                </button>\n                            ` : `\n                                <button class=\"btn btn-sm btn-primary ms-1\" \n                                        onclick=\"viewerManager.playVideo(${video.id})\" title=\"Watch\">\n                                    <i class=\"fas fa-play\"></i>\n                                </button>\n                            `}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderPurchaseStats() {\n        const totalVideosCount = document.getElementById('totalVideosCount');\n        const purchasedVideosCount = document.getElementById('purchasedVideosCount');\n        const totalSpentAmount = document.getElementById('totalSpentAmount');\n        const favoritesCount = document.getElementById('favoritesCount');\n\n        // Total videos available in platform\n        if (totalVideosCount) totalVideosCount.textContent = this.videos.length;\n        \n        // Purchased videos count\n        if (purchasedVideosCount) purchasedVideosCount.textContent = this.purchases.length;\n        \n        // Total spent by current viewer\n        if (totalSpentAmount) {\n            const total = this.purchases.reduce((sum, p) => sum + p.price, 0);\n            totalSpentAmount.textContent = '$' + total.toFixed(2);\n        }\n        \n        // Favorites count\n        if (favoritesCount) {\n            favoritesCount.textContent = this.favorites.length;\n        }\n    }\n\n    renderPurchasedVideos() {\n        const gridContainer = document.getElementById('videosGrid');\n        const listContainer = document.getElementById('videosTableBody');\n\n        if (gridContainer) {\n            gridContainer.innerHTML = '';\n            this.purchases.forEach(purchase => {\n                const col = document.createElement('div');\n                col.className = 'col-lg-4 col-md-6 mb-4';\n                col.innerHTML = this.createPurchasedVideoCard(purchase);\n                gridContainer.appendChild(col);\n            });\n        }\n\n        if (listContainer) {\n            listContainer.innerHTML = '';\n            this.purchases.forEach(purchase => {\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>\n                        <div class=\"d-flex align-items-center\">\n                            <img src=\"${purchase.video.thumbnail}\" width=\"60\" height=\"34\" class=\"rounded me-3\" alt=\"${purchase.video.title}\">\n                            <div>\n                                <strong>${purchase.video.title}</strong><br>\n                                <small class=\"text-muted\">${purchase.video.duration}</small>\n                            </div>\n                        </div>\n                    </td>\n                    <td>${purchase.video.creatorName}</td>\n                    <td>${purchase.video.duration}</td>\n                    <td>${new Date(purchase.purchaseDate).toLocaleDateString()}</td>\n                    <td>$${purchase.price.toFixed(2)}</td>\n                    <td>\n                        <span class=\"badge bg-${purchase.watchProgress > 0 ? 'success' : 'secondary'}\">\n                            ${purchase.watchProgress > 0 ? 'Watched' : 'Unwatched'}\n                        </span>\n                    </td>\n                    <td>\n                        <div class=\"btn-group btn-group-sm\">\n                            <button class=\"btn btn-outline-primary\" onclick=\"viewerManager.playVideo(${purchase.videoId})\">\n                                <i class=\"fas fa-play\"></i>\n                            </button>\n                            <button class=\"btn btn-outline-secondary\" onclick=\"viewerManager.showVideoOptions(${purchase.videoId})\">\n                                <i class=\"fas fa-ellipsis-v\"></i>\n                            </button>\n                        </div>\n                    </td>\n                `;\n                listContainer.appendChild(row);\n            });\n        }\n    }\n\n    createPurchasedVideoCard(purchase) {\n        const progress = purchase.watchProgress || 0;\n        const isFavorite = this.favorites.includes(purchase.videoId);\n\n        return `\n            <div class=\"card video-card h-100\">\n                <div class=\"video-thumbnail\">\n                    <img src=\"${purchase.video.thumbnail}\" class=\"card-img-top\" alt=\"${purchase.video.title}\">\n                    <div class=\"video-duration\">${purchase.video.duration}</div>\n                    <div class=\"video-progress\">\n                        <div class=\"progress\" style=\"height: 4px;\">\n                            <div class=\"progress-bar bg-primary\" style=\"width: ${progress}%\"></div>\n                        </div>\n                    </div>\n                    <div class=\"video-overlay\" onclick=\"viewerManager.playVideo(${purchase.videoId})\">\n                        <i class=\"fas fa-play fa-2x\"></i>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <h6 class=\"video-title\">${purchase.video.title}</h6>\n                    <p class=\"video-creator\">By ${purchase.video.creatorName}</p>\n                    <div class=\"video-stats\">\n                        <small class=\"text-muted\">\n                            Purchased: ${new Date(purchase.purchaseDate).toLocaleDateString()}\n                            <br>Progress: ${progress}%\n                        </small>\n                        <div class=\"video-actions mt-2\">\n                            <button class=\"btn btn-sm btn-primary\" onclick=\"viewerManager.playVideo(${purchase.videoId})\">\n                                <i class=\"fas fa-play me-1\"></i>Watch\n                            </button>\n                            <button class=\"btn btn-sm ${isFavorite ? 'btn-warning' : 'btn-outline-warning'} ms-1\" \n                                    onclick=\"viewerManager.toggleFavorite(${purchase.videoId})\">\n                                <i class=\"fas fa-heart\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    applyFilters() {\n        const category = document.getElementById('categoryFilter')?.value || '';\n        const status = document.getElementById('statusFilter')?.value || '';\n        const search = document.getElementById('searchInput')?.value.toLowerCase() || '';\n\n        let filtered = this.purchases;\n\n        if (category) {\n            filtered = filtered.filter(p => p.video.category === category);\n        }\n\n        if (status) {\n            if (status === 'watched') {\n                filtered = filtered.filter(p => p.watchProgress > 80);\n            } else if (status === 'unwatched') {\n                filtered = filtered.filter(p => p.watchProgress < 20);\n            } else if (status === 'favorite') {\n                filtered = filtered.filter(p => this.favorites.includes(p.videoId));\n            }\n        }\n\n        if (search) {\n            filtered = filtered.filter(p => \n                p.video.title.toLowerCase().includes(search) ||\n                p.video.creatorName.toLowerCase().includes(search)\n            );\n        }\n\n        // Update display with filtered results\n        this.renderFilteredPurchases(filtered);\n    }\n\n    renderFilteredPurchases(purchases) {\n        const gridContainer = document.getElementById('videosGrid');\n        if (gridContainer) {\n            gridContainer.innerHTML = '';\n            purchases.forEach(purchase => {\n                const col = document.createElement('div');\n                col.className = 'col-lg-4 col-md-6 mb-4';\n                col.innerHTML = this.createPurchasedVideoCard(purchase);\n                gridContainer.appendChild(col);\n            });\n        }\n    }\n\n    // Utility methods\n    parseDuration(duration) {\n        const parts = duration.split(':');\n        return parseInt(parts[0]) * 60 + parseInt(parts[1]);\n    }\n\n    initializePlayer() {\n        // Player initialization code\n    }\n\n    // Event handlers\n    showVideoPreview(videoId) {\n        console.log('Showing preview for video:', videoId);\n    }\n\n    showPurchaseModal(videoId) {\n        console.log('Showing purchase modal for video:', videoId);\n    }\n\n    playVideo(videoId) {\n        console.log('Playing video:', videoId);\n    }\n\n    toggleFavorite(videoId) {\n        const index = this.favorites.indexOf(videoId);\n        if (index > -1) {\n            this.favorites.splice(index, 1);\n        } else {\n            this.favorites.push(videoId);\n        }\n        // Refresh display\n        this.loadPageSpecificHandlers();\n    }\n\n    showVideoOptions(videoId) {\n        console.log('Showing options for video:', videoId);\n    }\n\n    handlePurchaseFromPreview() {\n        console.log('Handling purchase from preview');\n    }\n\n    handleConfirmPurchase() {\n        console.log('Handling confirm purchase');\n    }\n\n    handleProfileUpdate(event) {\n        event.preventDefault();\n        console.log('Handling profile update');\n    }\n\n    handlePasswordChange(event) {\n        event.preventDefault();\n        console.log('Handling password change');\n    }\n\n    loadProfileData() {\n        console.log('Loading profile data');\n    }\n}","size_bytes":23740},"assets/js/api.js":{"content":"/**\n * VideoHub API Service\n * Handles all backend API communications\n */\n\nclass APIService {\n    constructor() {\n        this.baseURL = '/api';\n        this.timeout = 10000;\n        this.useDataService = true; // Switch to false when backend is ready\n        this.init();\n    }\n\n    init() {\n        this.defaultHeaders = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        };\n        \n        // Wait for dataService to be initialized if using it\n        if (this.useDataService && !window.dataService) {\n            setTimeout(() => this.init(), 100);\n        }\n    }\n\n    // Generic HTTP methods\n    async request(method, endpoint, data = null, options = {}) {\n        const url = `${this.baseURL}${endpoint}`;\n        const config = {\n            method,\n            headers: {\n                ...this.defaultHeaders,\n                ...options.headers\n            },\n            ...options\n        };\n\n        // Add authentication token if available\n        const token = this.getAuthToken();\n        if (token) {\n            config.headers['Authorization'] = `Bearer ${token}`;\n        }\n\n        // Add body for POST, PUT, PATCH requests\n        if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n            config.body = JSON.stringify(data);\n        }\n\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n            \n            config.signal = controller.signal;\n            \n            const response = await fetch(url, config);\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const result = await response.json();\n            return { success: true, data: result };\n        } catch (error) {\n            console.error(`API Error [${method} ${endpoint}]:`, error);\n            return { \n                success: false, \n                error: error.message,\n                isNetworkError: error.name === 'TypeError' || error.name === 'AbortError'\n            };\n        }\n    }\n\n    async get(endpoint, options = {}) {\n        return this.request('GET', endpoint, null, options);\n    }\n\n    async post(endpoint, data, options = {}) {\n        return this.request('POST', endpoint, data, options);\n    }\n\n    async put(endpoint, data, options = {}) {\n        return this.request('PUT', endpoint, data, options);\n    }\n\n    async delete(endpoint, options = {}) {\n        return this.request('DELETE', endpoint, null, options);\n    }\n\n    // Authentication\n    getAuthToken() {\n        return localStorage.getItem('authToken');\n    }\n\n    setAuthToken(token) {\n        localStorage.setItem('authToken', token);\n    }\n\n    clearAuthToken() {\n        localStorage.removeItem('authToken');\n    }\n\n    // Auth API endpoints\n    async login(credentials) {\n        return this.post('/auth/login', credentials);\n    }\n\n    async register(userData) {\n        return this.post('/auth/register', userData);\n    }\n\n    async logout() {\n        const result = await this.post('/auth/logout');\n        this.clearAuthToken();\n        return result;\n    }\n\n    async verifyToken() {\n        return this.get('/auth/verify');\n    }\n\n    // User API endpoints\n    async getUserProfile() {\n        return this.get('/users/profile');\n    }\n\n    async updateUserProfile(profileData) {\n        return this.put('/users/profile', profileData);\n    }\n\n    async getUsers(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getUsers(params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/users${queryString ? '?' + queryString : ''}`);\n    }\n\n    async updateUserRole(userId, role) {\n        return this.put(`/users/${userId}/role`, { role });\n    }\n\n    async deleteUser(userId) {\n        return this.delete(`/users/${userId}`);\n    }\n\n    // Video API endpoints\n    async getVideos(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getVideos(params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/videos${queryString ? '?' + queryString : ''}`);\n    }\n\n    async getVideo(videoId) {\n        return this.get(`/videos/${videoId}`);\n    }\n\n    async uploadVideo(videoData) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.uploadVideo(videoData);\n        }\n        // For file uploads, we need to use FormData\n        const formData = new FormData();\n        Object.keys(videoData).forEach(key => {\n            formData.append(key, videoData[key]);\n        });\n\n        return this.request('POST', '/videos', formData, {\n            headers: {} // Remove Content-Type to let browser set it for FormData\n        });\n    }\n\n    async updateVideo(videoId, videoData) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.updateVideo(videoId, videoData);\n        }\n        return this.put(`/videos/${videoId}`, videoData);\n    }\n\n    async deleteVideo(videoId) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.deleteVideo(videoId);\n        }\n        return this.delete(`/videos/${videoId}`);\n    }\n\n    async duplicateVideo(videoId) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.duplicateVideo(videoId);\n        }\n        return this.post(`/videos/${videoId}/duplicate`);\n    }\n\n    async approveVideo(videoId) {\n        return this.put(`/videos/${videoId}/approve`);\n    }\n\n    async rejectVideo(videoId, reason) {\n        return this.put(`/videos/${videoId}/reject`, { reason });\n    }\n\n    // Creator API endpoints\n    async getCreatorStats() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getCreatorStats();\n        }\n        return this.get('/creator/stats');\n    }\n\n    async getCreatorVideos(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getCreatorVideos(null, params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/creator/videos${queryString ? '?' + queryString : ''}`);\n    }\n\n    async getCreatorEarnings(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getCreatorEarnings(null, params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/creator/earnings${queryString ? '?' + queryString : ''}`);\n    }\n\n    // Viewer API endpoints\n    async purchaseVideo(videoId, paymentData) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.purchaseVideo(videoId, paymentData);\n        }\n        return this.post(`/videos/${videoId}/purchase`, paymentData);\n    }\n\n    async getViewerPurchases() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getViewerPurchases();\n        }\n        return this.get('/viewer/purchases');\n    }\n\n    async getViewerStats() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getViewerStats();\n        }\n        return this.get('/viewer/stats');\n    }\n\n    // Admin API endpoints\n    async getAdminStats() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getAdminStats();\n        }\n        return this.get('/admin/stats');\n    }\n\n    async getUsers(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getUsers(params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/admin/users${queryString ? '?' + queryString : ''}`);\n    }\n\n    async getVideos(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getVideos(params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/videos${queryString ? '?' + queryString : ''}`);\n    }\n\n    async getSystemHealth() {\n        return this.get('/admin/health');\n    }\n\n    // Search API endpoints\n    async searchVideos(query, filters = {}) {\n        const params = { q: query, ...filters };\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/search/videos?${queryString}`);\n    }\n\n    // Utility methods\n    handleApiError(error, context = '') {\n        let message = 'Something went wrong. Please try again.';\n        \n        if (error.isNetworkError) {\n            message = 'Network error. Please check your connection.';\n        } else if (error.error) {\n            message = error.error;\n        }\n\n        if (context) {\n            message = `${context}: ${message}`;\n        }\n\n        // Show toast notification\n        if (window.commonUtils) {\n            window.commonUtils.showToast(message, 'danger');\n        }\n\n        return message;\n    }\n\n    showSuccessMessage(message) {\n        if (window.commonUtils) {\n            window.commonUtils.showToast(message, 'success');\n        }\n    }\n}\n\n// Create global instance\nwindow.apiService = new APIService();","size_bytes":9486},"assets/js/dataService.js":{"content":"/**\n * VideoHub Data Service\n * Handles loading and managing data from JSON files\n * Provides API-like interface for easy backend migration\n */\n\nclass DataService {\n    constructor() {\n        this.cache = {\n            users: null,\n            videos: null,\n            earnings: null,\n            purchases: null\n        };\n        this.init();\n    }\n\n    async init() {\n        // Pre-load all data\n        await this.loadAllData();\n    }\n\n    async loadAllData() {\n        try {\n            const [users, videos, earnings, purchases] = await Promise.all([\n                this.loadJSON('/data/users.json'),\n                this.loadJSON('/data/videos.json'),\n                this.loadJSON('/data/earnings.json'),\n                this.loadJSON('/data/purchases.json')\n            ]);\n\n            this.cache.users = users.users || [];\n            this.cache.videos = videos.videos || [];\n            this.cache.earnings = earnings.earnings || [];\n            this.cache.purchases = purchases.purchases || [];\n\n            console.log('Data loaded successfully:', {\n                users: this.cache.users.length,\n                videos: this.cache.videos.length,\n                earnings: this.cache.earnings.length,\n                purchases: this.cache.purchases.length\n            });\n        } catch (error) {\n            console.error('Error loading data:', error);\n        }\n    }\n\n    async loadJSON(url) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(`Error loading ${url}:`, error);\n            return {};\n        }\n    }\n\n    // User Management\n    async getUsers(filters = {}) {\n        const users = [...this.cache.users];\n        let filtered = users;\n\n        if (filters.role) {\n            filtered = filtered.filter(user => user.role === filters.role);\n        }\n        if (filters.status) {\n            filtered = filtered.filter(user => user.status === filters.status);\n        }\n        if (filters.search) {\n            const search = filters.search.toLowerCase();\n            filtered = filtered.filter(user => \n                user.name.toLowerCase().includes(search) ||\n                user.email.toLowerCase().includes(search)\n            );\n        }\n\n        // Pagination\n        const page = filters.page || 1;\n        const limit = filters.limit || 10;\n        const offset = (page - 1) * limit;\n        const paginatedUsers = filtered.slice(offset, offset + limit);\n\n        return {\n            success: true,\n            data: {\n                users: paginatedUsers,\n                total: filtered.length,\n                page,\n                limit,\n                totalPages: Math.ceil(filtered.length / limit)\n            }\n        };\n    }\n\n    async getUserById(id) {\n        const user = this.cache.users.find(u => u.id === parseInt(id));\n        return {\n            success: !!user,\n            data: user || null\n        };\n    }\n\n    async getCurrentUser() {\n        // Simulate getting current user from session\n        const currentUserId = localStorage.getItem('currentUserId') || '1';\n        return this.getUserById(currentUserId);\n    }\n\n    async updateUser(id, userData) {\n        const userIndex = this.cache.users.findIndex(u => u.id === parseInt(id));\n        if (userIndex !== -1) {\n            this.cache.users[userIndex] = { ...this.cache.users[userIndex], ...userData };\n            return {\n                success: true,\n                data: this.cache.users[userIndex]\n            };\n        }\n        return {\n            success: false,\n            error: 'User not found'\n        };\n    }\n\n    // Video Management\n    async getVideos(filters = {}) {\n        let videos = [...this.cache.videos];\n\n        if (filters.creatorId) {\n            videos = videos.filter(video => video.creatorId === parseInt(filters.creatorId));\n        }\n        if (filters.category) {\n            videos = videos.filter(video => video.category === filters.category);\n        }\n        if (filters.status) {\n            videos = videos.filter(video => video.status === filters.status);\n        }\n        if (filters.search) {\n            const search = filters.search.toLowerCase();\n            videos = videos.filter(video => \n                video.title.toLowerCase().includes(search) ||\n                video.description.toLowerCase().includes(search) ||\n                video.tags.some(tag => tag.toLowerCase().includes(search))\n            );\n        }\n\n        // Sort options\n        if (filters.sort) {\n            switch (filters.sort) {\n                case 'newest':\n                    videos.sort((a, b) => new Date(b.uploadDate) - new Date(a.uploadDate));\n                    break;\n                case 'oldest':\n                    videos.sort((a, b) => new Date(a.uploadDate) - new Date(b.uploadDate));\n                    break;\n                case 'views':\n                    videos.sort((a, b) => b.views - a.views);\n                    break;\n                case 'earnings':\n                    videos.sort((a, b) => b.earnings - a.earnings);\n                    break;\n                case 'price':\n                    videos.sort((a, b) => b.price - a.price);\n                    break;\n            }\n        }\n\n        // Pagination\n        const page = filters.page || 1;\n        const limit = filters.limit || 12;\n        const offset = (page - 1) * limit;\n        const paginatedVideos = videos.slice(offset, offset + limit);\n\n        return {\n            success: true,\n            data: {\n                videos: paginatedVideos,\n                total: videos.length,\n                page,\n                limit,\n                totalPages: Math.ceil(videos.length / limit)\n            }\n        };\n    }\n\n    async getVideoById(id) {\n        const video = this.cache.videos.find(v => v.id === parseInt(id));\n        return {\n            success: !!video,\n            data: video || null\n        };\n    }\n\n    async getCreatorVideos(creatorId = null, filters = {}) {\n        // Get current creator if not specified\n        if (!creatorId) {\n            const currentUser = await this.getCurrentUser();\n            if (!currentUser.success || currentUser.data.role !== 'creator') {\n                return { success: false, error: 'Not a creator' };\n            }\n            creatorId = currentUser.data.id;\n        }\n\n        return this.getVideos({ ...filters, creatorId });\n    }\n\n    async getCreatorStats(creatorId = null) {\n        if (!creatorId) {\n            const currentUser = await this.getCurrentUser();\n            if (!currentUser.success) return { success: false, error: 'User not found' };\n            creatorId = currentUser.data.id;\n        }\n\n        const user = await this.getUserById(creatorId);\n        if (!user.success || user.data.role !== 'creator') {\n            return { success: false, error: 'Not a creator' };\n        }\n\n        return {\n            success: true,\n            data: user.data.stats\n        };\n    }\n\n    // Earnings Management\n    async getCreatorEarnings(creatorId = null, filters = {}) {\n        if (!creatorId) {\n            const currentUser = await this.getCurrentUser();\n            if (!currentUser.success) return { success: false, error: 'User not found' };\n            creatorId = currentUser.data.id;\n        }\n\n        let earnings = this.cache.earnings.filter(e => e.creatorId === parseInt(creatorId));\n\n        if (filters.status) {\n            earnings = earnings.filter(e => e.status === filters.status);\n        }\n        if (filters.dateFrom) {\n            earnings = earnings.filter(e => new Date(e.purchaseDate) >= new Date(filters.dateFrom));\n        }\n        if (filters.dateTo) {\n            earnings = earnings.filter(e => new Date(e.purchaseDate) <= new Date(filters.dateTo));\n        }\n\n        // Sort by most recent\n        earnings.sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate));\n\n        // Pagination\n        const page = filters.page || 1;\n        const limit = filters.limit || 10;\n        const offset = (page - 1) * limit;\n        const paginatedEarnings = earnings.slice(offset, offset + limit);\n\n        return {\n            success: true,\n            data: {\n                earnings: paginatedEarnings,\n                total: earnings.length,\n                page,\n                limit,\n                totalPages: Math.ceil(earnings.length / limit)\n            }\n        };\n    }\n\n    // Viewer Purchases\n    async getViewerPurchases(viewerId = null, filters = {}) {\n        if (!viewerId) {\n            const currentUser = await this.getCurrentUser();\n            if (!currentUser.success) return { success: false, error: 'User not found' };\n            viewerId = currentUser.data.id;\n        }\n\n        let purchases = this.cache.purchases.filter(p => p.viewerId === parseInt(viewerId));\n\n        if (filters.status) {\n            purchases = purchases.filter(p => p.status === filters.status);\n        }\n\n        // Sort by most recent\n        purchases.sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate));\n\n        // Pagination\n        const page = filters.page || 1;\n        const limit = filters.limit || 10;\n        const offset = (page - 1) * limit;\n        const paginatedPurchases = purchases.slice(offset, offset + limit);\n\n        return {\n            success: true,\n            data: {\n                purchases: paginatedPurchases,\n                total: purchases.length,\n                page,\n                limit,\n                totalPages: Math.ceil(purchases.length / limit)\n            }\n        };\n    }\n\n    async getViewerStats(viewerId = null) {\n        if (!viewerId) {\n            const currentUser = await this.getCurrentUser();\n            if (!currentUser.success) return { success: false, error: 'User not found' };\n            viewerId = currentUser.data.id;\n        }\n\n        const user = await this.getUserById(viewerId);\n        if (!user.success) {\n            return { success: false, error: 'User not found' };\n        }\n\n        return {\n            success: true,\n            data: user.data.stats || {}\n        };\n    }\n\n    // Admin Analytics\n    async getAdminStats() {\n        const totalUsers = this.cache.users.length;\n        const totalVideos = this.cache.videos.length;\n        const totalEarnings = this.cache.earnings.reduce((sum, e) => sum + e.price, 0);\n        const totalCreators = this.cache.users.filter(u => u.role === 'creator').length;\n        const totalViewers = this.cache.users.filter(u => u.role === 'viewer').length;\n        \n        const publishedVideos = this.cache.videos.filter(v => v.status === 'published').length;\n        const pendingVideos = this.cache.videos.filter(v => v.status === 'pending').length;\n\n        return {\n            success: true,\n            data: {\n                totalUsers,\n                totalVideos,\n                totalEarnings,\n                totalCreators,\n                totalViewers,\n                publishedVideos,\n                pendingVideos,\n                activeUsers: this.cache.users.filter(u => u.status === 'active').length\n            }\n        };\n    }\n\n    // API Simulation Methods (for form submissions, etc.)\n    async uploadVideo(videoData) {\n        // Simulate API call\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve({\n                    success: true,\n                    data: { id: Date.now(), ...videoData }\n                });\n            }, 1000);\n        });\n    }\n\n    async updateVideo(id, videoData) {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve({\n                    success: true,\n                    data: { id, ...videoData }\n                });\n            }, 500);\n        });\n    }\n\n    async deleteVideo(id) {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve({ success: true });\n            }, 500);\n        });\n    }\n\n    async duplicateVideo(id) {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve({\n                    success: true,\n                    data: { id: Date.now(), title: 'Copy of Video' }\n                });\n            }, 500);\n        });\n    }\n\n    async purchaseVideo(videoId, paymentData) {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve({\n                    success: true,\n                    data: { transactionId: 'txn_' + Date.now() }\n                });\n            }, 1500);\n        });\n    }\n}\n\n// Initialize global data service\nwindow.dataService = new DataService();","size_bytes":12843},"assets/js/profile.js":{"content":"/**\n * VideoHub Profile Settings Module\n * Handles profile updates and password changes\n */\n\nclass ProfileManager {\n    constructor() {\n        this.currentUser = {\n            id: 1,\n            firstName: 'Admin',\n            lastName: 'User',\n            email: 'admin@videohub.com',\n            role: 'Administrator'\n        };\n        this.init();\n    }\n\n    async init() {\n        await this.loadUserProfile();\n        this.bindEvents();\n        this.setupPasswordStrengthChecker();\n    }\n\n    async loadUserProfile() {\n        try {\n            const result = await window.apiService.getUserProfile();\n            if (result.success) {\n                this.currentUser = result.data;\n                this.populateProfileForm();\n            } else {\n                // Use demo data\n                this.populateProfileForm();\n            }\n        } catch (error) {\n            console.log('API not available, using demo data');\n            this.populateProfileForm();\n        }\n    }\n\n    populateProfileForm() {\n        document.getElementById('firstName').value = this.currentUser.firstName || '';\n        document.getElementById('lastName').value = this.currentUser.lastName || '';\n        document.getElementById('email').value = this.currentUser.email || '';\n        document.getElementById('role').value = this.currentUser.role || '';\n        \n        // Update last login time\n        const lastLoginElement = document.getElementById('lastLoginTime');\n        if (lastLoginElement) {\n            const now = new Date();\n            lastLoginElement.textContent = `${now.toLocaleDateString()}, ${now.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;\n        }\n    }\n\n    bindEvents() {\n        // Profile form submission\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', (e) => this.handleProfileUpdate(e));\n        }\n\n        // Password form submission\n        const passwordForm = document.getElementById('changePasswordForm');\n        if (passwordForm) {\n            passwordForm.addEventListener('submit', (e) => this.handlePasswordChange(e));\n        }\n\n        // Real-time validation\n        this.setupFormValidation();\n    }\n\n    setupFormValidation() {\n        // First name validation\n        const firstNameInput = document.getElementById('firstName');\n        if (firstNameInput) {\n            firstNameInput.addEventListener('input', (e) => {\n                this.validateName(e.target);\n            });\n        }\n\n        // Last name validation\n        const lastNameInput = document.getElementById('lastName');\n        if (lastNameInput) {\n            lastNameInput.addEventListener('input', (e) => {\n                this.validateName(e.target);\n            });\n        }\n\n        // Password confirmation validation\n        const confirmPasswordInput = document.getElementById('confirmPassword');\n        const newPasswordInput = document.getElementById('newPassword');\n        \n        if (confirmPasswordInput && newPasswordInput) {\n            [confirmPasswordInput, newPasswordInput].forEach(input => {\n                input.addEventListener('input', () => {\n                    this.validatePasswordMatch();\n                });\n            });\n        }\n    }\n\n    validateName(input) {\n        const name = input.value.trim();\n        const isValid = name.length >= 2 && /^[a-zA-Z\\s'-]+$/.test(name);\n        \n        if (isValid) {\n            input.classList.remove('is-invalid');\n            input.classList.add('is-valid');\n        } else {\n            input.classList.remove('is-valid');\n            input.classList.add('is-invalid');\n        }\n\n        return isValid;\n    }\n\n    validatePasswordMatch() {\n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n        const confirmPasswordInput = document.getElementById('confirmPassword');\n\n        if (confirmPassword && newPassword !== confirmPassword) {\n            confirmPasswordInput.classList.add('is-invalid');\n            confirmPasswordInput.classList.remove('is-valid');\n            return false;\n        } else if (confirmPassword) {\n            confirmPasswordInput.classList.remove('is-invalid');\n            confirmPasswordInput.classList.add('is-valid');\n            return true;\n        }\n        return false;\n    }\n\n    setupPasswordStrengthChecker() {\n        const newPasswordInput = document.getElementById('newPassword');\n        if (newPasswordInput) {\n            newPasswordInput.addEventListener('input', (e) => {\n                this.updatePasswordStrength(e.target.value);\n            });\n        }\n    }\n\n    updatePasswordStrength(password) {\n        const strengthBar = document.getElementById('strengthBar');\n        const strengthText = document.getElementById('strengthText');\n        \n        if (!strengthBar || !strengthText) return;\n\n        const strength = this.calculatePasswordStrength(password);\n        \n        // Update progress bar\n        strengthBar.style.width = `${strength.percentage}%`;\n        strengthBar.className = `progress-bar bg-${strength.color}`;\n        \n        // Update text\n        strengthText.textContent = strength.text;\n        strengthText.className = `text-sm text-${strength.color}`;\n    }\n\n    calculatePasswordStrength(password) {\n        if (!password) return { percentage: 0, color: 'secondary', text: 'Enter password' };\n        \n        let score = 0;\n        const checks = [\n            { test: /.{8,}/, points: 25 }, // Length >= 8\n            { test: /[a-z]/, points: 15 }, // Lowercase\n            { test: /[A-Z]/, points: 15 }, // Uppercase\n            { test: /[0-9]/, points: 20 }, // Numbers\n            { test: /[^A-Za-z0-9]/, points: 25 } // Special characters\n        ];\n\n        checks.forEach(check => {\n            if (check.test.test(password)) {\n                score += check.points;\n            }\n        });\n\n        if (score < 40) return { percentage: score, color: 'danger', text: 'Weak' };\n        if (score < 70) return { percentage: score, color: 'warning', text: 'Fair' };\n        if (score < 90) return { percentage: score, color: 'info', text: 'Good' };\n        return { percentage: score, color: 'success', text: 'Strong' };\n    }\n\n    async handleProfileUpdate(e) {\n        e.preventDefault();\n        \n        const form = e.target;\n        const formData = new FormData(form);\n        const profileData = {\n            firstName: formData.get('firstName').trim(),\n            lastName: formData.get('lastName').trim()\n        };\n\n        // Validate form\n        const isValid = this.validateProfileForm(form);\n        if (!isValid) {\n            return;\n        }\n\n        // Show loading state\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> Saving...';\n        submitBtn.disabled = true;\n\n        try {\n            const result = await window.apiService.updateUserProfile(profileData);\n            \n            if (result.success) {\n                // Update local data\n                this.currentUser.firstName = profileData.firstName;\n                this.currentUser.lastName = profileData.lastName;\n                \n                // Add success class to form\n                form.classList.add('was-validated');\n                \n                window.apiService.showSuccessMessage('Profile updated successfully');\n            } else {\n                window.apiService.handleApiError(result, 'Failed to update profile');\n            }\n        } catch (error) {\n            // Demo mode\n            this.currentUser.firstName = profileData.firstName;\n            this.currentUser.lastName = profileData.lastName;\n            window.apiService.showSuccessMessage('Profile updated successfully (demo mode)');\n        } finally {\n            // Reset button\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    }\n\n    validateProfileForm(form) {\n        const firstName = form.querySelector('#firstName');\n        const lastName = form.querySelector('#lastName');\n        \n        let isValid = true;\n        \n        if (!this.validateName(firstName)) {\n            isValid = false;\n        }\n        \n        if (!this.validateName(lastName)) {\n            isValid = false;\n        }\n\n        form.classList.add('was-validated');\n        return isValid;\n    }\n\n    async handlePasswordChange(e) {\n        e.preventDefault();\n        \n        const form = e.target;\n        const formData = new FormData(form);\n        const passwordData = {\n            currentPassword: formData.get('currentPassword'),\n            newPassword: formData.get('newPassword'),\n            confirmPassword: formData.get('confirmPassword')\n        };\n\n        // Validate form\n        const isValid = this.validatePasswordForm(form, passwordData);\n        if (!isValid) {\n            return;\n        }\n\n        // Show loading state\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> Updating...';\n        submitBtn.disabled = true;\n\n        try {\n            const result = await window.apiService.put('/users/change-password', {\n                currentPassword: passwordData.currentPassword,\n                newPassword: passwordData.newPassword\n            });\n            \n            if (result.success) {\n                // Close modal\n                const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));\n                modal.hide();\n                \n                // Reset form\n                form.reset();\n                form.classList.remove('was-validated');\n                \n                // Reset password strength indicator\n                this.updatePasswordStrength('');\n                \n                window.apiService.showSuccessMessage('Password updated successfully');\n            } else {\n                window.apiService.handleApiError(result, 'Failed to update password');\n            }\n        } catch (error) {\n            // Demo mode\n            const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));\n            modal.hide();\n            form.reset();\n            form.classList.remove('was-validated');\n            this.updatePasswordStrength('');\n            window.apiService.showSuccessMessage('Password updated successfully (demo mode)');\n        } finally {\n            // Reset button\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    }\n\n    validatePasswordForm(form, data) {\n        let isValid = true;\n        \n        // Current password validation\n        const currentPasswordInput = form.querySelector('#currentPassword');\n        if (!data.currentPassword || data.currentPassword.length < 6) {\n            currentPasswordInput.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            currentPasswordInput.classList.remove('is-invalid');\n            currentPasswordInput.classList.add('is-valid');\n        }\n        \n        // New password validation\n        const newPasswordInput = form.querySelector('#newPassword');\n        const strength = this.calculatePasswordStrength(data.newPassword);\n        if (strength.percentage < 40) {\n            newPasswordInput.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            newPasswordInput.classList.remove('is-invalid');\n            newPasswordInput.classList.add('is-valid');\n        }\n        \n        // Confirm password validation\n        if (data.newPassword !== data.confirmPassword) {\n            form.querySelector('#confirmPassword').classList.add('is-invalid');\n            isValid = false;\n        }\n\n        form.classList.add('was-validated');\n        return isValid;\n    }\n}\n\n// Global functions\nwindow.resetProfileForm = function() {\n    const form = document.getElementById('profileForm');\n    if (form) {\n        form.reset();\n        form.classList.remove('was-validated');\n        \n        // Remove validation classes\n        form.querySelectorAll('.form-control').forEach(input => {\n            input.classList.remove('is-valid', 'is-invalid');\n        });\n        \n        // Reload original data\n        window.profileManager.populateProfileForm();\n    }\n};\n\nwindow.togglePasswordVisibility = function(inputId, button) {\n    const input = document.getElementById(inputId);\n    const icon = button.querySelector('i');\n    \n    if (input.type === 'password') {\n        input.type = 'text';\n        icon.classList.remove('fa-eye');\n        icon.classList.add('fa-eye-slash');\n    } else {\n        input.type = 'password';\n        icon.classList.remove('fa-eye-slash');\n        icon.classList.add('fa-eye');\n    }\n};\n\n// Initialize profile manager\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.profileManager = new ProfileManager();\n});","size_bytes":13215}}}