{"file_contents":{"index.php":{"content":"<?php\n/**\n * VideoHub Main Router\n * Routes requests to either API endpoints or static files\n */\n\n$request_uri = $_SERVER['REQUEST_URI'];\n$path = parse_url($request_uri, PHP_URL_PATH);\n\n// Handle API requests\nif (preg_match('/^\\/api/', $path)) {\n    // Remove /api from path and forward to API router\n    $_SERVER['REQUEST_URI'] = preg_replace('/^\\/api/', '', $request_uri);\n    require_once 'api/index.php';\n    return;\n}\n\n// Handle static files\n$file_path = __DIR__ . $path;\n\n// Default to index.html for root requests\nif ($path === '/') {\n    $file_path = __DIR__ . '/index.html';\n}\n\n// Serve static files if they exist\nif (file_exists($file_path) && is_file($file_path)) {\n    // Get file extension for proper MIME type\n    $extension = pathinfo($file_path, PATHINFO_EXTENSION);\n    \n    $mime_types = [\n        'html' => 'text/html',\n        'css' => 'text/css',\n        'js' => 'application/javascript',\n        'json' => 'application/json',\n        'png' => 'image/png',\n        'jpg' => 'image/jpeg',\n        'jpeg' => 'image/jpeg',\n        'gif' => 'image/gif',\n        'svg' => 'image/svg+xml'\n    ];\n    \n    if (isset($mime_types[$extension])) {\n        header('Content-Type: ' . $mime_types[$extension]);\n    }\n    \n    readfile($file_path);\n    return;\n}\n\n// 404 for non-existent files\nhttp_response_code(404);\necho '404 - File Not Found';\n?>","size_bytes":1356},"replit.md":{"content":"# VideoHub - Video Management Platform\n\n## Overview\n\nVideoHub is a comprehensive video management platform designed for creators, viewers, and administrators. The platform enables video content monetization, user management, and analytics tracking. It features a multi-role architecture with distinct interfaces for admins, creators, and viewers, each with tailored functionality for their specific needs.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nProject focus: Simple web app for demo purposes without complex analytics or payout features.\nDesign preference: Improved and streamlined layout structure.\nViewer interface: Simplified dashboard with metrics and all videos section. Removed browse videos page and menu items for cleaner navigation.\nPurchases page: Removed metrics and recent purchases sections, keeping only all purchased videos section.\nData loading: Migrated from JSON files to PHP/MySQL backend with user's existing database.\nSettings pages: Removed \"Viewing Activity\" section from viewer profile page and \"Your Stats\" section from creator profile page for cleaner interface.\nUI/UX improvements: Enhanced all user panels with modern Bootstrap styling, consistent navigation, improved card designs, and sleek auth forms.\n\n## Backend Migration (August 2025)\n\nSuccessfully migrated VideoHub from static JSON files to PHP/MySQL backend:\n- Database: MariaDB 10.11.10 hosted at srv637.hstgr.io\n- PHP 8.1.33 backend with REST API endpoints\n- Adapted to existing database structure with YouTube video integration\n- API endpoints: /api/videos, /api/users, /api/purchases, /api/creator/videos, /api/creator/earnings, /api/admin/users\n- Mixed architecture: Frontend JavaScript + PHP backend\n- Frontend now uses APIService instead of DataService for database connectivity\n- Fixed APIService class redeclaration issues with proper guard checks\n- PHP server serves both API endpoints and static files on port 5000\n- **Migration to Replit Complete (August 12, 2025)**: All frontend pages successfully connected to backend APIs, syntax errors fixed, standardized API response formats, and verified full functionality across admin, creator, and viewer interfaces\n- **Authentication System Complete (August 12, 2025)**: Created full database authentication with JWT tokens, registration/login endpoints, test accounts (admin@videohub.com/admin123, creator@videohub.com/creator123, viewer@videohub.com/viewer123), and proper session management\n- **Dynamic Metrics System Complete (August 12, 2025)**: Removed all static HTML data, created comprehensive /api/metrics endpoints for real-time statistics, updated all dashboard JavaScript to fetch live data from database instead of hardcoded values\n- **Creator Panel Data Loading Fixed (August 12, 2025)**: Resolved session handling issues where creator dashboard was using hardcoded user ID instead of logged-in user's actual ID. Fixed API calls to use correct creator ID from session storage, ensuring creators see their own videos and metrics\n- **YouTube Upload Integration (August 12, 2025)**: Implemented comprehensive YouTube video upload system with OAuth2 authentication, token management with auto-refresh logic, progress tracking, and database synchronization. Created YouTube API client, token management endpoints, and upload modal with form validation\n- **Email Verification System Complete (August 12, 2025)**: Implemented full SMTP email verification with user-provided Gmail credentials, email verification tokens table, registration flow with automatic verification emails, resend functionality, frontend integration with direct API calls, fixed multiple API call issues, and created action-based endpoint routing for seamless user experience. System fully tested and working with real SMTP delivery.\n- **Viewer Panel Functional Payment System (August 12, 2025)**: Replaced all static data with dynamic database integration, updated dashboard to show general platform metrics instead of user-specific ones, implemented comprehensive payment processing with /api/payments endpoints, created functional pay-to-watch system with purchase modals, multiple payment methods (card/PayPal/crypto), access control checks, and video player integration. All viewer functionality now uses real database data and supports actual video purchases.\n- **Enhanced UI/UX and YouTube Player Integration (August 12, 2025)**: Fixed API call routing so purchases API only called from purchases page, improved Bootstrap card design with modern styling, overlay controls and gradient backgrounds, implemented YouTube video player with modal interface, added video access control based on purchase status, enhanced video cards with better thumbnail display and action buttons, removed static HTML content for fully dynamic rendering.\n- **Replit Migration Complete (August 13, 2025)**: Successfully migrated VideoHub from Replit Agent to standard Replit environment, removed all static data dependencies and hardcoded values, fixed creator earnings API to properly connect with purchases table using correct column names (user_id_new), eliminated duplicate API calls with loading guards, implemented proper session-based user authentication for creator and viewer panels, and verified full functionality of creator dashboard with metrics, recent videos, and earnings sections.\n- **Profile System Refactored (August 13, 2025)**: Completely streamlined user profile functionality across all panels. Replaced complex, nested authentication logic with simple SimpleProfileManager class. Fixed JavaScript syntax errors, created unified profile API endpoints, and ensured seamless profile updates for admin, creator, and viewer roles. All profile pages now use consistent, maintainable code without complex session handling.\n- **YouTube Channel Synchronization Complete (August 13, 2025)**: Implemented comprehensive YouTube channel synchronization for video updates. When creators edit video titles and descriptions in VideoHub, changes automatically sync to their YouTube channel using YouTube Data API v3. Features include real-time notification system with color-coded alerts, error handling for authentication issues, and fallback messaging when YouTube sync fails. Fixed all database query issues by removing non-existent columns and added proper null handling for database fields.\n- **YouTube Authentication Issues Fixed (August 13, 2025)**: Resolved access token null issues in creator panel YouTube sync functionality. Enhanced token initialization process with proper error handling, added authentication status checks, and implemented user-friendly connection prompts when YouTube authentication is required. Updated updateVideoMetadata function to gracefully handle unauthenticated states and guide users to connect their YouTube accounts.\n- **Admin Panel Optimization Complete (August 13, 2025)**: Fully optimized admin panel with dynamic database content replacing all static data. Fixed hardcoded values in dashboard metrics (pending videos, total views), implemented proper API integration for all admin metrics including totalViews and pendingVideos, updated sidebar badges with dynamic counts, enhanced profile page to load correct admin user data and display proper role information. Simplified admin interface by removing complex placeholder features and replacing static activity feeds with clean placeholder content. Added global state management to prevent duplicate API calls across admin pages.\n- **Admin Videos Page Fixed (August 13, 2025)**: Resolved SQL column mismatch errors in admin videos API endpoint by properly mapping database columns and implementing fallback to main videos API. Created comprehensive video management interface with search, filtering, and export functionality. Added dynamic table rendering with proper video thumbnails, creator information, pricing, status badges, and action buttons for video management operations.\n\n## System Architecture\n\n### Frontend Architecture\n- **Pure HTML/CSS/JavaScript**: Client-side implementation using vanilla JavaScript modules for maintainability\n- **Bootstrap 5**: CSS framework for responsive design and UI components\n- **Font Awesome**: Icon library for consistent iconography\n- **Chart.js**: Data visualization library for analytics dashboards\n- **Modular JavaScript**: Organized into separate modules (auth.js, admin.js, creator.js, viewer.js, payment.js, common.js)\n\n### Multi-Role User Interface\n- **Landing Page**: Marketing-focused homepage with user registration/login\n- **Admin Panel**: User management, video moderation, system analytics with dark theme and left sidebar navigation\n- **Creator Studio**: Video upload, earnings tracking, content analytics with green theme and left sidebar navigation  \n- **Viewer Interface**: Dashboard, video browsing, purchasing, playback with primary blue theme and unified navigation with dashboard and left sidebar structure\n\n### Authentication & Authorization\n- **Role-based Access Control**: Three distinct user types (admin, creator, viewer)\n- **Demo Authentication**: Hardcoded credentials for demonstration purposes\n- **Session Management**: Client-side session handling with localStorage\n- **Email Verification**: Mock email verification workflow for user onboarding\n\n### Video Management System\n- **Content Organization**: Categorized video library with metadata (title, description, price, duration)\n- **Monetization**: Pay-per-video model with earnings tracking\n- **Video Player**: HTML5 video player with custom controls and playback features\n- **Content Moderation**: Admin tools for video approval and management\n\n### Payment Processing\n- **Mock Payment System**: Simulated payment processing for demonstration\n- **Multiple Payment Methods**: Support for cards, PayPal, and mobile wallets\n- **Transaction Management**: Purchase history and earnings tracking\n- **Demo Mode**: Simplified payment flow for testing and demonstration\n\n### Simple Statistics\n- **Basic Overview Cards**: Simple statistics display without complex charts\n- **Clean Interface**: Streamlined design focused on core functionality\n\n### API Integration\n- **Structured API Calls**: Prepared API functions for backend connectivity\n- **RESTful Design**: Following REST conventions for all endpoints\n- **Error Handling**: Comprehensive error handling for API responses\n\n## External Dependencies\n\n### Frontend Libraries\n- **Bootstrap 5.3.0**: UI framework and responsive grid system\n- **Font Awesome 6.0.0**: Icon font library for consistent iconography\n\n### Content Delivery\n- **Bootstrap CDN**: External CSS and JavaScript delivery\n- **Font Awesome CDN**: Icon font delivery\n\n### Mock Services\n- **Placeholder Images**: Via.placeholder.com for demo video thumbnails\n- **Demo Payment Processing**: Simulated payment workflows\n- **Mock Video Content**: Placeholder video files and metadata\n\n### Architecture Considerations\n- **Static File Hosting**: Designed for deployment on static hosting platforms\n- **No Backend Dependencies**: Pure client-side implementation for simplicity\n- **Scalable Structure**: Modular design allows for future backend integration\n- **Cross-browser Compatibility**: Standard HTML5/CSS3/ES6 features\n- **Consistent UI/UX**: All user interfaces now follow consistent sidebar navigation pattern\n- **Unified Branding**: Consistent VideoHub branding across all user panels (VideoHub Admin, VideoHub Creator, VideoHub Viewer)\n- **Simplified Design**: Removed complex analytics and payout features for demo simplicity  \n- **Clean Navigation**: Streamlined sidebar navigation without analytics sections\n- **Creator Videos Interface**: Simplified video management with only Edit and Delete buttons, removed duplicate and stats functionality\n- **Modern Bootstrap 5**: Latest Bootstrap features for responsive design\n- **API-Ready**: Structured for easy backend integration","size_bytes":11872},"api/index.php":{"content":"<?php\n/**\n * VideoHub API Router\n * Routes API requests to appropriate endpoints\n */\n\nrequire_once 'config/cors.php';\n\n// Get request path and method\n$request_uri = $_SERVER['REQUEST_URI'];\n$path = parse_url($request_uri, PHP_URL_PATH);\n$method = $_SERVER['REQUEST_METHOD'];\n\n// Remove base path if present\n$path = preg_replace('/^\\/api/', '', $path);\n\n// Route requests\nswitch (true) {\n    // Authentication endpoints\n    case preg_match('/^\\/auth/', $path):\n        require_once 'endpoints/auth.php';\n        break;\n        \n    // Users endpoints\n    case preg_match('/^\\/users/', $path):\n        require_once 'endpoints/users.php';\n        break;\n        \n    // Videos endpoints\n    case preg_match('/^\\/videos/', $path):\n        require_once 'endpoints/videos.php';\n        break;\n        \n    // Purchases endpoints\n    case preg_match('/^\\/purchases/', $path):\n        require_once 'endpoints/purchases.php';\n        break;\n        \n    // Creator endpoints\n    case preg_match('/^\\/creator/', $path):\n        require_once 'endpoints/creator.php';\n        break;\n        \n    // Metrics endpoints\n    case preg_match('/^\\/metrics/', $path):\n        require_once 'endpoints/metrics.php';\n        break;\n        \n    // Admin endpoints\n    case preg_match('/^\\/admin/', $path):\n        require_once 'endpoints/admin.php';\n        break;\n        \n    // Payment endpoints\n    case preg_match('/^\\/payments/', $path):\n        require_once 'endpoints/payments.php';\n        break;\n        \n    // Health check\n    case $path === '/' || $path === '/health':\n        http_response_code(200);\n        echo json_encode([\n            'success' => true,\n            'message' => 'VideoHub API is running',\n            'version' => '1.0.0',\n            'timestamp' => date('c')\n        ]);\n        break;\n        \n    // Default - not found\n    default:\n        http_response_code(404);\n        echo json_encode([\n            'success' => false,\n            'message' => 'Endpoint not found',\n            'path' => $path\n        ]);\n        break;\n}\n?>","size_bytes":2048},"api/youtube_tokens.php":{"content":"<?php\n/**\n * YouTube Tokens API for VideoHub\n * Handles OAuth tokens storage and refresh logic\n */\n\nrequire_once __DIR__ . '/config/cors.php';\nrequire_once __DIR__ . '/config/database.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Get request method and input\n$method = $_SERVER['REQUEST_METHOD'];\n$input = json_decode(file_get_contents('php://input'), true);\n\n// Client credentials (in production, store these securely)\n$clientId = '824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com';\n$clientSecret = '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';\n\ntry {\n    // Create youtube_tokens table if it doesn't exist\n    $createTableSQL = \"CREATE TABLE IF NOT EXISTS youtube_tokens (\n        id INT AUTO_INCREMENT PRIMARY KEY,  \n        access_token TEXT,\n        refresh_token TEXT,\n        expires_at DATETIME,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        UNIQUE KEY unique_user (user_id)\n    )\";\n    \n    try {\n        $db->exec($createTableSQL);\n    } catch (PDOException $e) {\n        // Table might already exist, continue\n        error_log(\"YouTube tokens table creation: \" . $e->getMessage());\n    }\n\n    switch ($method) {\n        case 'GET':\n            if (isset($_GET['action']) && $_GET['action'] === 'get_tokens') {\n                // Get tokens for current user (for demo, use user ID 7)              \n                \n                $stmt = $db->prepare(\"SELECT * FROM youtube_tokens ORDER BY updated_at DESC LIMIT 1\");\n                $stmt->execute();\n                $token = $stmt->fetch(PDO::FETCH_ASSOC);\n                \n                if ($token) {\n                    // Check if token is expired\n                    $expiresAt = new DateTime($token['expires_at']);\n                    $now = new DateTime();\n                    \n                    if ($now >= $expiresAt) {\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => false,\n                            'expired' => true,\n                            'refresh_token' => $token['refresh_token'],\n                            'message' => 'Token expired'\n                        ]);\n                    } else {\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'tokens' => [\n                                'access_token' => $token['access_token'],\n                                'refresh_token' => $token['refresh_token'],\n                                'expires_at' => $token['expires_at']\n                            ]\n                        ]);\n                    }\n                } else {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'No tokens found'\n                    ]);\n                }\n            }\n            break;\n            \n        case 'POST':\n            if ($input['action'] === 'save_tokens') {\n                // Save new tokens            \n                $accessToken = $input['access_token'];\n                $refreshToken = $input['refresh_token'];\n                $expiresIn = $input['expires_in'] ?? 3600; // Default 1 hour\n                \n                $expiresAt = date('Y-m-d H:i:s', time() + $expiresIn);\n                \n                // Insert or update tokens\n                $stmt = $db->prepare(\"\n                    INSERT INTO youtube_tokens (access_token, refresh_token, expires_at) \n                    VALUES (?, ?, ?, ?)\n                    ON DUPLICATE KEY UPDATE \n                    access_token = VALUES(access_token),\n                    refresh_token = VALUES(refresh_token),\n                    expires_at = VALUES(expires_at),\n                    updated_at = CURRENT_TIMESTAMP\n                \");\n                \n                if ($stmt->execute([$accessToken, $refreshToken, $expiresAt])) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Tokens saved successfully'\n                    ]);\n                } else {\n                    throw new Exception('Failed to save tokens');\n                }\n                \n            } elseif ($input['action'] === 'refresh_token') {\n                // Refresh access token\n                $refreshToken = $input['refresh_token'];\n                \n                // Make request to Google OAuth2 token endpoint\n                $tokenUrl = 'https://oauth2.googleapis.com/token';\n                $postData = [\n                    'client_id' => $clientId,\n                    'client_secret' => $clientSecret,\n                    'refresh_token' => $refreshToken,\n                    'grant_type' => 'refresh_token'\n                ];\n                \n                $ch = curl_init();\n                curl_setopt($ch, CURLOPT_URL, $tokenUrl);\n                curl_setopt($ch, CURLOPT_POST, true);\n                curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n                curl_setopt($ch, CURLOPT_HTTPHEADER, [\n                    'Content-Type: application/x-www-form-urlencoded'\n                ]);\n                \n                $response = curl_exec($ch);\n                $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n                curl_close($ch);\n                \n                if ($httpCode === 200) {\n                    $tokenData = json_decode($response, true);\n                    \n                    if (isset($tokenData['access_token'])) {                     \n                        $newAccessToken = $tokenData['access_token'];\n                        $expiresIn = $tokenData['expires_in'] ?? 3600;\n                        $expiresAt = date('Y-m-d H:i:s', time() + $expiresIn);\n                        \n                        // Update access token in database\n                        $stmt = $db->prepare(\"\n                            UPDATE youtube_tokens \n                            SET access_token = ?, expires_at = ?, updated_at = CURRENT_TIMESTAMP\");\n                        \n                        if ($stmt->execute([$newAccessToken, $expiresAt])) {\n                            http_response_code(200);\n                            echo json_encode([\n                                'success' => true,\n                                'tokens' => [\n                                    'access_token' => $newAccessToken,\n                                    'refresh_token' => $refreshToken,\n                                    'expires_at' => $expiresAt\n                                ]\n                            ]);\n                        } else {\n                            throw new Exception('Failed to update tokens in database');\n                        }\n                    } else {\n                        throw new Exception('Invalid response from Google OAuth2');\n                    }\n                } else {\n                    throw new Exception('Failed to refresh token: HTTP ' . $httpCode);\n                }\n                \n            } elseif ($input['action'] === 'clear_tokens') {\n                // Clear tokens (sign out)           \n                \n                $stmt = $db->prepare(\"DELETE FROM youtube_tokens\");\n                if ($stmt->execute()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Tokens cleared successfully'\n                    ]);\n                } else {\n                    throw new Exception('Failed to clear tokens');\n                }\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n    \n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => $e->getMessage()\n    ]);\n}\n?>","size_bytes":8359},"api/config/cors.php":{"content":"<?php\n/**\n * CORS Configuration for VideoHub API\n */\n\n// Allow cross-origin requests\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\");\nheader(\"Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With\");\n\n// Handle preflight OPTIONS requests\nif ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {\n    http_response_code(200);\n    exit();\n}\n\n// Set content type to JSON\nheader(\"Content-Type: application/json; charset=UTF-8\");\n?>","size_bytes":503},"api/config/database.php":{"content":"<?php\n/**\n * Database Configuration for VideoHub\n */\n\nclass Database {\n    private $host;\n    private $db_name;\n    private $username;\n    private $password;\n    public $conn;\n\n    public function __construct() {\n        // Use environment variables if available, fallback to original values\n        $this->host = getenv('DB_HOST') ?: 'srv637.hstgr.io';\n        $this->db_name = getenv('DB_NAME') ?: 'u742355347_youtube';\n        $this->username = getenv('DB_USERNAME') ?: 'u742355347_youtube';\n        $this->password = getenv('DB_PASSWORD') ?: 'Arona1@1@1@1';\n    }\n\n    public function getConnection() {\n        $this->conn = null;\n\n        try {\n            $this->conn = new PDO(\n                \"mysql:host=\" . $this->host . \";dbname=\" . $this->db_name . \";charset=utf8\",\n                $this->username,\n                $this->password\n            );\n\n            // Set PDO error mode to exception\n            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n            // Set default fetch mode to associative array\n            $this->conn->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);\n\n        } catch(PDOException $exception) {\n            error_log(\"Connection error: \" . $exception->getMessage());\n            throw new Exception(\"Database connection failed\");\n        }\n\n        return $this->conn;\n    }\n}\n?>","size_bytes":1363},"api/config/email.php":{"content":"<?php\n/**\n * Email Configuration for VideoHub\n */\n\n// SMTP Configuration\ndefine('SMTP_HOST', 'smtp-relay.sendinblue.com');\ndefine('SMTP_PORT', 587);\ndefine('SMTP_USERNAME', 'phpdevgmicro@gmail.com');\ndefine('SMTP_PASSWORD', 'N2DFZECX67YGBHRO');\ndefine('SMTP_FROM_EMAIL', 'phpdevgmicro@gmail.com');\ndefine('SMTP_FROM_NAME', 'Video Platform');\ndefine('SMTP_ENCRYPTION', 'tls');\n\n// Email templates\ndefine('VERIFICATION_EMAIL_SUBJECT', 'Verify Your Email - VideoHub');\ndefine('VERIFICATION_EMAIL_TEMPLATE', 'verification');\ndefine('PASSWORD_RESET_EMAIL_SUBJECT', 'Reset Your Password - VideoHub');\ndefine('PASSWORD_RESET_EMAIL_TEMPLATE', 'password_reset');\n\n// App configuration\ndefine('APP_URL', 'http://localhost:5000');\ndefine('VERIFICATION_TOKEN_EXPIRY', 24); // hours\n?>","size_bytes":772},"api/endpoints/admin.php":{"content":"<?php\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../models/User.php';\n\nheader('Content-Type: application/json');\n\n// Get database connection\n$database = new Database();\n$pdo = $database->getConnection();\n$user = new User($pdo);\n\ntry {\n    $method = $_SERVER['REQUEST_METHOD'];\n    $uri = $_SERVER['REQUEST_URI'];\n    \n    // Parse the URI to get the endpoint\n    $path = parse_url($uri, PHP_URL_PATH);\n    $pathSegments = explode('/', trim($path, '/'));\n    \n    // Get request data for POST/PUT requests\n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    \n    switch ($method) {\n        case 'GET':\n            if (end($pathSegments) === 'users') {\n                // Check if getting single user by ID\n                if (isset($_GET['id']) && !empty($_GET['id'])) {\n                    $user->id = $_GET['id'];\n                    if ($user->readOne()) {\n                        echo json_encode([\n                            'success' => true,\n                            'data' => [\n                                'id' => $user->id,\n                                'name' => $user->name,\n                                'email' => $user->email,\n                                'role' => $user->role,\n                                'status' => $user->status ?? 'active',\n                                'email_verified_at' => $user->email_verified_at,\n                                'created_at' => $user->created_at,\n                                'updated_at' => $user->updated_at,\n                                'joinDate' => date('M d, Y', strtotime($user->created_at)),\n                                'lastActive' => 'Recently',\n                                'email_verified' => $user->email_verified_at !== null\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(404);\n                        echo json_encode(['success' => false, 'message' => 'User not found']);\n                    }\n                } else {\n                    // Get all users for admin panel\n                    $stmt = $pdo->query(\"\n                        SELECT \n                            id,\n                            name,\n                            email,\n                            role,\n                            COALESCE(status, 'active') as status,\n                            email_verified_at,\n                            created_at,\n                            updated_at\n                        FROM users \n                        ORDER BY created_at DESC\n                    \");\n                    \n                    $users = $stmt->fetchAll(PDO::FETCH_ASSOC);\n                    \n                    // Format data for admin display\n                    foreach ($users as &$user) {\n                        $user['joinDate'] = date('M d, Y', strtotime($user['created_at']));\n                        $user['username'] = $user['name'];\n                        $user['user_type'] = $user['role'];\n                        $user['lastActive'] = 'Recently';\n                        $user['email_verified'] = $user['email_verified_at'] !== null;\n                    }\n                    \n                    echo json_encode([\n                        'success' => true,\n                        'data' => $users\n                    ]);\n                }\n            } elseif (end($pathSegments) === 'videos') {\n                // Get all videos for admin panel - use the same structure as /api/videos\n                $response = file_get_contents('http://localhost:5000/api/videos');\n                $videosData = json_decode($response, true);\n                \n                if ($videosData && isset($videosData['data']['videos'])) {\n                    $videos = $videosData['data']['videos'];\n                    \n                    // Format data for admin display\n                    foreach ($videos as &$video) {\n                        $video['creator_name'] = $video['creatorName'] ?? 'Unknown';\n                        $video['creator_email'] = ''; // Not available in current structure\n                        $video['upload_date'] = $video['uploadDate'] ?? date('M d, Y');\n                        $video['purchase_count'] = $video['views'] ?? 0;\n                        $video['views'] = $video['views'] ?? 0;\n                        $video['status'] = $video['status'] ?? 'active';\n                        $video['created_at'] = date('Y-m-d H:i:s');\n                        \n                        // Ensure thumbnail URL is properly formatted\n                        if (empty($video['thumbnail'])) {\n                            $video['thumbnail'] = 'https://via.placeholder.com/60x40/007bff/ffffff?text=Video';\n                        }\n                    }\n                    \n                    echo json_encode([\n                        'success' => true,\n                        'data' => $videos\n                    ]);\n                } else {\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Failed to load videos'\n                    ]);\n                }\n            } else {\n                http_response_code(404);\n                echo json_encode(['success' => false, 'message' => 'Endpoint not found']);\n            }\n            break;\n            \n        case 'POST':\n            if (end($pathSegments) === 'users') {\n                // Create new user\n                if (empty($data['name']) || empty($data['email']) || empty($data['role'])) {\n                    http_response_code(400);\n                    echo json_encode(['success' => false, 'message' => 'Name, email and role are required']);\n                    break;\n                }\n                \n                // Check if email already exists\n                $stmt = $pdo->prepare(\"SELECT id FROM users WHERE email = ?\");\n                $stmt->execute([$data['email']]);\n                if ($stmt->fetch()) {\n                    http_response_code(400);\n                    echo json_encode(['success' => false, 'message' => 'Email already exists']);\n                    break;\n                }\n                \n                $user->name = $data['name'];\n                $user->email = $data['email'];\n                $user->role = $data['role'];\n                $user->status = $data['status'] ?? 'active';\n                \n                if ($user->create()) {\n                    echo json_encode(['success' => true, 'message' => 'User created successfully', 'id' => $user->id]);\n                } else {\n                    http_response_code(500);\n                    echo json_encode(['success' => false, 'message' => 'Failed to create user']);\n                }\n            } else {\n                http_response_code(404);\n                echo json_encode(['success' => false, 'message' => 'Endpoint not found']);\n            }\n            break;\n            \n        case 'PUT':\n            if (end($pathSegments) === 'users') {\n                // Update user\n                if (empty($data['id'])) {\n                    http_response_code(400);\n                    echo json_encode(['success' => false, 'message' => 'User ID is required']);\n                    break;\n                }\n                \n                $user->id = $data['id'];\n                \n                // Check if user exists\n                if (!$user->readOne()) {\n                    http_response_code(404);\n                    echo json_encode(['success' => false, 'message' => 'User not found']);\n                    break;\n                }\n                \n                // Update fields if provided\n                $user->name = $data['name'] ?? $user->name;\n                $user->email = $data['email'] ?? $user->email;\n                $user->role = $data['role'] ?? $user->role;\n                $user->status = $data['status'] ?? $user->status;\n                \n                if ($user->update()) {\n                    echo json_encode(['success' => true, 'message' => 'User updated successfully']);\n                } else {\n                    http_response_code(500);\n                    echo json_encode(['success' => false, 'message' => 'Failed to update user']);\n                }\n            } else {\n                http_response_code(404);\n                echo json_encode(['success' => false, 'message' => 'Endpoint not found']);\n            }\n            break;\n            \n        case 'DELETE':\n            if (end($pathSegments) === 'users') {\n                // Delete user\n                if (empty($data['id'])) {\n                    http_response_code(400);\n                    echo json_encode(['success' => false, 'message' => 'User ID is required']);\n                    break;\n                }\n                \n                $user->id = $data['id'];\n                \n                if ($user->delete()) {\n                    echo json_encode(['success' => true, 'message' => 'User deleted successfully']);\n                } else {\n                    http_response_code(500);\n                    echo json_encode(['success' => false, 'message' => 'Failed to delete user']);\n                }\n            } else {\n                http_response_code(404);\n                echo json_encode(['success' => false, 'message' => 'Endpoint not found']);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode(['success' => false, 'message' => 'Method not allowed']);\n            break;\n    }\n    \n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode(['success' => false, 'message' => 'Server error: ' . $e->getMessage()]);\n}\n?>","size_bytes":9811},"api/endpoints/auth.php":{"content":"<?php\n/**\n * Authentication API Endpoints for VideoHub\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/User.php';\nrequire_once __DIR__ . '/../models/EmailVerification.php';\nrequire_once __DIR__ . '/../services/EmailService.php';\nrequire_once __DIR__ . '/../services/GoogleAuthService.php'; // Assuming GoogleAuthService is in this path\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Initialize objects\n$user = new User($db);\n$emailVerification = new EmailVerification($db);\n$emailService = new EmailService();\n$googleAuthService = new GoogleAuthService(); // Initialize GoogleAuthService\n\n// Ensure email_verified_at column exists\n$user->createEmailVerifiedColumnIfNotExists();\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'POST':\n            // Handle action-based requests (direct endpoint calls)\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n\n            if (isset($data['action'])) {\n                $action = $data['action'];\n\n                switch ($action) {\n                    case 'google-login':\n                        if (empty($data['credential'])) {\n                            http_response_code(400);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Google credential (token) is required'\n                            ]);\n                            exit;\n                        }\n\n                        // Verify Google JWT token\n                        $googleUserData = $googleAuthService->verifyGoogleToken($data['credential']);\n\n                        if (!$googleUserData || !isset($googleUserData['email'])) {\n                            http_response_code(401);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Invalid Google credential'\n                            ]);\n                            exit;\n                        }\n\n                        // Check if user already exists with this email\n                        $stmt = $db->prepare(\"SELECT id, name, email, role, email_verified_at, status FROM users WHERE email = ?\");\n                        $stmt->execute([$googleUserData['email']]);\n                        $existingUser = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                        $userName = $googleUserData['name'] ?? $googleUserData['email']; // Use name from Google or fallback to email\n                        $userEmail = $googleUserData['email'];\n                        $userVerified = $googleUserData['email_verified'] ?? false; // Google usually provides this\n                        $userPicture = $googleUserData['picture'] ?? null;\n\n                        if ($existingUser) {\n                            // Check if user is not revoked/banned\n                            $userStatus = $existingUser['status'] ?? 'active';\n                            if ($userStatus === 'revoked' || $userStatus === 'banned') {\n                                http_response_code(403);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'Your account has been suspended. Please contact support.'\n                                ]);\n                                exit;\n                            }\n                            \n                            // User exists, log them in\n                            $userId = $existingUser['id'];\n                            $userRole = $existingUser['role'];\n                            $emailVerified = $existingUser['email_verified_at'] !== null;\n\n                            // Update user if necessary (e.g., picture, name)\n                            // For simplicity, we'll just use existing user data and session\n                        } else {\n                            // User does not exist, create a new one\n                            $role = 'viewer'; // Default role for new users\n                            $hashedPassword = password_hash(bin2hex(random_bytes(16)), PASSWORD_DEFAULT); // Set a random password as it's not used for login\n\n                            $createUserStmt = $db->prepare(\"\n                                INSERT INTO users (name, email, password, role, email_verified_at) \n                                VALUES (?, ?, ?, ?, ?)\n                            \");\n\n                            // Set email_verified_at based on Google's verification status\n                            $verifiedAt = $userVerified ? date('Y-m-d H:i:s') : null;\n\n                            if ($createUserStmt->execute([$userName, $userEmail, $hashedPassword, $role, $verifiedAt])) {\n                                $userId = $db->lastInsertId();\n                                $emailVerified = $userVerified;\n                                $userRole = $role;\n                            } else {\n                                http_response_code(500);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'Failed to create user account from Google data'\n                                ]);\n                                exit;\n                            }\n                        }\n\n                        // Generate session token\n                        $token = bin2hex(random_bytes(32));\n\n                        // Store session in database\n                        try {\n                            $sessionStmt = $db->prepare(\"\n                                INSERT INTO user_sessions (user_id, token, expires_at) \n                                VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))\n                                ON DUPLICATE KEY UPDATE token = VALUES(token), expires_at = VALUES(expires_at)\n                            \");\n                            $sessionStmt->execute([$userId, $token]);\n                        } catch (PDOException $e) {\n                            // If sessions table doesn't exist, create it\n                            $db->exec(\"\n                                CREATE TABLE IF NOT EXISTS user_sessions (\n                                    id INT AUTO_INCREMENT PRIMARY KEY,\n                                    user_id INT NOT NULL,\n                                    token VARCHAR(255) NOT NULL UNIQUE,\n                                    expires_at DATETIME NOT NULL,\n                                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n                                )\n                            \");\n                            $sessionStmt = $db->prepare(\"\n                                INSERT INTO user_sessions (user_id, token, expires_at) \n                                VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))\n                            \");\n                            $sessionStmt->execute([$userId, $token]);\n                        }\n\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Google login successful',\n                            'data' => [\n                                'user' => [\n                                    'id' => $userId,\n                                    'name' => $userName,\n                                    'email' => $userEmail,\n                                    'role' => $userRole,\n                                    'email_verified' => $emailVerified\n                                ],\n                                'token' => $token\n                            ]\n                        ]);\n                        exit;\n\n                    case 'google-signup':\n                        if (empty($data['credential'])) {\n                            http_response_code(400);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Google credential (token) is required'\n                            ]);\n                            exit;\n                        }\n\n                        // Verify Google JWT token\n                        $googleUserData = $googleAuthService->verifyGoogleToken($data['credential']);\n\n                        if (!$googleUserData || !isset($googleUserData['email'])) {\n                            http_response_code(401);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Invalid Google credential'\n                            ]);\n                            exit;\n                        }\n\n                        $userName = $googleUserData['name'] ?? $googleUserData['email'];\n                        $userEmail = $googleUserData['email'];\n                        $userVerified = $googleUserData['email_verified'] ?? false;\n                        $userPicture = $googleUserData['picture'] ?? null;\n\n                        // Check if email already exists\n                        $stmt = $db->prepare(\"SELECT id FROM users WHERE email = ?\");\n                        $stmt->execute([$userEmail]);\n                        if ($stmt->fetch()) {\n                            http_response_code(400);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Email already registered. Please log in instead.'\n                            ]);\n                            exit;\n                        }\n\n                        // Create a new user\n                        $role = 'viewer'; // Default role for new users\n                        $hashedPassword = password_hash(bin2hex(random_bytes(16)), PASSWORD_DEFAULT); // Set a random password\n\n                        $createUserStmt = $db->prepare(\"\n                            INSERT INTO users (name, email, password, role, email_verified_at) \n                            VALUES (?, ?, ?, ?, ?)\n                        \");\n\n                        $verifiedAt = $userVerified ? date('Y-m-d H:i:s') : null;\n\n                        if ($createUserStmt->execute([$userName, $userEmail, $hashedPassword, $role, $verifiedAt])) {\n                            $userId = $db->lastInsertId();\n\n                            // Generate session token for the newly created user\n                            $token = bin2hex(random_bytes(32));\n                            $sessionStmt = $db->prepare(\"\n                                INSERT INTO user_sessions (user_id, token, expires_at) \n                                VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))\n                            \");\n                            $sessionStmt->execute([$userId, $token]);\n\n                            http_response_code(201);\n                            echo json_encode([\n                                'success' => true,\n                                'message' => 'Google signup successful!',\n                                'data' => [\n                                    'user' => [\n                                        'id' => $userId,\n                                        'name' => $userName,\n                                        'email' => $userEmail,\n                                        'role' => $role,\n                                        'email_verified' => $userVerified\n                                    ],\n                                    'token' => $token\n                                ]\n                            ]);\n                            exit;\n                        } else {\n                            http_response_code(500);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Google signup failed'\n                            ]);\n                        }\n                        break;\n\n                    case 'verify-email':\n                        if (empty($data['token'])) {\n                            http_response_code(400);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Verification token is required'\n                            ]);\n                            exit;\n                        }\n\n                        try {\n                            $verificationResult = $emailVerification->verifyToken($data['token']);\n\n                            if ($verificationResult) {\n                                // Update user email verification status\n                                $userId = $verificationResult['user_id'];\n                                $user->markEmailVerified($userId);\n\n                                http_response_code(200);\n                                echo json_encode([\n                                    'success' => true,\n                                    'message' => 'Email verified successfully!',\n                                    'data' => [\n                                        'user_id' => $verificationResult['user_id'],\n                                        'email' => $verificationResult['email']\n                                    ]\n                                ]);\n                            } else {\n                                http_response_code(400);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'Invalid or expired verification token'\n                                ]);\n                            }\n                        } catch (Exception $e) {\n                            error_log('Email verification error: ' . $e->getMessage());\n                            http_response_code(500);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Server error occurred'\n                            ]);\n                        }\n                        exit;\n\n                    case 'resend-verification':\n                        if (empty($data['email'])) {\n                            http_response_code(400);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Email is required'\n                            ]);\n                            exit;\n                        }\n\n                        try {\n                            // Find user by email  \n                            $user->createEmailVerifiedColumnIfNotExists();\n                            $stmt = $db->prepare(\"SELECT id, name, email, email_verified_at FROM users WHERE email = ?\");\n                            $stmt->execute([$data['email']]);\n                            $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                            if (!$userData) {\n                                http_response_code(404);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'User not found'\n                                ]);\n                                exit;\n                            }\n\n                            if ($userData['email_verified_at']) {\n                                http_response_code(400);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'Email is already verified'\n                                ]);\n                                exit;\n                            }\n\n                            // Create new verification token\n                            $token = $emailVerification->createToken($userData['id'], $userData['email']);\n\n                            if ($token) {\n                                // Send verification email\n                                $emailSent = $emailService->sendVerificationEmail($userData['email'], $userData['name'], $token);\n\n                                if ($emailSent) {\n                                    echo json_encode([\n                                        'success' => true,\n                                        'message' => 'Verification email sent successfully!'\n                                    ]);\n                                } else {\n                                    echo json_encode([\n                                        'success' => true,\n                                        'message' => 'Verification token created, but email could not be sent. Please contact support.'\n                                    ]);\n                                }\n                            } else {\n                                http_response_code(500);\n                                echo json_encode([\n                                    'success' => false,\n                                    'message' => 'Failed to create verification token'\n                                ]);\n                            }\n                        } catch (Exception $e) {\n                            error_log('Resend verification error: ' . $e->getMessage());\n                            http_response_code(500);\n                            echo json_encode([\n                                'success' => false,\n                                'message' => 'Server error occurred'\n                            ]);\n                        }\n                        exit;\n                }\n            }\n\n            if (isset($path_parts[2]) && $path_parts[2] === 'login') {\n                // Handle login\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n\n                if (empty($data['email']) || empty($data['password'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Email and password are required'\n                    ]);\n                    break;\n                }\n\n                // Check if user exists and password is correct\n                $stmt = $db->prepare(\"SELECT id, name, email, role, password, email_verified, status FROM users WHERE email = ?\");\n                $stmt->execute([$data['email']]);\n                $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                if ($userData && password_verify($data['password'], $userData['password'])) {\n                    // Check if email is verified and user is not revoked\n                    $emailVerified = $userData['email_verified'] !== null;\n                    $userStatus = $userData['status'] ?? 'active';\n                    \n                    if (!$emailVerified) {\n                        http_response_code(403);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Please verify your email before logging in',\n                            'verification_required' => true\n                        ]);\n                        break;\n                    }\n                    \n                    if ($userStatus === 'revoked' || $userStatus === 'banned') {\n                        http_response_code(403);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Your account has been suspended. Please contact support.'\n                        ]);\n                        break;\n                    }\n\n                    // Generate session token\n                    $token = bin2hex(random_bytes(32));\n\n                    // Store session in database (create sessions table if needed)\n                    try {\n                        $sessionStmt = $db->prepare(\"\n                            INSERT INTO user_sessions (user_id, token, expires_at) \n                            VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))\n                            ON DUPLICATE KEY UPDATE token = VALUES(token), expires_at = VALUES(expires_at)\n                        \");\n                        $sessionStmt->execute([$userData['id'], $token]);\n                    } catch (PDOException $e) {\n                        // If sessions table doesn't exist, create it\n                        $db->exec(\"\n                            CREATE TABLE IF NOT EXISTS user_sessions (\n                                id INT AUTO_INCREMENT PRIMARY KEY,\n                                user_id INT NOT NULL,\n                                token VARCHAR(255) NOT NULL UNIQUE,\n                                expires_at DATETIME NOT NULL,\n                                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n                            )\n                        \");\n                        $sessionStmt = $db->prepare(\"\n                            INSERT INTO user_sessions (user_id, token, expires_at) \n                            VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 DAY))\n                        \");\n                        $sessionStmt->execute([$userData['id'], $token]);\n                    }\n\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Login successful',\n                        'data' => [\n                            'user' => [\n                                'id' => $userData['id'],\n                                'name' => $userData['name'],\n                                'email' => $userData['email'],\n                                'role' => $userData['role'],\n                                'email_verified' => $emailVerified\n                            ],\n                            'token' => $token\n                        ]\n                    ]);\n                } else {\n                    http_response_code(401);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Invalid email or password'\n                    ]);\n                }\n\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'register') {\n                // Handle registration\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n\n                if (empty($data['firstName']) || empty($data['lastName']) || \n                    empty($data['email']) || empty($data['password'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'All fields are required'\n                    ]);\n                    break;\n                }\n\n                // Check if email already exists\n                $stmt = $db->prepare(\"SELECT id FROM users WHERE email = ?\");\n                $stmt->execute([$data['email']]);\n                if ($stmt->fetch()) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Email already registered'\n                    ]);\n                    break;\n                }\n\n                // Hash password and create user\n                $hashedPassword = password_hash($data['password'], PASSWORD_DEFAULT);\n                $userName = $data['firstName'] . ' ' . $data['lastName'];\n                $role = $data['userType'] ?? 'viewer';\n\n                $stmt = $db->prepare(\"\n                    INSERT INTO users (name, email, password, role) \n                    VALUES (?, ?, ?, ?)\n                \");\n\n                if ($stmt->execute([$userName, $data['email'], $hashedPassword, $role])) {\n                    $userId = $db->lastInsertId();\n\n                    // Create email verification token\n                    $verificationToken = $emailVerification->createToken($userId, $data['email']);\n\n                    if ($verificationToken) {\n                        // Send verification email\n                        $emailSent = $emailService->sendVerificationEmail($data['email'], $userName, $verificationToken);\n\n                        $message = 'Registration successful! ';\n                        if ($emailSent) {\n                            $message .= 'Please check your email to verify your account.';\n                        } else {\n                            $message .= 'However, we could not send the verification email. Please contact support.';\n                        }\n                    } else {\n                        $message = 'Registration successful, but verification token creation failed.';\n                    }\n\n                    http_response_code(201);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => $message,\n                        'data' => [\n                            'user' => [\n                                'id' => $userId,\n                                'name' => $userName,\n                                'email' => $data['email'],\n                                'role' => $role,\n                                'email_verified' => false\n                            ],\n                            'verification_required' => true\n                        ]\n                    ]);\n                } else {\n                    http_response_code(500);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Registration failed'\n                    ]);\n                }\n\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'verify-email') {\n                // Handle email verification\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n\n                if (empty($data['token'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Verification token is required'\n                    ]);\n                    break;\n                }\n\n                $verificationResult = $emailVerification->verifyToken($data['token']);\n\n                if ($verificationResult) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Email verified successfully!',\n                        'data' => [\n                            'user_id' => $verificationResult['user_id'],\n                            'email' => $verificationResult['email']\n                        ]\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Invalid or expired verification token'\n                    ]);\n                }\n\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'resend-verification') {\n                // Handle resending verification email\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n\n                if (empty($data['email'])) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Email is required'\n                    ]);\n                    break;\n                }\n\n                // Find user by email  \n                $user->createEmailVerifiedColumnIfNotExists();\n                $stmt = $db->prepare(\"SELECT id, name, email, email_verified_at FROM users WHERE email = ?\");\n                $stmt->execute([$data['email']]);\n                $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                if (!$userData) {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User not found'\n                    ]);\n                    break;\n                }\n\n                if ($userData['email_verified_at'] !== null) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Email is already verified'\n                    ]);\n                    break;\n                }\n\n                // Create new verification token\n                $verificationToken = $emailVerification->createToken($userData['id'], $userData['email']);\n\n                if ($verificationToken) {\n                    // Send verification email\n                    $emailSent = $emailService->sendVerificationEmail($userData['email'], $userData['name'], $verificationToken);\n\n                    if ($emailSent) {\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Verification email sent successfully!'\n                        ]);\n                    } else {\n                        http_response_code(500);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Failed to send verification email'\n                        ]);\n                    }\n                } else {\n                    http_response_code(500);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Failed to create verification token'\n                    ]);\n                }\n\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'logout') {\n                // Handle logout\n                $headers = getallheaders();\n                $authHeader = $headers['Authorization'] ?? '';\n\n                if (preg_match('/Bearer\\s+(.*)$/i', $authHeader, $matches)) {\n                    $token = $matches[1];\n\n                    // Delete session from database\n                    $stmt = $db->prepare(\"DELETE FROM user_sessions WHERE token = ?\");\n                    $stmt->execute([$token]);\n                }\n\n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'message' => 'Logout successful'\n                ]);\n\n            } else {\n                // Handle direct /api/auth requests (for Google auth)\n                if (end($path_parts) === 'auth' && count($path_parts) >= 2) {\n                    // This is a direct call to /api/auth, which should be handled by action-based logic above\n                    // If we reach here, it means no valid action was provided\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Invalid or missing action parameter'\n                    ]);\n                } else {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Auth endpoint not found'\n                    ]);\n                }\n            }\n            break;\n\n        case 'GET':\n            if (isset($path_parts[2]) && $path_parts[2] === 'verify-email') {\n                // Handle email verification via GET (for URL clicks)\n                $token = $_GET['token'] ?? '';\n\n                if (empty($token)) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Verification token is required'\n                    ]);\n                    break;\n                }\n\n                $verificationResult = $emailVerification->verifyToken($token);\n\n                if ($verificationResult) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Email verified successfully!',\n                        'data' => [\n                            'user_id' => $verificationResult['user_id'],\n                            'email' => $verificationResult['email']\n                        ]\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Invalid or expired verification token'\n                    ]);\n                }\n\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'verify') {\n                // Handle token verification\n                $headers = getallheaders();\n                $authHeader = $headers['Authorization'] ?? '';\n\n                if (preg_match('/Bearer\\s+(.*)$/i', $authHeader, $matches)) {\n                    $token = $matches[1];\n\n                    // Check if session is valid\n                    $stmt = $db->prepare(\"\n                        SELECT u.id, u.name, u.email, u.role \n                        FROM users u \n                        JOIN user_sessions s ON u.id = s.user_id \n                        WHERE s.token = ? AND s.expires_at > NOW()\n                    \");\n                    $stmt->execute([$token]);\n                    $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n\n                    if ($userData) {\n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'data' => [\n                                'user' => $userData\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(401);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Invalid or expired token'\n                        ]);\n                    }\n                } else {\n                    http_response_code(401);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'No token provided'\n                    ]);\n                }\n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Auth endpoint not found'\n                ]);\n            }\n            break;\n\n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":35485},"api/endpoints/creator.php":{"content":"<?php\n/**\n * Creator API Endpoints for VideoHub\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/Video.php';\nrequire_once __DIR__ . '/../models/User.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'GET':\n            if (isset($path_parts[2]) && $path_parts[2] === 'stats') {\n                // Get creator stats\n                $video = new Video($db);\n                $stats = $video->getCreatorStats();\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $stats\n                ]);\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'videos') {\n                // Get creator videos\n                $video = new Video($db);\n                \n                $filters = [];\n                if (isset($_GET['uploader_id'])) {\n                    $filters['uploader_id'] = $_GET['uploader_id'];\n                }\n                \n                $videos = $video->readAll($filters);\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => ['videos' => $videos]\n                ]);\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'earnings') {\n                // Get creator earnings\n                $creator_id = $_GET['creator_id'] ?? null;\n                \n                if (!$creator_id) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Creator ID is required'\n                    ]);\n                    break;\n                }\n                \n                $video = new Video($db);\n                $earnings = $video->getCreatorEarnings($creator_id);\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => ['earnings' => $earnings]\n                ]);\n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Creator endpoint not found'\n                ]);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":3039},"api/endpoints/metrics.php":{"content":"<?php\n/**\n * Metrics API Endpoints for VideoHub\n * Provides real-time statistics and dashboard metrics\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'GET':\n            if (isset($path_parts[2]) && $path_parts[2] === 'admin') {\n                // Admin dashboard metrics\n                $metrics = [];\n                \n                // Total users\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM users\");\n                $metrics['totalUsers'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total videos\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM videos\");\n                $metrics['totalVideos'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total purchases/sales\n                $stmt = $db->query(\"SELECT COUNT(*) as count, COALESCE(SUM(amount), 0) as revenue FROM purchases\");\n                $purchaseData = $stmt->fetch(PDO::FETCH_ASSOC);\n                $metrics['totalPurchases'] = $purchaseData['count'];\n                $metrics['totalRevenue'] = number_format($purchaseData['revenue'], 2);\n                \n                // New users this month\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM users WHERE created_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH)\");\n                $metrics['newUsersThisMonth'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Active users (simplified - count users with recent purchases)\n                $stmt = $db->query(\"SELECT COUNT(DISTINCT user_id_new) as count FROM purchases WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)\");\n                $metrics['activeUsers'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total views across all videos\n                $stmt = $db->query(\"SELECT COALESCE(SUM(views), 0) as total FROM videos\");\n                $metrics['totalViews'] = $stmt->fetch(PDO::FETCH_ASSOC)['total'];\n                \n                // Pending videos (simplified - count all videos, no complex review status)\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM videos WHERE status IS NULL OR status = 'pending'\");\n                $result = $stmt->fetch(PDO::FETCH_ASSOC);\n                $metrics['pendingVideos'] = $result ? $result['count'] : 0;\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $metrics\n                ]);\n                \n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'creator') {\n                // Creator dashboard metrics\n                $creatorId = $_GET['creator_id'] ?? null;\n                \n                if (!$creatorId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Creator ID is required'\n                    ]);\n                    return;\n                }\n                \n                $metrics = [];\n                \n                // Fix user_id data type issue by converting to int\n                $stmt = $db->query(\"UPDATE videos SET user_id = CAST(user_id AS UNSIGNED) WHERE user_id REGEXP '^[0-9]+$'\");\n                \n                // Total videos by creator\n                $stmt = $db->prepare(\"SELECT COUNT(*) as count FROM videos WHERE CAST(user_id AS UNSIGNED) = ?\");\n                $stmt->execute([$creatorId]);\n                $metrics['totalVideos'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total views by creator\n                $stmt = $db->prepare(\"SELECT COALESCE(SUM(views), 0) as total FROM videos WHERE CAST(user_id AS UNSIGNED) = ?\");\n                $stmt->execute([$creatorId]);\n                $metrics['totalViews'] = $stmt->fetch(PDO::FETCH_ASSOC)['total'];\n                \n                // Total earnings by creator from purchases table\n                $stmt = $db->prepare(\"\n                    SELECT COALESCE(SUM(p.amount), 0) as total \n                    FROM purchases p \n                    JOIN videos v ON p.video_id = v.id \n                    WHERE CAST(v.user_id AS UNSIGNED) = ?\n                \");\n                $stmt->execute([$creatorId]);\n                $metrics['totalEarnings'] = number_format($stmt->fetch(PDO::FETCH_ASSOC)['total'], 2);\n                \n                // Subscribers (for now, count unique purchasers of this creator's videos)\n                $stmt = $db->prepare(\"\n                    SELECT COUNT(DISTINCT p.user_id_new) as count \n                    FROM purchases p \n                    JOIN videos v ON p.video_id = v.id \n                    WHERE CAST(v.user_id AS UNSIGNED) = ? AND p.user_id_new IS NOT NULL\n                \");\n                $stmt->execute([$creatorId]);\n                $metrics['subscribers'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $metrics\n                ]);\n                \n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'viewer') {\n                // Viewer dashboard metrics - General platform metrics (not user-specific)\n                $metrics = [];\n                \n                // Total available videos for browsing\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM videos\");\n                $metrics['totalVideosCount'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total platform purchases (shows activity)\n                $stmt = $db->query(\"SELECT COUNT(*) as count FROM purchases\");\n                $metrics['totalPurchases'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Total platform revenue (shows platform success)\n                $stmt = $db->query(\"SELECT COALESCE(SUM(amount), 0) as total FROM purchases\");\n                $metrics['platformRevenue'] = number_format($stmt->fetch(PDO::FETCH_ASSOC)['total'], 2);\n                \n                // Total creators on platform\n                $stmt = $db->query(\"SELECT COUNT(DISTINCT user_id) as count FROM videos WHERE user_id IS NOT NULL AND user_id != ''\");\n                $metrics['totalCreators'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                \n                // Get user-specific data if user ID provided\n                $userId = $_GET['user_id'] ?? null;\n                if ($userId) {\n                    // User's purchased videos\n                    $stmt = $db->prepare(\"SELECT COUNT(*) as count FROM purchases WHERE user_id_new = ?\");\n                    $stmt->execute([$userId]);\n                    $metrics['userPurchases'] = $stmt->fetch(PDO::FETCH_ASSOC)['count'];\n                    \n                    // User's total spent\n                    $stmt = $db->prepare(\"SELECT COALESCE(SUM(amount), 0) as total FROM purchases WHERE user_id_new = ?\");\n                    $stmt->execute([$userId]);\n                    $metrics['userSpent'] = number_format($stmt->fetch(PDO::FETCH_ASSOC)['total'], 2);\n                } else {\n                    $metrics['userPurchases'] = 0;\n                    $metrics['userSpent'] = '0.00';\n                }\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $metrics\n                ]);\n                \n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Metrics endpoint not found'\n                ]);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":8556},"api/endpoints/payments.php":{"content":"<?php\n/**\n * Payment Processing API Endpoints for VideoHub\n * Handles video purchases and payment processing\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/User.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\n// Parse input data\n$input = json_decode(file_get_contents('php://input'), true);\n\ntry {\n    switch ($method) {\n        case 'POST':\n            if (isset($path_parts[2]) && $path_parts[2] === 'purchase') {\n                // Process video purchase\n                $videoId = $input['video_id'] ?? null;\n                $userId = $input['user_id'] ?? null;\n                $paymentMethod = $input['payment_method'] ?? 'card';\n                $paymentDetails = $input['payment_details'] ?? [];\n                \n                if (!$videoId || !$userId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Video ID and User ID are required'\n                    ]);\n                    return;\n                }\n                \n                // Check if video exists\n                $stmt = $db->prepare(\"SELECT id, title, price, user_id as creator_id FROM videos WHERE id = ?\");\n                $stmt->execute([$videoId]);\n                $video = $stmt->fetch(PDO::FETCH_ASSOC);\n                \n                if (!$video) {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Video not found'\n                    ]);\n                    return;\n                }\n                \n                // Check if user already purchased this video\n                $stmt = $db->prepare(\"SELECT id FROM purchases WHERE video_id = ? AND user_id_new = ?\");\n                $stmt->execute([$videoId, $userId]);\n                $existingPurchase = $stmt->fetch();\n                \n                if ($existingPurchase) {\n                    http_response_code(409);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Video already purchased'\n                    ]);\n                    return;\n                }\n                \n                // Simulate payment processing\n                $paymentSuccess = processPayment($paymentMethod, $paymentDetails, $video['price']);\n                \n                if (!$paymentSuccess['success']) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Payment failed: ' . $paymentSuccess['message']\n                    ]);\n                    return;\n                }\n                \n                // Create purchase record\n                $stmt = $db->prepare(\"\n                    INSERT INTO purchases (video_id, user_id_new, amount, purchased_at) \n                    VALUES (?, ?, ?, NOW())\n                \");\n                \n                $stmt->execute([$videoId, $userId, $video['price']]);\n                $purchaseId = $db->lastInsertId();\n                \n                // Create earnings record for creator (if earnings table exists)\n                // Note: Creator earnings are calculated from purchases table \n                // No separate earnings table needed - all data is in purchases\n                \n                http_response_code(201);\n                echo json_encode([\n                    'success' => true,\n                    'message' => 'Purchase completed successfully',\n                    'data' => [\n                        'purchase_id' => $purchaseId,\n                        'video_title' => $video['title'],\n                        'amount' => $video['price'],\n                        'payment_method' => $paymentMethod\n                    ]\n                ]);\n                \n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'verify-payment') {\n                // Verify payment status by purchase ID\n                $purchaseId = $input['purchase_id'] ?? null;\n                \n                if (!$purchaseId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Purchase ID is required'\n                    ]);\n                    return;\n                }\n                \n                $stmt = $db->prepare(\"SELECT * FROM purchases WHERE id = ?\");\n                $stmt->execute([$purchaseId]);\n                $purchase = $stmt->fetch(PDO::FETCH_ASSOC);\n                \n                if (!$purchase) {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Purchase not found'\n                    ]);\n                    return;\n                }\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => [\n                        'amount' => $purchase['amount'],\n                        'purchase_date' => $purchase['purchased_at']\n                    ]\n                ]);\n                \n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Payment endpoint not found'\n                ]);\n            }\n            break;\n            \n        case 'GET':\n            if (isset($path_parts[2]) && $path_parts[2] === 'check-access') {\n                // Check if user has access to a video\n                $videoId = $_GET['video_id'] ?? null;\n                $userId = $_GET['user_id'] ?? null;\n                \n                if (!$videoId || !$userId) {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Video ID and User ID are required'\n                    ]);\n                    return;\n                }\n                \n                $stmt = $db->prepare(\"SELECT id FROM purchases WHERE video_id = ? AND user_id_new = ?\");\n                $stmt->execute([$videoId, $userId]);\n                $purchase = $stmt->fetch();\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'has_access' => !!$purchase,\n                    'message' => $purchase ? 'User has access to this video' : 'Purchase required to access video'\n                ]);\n                \n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Payment endpoint not found'\n                ]);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n\n/**\n * Simulate payment processing\n * In a real application, this would integrate with payment providers like Stripe, PayPal, etc.\n */\nfunction processPayment($method, $details, $amount) {\n    // Simulate different payment scenarios\n    if ($amount <= 0) {\n        return ['success' => false, 'message' => 'Invalid amount'];\n    }\n    \n    switch ($method) {\n        case 'card':\n            // Simulate card validation\n            if (empty($details['card_number']) || empty($details['expiry']) || empty($details['cvv'])) {\n                return ['success' => false, 'message' => 'Invalid card details'];\n            }\n            \n            // Simulate card processing (always success for demo)\n            return ['success' => true, 'message' => 'Card payment processed successfully'];\n            \n        case 'paypal':\n            // Simulate PayPal processing\n            if (empty($details['paypal_email'])) {\n                return ['success' => false, 'message' => 'PayPal email required'];\n            }\n            \n            return ['success' => true, 'message' => 'PayPal payment processed successfully'];\n            \n        case 'crypto':\n            // Simulate crypto payment\n            if (empty($details['wallet_address'])) {\n                return ['success' => false, 'message' => 'Wallet address required'];\n            }\n            \n            return ['success' => true, 'message' => 'Crypto payment processed successfully'];\n            \n        default:\n            return ['success' => false, 'message' => 'Unsupported payment method'];\n    }\n}\n?>","size_bytes":9221},"api/endpoints/profile.php":{"content":"<?php\n/**\n * Simplified Profile API Endpoint for VideoHub\n * Streamlined user profile management without complex logic\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Get request method\n$method = $_SERVER['REQUEST_METHOD'];\n\ntry {\n    switch ($method) {\n        case 'GET':\n            // Get user profile - simple approach\n            $userId = null;\n            \n            // Try multiple ways to get user ID\n            if (isset($_GET['user_id'])) {\n                $userId = $_GET['user_id'];\n            } elseif (isset($_POST['user_id'])) {\n                $userId = $_POST['user_id'];\n            } else {\n                // Try to get from session\n                session_start();\n                if (isset($_SESSION['user_id'])) {\n                    $userId = $_SESSION['user_id'];\n                }\n            }\n            \n            if (!$userId) {\n                http_response_code(401);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'User not authenticated'\n                ]);\n                break;\n            }\n            \n            // Simple query to get user data\n            $stmt = $db->prepare(\"SELECT id, name, email, role, created_at FROM users WHERE id = ?\");\n            $stmt->execute([$userId]);\n            $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n            \n            if ($userData) {\n                // Split name for form compatibility\n                $nameParts = explode(' ', $userData['name'], 2);\n                $firstName = $nameParts[0] ?? '';\n                $lastName = $nameParts[1] ?? '';\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => [\n                        'id' => $userData['id'],\n                        'firstName' => $firstName,\n                        'lastName' => $lastName,\n                        'name' => $userData['name'],\n                        'email' => $userData['email'],\n                        'role' => $userData['role'],\n                        'joinDate' => date('M d, Y', strtotime($userData['created_at']))\n                    ]\n                ]);\n            } else {\n                http_response_code(404);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'User not found'\n                ]);\n            }\n            break;\n            \n        case 'PUT':\n            // Update user profile - simple approach\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n            $userId = $data['user_id'] ?? $_GET['user_id'] ?? null;\n            \n            if (!$userId) {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'User ID required'\n                ]);\n                break;\n            }\n            \n            // Simple update query\n            $updateFields = [];\n            $params = [];\n            \n            if (isset($data['name'])) {\n                $updateFields[] = \"name = ?\";\n                $params[] = $data['name'];\n            }\n            \n            if (empty($updateFields)) {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'No fields to update'\n                ]);\n                break;\n            }\n            \n            $params[] = $userId;\n            $sql = \"UPDATE users SET \" . implode(', ', $updateFields) . \" WHERE id = ?\";\n            \n            $stmt = $db->prepare($sql);\n            if ($stmt->execute($params)) {\n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'message' => 'Profile updated successfully'\n                ]);\n            } else {\n                http_response_code(500);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Update failed'\n                ]);\n            }\n            break;\n            \n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n    \n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":4714},"api/endpoints/purchases.php":{"content":"<?php\n/**\n * Purchases API Endpoints for VideoHub\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/Purchase.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Initialize purchase object\n$purchase = new Purchase($db);\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'GET':\n            if (isset($path_parts[2]) && is_numeric($path_parts[2])) {\n                // Get specific purchase\n                $purchase->id = $path_parts[2];\n                if ($purchase->readOne()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'data' => [\n                            'id' => $purchase->id,\n                            'viewer_id' => $purchase->viewer_id,\n                            'video_id' => $purchase->video_id,\n                            'amount' => $purchase->amount,\n                            'payment_method' => $purchase->payment_method,\n                            'transaction_id' => $purchase->transaction_id,\n                            'status' => $purchase->status,\n                            'purchase_date' => $purchase->purchase_date\n                        ]\n                    ]);\n                } else {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Purchase not found'\n                    ]);\n                }\n            } else {\n                // Get all purchases with filters\n                $userId = $_GET['user_id'] ?? null;\n                \n                // Build SQL query with filters\n                $sql = \"SELECT p.*, v.title as video_title, v.thumbnail, v.price as video_price, \n                               v.description, u.name as creator_name\n                        FROM purchases p \n                        LEFT JOIN videos v ON p.video_id = v.id \n                        LEFT JOIN users u ON v.user_id = u.id\n                        WHERE 1=1\";\n                $params = [];\n                \n                if ($userId) {\n                    $sql .= \" AND p.user_id_new = ?\";\n                    $params[] = $userId;\n                }\n                \n                if (isset($_GET['video_id'])) {\n                    $sql .= \" AND p.video_id = ?\";\n                    $params[] = $_GET['video_id'];\n                }\n                \n                if (isset($_GET['status'])) {\n                    $sql .= \" AND p.status = ?\";\n                    $params[] = $_GET['status'];\n                }\n                \n                $sql .= \" ORDER BY p.purchase_date DESC\";\n                \n                if (isset($_GET['limit'])) {\n                    $sql .= \" LIMIT ?\";\n                    $params[] = (int)$_GET['limit'];\n                }\n                \n                $stmt = $db->prepare($sql);\n                $stmt->execute($params);\n                $purchases = $stmt->fetchAll(PDO::FETCH_ASSOC);\n                \n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => $purchases,\n                    'purchases' => $purchases\n                ]);\n            }\n            break;\n\n        case 'POST':\n            // Create new purchase\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n            \n            if (!empty($data['viewer_id']) && !empty($data['video_id']) && !empty($data['amount'])) {\n                $purchase->viewer_id = $data['viewer_id'];\n                $purchase->video_id = $data['video_id'];\n                $purchase->amount = $data['amount'];\n                $purchase->payment_method = $data['payment_method'] ?? 'card';\n                $purchase->transaction_id = $data['transaction_id'] ?? uniqid('txn_');\n                $purchase->status = $data['status'] ?? 'completed';\n                \n                if ($purchase->create()) {\n                    http_response_code(201);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Purchase created successfully',\n                        'data' => [\n                            'id' => $purchase->id,\n                            'transaction_id' => $purchase->transaction_id\n                        ]\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to create purchase'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Missing required fields: viewer_id, video_id, amount'\n                ]);\n            }\n            break;\n\n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":5609},"api/endpoints/users.php":{"content":"<?php\n/**\n * Users API Endpoints for VideoHub\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/User.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Initialize user object\n$user = new User($db);\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'GET':\n            if (isset($path_parts[2]) && $path_parts[2] === 'profile') {\n                // Get user profile - Get from session or token\n                $headers = getallheaders();\n                $token = null;\n                \n                if (isset($headers['Authorization'])) {\n                    $token = str_replace('Bearer ', '', $headers['Authorization']);\n                }\n                \n                // Get user ID from session data or token\n                $userId = null;\n                \n                // Try to get user ID from session first\n                session_start();\n                if (isset($_SESSION['user_id'])) {\n                    $userId = $_SESSION['user_id'];\n                } else {\n                    // Try to get from request headers or POST data\n                    $input = json_decode(file_get_contents(\"php://input\"), true);\n                    if (isset($input['user_id'])) {\n                        $userId = $input['user_id'];\n                    } elseif (isset($_GET['user_id'])) {\n                        $userId = $_GET['user_id'];\n                    }\n                }\n                \n                // If still no user ID, return error\n                if (!$userId) {\n                    http_response_code(401);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User not authenticated'\n                    ]);\n                    break;\n                }\n                \n                // Get user from database\n                $stmt = $db->prepare(\"SELECT id, name, email, role, created_at FROM users WHERE id = ?\");\n                $stmt->execute([$userId]);\n                $userData = $stmt->fetch(PDO::FETCH_ASSOC);\n                \n                if ($userData) {\n                    // Split name into first and last name for profile form\n                    $nameParts = explode(' ', $userData['name'], 2);\n                    $firstName = $nameParts[0] ?? '';\n                    $lastName = $nameParts[1] ?? '';\n                    \n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'data' => [\n                            'id' => $userData['id'],\n                            'firstName' => $firstName,\n                            'lastName' => $lastName,\n                            'name' => $userData['name'],\n                            'email' => $userData['email'],\n                            'role' => $userData['role'],\n                            'status' => 'active',\n                            'joinDate' => date('M d, Y', strtotime($userData['created_at']))\n                        ]\n                    ]);\n                } else {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User not found'\n                    ]);\n                }\n            } elseif (isset($path_parts[2]) && is_numeric($path_parts[2])) {\n                // Get specific user\n                $user->id = $path_parts[2];\n                if ($user->readOne()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'data' => [\n                            'id' => $user->id,\n                            'name' => $user->name,\n                            'email' => $user->email,\n                            'role' => $user->role,\n                            'status' => $user->status,\n                            'created_at' => $user->created_at,\n                            'updated_at' => $user->updated_at\n                        ]\n                    ]);\n                } else {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User not found'\n                    ]);\n                }\n            } else {\n                // Get all users with filters\n                $filters = [];\n                \n                if (isset($_GET['role'])) {\n                    $filters['role'] = $_GET['role'];\n                }\n                \n                if (isset($_GET['status'])) {\n                    $filters['status'] = $_GET['status'];\n                }\n                \n                if (isset($_GET['search'])) {\n                    $filters['search'] = $_GET['search'];\n                }\n                \n                if (isset($_GET['limit'])) {\n                    $filters['limit'] = (int)$_GET['limit'];\n                }\n                \n                if (isset($_GET['offset'])) {\n                    $filters['offset'] = (int)$_GET['offset'];\n                }\n\n                // Get all users from database directly\n                try {\n                    $query = \"SELECT * FROM users ORDER BY id ASC\";\n                    $stmt = $db->prepare($query);\n                    $stmt->execute();\n                    $users = $stmt->fetchAll(PDO::FETCH_ASSOC);\n                    \n                    // Format users data to match frontend expectations\n                    $formattedUsers = [];\n                    foreach ($users as $userData) {\n                        $formattedUsers[] = [\n                            'id' => (int)$userData['id'],\n                            'firstName' => $userData['name'] ?? 'Unknown',\n                            'lastName' => '', // Not available in current schema\n                            'email' => $userData['email'] ?? 'unknown@example.com',\n                            'role' => $userData['role'] ?? 'viewer',\n                            'status' => $userData['email_verified'] ? 'active' : 'pending',\n                            'joinDate' => date('Y-m-d', strtotime($userData['created_at'] ?? 'now')),\n                            'profileImage' => 'https://via.placeholder.com/40x40/6c757d/ffffff?text=U'\n                        ];\n                    }\n\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'users' => $formattedUsers\n                    ]);\n                } catch (Exception $e) {\n                    http_response_code(500);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Server error: ' . $e->getMessage()\n                    ]);\n                }\n            }\n            break;\n\n        case 'POST':\n            // Create new user\n            $data = json_decode(file_get_contents(\"php://input\"), true);\n            \n            if (!empty($data['name']) && !empty($data['email']) && !empty($data['role'])) {\n                $user->name = $data['name'];\n                $user->email = $data['email'];\n                $user->role = $data['role'];\n                $user->status = isset($data['status']) ? $data['status'] : 'active';\n                \n                if ($user->create()) {\n                    http_response_code(201);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'User created successfully',\n                        'data' => [\n                            'id' => $user->id,\n                            'name' => $user->name,\n                            'email' => $user->email,\n                            'role' => $user->role,\n                            'status' => $user->status\n                        ]\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to create user'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Missing required fields: name, email, role'\n                ]);\n            }\n            break;\n\n        case 'PUT':\n            // Update user\n            if (isset($path_parts[2]) && is_numeric($path_parts[2])) {\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n                \n                $user->id = $path_parts[2];\n                \n                // Check if user exists first\n                if (!$user->readOne()) {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'User not found'\n                    ]);\n                    break;\n                }\n                \n                // Allow partial updates - only update provided fields\n                if (isset($data['name'])) $user->name = $data['name'];\n                if (isset($data['email'])) $user->email = $data['email'];\n                if (isset($data['role'])) $user->role = $data['role'];\n                if (isset($data['status'])) $user->status = $data['status'];\n                \n                // Special handling for revoke action\n                if (isset($data['status']) && $data['status'] === 'revoked') {\n                    // Log revoke action\n                    error_log(\"User {$user->id} access revoked by admin\");\n                }\n                \n                if ($user->update()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'User updated successfully',\n                        'data' => [\n                            'id' => $user->id,\n                            'name' => $user->name,\n                            'email' => $user->email,\n                            'role' => $user->role,\n                            'status' => $user->status\n                        ]\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to update user'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'User ID is required'\n                ]);\n            }\n            break;\n\n        case 'DELETE':\n            // Delete user\n            if (isset($path_parts[2]) && is_numeric($path_parts[2])) {\n                $user->id = $path_parts[2];\n                \n                if ($user->delete()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'User deleted successfully'\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to delete user'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'User ID is required'\n                ]);\n            }\n            break;\n\n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":12445},"api/endpoints/videos.php":{"content":"<?php\n/**\n * Videos API Endpoints for VideoHub\n */\n\nrequire_once __DIR__ . '/../config/cors.php';\nrequire_once __DIR__ . '/../config/database.php';\nrequire_once __DIR__ . '/../models/Video.php';\n\n// Get database connection\n$database = new Database();\n$db = $database->getConnection();\n\n// Initialize video object\n$video = new Video($db);\n\n// Get request method and path\n$method = $_SERVER['REQUEST_METHOD'];\n$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n$path_parts = explode('/', trim($path, '/'));\n\ntry {\n    switch ($method) {\n        case 'GET':\n            if (isset($path_parts[2]) && is_numeric($path_parts[2])) {\n                // Get specific video\n                $video->id = $path_parts[2];\n                if ($video->readOne()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'data' => [\n                            'id' => $video->id,\n                            'title' => $video->title,\n                            'description' => $video->description,\n                            'creator_id' => $video->creator_id,\n                            'creator_name' => $video->creator_name,\n                            'price' => $video->price,\n                            'category' => $video->category,\n                            'duration' => $video->duration,\n                            'upload_date' => $video->upload_date,\n                            'views' => $video->views,\n                            'likes' => $video->likes,\n                            'status' => $video->status,\n                            'thumbnail' => $video->thumbnail,\n                            'earnings' => $video->earnings,\n                            'tags' => $video->tags,\n                            'file_size' => $video->file_size,\n                            'quality' => $video->quality\n                        ]\n                    ]);\n                } else {\n                    http_response_code(404);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Video not found'\n                    ]);\n                }\n            } else {\n                // Get all videos with filters\n                $filters = [];\n                \n                if (isset($_GET['uploader_id'])) {\n                    $filters['uploader_id'] = $_GET['uploader_id'];\n                }\n                \n                if (isset($_GET['category'])) {\n                    $filters['category'] = $_GET['category'];\n                }\n                \n\n                \n                if (isset($_GET['search'])) {\n                    $filters['search'] = $_GET['search'];\n                }\n                \n                if (isset($_GET['limit'])) {\n                    $filters['limit'] = (int)$_GET['limit'];\n                }\n                \n                if (isset($_GET['offset'])) {\n                    $filters['offset'] = (int)$_GET['offset'];\n                }\n\n                $stmt = $video->read($filters);\n                $videos = $stmt->fetchAll(PDO::FETCH_ASSOC);\n                \n                // Format videos data to match existing database structure\n                $formattedVideos = [];\n                foreach ($videos as $videoData) {\n                    $formattedVideos[] = [\n                        'id' => (int)$videoData['id'],\n                        'title' => $videoData['title'],\n                        'description' => $videoData['description'],\n                        'creatorId' => (int)($videoData['uploader_id'] ?? 0),\n                        'creatorName' => $videoData['youtube_channel_title'] ?? 'Unknown Creator',\n                        'price' => (float)$videoData['price'],\n                        'category' => $videoData['category'],\n                        'duration' => '00:00', // Not available in current DB\n                        'uploadDate' => date('Y-m-d', strtotime($videoData['created_at'])),\n                        'views' => (int)$videoData['views'],\n                        'likes' => (int)($videoData['youtube_likes'] ?? 0),\n                        'status' => 'published', // Default status\n                        'thumbnail' => $videoData['youtube_thumbnail'] ?? 'https://via.placeholder.com/300x169/4f46e5/ffffff?text=Video',\n                        'earnings' => 0, // Calculate separately if needed\n                        'tags' => [], // Not available in current DB structure\n                        'fileSize' => 'N/A',\n                        'quality' => '720p'\n                    ];\n                }\n\n                http_response_code(200);\n                echo json_encode([\n                    'success' => true,\n                    'data' => ['videos' => $formattedVideos]\n                ]);\n            }\n            break;\n\n        case 'POST':\n            if (isset($path_parts[2]) && $path_parts[2] === 'view' && isset($path_parts[3])) {\n                // Increment view count\n                $video->id = $path_parts[3];\n                if ($video->incrementViews()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'View count updated'\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to update view count'\n                    ]);\n                }\n            } elseif (isset($path_parts[2]) && $path_parts[2] === 'like' && isset($path_parts[3])) {\n                // Increment like count\n                $video->id = $path_parts[3];\n                if ($video->incrementLikes()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Like count updated'\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to update like count'\n                    ]);\n                }\n            } else {\n                // Create new video\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n                \n                if (!empty($data['title']) && !empty($data['uploader_id'])) {\n                    $video->title = $data['title'];\n                    $video->description = $data['description'] ?? '';\n                    $video->user_id = $data['uploader_id'];\n                    $video->price = $data['price'] ?? 0;\n                    $video->category = $data['category'] ?? '';\n                    // $video->duration = $data['duration'] ?? '00:00';\n                    $video->thumbnail = $data['thumbnail'] ?? '';\n                    // $video->tags = is_array($data['tags']) ? json_encode($data['tags']) : $data['tags'];\n                    // $video->file_size = $data['file_size'] ?? '';\n                    // $video->quality = $data['quality'] ?? '720p';\n                    $video->status = $data['status'] ?? 'pending';\n                    \n                    if ($video->create()) {\n                        http_response_code(201);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Video created successfully',\n                            'data' => [\n                                'id' => $video->id\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(400);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Unable to create video'\n                        ]);\n                    }\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Missing required fields: title, creator_id'\n                    ]);\n                }\n            }\n            break;\n\n        case 'PUT':\n            // Update video\n            if (isset($path_parts[2]) && is_numeric($path_parts[2])) {\n                $data = json_decode(file_get_contents(\"php://input\"), true);\n                \n                $video->id = $path_parts[2];\n                \n                if (!empty($data['title'])) {\n                    $video->title = $data['title'];\n                    $video->description = $data['description'] ?? '';\n                    $video->price = $data['price'] ?? 0;\n                    $video->category = $data['category'] ?? '';\n                    $video->thumbnail = $data['thumbnail'] ?? '';\n                    $video->status = $data['status'] ?? 'published';\n                    \n                    if ($video->update()) {\n                        // Get the video data to check if it has a YouTube ID\n                        $video->readOne();\n                        $youtubeId = $video->youtube_id ?? null;\n                        \n                        http_response_code(200);\n                        echo json_encode([\n                            'success' => true,\n                            'message' => 'Video updated successfully',\n                            'data' => [\n                                'id' => $video->id,\n                                'youtube_id' => $youtubeId,\n                                'title' => $video->title,\n                                'description' => $video->description\n                            ]\n                        ]);\n                    } else {\n                        http_response_code(400);\n                        echo json_encode([\n                            'success' => false,\n                            'message' => 'Unable to update video'\n                        ]);\n                    }\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Missing required field: title'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Video ID is required'\n                ]);\n            }\n            break;\n\n        case 'DELETE':\n            // Delete video\n            if (isset($path_parts[2]) && is_numeric($path_parts[2])) {\n                $video->id = $path_parts[2];\n                \n                if ($video->delete()) {\n                    http_response_code(200);\n                    echo json_encode([\n                        'success' => true,\n                        'message' => 'Video deleted successfully'\n                    ]);\n                } else {\n                    http_response_code(400);\n                    echo json_encode([\n                        'success' => false,\n                        'message' => 'Unable to delete video'\n                    ]);\n                }\n            } else {\n                http_response_code(400);\n                echo json_encode([\n                    'success' => false,\n                    'message' => 'Video ID is required'\n                ]);\n            }\n            break;\n\n        default:\n            http_response_code(405);\n            echo json_encode([\n                'success' => false,\n                'message' => 'Method not allowed'\n            ]);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode([\n        'success' => false,\n        'message' => 'Server error: ' . $e->getMessage()\n    ]);\n}\n?>","size_bytes":11976},"api/models/EmailVerification.php":{"content":"<?php\n/**\n * Email Verification Model for VideoHub\n */\n\nclass EmailVerification {\n    private $conn;\n    private $table_name = \"email_verification_tokens\";\n    \n    public $id;\n    public $user_id;\n    public $email;\n    public $token;\n    public $expires_at;\n    public $verified_at;\n    public $created_at;\n    \n    public function __construct($db) {\n        $this->conn = $db;\n        $this->createTableIfNotExists();\n    }\n    \n    /**\n     * Create email verification tokens table if it doesn't exist\n     */\n    private function createTableIfNotExists() {\n        $query = \"\n            CREATE TABLE IF NOT EXISTS \" . $this->table_name . \" (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                user_id INT NOT NULL,\n                email VARCHAR(255) NOT NULL,\n                token VARCHAR(255) NOT NULL UNIQUE,\n                expires_at DATETIME NOT NULL,\n                verified_at DATETIME NULL,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n                INDEX idx_token (token),\n                INDEX idx_user_id (user_id),\n                INDEX idx_expires_at (expires_at)\n            )\n        \";\n        \n        try {\n            $this->conn->exec($query);\n        } catch (PDOException $e) {\n            error_log(\"Error creating email verification table: \" . $e->getMessage());\n        }\n    }\n    \n    /**\n     * Create verification token\n     */\n    public function createToken($user_id, $email) {\n        // Delete any existing tokens for this user\n        $this->deleteUserTokens($user_id);\n        \n        // Generate new token\n        $token = bin2hex(random_bytes(32));\n        \n        // Set expiry (24 hours from now)\n        $expires_at = date('Y-m-d H:i:s', strtotime('+24 hours'));\n        \n        $query = \"\n            INSERT INTO \" . $this->table_name . \" \n            (user_id, email, token, expires_at) \n            VALUES (?, ?, ?, ?)\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        \n        if ($stmt->execute([$user_id, $email, $token, $expires_at])) {\n            $this->id = $this->conn->lastInsertId();\n            $this->user_id = $user_id;\n            $this->email = $email;\n            $this->token = $token;\n            $this->expires_at = $expires_at;\n            return $token;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Verify token\n     */\n    public function verifyToken($token) {\n        // First check our new email_verification_tokens table\n        $query = \"\n            SELECT * FROM \" . $this->table_name . \" \n            WHERE token = ? AND expires_at > NOW() AND verified_at IS NULL\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->execute([$token]);\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($row) {\n            // Mark token as verified\n            $updateQuery = \"\n                UPDATE \" . $this->table_name . \" \n                SET verified_at = NOW() \n                WHERE id = ?\n            \";\n            \n            $updateStmt = $this->conn->prepare($updateQuery);\n            $updateStmt->execute([$row['id']]);\n            \n            // Update user email verification status\n            $userUpdateQuery = \"\n                UPDATE users \n                SET email_verified_at = NOW() \n                WHERE id = ?\n            \";\n            \n            $userUpdateStmt = $this->conn->prepare($userUpdateQuery);\n            $userUpdateStmt->execute([$row['user_id']]);\n            \n            return [\n                'user_id' => $row['user_id'],\n                'email' => $row['email']\n            ];\n        }\n        \n        // Fallback: Check old users table verification_token for backward compatibility\n        $legacyQuery = \"\n            SELECT id, email, verification_token \n            FROM users \n            WHERE verification_token = ? AND email_verified_at IS NULL\n        \";\n        \n        $legacyStmt = $this->conn->prepare($legacyQuery);\n        $legacyStmt->execute([$token]);\n        $legacyRow = $legacyStmt->fetch(PDO::FETCH_ASSOC);\n        \n        if ($legacyRow) {\n            // Update user email verification status\n            $userUpdateQuery = \"\n                UPDATE users \n                SET email_verified_at = NOW(), verification_token = NULL \n                WHERE id = ?\n            \";\n            \n            $userUpdateStmt = $this->conn->prepare($userUpdateQuery);\n            $userUpdateStmt->execute([$legacyRow['id']]);\n            \n            return [\n                'user_id' => $legacyRow['id'],\n                'email' => $legacyRow['email']\n            ];\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Get token details\n     */\n    public function getToken($token) {\n        $query = \"\n            SELECT * FROM \" . $this->table_name . \" \n            WHERE token = ?\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->execute([$token]);\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n    \n    /**\n     * Delete user tokens\n     */\n    public function deleteUserTokens($user_id) {\n        $query = \"DELETE FROM \" . $this->table_name . \" WHERE user_id = ?\";\n        $stmt = $this->conn->prepare($query);\n        return $stmt->execute([$user_id]);\n    }\n    \n    /**\n     * Delete expired tokens\n     */\n    public function deleteExpiredTokens() {\n        $query = \"DELETE FROM \" . $this->table_name . \" WHERE expires_at < NOW()\";\n        $stmt = $this->conn->prepare($query);\n        return $stmt->execute();\n    }\n    \n    /**\n     * Check if user has verified email\n     */\n    public function isEmailVerified($user_id) {\n        $query = \"\n            SELECT email_verified_at FROM users \n            WHERE id = ?\n        \";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->execute([$user_id]);\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return $row && $row['email_verified_at'] !== null;\n    }\n}\n?>","size_bytes":6057},"api/models/Purchase.php":{"content":"<?php\n/**\n * Purchase Model for VideoHub\n */\n\nclass Purchase {\n    private $conn;\n    private $table_name = \"purchases\";\n\n    public $id;\n    public $viewer_id;\n    public $video_id;\n    public $amount;\n    public $payment_method;\n    public $transaction_id;\n    public $status;\n    public $purchase_date;\n    public $created_at;\n    public $updated_at;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Get all purchases with optional filters\n    public function read($filters = []) {\n        $query = \"SELECT p.*, v.title as video_title, v.youtube_thumbnail as thumbnail, u.name as viewer_name\n                  FROM \" . $this->table_name . \" p\n                  LEFT JOIN videos v ON p.video_id = v.id\n                  LEFT JOIN users u ON p.user_id = u.id\";\n        \n        $conditions = [];\n        $params = [];\n\n        if (isset($filters['user_id']) && !empty($filters['user_id'])) {\n            $conditions[] = \"p.user_id = :user_id\";\n            $params[':user_id'] = $filters['user_id'];\n        }\n\n        if (isset($filters['video_id']) && !empty($filters['video_id'])) {\n            $conditions[] = \"p.video_id = :video_id\";\n            $params[':video_id'] = $filters['video_id'];\n        }\n\n        if (isset($filters['status']) && !empty($filters['status'])) {\n            $conditions[] = \"p.status = :status\";\n            $params[':status'] = $filters['status'];\n        }\n\n        if (!empty($conditions)) {\n            $query .= \" WHERE \" . implode(\" AND \", $conditions);\n        }\n\n        $query .= \" ORDER BY p.purchase_date DESC\";\n\n        // Add pagination\n        if (isset($filters['limit'])) {\n            $offset = isset($filters['offset']) ? $filters['offset'] : 0;\n            $query .= \" LIMIT :offset, :limit\";\n            $params[':offset'] = $offset;\n            $params[':limit'] = $filters['limit'];\n        }\n\n        $stmt = $this->conn->prepare($query);\n        \n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value, is_int($value) ? PDO::PARAM_INT : PDO::PARAM_STR);\n        }\n        \n        $stmt->execute();\n        return $stmt;\n    }\n\n    // Get single purchase by ID\n    public function readOne() {\n        $query = \"SELECT p.*, v.title as video_title, v.youtube_thumbnail as thumbnail, u.name as viewer_name\n                  FROM \" . $this->table_name . \" p\n                  LEFT JOIN videos v ON p.video_id = v.id\n                  LEFT JOIN users u ON p.user_id = u.id\n                  WHERE p.id = ? LIMIT 0,1\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(1, $this->id);\n        $stmt->execute();\n\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($row) {\n            $this->viewer_id = $row['viewer_id'];\n            $this->video_id = $row['video_id'];\n            $this->amount = $row['amount'];\n            $this->payment_method = $row['payment_method'];\n            $this->transaction_id = $row['transaction_id'];\n            $this->status = $row['status'];\n            $this->purchase_date = $row['purchase_date'];\n            $this->created_at = $row['created_at'];\n            $this->updated_at = $row['updated_at'];\n            return true;\n        }\n\n        return false;\n    }\n\n    // Create purchase\n    public function create() {\n        $query = \"INSERT INTO \" . $this->table_name . \" \n                  SET viewer_id=:viewer_id, video_id=:video_id, amount=:amount, \n                      payment_method=:payment_method, transaction_id=:transaction_id, \n                      status=:status, purchase_date=NOW(), created_at=NOW(), updated_at=NOW()\";\n\n        $stmt = $this->conn->prepare($query);\n\n        // Sanitize\n        $this->viewer_id = htmlspecialchars(strip_tags($this->viewer_id));\n        $this->video_id = htmlspecialchars(strip_tags($this->video_id));\n        $this->amount = htmlspecialchars(strip_tags($this->amount));\n        $this->payment_method = htmlspecialchars(strip_tags($this->payment_method));\n        $this->transaction_id = htmlspecialchars(strip_tags($this->transaction_id));\n        $this->status = htmlspecialchars(strip_tags($this->status));\n\n        // Bind values\n        $stmt->bindParam(\":viewer_id\", $this->viewer_id);\n        $stmt->bindParam(\":video_id\", $this->video_id);\n        $stmt->bindParam(\":amount\", $this->amount);\n        $stmt->bindParam(\":payment_method\", $this->payment_method);\n        $stmt->bindParam(\":transaction_id\", $this->transaction_id);\n        $stmt->bindParam(\":status\", $this->status);\n\n        if ($stmt->execute()) {\n            $this->id = $this->conn->lastInsertId();\n            return true;\n        }\n\n        return false;\n    }\n\n    // Check if user has purchased a video\n    public function hasPurchased($viewer_id, $video_id) {\n        $query = \"SELECT id FROM \" . $this->table_name . \" \n                  WHERE viewer_id = :viewer_id AND video_id = :video_id AND status = 'completed' \n                  LIMIT 1\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(\":viewer_id\", $viewer_id);\n        $stmt->bindParam(\":video_id\", $video_id);\n        $stmt->execute();\n\n        return $stmt->fetch(PDO::FETCH_ASSOC) !== false;\n    }\n\n    // Get total earnings for a creator\n    public function getCreatorEarnings($creator_id) {\n        $query = \"SELECT COALESCE(SUM(p.amount), 0) as total_earnings\n                  FROM \" . $this->table_name . \" p\n                  JOIN videos v ON p.video_id = v.id\n                  WHERE v.user_id = :creator_id\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(\":creator_id\", $creator_id);\n        $stmt->execute();\n\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        return $row['total_earnings'];\n    }\n}\n?>","size_bytes":5771},"api/models/User.php":{"content":"<?php\n/**\n * User Model for VideoHub\n */\n\nclass User {\n    private $conn;\n    private $table_name = \"users\";\n\n    public $id;\n    public $name;\n    public $email;\n    public $role;\n    public $status;\n    public $email_verified_at;\n    public $created_at;\n    public $updated_at;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Get all users with optional filters\n    public function read($filters = []) {\n        $this->createEmailVerifiedColumnIfNotExists();\n        $query = \"SELECT id, name, email, role, status, email_verified_at, created_at, updated_at FROM \" . $this->table_name;\n        $conditions = [];\n        $params = [];\n\n        if (isset($filters['role']) && !empty($filters['role'])) {\n            $conditions[] = \"role = :role\";\n            $params[':role'] = $filters['role'];\n        }\n\n        if (isset($filters['status']) && !empty($filters['status'])) {\n            $conditions[] = \"status = :status\";\n            $params[':status'] = $filters['status'];\n        }\n\n        if (isset($filters['search']) && !empty($filters['search'])) {\n            $conditions[] = \"(name LIKE :search OR email LIKE :search)\";\n            $params[':search'] = '%' . $filters['search'] . '%';\n        }\n\n        if (!empty($conditions)) {\n            $query .= \" WHERE \" . implode(\" AND \", $conditions);\n        }\n\n        $query .= \" ORDER BY created_at DESC\";\n\n        // Add pagination\n        if (isset($filters['limit'])) {\n            $offset = isset($filters['offset']) ? $filters['offset'] : 0;\n            $query .= \" LIMIT :offset, :limit\";\n            $params[':offset'] = $offset;\n            $params[':limit'] = $filters['limit'];\n        }\n\n        $stmt = $this->conn->prepare($query);\n        \n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value, is_int($value) ? PDO::PARAM_INT : PDO::PARAM_STR);\n        }\n        \n        $stmt->execute();\n        return $stmt;\n    }\n\n    // Get single user by ID\n    public function readOne() {\n        $this->createEmailVerifiedColumnIfNotExists();\n        $query = \"SELECT id, name, email, role, status, email_verified_at, created_at, updated_at FROM \" . $this->table_name . \" WHERE id = ? LIMIT 0,1\";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(1, $this->id);\n        $stmt->execute();\n\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($row) {\n            $this->name = $row['name'];\n            $this->email = $row['email'];\n            $this->role = $row['role'];\n            $this->status = $row['status'];\n            $this->email_verified_at = $row['email_verified_at'];\n            $this->created_at = $row['created_at'];\n            $this->updated_at = $row['updated_at'];\n            return true;\n        }\n\n        return false;\n    }\n\n    // Create user\n    public function create() {\n        // Ensure status column exists\n        $this->createStatusColumnIfNotExists();\n        \n        $query = \"INSERT INTO \" . $this->table_name . \" SET name=:name, email=:email, role=:role, status=:status, password=:password, created_at=NOW(), updated_at=NOW()\";\n\n        $stmt = $this->conn->prepare($query);\n\n        // Sanitize\n        $this->name = htmlspecialchars(strip_tags($this->name));\n        $this->email = htmlspecialchars(strip_tags($this->email));\n        $this->role = htmlspecialchars(strip_tags($this->role));\n        $this->status = htmlspecialchars(strip_tags($this->status ?? 'active'));\n        \n        // Generate random password for admin-created users\n        $randomPassword = password_hash(bin2hex(random_bytes(16)), PASSWORD_DEFAULT);\n\n        // Bind values\n        $stmt->bindParam(\":name\", $this->name);\n        $stmt->bindParam(\":email\", $this->email);\n        $stmt->bindParam(\":role\", $this->role);\n        $stmt->bindParam(\":status\", $this->status);\n        $stmt->bindParam(\":password\", $randomPassword);\n\n        if ($stmt->execute()) {\n            $this->id = $this->conn->lastInsertId();\n            return true;\n        }\n\n        return false;\n    }\n\n    // Update user\n    public function update() {\n        // First check if status column exists, if not create it\n        $this->createStatusColumnIfNotExists();\n        \n        $query = \"UPDATE \" . $this->table_name . \" SET name=:name, email=:email, role=:role, status=:status, updated_at=NOW() WHERE id=:id\";\n\n        $stmt = $this->conn->prepare($query);\n\n        // Sanitize\n        $this->name = htmlspecialchars(strip_tags($this->name));\n        $this->email = htmlspecialchars(strip_tags($this->email));\n        $this->role = htmlspecialchars(strip_tags($this->role));\n        $this->status = htmlspecialchars(strip_tags($this->status));\n        $this->id = htmlspecialchars(strip_tags($this->id));\n\n        // Bind values\n        $stmt->bindParam(\":name\", $this->name);\n        $stmt->bindParam(\":email\", $this->email);\n        $stmt->bindParam(\":role\", $this->role);\n        $stmt->bindParam(\":status\", $this->status);\n        $stmt->bindParam(\":id\", $this->id);\n\n        if ($stmt->execute()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Delete user\n    public function delete() {\n        $query = \"DELETE FROM \" . $this->table_name . \" WHERE id = ?\";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(1, $this->id);\n\n        if ($stmt->execute()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Get total count for pagination\n    public function count($filters = []) {\n        $query = \"SELECT COUNT(*) as total FROM \" . $this->table_name;\n        $conditions = [];\n        $params = [];\n\n        if (isset($filters['role']) && !empty($filters['role'])) {\n            $conditions[] = \"role = :role\";\n            $params[':role'] = $filters['role'];\n        }\n\n        if (isset($filters['status']) && !empty($filters['status'])) {\n            $conditions[] = \"status = :status\";\n            $params[':status'] = $filters['status'];\n        }\n\n        if (isset($filters['search']) && !empty($filters['search'])) {\n            $conditions[] = \"(name LIKE :search OR email LIKE :search)\";\n            $params[':search'] = '%' . $filters['search'] . '%';\n        }\n\n        if (!empty($conditions)) {\n            $query .= \" WHERE \" . implode(\" AND \", $conditions);\n        }\n\n        $stmt = $this->conn->prepare($query);\n        \n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value);\n        }\n        \n        $stmt->execute();\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return $row['total'];\n    }\n    \n    /**\n     * Create email_verified_at column if it doesn't exist\n     */\n    public function createEmailVerifiedColumnIfNotExists() {\n        try {\n            // Check if column exists\n            $stmt = $this->conn->prepare(\"SHOW COLUMNS FROM \" . $this->table_name . \" LIKE 'email_verified_at'\");\n            $stmt->execute();\n            \n            if ($stmt->rowCount() === 0) {\n                // Column doesn't exist, create it\n                $alterQuery = \"ALTER TABLE \" . $this->table_name . \" ADD COLUMN email_verified_at DATETIME NULL\";\n                $this->conn->exec($alterQuery);\n                error_log(\"Added email_verified_at column to users table\");\n            }\n        } catch (PDOException $e) {\n            error_log(\"Error checking/creating email_verified_at column: \" . $e->getMessage());\n        }\n    }\n    \n    /**\n     * Check if user email is verified\n     */\n    public function isEmailVerified() {\n        return $this->email_verified_at !== null;\n    }\n    \n    /**\n     * Mark email as verified\n     */\n    public function markEmailVerified() {\n        $query = \"UPDATE \" . $this->table_name . \" SET email_verified_at = NOW() WHERE id = ?\";\n        $stmt = $this->conn->prepare($query);\n        \n        if ($stmt->execute([$this->id])) {\n            $this->email_verified_at = date('Y-m-d H:i:s');\n            return true;\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Create status column if it doesn't exist\n     */\n    public function createStatusColumnIfNotExists() {\n        try {\n            // Check if column exists\n            $stmt = $this->conn->prepare(\"SHOW COLUMNS FROM \" . $this->table_name . \" LIKE 'status'\");\n            $stmt->execute();\n            \n            if ($stmt->rowCount() === 0) {\n                // Column doesn't exist, create it\n                $alterQuery = \"ALTER TABLE \" . $this->table_name . \" ADD COLUMN status ENUM('active', 'inactive', 'suspended', 'revoked') DEFAULT 'active'\";\n                $this->conn->exec($alterQuery);\n                error_log(\"Added status column to users table\");\n            }\n        } catch (PDOException $e) {\n            error_log(\"Error checking/creating status column: \" . $e->getMessage());\n        }\n    }\n    \n    /**\n     * Check if user has revoked access\n     */\n    public function isRevoked() {\n        return $this->status === 'revoked';\n    }\n    \n    /**\n     * Revoke user access\n     */\n    public function revokeAccess() {\n        $this->status = 'revoked';\n        return $this->update();\n    }\n}\n?>","size_bytes":9168},"api/models/Video.php":{"content":"<?php\n/**\n * Video Model for VideoHub\n */\n\nclass Video {\n    private $conn;\n    private $table_name = \"videos\";\n\n    public $id;\n    public $title;\n    public $description;\n    public $user_id;\n    public $uploader_name;\n    public $price;\n    public $category;\n    public $file_path;\n    public $youtube_id;\n    public $youtube_thumbnail;\n    public $is_youtube_synced;\n    public $youtube_channel_id;\n    public $youtube_channel_title;\n    public $youtube_views;\n    public $youtube_likes;\n    public $youtube_comments;\n    public $views;\n    public $likes;\n    public $status;\n    public $thumbnail;\n    public $earnings;\n    public $tags;\n    public $file_size;\n    public $quality;\n    public $created_at;\n    public $updated_at;\n\n    public function __construct($db) {\n        $this->conn = $db;\n    }\n\n    // Get all videos with optional filters\n    public function read($filters = []) {\n        $query = \"SELECT * FROM \" . $this->table_name;\n        \n        $conditions = [];\n        $params = [];\n\n        if (isset($filters['uploader_id']) && !empty($filters['uploader_id'])) {\n            $conditions[] = \"user_id = :uploader_id\";\n            $params[':uploader_id'] = $filters['uploader_id'];\n        }\n\n        if (isset($filters['category']) && !empty($filters['category'])) {\n            $conditions[] = \"category = :category\";\n            $params[':category'] = $filters['category'];\n        }\n\n        if (isset($filters['search']) && !empty($filters['search'])) {\n            $conditions[] = \"(title LIKE :search OR description LIKE :search)\";\n            $params[':search'] = '%' . $filters['search'] . '%';\n        }\n\n        if (!empty($conditions)) {\n            $query .= \" WHERE \" . implode(\" AND \", $conditions);\n        }\n\n        $query .= \" ORDER BY created_at DESC\";\n\n        // Add pagination\n        if (isset($filters['limit'])) {\n            $offset = isset($filters['offset']) ? $filters['offset'] : 0;\n            $query .= \" LIMIT :offset, :limit\";\n            $params[':offset'] = $offset;\n            $params[':limit'] = $filters['limit'];\n        }\n\n        $stmt = $this->conn->prepare($query);\n        \n        foreach ($params as $key => $value) {\n            $stmt->bindValue($key, $value, is_int($value) ? PDO::PARAM_INT : PDO::PARAM_STR);\n        }\n        \n        $stmt->execute();\n        return $stmt;\n    }\n\n    // Get single video by ID\n    public function readOne() {\n        $query = \"SELECT * FROM \" . $this->table_name . \" WHERE id = ? LIMIT 0,1\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(1, $this->id);\n        $stmt->execute();\n\n        $row = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        if ($row) {\n            $this->title = $row['title'];\n            $this->description = $row['description'];\n            $this->creator_id = $row['user_id'];\n            $this->price = $row['price'];\n            $this->category = $row['category'];\n            $this->upload_date = $row['created_at'] ?? null;\n            $this->views = $row['views'];\n            $this->likes = $row['youtube_likes'] ?? null;\n            $this->status = $row['status'];\n            $this->thumbnail = $row['thumbnail'];\n            $this->earnings = null; // Not stored in this table\n            $this->tags = null; // Not stored in this table\n            $this->file_size = null; // Not stored in this table\n            $this->quality = null; // Not stored in this table\n            $this->created_at = $row['created_at'];\n            $this->updated_at = null; // Not stored in this table\n            $this->youtube_id = $row['youtube_id'] ?? null;\n            return true;\n        }\n\n        return false;\n    }\n\n    // Create video\n    public function create() {\n        $query = \"INSERT INTO \" . $this->table_name . \" \n                  SET title=:title, description=:description, user_id=:user_id, \n                      price=:price, category=:category,  \n                      thumbnail=:thumbnail, status=:status, upload_date=NOW(), \n                      created_at=NOW(), updated_at=NOW()\";\n\n        $stmt = $this->conn->prepare($query);\n\n        // Sanitize\n        $this->title = htmlspecialchars(strip_tags($this->title));\n        $this->description = htmlspecialchars(strip_tags($this->description));\n        $this->user_id = htmlspecialchars(strip_tags($this->user_id));\n        $this->price = htmlspecialchars(strip_tags($this->price));\n        $this->category = htmlspecialchars(strip_tags($this->category));\n        // $this->duration = htmlspecialchars(strip_tags($this->duration));\n        $this->thumbnail = htmlspecialchars(strip_tags($this->thumbnail));\n        // $this->tags = htmlspecialchars(strip_tags($this->tags));\n        // $this->file_size = htmlspecialchars(strip_tags($this->file_size));\n        // $this->quality = htmlspecialchars(strip_tags($this->quality));\n        $this->status = htmlspecialchars(strip_tags($this->status));\n\n        // Bind values\n        $stmt->bindParam(\":title\", $this->title);\n        $stmt->bindParam(\":description\", $this->description);\n        $stmt->bindParam(\":user_id\", $this->user_id);\n        $stmt->bindParam(\":price\", $this->price);\n        $stmt->bindParam(\":category\", $this->category);\n        // $stmt->bindParam(\":duration\", $this->duration);\n        $stmt->bindParam(\":thumbnail\", $this->thumbnail);\n        // $stmt->bindParam(\":tags\", $this->tags);\n        // $stmt->bindParam(\":file_size\", $this->file_size);\n        // $stmt->bindParam(\":quality\", $this->quality);\n        $stmt->bindParam(\":status\", $this->status);\n\n        if ($stmt->execute()) {\n            $this->id = $this->conn->lastInsertId();\n            return true;\n        }\n\n        return false;\n    }\n\n    // Update video\n    public function update() {\n        $query = \"UPDATE \" . $this->table_name . \" \n                  SET title=:title, description=:description, price=:price, \n                      category=:category, thumbnail=:thumbnail, status=:status\n                  WHERE id=:id\";\n\n        $stmt = $this->conn->prepare($query);\n\n        // Sanitize - only sanitize non-null values\n        $this->title = htmlspecialchars(strip_tags($this->title ?? ''));\n        $this->description = htmlspecialchars(strip_tags($this->description ?? ''));\n        $this->price = htmlspecialchars(strip_tags($this->price ?? ''));\n        $this->category = htmlspecialchars(strip_tags($this->category ?? ''));\n        $this->thumbnail = htmlspecialchars(strip_tags($this->thumbnail ?? ''));\n        $this->status = htmlspecialchars(strip_tags($this->status ?? ''));\n        $this->id = htmlspecialchars(strip_tags($this->id ?? ''));\n\n        // Bind values\n        $stmt->bindParam(\":title\", $this->title);\n        $stmt->bindParam(\":description\", $this->description);\n        $stmt->bindParam(\":price\", $this->price);\n        $stmt->bindParam(\":category\", $this->category);\n        $stmt->bindParam(\":thumbnail\", $this->thumbnail);\n        $stmt->bindParam(\":status\", $this->status);\n        $stmt->bindParam(\":id\", $this->id);\n\n        if ($stmt->execute()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Delete video\n    public function delete() {\n        $query = \"DELETE FROM \" . $this->table_name . \" WHERE id = ?\";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(1, $this->id);\n\n        if ($stmt->execute()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Get all videos with optional filters (alias for read method)\n    public function readAll($filters = []) {\n        $stmt = $this->read($filters);\n        $videos = [];\n        \n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $videos[] = $row;\n        }\n        \n        return $videos;\n    }\n    \n    // Get creator statistics\n    public function getCreatorStats($creatorId = null) {\n        if (!$creatorId) {\n            $creatorId = 1; // Default creator for demo\n        }\n        \n        $query = \"SELECT \n                    COUNT(*) as totalVideos,\n                    COALESCE(SUM(views), 0) as totalViews,\n                    COALESCE(SUM(youtube_likes), 0) as totalLikes,\n                    COALESCE(SUM(CAST(price AS DECIMAL(10,2))), 0) as totalEarnings\n                  FROM \" . $this->table_name . \" \n                  WHERE user_id = :creator_id\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(':user_id', $creatorId);\n        $stmt->execute();\n        \n        $stats = $stmt->fetch(PDO::FETCH_ASSOC);\n        \n        return [\n            'totalVideos' => (int)$stats['totalVideos'],\n            'totalViews' => (int)$stats['totalViews'],\n            'totalLikes' => (int)$stats['totalLikes'],\n            'totalEarnings' => (float)$stats['totalEarnings']\n        ];\n    }\n    \n    // Get creator earnings from purchases table\n    public function getCreatorEarnings($creatorId = null) {\n        if (!$creatorId) {\n            $creatorId = 1; // Default creator for demo\n        }\n        \n        $query = \"SELECT \n                    p.id,\n                    v.title as videoTitle,\n                    CAST(p.amount AS DECIMAL(10,2)) as amount,\n                    p.purchase_date as date,\n                    COALESCE(p.status, 'completed') as status,\n                    u.name as viewerName\n                  FROM purchases p\n                  JOIN videos v ON p.video_id = v.id\n                  LEFT JOIN users u ON p.user_id_new = u.id\n                  WHERE v.user_id = :creator_id\n                  ORDER BY p.purchase_date DESC\";\n        \n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(':creator_id', $creatorId);\n        $stmt->execute();\n        \n        $earnings = [];\n        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n            $earnings[] = [\n                'id' => $row['id'],\n                'creatorId' => $creatorId,\n                'amount' => (float)$row['amount'],\n                'date' => $row['date'],\n                'videoTitle' => $row['videoTitle'],\n                'viewerName' => $row['viewerName'] ?? 'Anonymous',\n                'status' => $row['status']\n            ];\n        }\n        \n        return $earnings;\n    }\n\n    // Update views count\n    public function incrementViews() {\n        $query = \"UPDATE \" . $this->table_name . \" SET views = views + 1 WHERE id = :id\";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(\":id\", $this->id);\n        return $stmt->execute();\n    }\n\n    // Update likes count\n    public function incrementLikes() {\n        $query = \"UPDATE \" . $this->table_name . \" SET likes = likes + 1 WHERE id = :id\";\n        $stmt = $this->conn->prepare($query);\n        $stmt->bindParam(\":id\", $this->id);\n        return $stmt->execute();\n    }\n}\n?>","size_bytes":10784},"api/oauth/youtube.php":{"content":"<?php\n/**\n * YouTube OAuth2 Callback Handler\n * Handles the OAuth2 authorization code exchange\n */\n\nrequire_once __DIR__ . '/../config/database.php';\n\n// OAuth2 configuration\n$clientId = '824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com';\n$clientSecret = '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';\n$redirectUri = 'http://localhost:5000/api/oauth/youtube.php';\n\ntry {\n    if (isset($_GET['code'])) {\n        // Exchange authorization code for tokens\n        $code = $_GET['code'];\n        \n        $tokenUrl = 'https://oauth2.googleapis.com/token';\n        $postData = [\n            'client_id' => $clientId,\n            'client_secret' => $clientSecret,\n            'code' => $code,\n            'grant_type' => 'authorization_code',\n            'redirect_uri' => $redirectUri\n        ];\n        \n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $tokenUrl);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/x-www-form-urlencoded'\n        ]);\n        \n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n        \n        if ($httpCode === 200) {\n            $tokenData = json_decode($response, true);\n            \n            if (isset($tokenData['access_token'])) {\n                // Save tokens to database\n                $database = new Database();\n                $db = $database->getConnection();\n                \n                $userId = 7; // In production, get from authenticated session\n                $accessToken = $tokenData['access_token'];\n                $refreshToken = $tokenData['refresh_token'] ?? null;\n                $expiresIn = $tokenData['expires_in'] ?? 3600;\n                $expiresAt = date('Y-m-d H:i:s', time() + $expiresIn);\n                \n                // Create table if not exists\n                $createTableSQL = \"CREATE TABLE IF NOT EXISTS youtube_tokens (\n                    id INT AUTO_INCREMENT PRIMARY KEY,\n                    user_id INT NOT NULL,\n                    access_token TEXT,\n                    refresh_token TEXT,\n                    expires_at DATETIME,\n                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n                    UNIQUE KEY unique_user (user_id)\n                )\";\n                $db->exec($createTableSQL);\n                \n                // Insert or update tokens\n                $stmt = $db->prepare(\"\n                    INSERT INTO youtube_tokens (user_id, access_token, refresh_token, expires_at) \n                    VALUES (?, ?, ?, ?)\n                    ON DUPLICATE KEY UPDATE \n                    access_token = VALUES(access_token),\n                    refresh_token = COALESCE(VALUES(refresh_token), refresh_token),\n                    expires_at = VALUES(expires_at),\n                    updated_at = CURRENT_TIMESTAMP\n                \");\n                \n                if ($stmt->execute([$userId, $accessToken, $refreshToken, $expiresAt])) {\n                    // Send success message to parent window\n                    echo '<script>\n                        if (window.opener) {\n                            window.opener.postMessage({\n                                type: \"YOUTUBE_AUTH_SUCCESS\",\n                                tokens: {\n                                    access_token: \"' . $accessToken . '\",\n                                    refresh_token: \"' . ($refreshToken ?: '') . '\",\n                                    expires_at: \"' . $expiresAt . '\"\n                                }\n                            }, \"*\");\n                            window.close();\n                        } else {\n                            document.body.innerHTML = \"<h3>Authentication successful! You can close this window.</h3>\";\n                        }\n                    </script>';\n                } else {\n                    throw new Exception('Failed to save tokens to database');\n                }\n            } else {\n                throw new Exception('No access token in response');\n            }\n        } else {\n            throw new Exception('Token exchange failed: HTTP ' . $httpCode);\n        }\n        \n    } elseif (isset($_GET['error'])) {\n        // Handle OAuth error\n        $error = $_GET['error'];\n        $errorDescription = $_GET['error_description'] ?? '';\n        \n        echo '<script>\n            if (window.opener) {\n                window.opener.postMessage({\n                    type: \"YOUTUBE_AUTH_ERROR\",\n                    error: \"' . htmlspecialchars($error) . '\",\n                    description: \"' . htmlspecialchars($errorDescription) . '\"\n                }, \"*\");\n                window.close();\n            } else {\n                document.body.innerHTML = \"<h3>Authentication failed: ' . htmlspecialchars($error) . '</h3>\";\n            }\n        </script>';\n    } else {\n        throw new Exception('No authorization code or error received');\n    }\n    \n} catch (Exception $e) {\n    echo '<script>\n        if (window.opener) {\n            window.opener.postMessage({\n                type: \"YOUTUBE_AUTH_ERROR\",\n                error: \"oauth_error\",\n                description: \"' . htmlspecialchars($e->getMessage()) . '\"\n            }, \"*\");\n            window.close();\n        } else {\n            document.body.innerHTML = \"<h3>Error: ' . htmlspecialchars($e->getMessage()) . '</h3>\";\n        }\n    </script>';\n}\n?>","size_bytes":5709},"api/services/EmailService.php":{"content":"<?php\n/**\n * Email Service for VideoHub\n * Handles email sending functionality using SMTP\n */\n\nrequire_once __DIR__ . '/../config/email.php';\n\nclass EmailService {\n    private $smtp_host;\n    private $smtp_port;\n    private $smtp_username;\n    private $smtp_password;\n    private $smtp_from_email;\n    private $smtp_from_name;\n    private $smtp_encryption;\n    \n    public function __construct() {\n        $this->smtp_host = SMTP_HOST;\n        $this->smtp_port = SMTP_PORT;\n        $this->smtp_username = SMTP_USERNAME;\n        $this->smtp_password = SMTP_PASSWORD;\n        $this->smtp_from_email = SMTP_FROM_EMAIL;\n        $this->smtp_from_name = SMTP_FROM_NAME;\n        $this->smtp_encryption = SMTP_ENCRYPTION;\n    }\n    \n    /**\n     * Send email verification\n     */\n    public function sendVerificationEmail($email, $name, $token) {\n        $subject = VERIFICATION_EMAIL_SUBJECT;\n        $verificationUrl = APP_URL . \"/auth/email-verification.html?token=\" . $token . \"&email=\" . urlencode($email);\n        \n        $body = $this->getVerificationEmailTemplate($name, $verificationUrl);\n        \n        return $this->sendEmailSMTP($email, $name, $subject, $body);\n    }\n    \n    /**\n     * Send password reset email\n     */\n    public function sendPasswordResetEmail($email, $name, $token) {\n        $subject = PASSWORD_RESET_EMAIL_SUBJECT;\n        $resetUrl = APP_URL . \"/auth/set-password.html?token=\" . $token . \"&email=\" . urlencode($email);\n        \n        $body = $this->getPasswordResetEmailTemplate($name, $resetUrl);\n        \n        return $this->sendEmail($email, $name, $subject, $body);\n    }\n    \n    /**\n     * Send email using SMTP\n     */\n    private function sendEmail($to_email, $to_name, $subject, $body) {\n        try {\n            // Email headers\n            $headers = [\n                'MIME-Version: 1.0',\n                'Content-type: text/html; charset=UTF-8',\n                'From: ' . $this->smtp_from_name . ' <' . $this->smtp_from_email . '>',\n                'Reply-To: ' . $this->smtp_from_email,\n                'X-Mailer: PHP/' . phpversion()\n            ];\n            \n            // Use PHPMailer-like functionality with built-in mail function\n            // For production, consider using PHPMailer library\n            $success = mail(\n                $to_email,\n                $subject,\n                $body,\n                implode(\"\\r\\n\", $headers)\n            );\n            \n            if ($success) {\n                error_log(\"Email sent successfully to: \" . $to_email);\n                return true;\n            } else {\n                error_log(\"Failed to send email to: \" . $to_email);\n                return false;\n            }\n            \n        } catch (Exception $e) {\n            error_log(\"Email sending error: \" . $e->getMessage());\n            return false;\n        }\n    }\n    \n    /**\n     * Send email using SMTP with socket connection\n     */\n    public function sendEmailSMTP($to_email, $to_name, $subject, $body) {\n        try {\n            // Create socket connection\n            $errno = 0;\n            $errstr = '';\n            $socket = fsockopen($this->smtp_host, $this->smtp_port, $errno, $errstr, 30);\n            if (!$socket) {\n                throw new Exception(\"Could not connect to SMTP server: $errstr ($errno)\");\n            }\n            \n            // Read initial response\n            $this->readSMTPResponse($socket);\n            \n            // EHLO command\n            fwrite($socket, \"EHLO \" . gethostname() . \"\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            // STARTTLS if using TLS\n            if ($this->smtp_encryption === 'tls') {\n                fwrite($socket, \"STARTTLS\\r\\n\");\n                $this->readSMTPResponse($socket);\n                \n                if (!stream_socket_enable_crypto($socket, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) {\n                    throw new Exception(\"Failed to enable TLS encryption\");\n                }\n                \n                // Send EHLO again after TLS\n                fwrite($socket, \"EHLO \" . gethostname() . \"\\r\\n\");\n                $this->readSMTPResponse($socket);\n            }\n            \n            // Authentication\n            fwrite($socket, \"AUTH LOGIN\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            fwrite($socket, base64_encode($this->smtp_username) . \"\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            fwrite($socket, base64_encode($this->smtp_password) . \"\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            // MAIL FROM\n            fwrite($socket, \"MAIL FROM: <\" . $this->smtp_from_email . \">\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            // RCPT TO\n            fwrite($socket, \"RCPT TO: <\" . $to_email . \">\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            // DATA\n            fwrite($socket, \"DATA\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            // Email content\n            $email_content = \"From: \" . $this->smtp_from_name . \" <\" . $this->smtp_from_email . \">\\r\\n\";\n            $email_content .= \"To: \" . $to_name . \" <\" . $to_email . \">\\r\\n\";\n            $email_content .= \"Subject: \" . $subject . \"\\r\\n\";\n            $email_content .= \"MIME-Version: 1.0\\r\\n\";\n            $email_content .= \"Content-Type: text/html; charset=UTF-8\\r\\n\";\n            $email_content .= \"\\r\\n\";\n            $email_content .= $body . \"\\r\\n\";\n            $email_content .= \".\\r\\n\";\n            \n            fwrite($socket, $email_content);\n            $this->readSMTPResponse($socket);\n            \n            // QUIT\n            fwrite($socket, \"QUIT\\r\\n\");\n            $this->readSMTPResponse($socket);\n            \n            fclose($socket);\n            \n            error_log(\"Email sent successfully via SMTP to: \" . $to_email);\n            return true;\n            \n        } catch (Exception $e) {\n            error_log(\"SMTP Email sending error: \" . $e->getMessage());\n            if (isset($socket) && is_resource($socket)) {\n                fclose($socket);\n            }\n            return false;\n        }\n    }\n    \n    /**\n     * Read SMTP response\n     */\n    private function readSMTPResponse($socket) {\n        $response = '';\n        while (($line = fgets($socket, 515)) !== false) {\n            $response .= $line;\n            if (substr($line, 3, 1) === ' ') {\n                break;\n            }\n        }\n        \n        $code = intval(substr($response, 0, 3));\n        if ($code >= 400) {\n            throw new Exception(\"SMTP Error: \" . $response);\n        }\n        \n        return $response;\n    }\n    \n    /**\n     * Get verification email template\n     */\n    private function getVerificationEmailTemplate($name, $verificationUrl) {\n        return '\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Email Verification - VideoHub</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: #007bff; color: white; padding: 20px; text-align: center; }\n        .content { padding: 30px; background: #f8f9fa; }\n        .button { display: inline-block; padding: 12px 24px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n        .footer { text-align: center; padding: 20px; color: #666; font-size: 14px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>VideoHub</h1>\n            <p>Email Verification Required</p>\n        </div>\n        <div class=\"content\">\n            <h2>Hello ' . htmlspecialchars($name) . ',</h2>\n            <p>Thank you for registering with VideoHub! To complete your registration, please verify your email address by clicking the button below:</p>\n            \n            <p style=\"text-align: center;\">\n                <a href=\"' . htmlspecialchars($verificationUrl) . '\" class=\"button\">Verify Email Address</a>\n            </p>\n            \n            <p>If the button above doesn\\'t work, you can copy and paste the following URL into your browser:</p>\n            <p style=\"word-break: break-all; background: #e9ecef; padding: 10px; border-radius: 5px;\">\n                ' . htmlspecialchars($verificationUrl) . '\n            </p>\n            \n            <p><strong>Important:</strong> This verification link will expire in 24 hours for security reasons.</p>\n            \n            <p>If you didn\\'t create an account with VideoHub, you can safely ignore this email.</p>\n        </div>\n        <div class=\"footer\">\n            <p>&copy; 2025 VideoHub. All rights reserved.</p>\n            <p>This is an automated email, please do not reply.</p>\n        </div>\n    </div>\n</body>\n</html>';\n    }\n    \n    /**\n     * Get password reset email template\n     */\n    private function getPasswordResetEmailTemplate($name, $resetUrl) {\n        return '\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Reset - VideoHub</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: #dc3545; color: white; padding: 20px; text-align: center; }\n        .content { padding: 30px; background: #f8f9fa; }\n        .button { display: inline-block; padding: 12px 24px; background: #dc3545; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n        .footer { text-align: center; padding: 20px; color: #666; font-size: 14px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>VideoHub</h1>\n            <p>Password Reset Request</p>\n        </div>\n        <div class=\"content\">\n            <h2>Hello ' . htmlspecialchars($name) . ',</h2>\n            <p>We received a request to reset your password for your VideoHub account. Click the button below to set a new password:</p>\n            \n            <p style=\"text-align: center;\">\n                <a href=\"' . htmlspecialchars($resetUrl) . '\" class=\"button\">Reset Password</a>\n            </p>\n            \n            <p>If the button above doesn\\'t work, you can copy and paste the following URL into your browser:</p>\n            <p style=\"word-break: break-all; background: #e9ecef; padding: 10px; border-radius: 5px;\">\n                ' . htmlspecialchars($resetUrl) . '\n            </p>\n            \n            <p><strong>Important:</strong> This reset link will expire in 24 hours for security reasons.</p>\n            \n            <p>If you didn\\'t request a password reset, you can safely ignore this email. Your password will remain unchanged.</p>\n        </div>\n        <div class=\"footer\">\n            <p>&copy; 2025 VideoHub. All rights reserved.</p>\n            <p>This is an automated email, please do not reply.</p>\n        </div>\n    </div>\n</body>\n</html>';\n    }\n}\n?>","size_bytes":11202},"api/services/GoogleAuthService.php":{"content":"\n<?php\n/**\n * Google Authentication Service for VideoHub\n */\n\nclass GoogleAuthService {\n    private $clientId = '824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com';\n    \n    /**\n     * Verify Google JWT token\n     */\n    public function verifyGoogleToken($credential) {\n        // Decode the JWT token (basic implementation)\n        $parts = explode('.', $credential);\n        if (count($parts) !== 3) {\n            error_log('Invalid JWT token format: expected 3 parts, got ' . count($parts));\n            return false;\n        }\n        \n        try {\n            // Add padding if needed for base64 decoding\n            $payload_encoded = $parts[1];\n            $payload_encoded .= str_repeat('=', (4 - strlen($payload_encoded) % 4) % 4);\n            \n            // Decode the payload (second part)\n            $payload = json_decode(base64_decode(str_replace(['-', '_'], ['+', '/'], $payload_encoded)), true);\n            \n            if (!$payload) {\n                error_log('Failed to decode JWT payload');\n                return false;\n            }\n            \n            // Log payload for debugging (remove in production)\n            error_log('JWT payload: ' . json_encode($payload));\n            \n            // Verify the token is for our client\n            if (!isset($payload['aud']) || $payload['aud'] !== $this->clientId) {\n                error_log('Invalid audience: expected ' . $this->clientId . ', got ' . ($payload['aud'] ?? 'none'));\n                return false;\n            }\n            \n            // Check token expiration\n            if (!isset($payload['exp']) || $payload['exp'] < time()) {\n                error_log('Token expired: ' . ($payload['exp'] ?? 'no exp') . ' < ' . time());\n                return false;\n            }\n            \n            // Return user data\n            return [\n                'email' => $payload['email'] ?? '',\n                'name' => $payload['name'] ?? '',\n                'given_name' => $payload['given_name'] ?? '',\n                'family_name' => $payload['family_name'] ?? '',\n                'picture' => $payload['picture'] ?? '',\n                'email_verified' => $payload['email_verified'] ?? false\n            ];\n            \n        } catch (Exception $e) {\n            error_log('Google token verification error: ' . $e->getMessage());\n            return false;\n        }\n    }\n}\n?>\n","size_bytes":2400},"assets/css/app.css":{"content":"/* VideoHub - Custom Styles */\n\n/* Global Variables */\n:root {\n    --primary-color: #4f46e5;\n    --primary-dark: #3730a3;\n    --secondary-color: #6366f1;\n    --success-color: #059669;\n    --danger-color: #dc2626;\n    --warning-color: #d97706;\n    --info-color: #0891b2;\n    --light-color: #f8fafc;\n    --dark-color: #1e293b;\n    --gray-50: #f8fafc;\n    --gray-100: #f1f5f9;\n    --gray-200: #e2e8f0;\n    --gray-300: #cbd5e1;\n    --gray-500: #64748b;\n    --gray-600: #475569;\n    --gray-700: #334155;\n    --gray-800: #1e293b;\n    --border-radius: 0.75rem;\n    --border-radius-sm: 0.5rem;\n    --box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n    --box-shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --box-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n    --box-shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n/* Enhanced Animations */\n@keyframes pulse {\n    0%, 100% { opacity: 1; transform: scale(1); }\n    50% { opacity: 0.8; transform: scale(1.02); }\n}\n\n@keyframes float {\n    0%, 100% { transform: translateY(0px) rotate(0deg); }\n    25% { transform: translateY(-5px) rotate(1deg); }\n    50% { transform: translateY(-10px) rotate(0deg); }\n    75% { transform: translateY(-5px) rotate(-1deg); }\n}\n\n@keyframes slideInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px) scale(0.95);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0) scale(1);\n    }\n}\n\n@keyframes shimmer {\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n}\n\n@keyframes glow {\n    0%, 100% { box-shadow: 0 0 5px rgba(79, 70, 229, 0.2); }\n    50% { box-shadow: 0 0 20px rgba(79, 70, 229, 0.4), 0 0 30px rgba(79, 70, 229, 0.2); }\n}\n\n@keyframes skeleton {\n    0% { background-position: -200px 0; }\n    100% { background-position: calc(200px + 100%) 0; }\n}\n\n.animate-pulse {\n    animation: pulse 2s ease-in-out infinite;\n}\n\n.animate-float {\n    animation: float 3s ease-in-out infinite;\n}\n\n.slide-in-up {\n    animation: slideInUp 0.6s ease-out;\n}\n\n/* Loading States */\n.btn-loading {\n    position: relative;\n    pointer-events: none;\n}\n\n.btn-loading .spinner-border-sm {\n    width: 1rem;\n    height: 1rem;\n}\n\n.section-loader {\n    min-height: 200px;\n    background: rgba(255, 255, 255, 0.9);\n    backdrop-filter: blur(2px);\n}\n\n/* Skeleton Loading */\n.skeleton {\n    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n    background-size: 200px 100%;\n    animation: skeleton 1.5s infinite;\n}\n\n.skeleton-text {\n    height: 1rem;\n    margin-bottom: 0.5rem;\n    border-radius: 4px;\n}\n\n.skeleton-text:last-child {\n    width: 80%;\n}\n\n.skeleton-avatar {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n}\n\n.skeleton-card {\n    height: 200px;\n    border-radius: 0.75rem;\n}\n\n/* Error States */\n.error-boundary {\n    border: 2px dashed var(--danger-color);\n    border-radius: var(--border-radius);\n    padding: 2rem;\n    text-align: center;\n    background: rgba(220, 38, 38, 0.05);\n}\n\n.error-boundary .error-icon {\n    font-size: 3rem;\n    color: var(--danger-color);\n    margin-bottom: 1rem;\n}\n\n.error-boundary .error-title {\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: var(--danger-color);\n    margin-bottom: 0.5rem;\n}\n\n.error-boundary .error-message {\n    color: var(--gray-600);\n    margin-bottom: 1rem;\n}\n\n/* Enhanced Loading Overlay */\n.loading-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(255, 255, 255, 0.9);\n    backdrop-filter: blur(2px);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n    border-radius: inherit;\n}\n\n.loading-overlay .spinner-border {\n    width: 3rem;\n    height: 3rem;\n}\n\n/* Enhanced Card Hover Effects */\n.card {\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n    position: relative;\n    overflow: hidden;\n}\n\n.card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n    transition: left 0.5s;\n}\n\n.card:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.15), 0 20px 25px -5px rgba(0, 0, 0, 0.1);\n}\n\n.card:hover::before {\n    left: 100%;\n}\n\n/* Backdrop Blur Effect */\n.backdrop-blur {\n    backdrop-filter: blur(12px);\n    -webkit-backdrop-filter: blur(12px);\n}\n\n/* Glassmorphism Effects */\n.glass-card {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 16px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.glass-card-dark {\n    background: rgba(0, 0, 0, 0.1);\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 16px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n}\n\n.gradient-border {\n    position: relative;\n    border-radius: 16px;\n}\n\n.gradient-border::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 16px;\n    padding: 2px;\n    background: linear-gradient(45deg, var(--primary-color), var(--secondary-color), var(--success-color));\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: exclude;\n}\n\n/* Enhanced Buttons */\n.btn {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    border-radius: 12px;\n    font-weight: 600;\n    position: relative;\n    overflow: hidden;\n    letter-spacing: 0.5px;\n}\n\n.btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.5s;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n}\n\n.btn:hover::before {\n    left: 100%;\n}\n\n.btn:active {\n    transform: translateY(0);\n}\n\n.btn-lg {\n    padding: 1rem 2.5rem;\n    font-size: 1.1rem;\n    border-radius: 16px;\n}\n\n.btn-gradient-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);\n    border: none;\n    color: white;\n}\n\n.btn-gradient-success {\n    background: linear-gradient(135deg, var(--success-color) 0%, #20c997 100%);\n    border: none;\n    color: white;\n}\n\n.btn-outline-modern {\n    background: transparent;\n    border: 2px solid var(--primary-color);\n    color: var(--primary-color);\n    position: relative;\n    overflow: hidden;\n}\n\n.btn-outline-modern::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: var(--primary-color);\n    transition: left 0.3s ease;\n    z-index: -1;\n}\n\n.btn-outline-modern:hover {\n    color: white;\n}\n\n.btn-outline-modern:hover::after {\n    left: 0;\n}\n\n/* General Styles */\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n    line-height: 1.6;\n    color: var(--gray-800);\n    background-color: var(--gray-50);\n}\n\n.auth-bg {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);\n    min-height: 100vh;\n}\n\n/* Modern gradients */\n.bg-gradient-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);\n}\n\n.bg-gradient-success {\n    background: linear-gradient(135deg, var(--success-color) 0%, #047857 100%);\n}\n\n.bg-gradient-danger {\n    background: linear-gradient(135deg, var(--danger-color) 0%, #b91c1c 100%);\n}\n\n/* Typography */\n.fw-semibold {\n    font-weight: 600;\n}\n\n.text-xs {\n    font-size: 0.75rem;\n}\n\n.text-sm {\n    font-size: 0.875rem;\n}\n\n/* Spacing utilities */\n.space-y-4 > * + * {\n    margin-top: 1rem;\n}\n\n.space-y-6 > * + * {\n    margin-top: 1.5rem;\n}\n\n/* Modern Cards */\n.card {\n    border: none;\n    box-shadow: var(--box-shadow);\n    border-radius: var(--border-radius);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    background: white;\n}\n\n.card:hover, .hover-lift:hover {\n    box-shadow: var(--box-shadow-xl);\n    transform: translateY(-4px);\n}\n\n.card-modern {\n    border-radius: var(--border-radius);\n    border: 1px solid var(--gray-200);\n    transition: all 0.2s ease;\n}\n\n.card-modern:hover {\n    border-color: var(--primary-color);\n    box-shadow: var(--box-shadow-lg);\n}\n\n/* Stats Cards */\n.stat-card {\n    background: white;\n    border-radius: var(--border-radius);\n    padding: 1.5rem;\n    border: 1px solid var(--gray-200);\n    transition: all 0.2s ease;\n}\n\n.stat-card:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--box-shadow-lg);\n}\n\n.stat-icon {\n    width: 3rem;\n    height: 3rem;\n    border-radius: var(--border-radius-sm);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto;\n}\n\n.min-vh-75 {\n    min-height: 75vh;\n}\n\n/* Buttons */\n.btn-modern {\n    border-radius: var(--border-radius-sm);\n    font-weight: 500;\n    padding: 0.75rem 1.5rem;\n    transition: all 0.2s ease;\n    border: none;\n}\n\n.btn-modern:hover {\n    transform: translateY(-1px);\n    box-shadow: var(--box-shadow-md);\n}\n\n.card-header {\n    background-color: #f8f9fa;\n    border-bottom: 1px solid #dee2e6;\n    font-weight: 600;\n}\n\n/* Border Left Colors for Cards */\n.border-left-primary {\n    border-left: 0.25rem solid var(--primary-color) !important;\n}\n\n.border-left-success {\n    border-left: 0.25rem solid var(--success-color) !important;\n}\n\n.border-left-info {\n    border-left: 0.25rem solid var(--info-color) !important;\n}\n\n.border-left-warning {\n    border-left: 0.25rem solid var(--warning-color) !important;\n}\n\n/* Modern Sidebar */\n.sidebar {\n    border-right: 1px solid var(--gray-200);\n}\n\n.sidebar .nav-link {\n    color: var(--gray-700);\n    font-weight: 500;\n    margin-bottom: 0.125rem;\n    border-radius: var(--border-radius-sm);\n    transition: all 0.2s ease;\n}\n\n.sidebar .nav-link:hover {\n    color: var(--primary-color);\n    background-color: var(--gray-100);\n    transform: translateX(2px);\n}\n\n.sidebar .nav-link.active {\n    color: var(--primary-color);\n    background-color: rgba(79, 70, 229, 0.1);\n    font-weight: 600;\n}\n\n.sidebar .nav-link i {\n    width: 1.5rem;\n}\n\n/* Avatar */\n.avatar {\n    width: 2.5rem;\n    height: 2.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n    font-size: 0.875rem;\n}\n\n/* Utility classes for custom colors */\n.bg-gray-50 { background-color: var(--gray-50) !important; }\n.bg-gray-100 { background-color: var(--gray-100) !important; }\n.bg-gray-200 { background-color: var(--gray-200) !important; }\n.text-gray-500 { color: var(--gray-500) !important; }\n.text-gray-600 { color: var(--gray-600) !important; }\n.text-gray-700 { color: var(--gray-700) !important; }\n.text-gray-800 { color: var(--gray-800) !important; }\n\n/* Modern Utility Classes */\n.rounded-xl { border-radius: 1rem !important; }\n.rounded-2xl { border-radius: 1.5rem !important; }\n.rounded-3xl { border-radius: 2rem !important; }\n\n.shadow-soft { box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08) !important; }\n.shadow-medium { box-shadow: 0 4px 25px rgba(0, 0, 0, 0.12) !important; }\n.shadow-large { box-shadow: 0 8px 40px rgba(0, 0, 0, 0.15) !important; }\n.shadow-glow { box-shadow: 0 0 30px rgba(79, 70, 229, 0.3) !important; }\n\n.text-gradient-primary {\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    font-weight: 700;\n}\n\n.text-gradient-success {\n    background: linear-gradient(135deg, var(--success-color), #20c997);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    font-weight: 700;\n}\n\n.hover-scale:hover {\n    transform: scale(1.05);\n    transition: transform 0.3s ease;\n}\n\n.hover-rotate:hover {\n    transform: rotate(5deg);\n    transition: transform 0.3s ease;\n}\n\n.animate-glow {\n    animation: glow 2s infinite;\n}\n\n.animate-shimmer {\n    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n    background-size: 200% 100%;\n    animation: shimmer 1.5s infinite;\n}\n\n.border-gradient {\n    border: 2px solid;\n    border-image: linear-gradient(45deg, var(--primary-color), var(--secondary-color)) 1;\n}\n\n.bg-mesh {\n    background: \n        radial-gradient(circle at 20% 50%, rgba(79, 70, 229, 0.1) 0%, transparent 50%),\n        radial-gradient(circle at 80% 20%, rgba(99, 102, 241, 0.1) 0%, transparent 50%),\n        radial-gradient(circle at 40% 80%, rgba(139, 92, 246, 0.1) 0%, transparent 50%);\n}\n\n/* Video Thumbnails */\n.video-thumbnail {\n    position: relative;\n    overflow: hidden;\n    border-radius: var(--border-radius);\n    background-color: #000;\n    aspect-ratio: 16/9;\n}\n\n.video-thumbnail img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    transition: transform 0.3s ease;\n}\n\n.video-thumbnail:hover img {\n    transform: scale(1.05);\n}\n\n.video-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    color: white;\n}\n\n.video-thumbnail:hover .video-overlay {\n    opacity: 1;\n}\n\n.video-duration {\n    position: absolute;\n    bottom: 8px;\n    right: 8px;\n    background: rgba(0, 0, 0, 0.8);\n    color: white;\n    padding: 2px 6px;\n    border-radius: 3px;\n    font-size: 0.75rem;\n}\n\n.video-price {\n    position: absolute;\n    top: 8px;\n    left: 8px;\n    background: var(--success-color);\n    color: white;\n    padding: 4px 8px;\n    border-radius: var(--border-radius);\n    font-size: 0.75rem;\n    font-weight: 600;\n}\n\n/* Video Player Styles */\n.video-player-body {\n    background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 100%);\n    color: #fff;\n}\n\n.video-player-container {\n    background: linear-gradient(135deg, #000 0%, #1a1a2e 100%);\n    border-radius: 20px;\n    overflow: hidden;\n    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);\n    position: relative;\n}\n\n.video-player-container::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 20px;\n    padding: 2px;\n    background: linear-gradient(45deg, rgba(79, 70, 229, 0.5), rgba(99, 102, 241, 0.5));\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: exclude;\n    z-index: 1;\n}\n\n.video-wrapper {\n    position: relative;\n    width: 100%;\n    height: 0;\n    padding-bottom: 56.25%; /* 16:9 aspect ratio */\n    background-color: #000;\n}\n\n.video-player {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n    outline: none;\n}\n\n.video-loading-overlay,\n.video-error-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.8);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    z-index: 10;\n}\n\n/* Modal Video Player Styles */\n#videoPlayerModal .modal-xl {\n    max-width: 95%;\n}\n\n#videoPlayerModal .video-wrapper {\n    height: 400px;\n    padding-bottom: 0;\n}\n\n#videoPlayerModal .video-player {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.related-video-item {\n    cursor: pointer;\n    padding: 8px;\n    border-radius: 4px;\n    transition: background-color 0.2s;\n}\n\n.related-video-item:hover {\n    background-color: #f8f9fa;\n}\n\n.cursor-pointer {\n    cursor: pointer;\n}\n\n.custom-video-controls {\n    background: rgba(255, 255, 255, 0.1);\n    padding: 1rem;\n    border-radius: 0 0 var(--border-radius) var(--border-radius);\n}\n\n/* Video Cards */\n.video-card {\n    transition: all 0.3s ease;\n    border: 1px solid #e9ecef;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n    border-radius: 8px;\n    overflow: hidden;\n}\n\n.video-card:hover {\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);\n    transform: translateY(-2px);\n    border-color: #dee2e6;\n}\n\n.video-card .card-body {\n    padding: 1rem;\n}\n\n.video-thumbnail-container {\n    border-radius: 8px 8px 0 0;\n    overflow: hidden;\n}\n\n.video-thumbnail-container .card-img-top {\n    transition: transform 0.3s ease;\n}\n\n.video-card:hover .video-thumbnail-container .card-img-top {\n    transform: scale(1.02);\n}\n\n.video-title {\n    font-size: 1rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n    color: #212529;\n    text-decoration: none;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n.video-title:hover {\n    color: var(--primary-color);\n}\n\n.video-creator {\n    color: #6c757d;\n    font-size: 0.875rem;\n    margin-bottom: 0.5rem;\n}\n\n.video-stats {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 0.75rem;\n    color: #6c757d;\n}\n\n/* Authentication Forms */\n.auth-card {\n    border: none;\n    box-shadow: var(--box-shadow-lg);\n    border-radius: var(--border-radius);\n}\n\n/* Password Strength Indicator */\n.password-strength {\n    margin-top: 0.5rem;\n}\n\n.strength-bar {\n    height: 4px;\n    background-color: #e9ecef;\n    border-radius: 2px;\n    transition: background-color 0.3s ease;\n}\n\n.strength-bar.weak {\n    background-color: var(--danger-color);\n}\n\n.strength-bar.fair {\n    background-color: var(--warning-color);\n}\n\n.strength-bar.good {\n    background-color: var(--info-color);\n}\n\n.strength-bar.strong {\n    background-color: var(--success-color);\n}\n\n/* Buttons */\n.btn {\n    border-radius: var(--border-radius);\n    font-weight: 500;\n    transition: all 0.3s ease;\n}\n\n.btn:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.btn-group .btn:hover {\n    transform: none;\n}\n\n/* Tables */\n.table th {\n    border-top: none;\n    font-weight: 600;\n    color: #495057;\n    background-color: #f8f9fa;\n}\n\n.table-responsive {\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n/* Pagination */\n.pagination .page-link {\n    border-radius: var(--border-radius);\n    margin: 0 2px;\n    border: 1px solid #dee2e6;\n    color: #495057;\n}\n\n.pagination .page-item.active .page-link {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n/* Form Controls */\n.form-control:focus,\n.form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);\n}\n\n/* Alerts */\n.alert {\n    border: none;\n    border-radius: var(--border-radius);\n}\n\n/* Demo Notice */\n.demo-notice {\n    border-radius: 0;\n}\n\n/* Loading States */\n.loading-spinner {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border: 3px solid rgba(255, 255, 255, 0.3);\n    border-radius: 50%;\n    border-top-color: #fff;\n    animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n/* Chart Container */\n.chart-container {\n    position: relative;\n    height: 400px;\n}\n\n/* Progress Bars */\n.progress {\n    height: 8px;\n    border-radius: 4px;\n    background-color: #e9ecef;\n}\n\n.progress-bar {\n    border-radius: 4px;\n    transition: width 0.3s ease;\n}\n\n/* Modals */\n.modal-content {\n    border: none;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow-lg);\n}\n\n.modal-header {\n    border-bottom: 1px solid #dee2e6;\n}\n\n.modal-footer {\n    border-top: 1px solid #dee2e6;\n}\n\n/* User Avatar */\n.user-avatar {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    object-fit: cover;\n}\n\n/* Comments */\n.comment-item {\n    border-bottom: 1px solid #e9ecef;\n    padding: 1rem 0;\n}\n\n.comment-item:last-child {\n    border-bottom: none;\n}\n\n.comment-avatar {\n    width: 48px;\n    height: 48px;\n    border-radius: 50%;\n    background-color: #e9ecef;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: #6c757d;\n}\n\n/* Related Videos */\n.related-videos-container {\n    max-height: 400px;\n    overflow-y: auto;\n}\n\n.related-video-item {\n    display: flex;\n    align-items: flex-start;\n    padding: 0.75rem;\n    margin-bottom: 0.5rem;\n    border-radius: 8px;\n    text-decoration: none;\n    color: inherit;\n    transition: all 0.3s ease;\n    background-color: #f8f9fa;\n    border: 1px solid #e9ecef;\n}\n\n.related-video-item:hover {\n    background-color: #e9ecef;\n    color: inherit;\n    transform: translateY(-1px);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.related-video-item:last-child {\n    margin-bottom: 0;\n}\n\n.related-video-thumbnail {\n    width: 80px;\n    height: 45px;\n    background-color: #000;\n    border-radius: 6px;\n    margin-right: 0.75rem;\n    flex-shrink: 0;\n    object-fit: cover;\n    position: relative;\n}\n\n.related-video-thumbnail::after {\n    content: '\\f04b';\n    font-family: 'Font Awesome 6 Free';\n    font-weight: 900;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: white;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    font-size: 12px;\n}\n\n.related-video-item:hover .related-video-thumbnail::after {\n    opacity: 1;\n}\n\n.related-video-info {\n    flex: 1;\n    min-width: 0;\n}\n\n.related-video-title {\n    font-size: 0.85rem;\n    font-weight: 600;\n    margin-bottom: 0.25rem;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    line-height: 1.3;\n    color: #212529;\n}\n\n.related-video-creator {\n    font-size: 0.75rem;\n    color: #6c757d;\n    margin-bottom: 0.125rem;\n}\n\n.related-video-duration {\n    font-size: 0.7rem;\n    color: #28a745;\n    font-weight: 500;\n}\n\n/* Enhanced Modal Sidebar */\n#videoPlayerModal .modal-xl .col-lg-4 {\n    border-left: 2px solid #e9ecef;\n}\n\n#videoPlayerModal .progress {\n    background-color: #e9ecef;\n    border-radius: 10px;\n}\n\n#videoPlayerModal .progress-bar {\n    border-radius: 10px;\n    background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);\n}\n\n#videoPlayerModal .form-control {\n    resize: none;\n    transition: all 0.3s ease;\n}\n\n#videoPlayerModal .form-control:focus {\n    border-color: #007bff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    background-color: white;\n}\n\n/* Custom scrollbar styles */\n.related-videos-container::-webkit-scrollbar,\n.custom-scrollbar::-webkit-scrollbar {\n    width: 8px;\n}\n\n.related-videos-container::-webkit-scrollbar-track,\n.custom-scrollbar::-webkit-scrollbar-track {\n    background: linear-gradient(to bottom, #f8f9fa, #e9ecef);\n    border-radius: 4px;\n}\n\n.related-videos-container::-webkit-scrollbar-thumb,\n.custom-scrollbar::-webkit-scrollbar-thumb {\n    background: linear-gradient(to bottom, var(--primary-color), var(--primary-dark));\n    border-radius: 4px;\n    transition: all 0.3s ease;\n}\n\n.related-videos-container::-webkit-scrollbar-thumb:hover,\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(to bottom, var(--primary-dark), var(--secondary-color));\n    transform: scale(1.1);\n}\n\n/* Modern scrollbar for all containers */\n*::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n}\n\n*::-webkit-scrollbar-track {\n    background: rgba(0, 0, 0, 0.05);\n    border-radius: 3px;\n}\n\n*::-webkit-scrollbar-thumb {\n    background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));\n    border-radius: 3px;\n}\n\n*::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(45deg, var(--primary-dark), var(--primary-color));\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .sidebar {\n        position: static;\n        height: auto;\n        padding: 0;\n    }\n\n    .video-wrapper {\n        padding-bottom: 75%; /* Adjust for mobile */\n    }\n\n    .custom-video-controls .row {\n        flex-direction: column;\n        gap: 1rem;\n    }\n\n    .video-stats {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 0.5rem;\n    }\n\n    .related-video-item {\n        flex-direction: column;\n        text-align: center;\n    }\n\n    .related-video-thumbnail {\n        width: 100%;\n        height: auto;\n        margin-right: 0;\n        margin-bottom: 0.5rem;\n    }\n}\n\n/* Dark Theme Support */\n@media (prefers-color-scheme: dark) {\n    .video-player-body {\n        background-color: #121212;\n        color: #ffffff;\n    }\n\n    .video-player-body .card {\n        background-color: #1e1e1e;\n        color: #ffffff;\n    }\n\n    .video-player-body .card-header {\n        background-color: #2d2d2d;\n        border-bottom-color: #404040;\n    }\n}\n\n/* Print Styles */\n@media print {\n    .navbar,\n    .sidebar,\n    .btn,\n    .modal {\n        display: none !important;\n    }\n\n    .container-fluid {\n        margin: 0;\n        padding: 0;\n    }\n\n    .card {\n        box-shadow: none;\n        border: 1px solid #dee2e6;\n    }\n}\n\n/* Accessibility */\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n/* Focus styles for keyboard navigation */\n.btn:focus,\n.form-control:focus,\n\n\n/* Interactive Elements & Micro-interactions */\n.interactive-card {\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    position: relative;\n    overflow: hidden;\n}\n\n.interactive-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n    transform: translateX(-100%);\n    transition: transform 0.6s ease;\n}\n\n.interactive-card:hover::before {\n    transform: translateX(100%);\n}\n\n.ripple-effect {\n    position: relative;\n    overflow: hidden;\n    cursor: pointer;\n}\n\n.ripple-effect::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.3);\n    transform: translate(-50%, -50%);\n    transition: width 0.6s, height 0.6s;\n}\n\n.ripple-effect:active::after {\n    width: 300px;\n    height: 300px;\n}\n\n/* Loading Skeleton Improvements */\n.skeleton-text {\n    height: 1em;\n    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n    background-size: 200% 100%;\n    animation: skeleton-loading 1.5s infinite;\n    border-radius: 4px;\n    margin: 0.25em 0;\n}\n\n.skeleton-circle {\n    border-radius: 50%;\n    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n    background-size: 200% 100%;\n    animation: skeleton-loading 1.5s infinite;\n}\n\n@keyframes skeleton-loading {\n    0% { background-position: 200% 0; }\n    100% { background-position: -200% 0; }\n}\n\n/* Status Indicators */\n.status-indicator {\n    position: relative;\n    display: inline-block;\n}\n\n.status-indicator::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    border: 2px solid #fff;\n}\n\n.status-online::after {\n    background: #22c55e;\n    animation: pulse-green 2s infinite;\n}\n\n.status-offline::after {\n    background: #ef4444;\n}\n\n.status-busy::after {\n    background: #f59e0b;\n}\n\n@keyframes pulse-green {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.5; }\n}\n\n/* Modern Form Enhancements */\n.form-floating-modern {\n    position: relative;\n}\n\n.form-floating-modern input {\n    border: 2px solid #e5e7eb;\n    border-radius: 12px;\n    padding: 1rem;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n    background: rgba(255, 255, 255, 0.9);\n}\n\n.form-floating-modern input:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);\n    transform: translateY(-2px);\n}\n\n.form-floating-modern label {\n    position: absolute;\n    top: 1rem;\n    left: 1rem;\n    color: #6b7280;\n    transition: all 0.3s ease;\n    pointer-events: none;\n    background: rgba(255, 255, 255, 0.9);\n    padding: 0 0.5rem;\n}\n\n.form-floating-modern input:focus + label,\n.form-floating-modern input:not(:placeholder-shown) + label {\n    top: -0.5rem;\n    font-size: 0.875rem;\n    color: var(--primary-color);\n    font-weight: 600;\n}\n\n/* Notification Enhancements */\n.notification-badge {\n    position: relative;\n    display: inline-block;\n}\n\n.notification-badge::after {\n    content: '';\n    position: absolute;\n    top: -2px;\n    right: -2px;\n    width: 8px;\n    height: 8px;\n    background: #ef4444;\n    border-radius: 50%;\n    border: 2px solid #fff;\n    animation: pulse-notification 2s infinite;\n}\n\n@keyframes pulse-notification {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.2); }\n}\n\n/* Tooltip Enhancements */\n.tooltip-modern {\n    position: relative;\n    cursor: help;\n}\n\n.tooltip-modern::before {\n    content: attr(data-tooltip);\n    position: absolute;\n    bottom: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n    background: rgba(0, 0, 0, 0.9);\n    color: white;\n    padding: 0.5rem 1rem;\n    border-radius: 8px;\n    font-size: 0.875rem;\n    white-space: nowrap;\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s ease;\n    z-index: 1000;\n}\n\n.tooltip-modern::after {\n    content: '';\n    position: absolute;\n    bottom: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 0;\n    height: 0;\n    border-left: 6px solid transparent;\n    border-right: 6px solid transparent;\n    border-top: 6px solid rgba(0, 0, 0, 0.9);\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s ease;\n}\n\n.tooltip-modern:hover::before,\n.tooltip-modern:hover::after {\n    opacity: 1;\n    visibility: visible;\n    bottom: calc(100% + 5px);\n}\n\n\n.form-select:focus {\n    outline: 2px solid var(--primary-color);\n    outline-offset: 2px;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n    .card {\n        border: 2px solid #000;\n    }\n\n    .btn {\n        border-width: 2px;\n    }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}/* Enhanced VideoHub Styles for Better UI/UX */\n\n/* Modern Card Styles */\n.stat-card {\n    border: none;\n    border-radius: 12px;\n    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n    transition: all 0.3s ease;\n    background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);\n}\n\n.stat-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);\n}\n\n.stat-icon {\n    width: 60px;\n    height: 60px;\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto;\n}\n\n/* Enhanced Button Styles */\n.btn-modern {\n    border-radius: 8px;\n    font-weight: 500;\n    padding: 12px 24px;\n    transition: all 0.3s ease;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.btn-modern:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);\n}\n\n/* Modern Sidebar */\n.sidebar {\n    background: linear-gradient(180deg, #ffffff 0%, #f8f9fa 100%);\n    border-right: 1px solid #e9ecef;\n}\n\n.sidebar .nav-link {\n    border-radius: 8px;\n    margin: 2px 8px;\n    padding: 12px 16px;\n    transition: all 0.3s ease;\n    color: #495057;\n    font-weight: 500;\n}\n\n.sidebar .nav-link:hover {\n    background-color: #e9ecef;\n    color: #212529;\n    transform: translateX(4px);\n}\n\n.sidebar .nav-link.active {\n    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);\n    color: white;\n    box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);\n}\n\n/* Enhanced Table Styles */\n.table-modern {\n    border-radius: 12px;\n    overflow: hidden;\n    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n}\n\n.table-modern thead {\n    background: linear-gradient(135deg, #495057 0%, #343a40 100%);\n    color: white;\n}\n\n.table-modern tbody tr {\n    transition: all 0.3s ease;\n}\n\n.table-modern tbody tr:hover {\n    background-color: #f8f9fa;\n    transform: scale(1.01);\n}\n\n/* Modern Form Controls */\n.form-control-modern {\n    border-radius: 8px;\n    border: 2px solid #e9ecef;\n    padding: 12px 16px;\n    transition: all 0.3s ease;\n}\n\n.form-control-modern:focus {\n    border-color: #007bff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    transform: translateY(-1px);\n}\n\n/* Video Cards */\n.video-card {\n    border: none;\n    border-radius: 16px;\n    overflow: hidden;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n}\n\n.video-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\n}\n\n.video-thumbnail {\n    position: relative;\n    overflow: hidden;\n    border-radius: 12px 12px 0 0;\n}\n\n.video-thumbnail img {\n    transition: transform 0.3s ease;\n}\n\n.video-card:hover .video-thumbnail img {\n    transform: scale(1.05);\n}\n\n.video-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    cursor: pointer;\n}\n\n.video-card:hover .video-overlay {\n    opacity: 1;\n}\n\n.video-duration {\n    position: absolute;\n    bottom: 8px;\n    right: 8px;\n    background: rgba(0, 0, 0, 0.8);\n    color: white;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 12px;\n    font-weight: 500;\n}\n\n.video-price {\n    position: absolute;\n    top: 8px;\n    right: 8px;\n    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);\n    color: white;\n    padding: 4px 8px;\n    border-radius: 12px;\n    font-size: 12px;\n    font-weight: 600;\n}\n\n/* Enhanced Navbar */\n.navbar-brand {\n    font-weight: 700;\n    font-size: 1.5rem;\n}\n\n.navbar-nav .nav-link {\n    font-weight: 500;\n    margin: 0 8px;\n    border-radius: 6px;\n    transition: all 0.3s ease;\n}\n\n.navbar-nav .nav-link:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n/* Progress Bars */\n.progress-modern {\n    height: 8px;\n    border-radius: 4px;\n    background-color: #e9ecef;\n    overflow: hidden;\n}\n\n.progress-bar-modern {\n    background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);\n    border-radius: 4px;\n    transition: width 0.6s ease;\n}\n\n/* Badges */\n.badge-modern {\n    border-radius: 8px;\n    font-weight: 500;\n    padding: 6px 12px;\n}\n\n/* Loading States */\n.skeleton {\n    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n    background-size: 200% 100%;\n    animation: skeleton-loading 1.5s infinite;\n    border-radius: 4px;\n}\n\n@keyframes skeleton-loading {\n    0% {\n        background-position: 200% 0;\n    }\n    100% {\n        background-position: -200% 0;\n    }\n}\n\n/* Responsive Improvements */\n@media (max-width: 768px) {\n    .stat-card {\n        margin-bottom: 16px;\n    }\n    \n    .sidebar {\n        display: none;\n    }\n    \n    .video-card {\n        margin-bottom: 20px;\n    }\n}\n\n/* Dark Theme Support */\n@media (prefers-color-scheme: dark) {\n    .stat-card {\n        background: linear-gradient(145deg, #212529 0%, #343a40 100%);\n        color: white;\n    }\n    \n    .sidebar {\n        background: linear-gradient(180deg, #212529 0%, #343a40 100%);\n        border-right-color: #495057;\n    }\n}\n\n/* Animation Classes */\n.fade-in {\n    animation: fadeIn 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(30px) scale(0.95); }\n    to { opacity: 1; transform: translateY(0) scale(1); }\n}\n\n.slide-up {\n    animation: slideUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n@keyframes slideUp {\n    from { transform: translateY(30px) scale(0.98); opacity: 0; }\n    to { transform: translateY(0) scale(1); opacity: 1; }\n}\n\n.slide-in-left {\n    animation: slideInLeft 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n@keyframes slideInLeft {\n    from { transform: translateX(-30px); opacity: 0; }\n    to { transform: translateX(0); opacity: 1; }\n}\n\n.zoom-in {\n    animation: zoomIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n@keyframes zoomIn {\n    from { transform: scale(0.9); opacity: 0; }\n    to { transform: scale(1); opacity: 1; }\n}\n\n.bounce-in {\n    animation: bounceIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n}\n\n@keyframes bounceIn {\n    0% { transform: scale(0.3); opacity: 0; }\n    50% { transform: scale(1.05); }\n    70% { transform: scale(0.95); }\n    100% { transform: scale(1); opacity: 1; }\n}\n\n/* Premium Visual Effects */\n.neon-glow {\n    position: relative;\n    color: #fff;\n    text-shadow: \n        0 0 5px currentColor,\n        0 0 10px currentColor,\n        0 0 15px currentColor,\n        0 0 20px currentColor;\n    animation: neon-flicker 2s infinite alternate;\n}\n\n@keyframes neon-flicker {\n    0%, 100% { \n        text-shadow: \n            0 0 5px currentColor,\n            0 0 10px currentColor,\n            0 0 15px currentColor,\n            0 0 20px currentColor;\n    }\n    50% { \n        text-shadow: \n            0 0 2px currentColor,\n            0 0 5px currentColor,\n            0 0 8px currentColor,\n            0 0 12px currentColor;\n    }\n}\n\n/* Morphing Cards */\n.morph-card {\n    background: linear-gradient(45deg, #667eea, #764ba2);\n    border-radius: 20px;\n    position: relative;\n    overflow: hidden;\n    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.morph-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(45deg, #f093fb, #f5576c, #4facfe, #00f2fe);\n    background-size: 400% 400%;\n    opacity: 0;\n    transition: opacity 0.6s ease;\n    animation: morphing-gradient 4s ease infinite;\n}\n\n.morph-card:hover::before {\n    opacity: 1;\n}\n\n@keyframes morphing-gradient {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n}\n\n/* Particle Effect Background */\n.particle-bg {\n    position: relative;\n    overflow: hidden;\n}\n\n.particle-bg::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: \n        radial-gradient(circle at 20% 80%, rgba(79, 70, 229, 0.1) 0%, transparent 50%),\n        radial-gradient(circle at 80% 20%, rgba(99, 102, 241, 0.1) 0%, transparent 50%),\n        radial-gradient(circle at 40% 40%, rgba(139, 92, 246, 0.1) 0%, transparent 50%);\n    animation: particles-float 6s ease-in-out infinite;\n}\n\n@keyframes particles-float {\n    0%, 100% { transform: translateY(0) rotate(0deg); }\n    33% { transform: translateY(-10px) rotate(1deg); }\n    66% { transform: translateY(5px) rotate(-1deg); }\n}\n\n/* 3D Card Effect */\n.card-3d {\n    perspective: 1000px;\n    transform-style: preserve-3d;\n    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card-3d:hover {\n    transform: rotateY(10deg) rotateX(5deg) scale(1.02);\n}\n\n.card-3d-inner {\n    transform-style: preserve-3d;\n    transition: transform 0.6s;\n}\n\n/* Liquid Button Effect */\n.liquid-btn {\n    position: relative;\n    background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));\n    border: none;\n    border-radius: 50px;\n    padding: 12px 30px;\n    color: white;\n    font-weight: 600;\n    overflow: hidden;\n    transition: all 0.4s ease;\n}\n\n.liquid-btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n    transition: left 0.6s ease;\n}\n\n.liquid-btn:hover::before {\n    left: 100%;\n}\n\n.liquid-btn::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    background: rgba(255, 255, 255, 0.3);\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n    transition: width 0.6s ease, height 0.6s ease;\n}\n\n.liquid-btn:active::after {\n    width: 300px;\n    height: 300px;\n}\n\n/* Floating Action Button */\n.fab {\n    position: fixed;\n    bottom: 2rem;\n    right: 2rem;\n    width: 60px;\n    height: 60px;\n    border-radius: 50%;\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    border: none;\n    color: white;\n    font-size: 1.5rem;\n    box-shadow: 0 8px 25px rgba(79, 70, 229, 0.3);\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    z-index: 1000;\n    cursor: pointer;\n}\n\n.fab:hover {\n    transform: scale(1.1) rotate(5deg);\n    box-shadow: 0 12px 35px rgba(79, 70, 229, 0.4);\n}\n\n.fab:active {\n    transform: scale(0.95);\n}\n\n/* Image Reveal Effect */\n.image-reveal {\n    position: relative;\n    overflow: hidden;\n    border-radius: 16px;\n}\n\n.image-reveal img {\n    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.image-reveal::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);\n    transition: left 0.6s ease;\n}\n\n.image-reveal:hover img {\n    transform: scale(1.05);\n}\n\n.image-reveal:hover::after {\n    left: 100%;\n}\n\n/* Text Gradient Animations */\n.text-gradient-animated {\n    background: linear-gradient(45deg, #667eea, #764ba2, #f093fb, #f5576c);\n    background-size: 400% 400%;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    animation: gradient-shift 3s ease infinite;\n}\n\n@keyframes gradient-shift {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n}\n\n/* Modern Progress Ring */\n.progress-ring {\n    width: 120px;\n    height: 120px;\n    position: relative;\n}\n\n.progress-ring svg {\n    width: 100%;\n    height: 100%;\n    transform: rotate(-90deg);\n}\n\n.progress-ring circle {\n    fill: none;\n    stroke-width: 8;\n    stroke-linecap: round;\n}\n\n.progress-ring .bg {\n    stroke: #e5e7eb;\n}\n\n.progress-ring .progress {\n    stroke: url(#gradient);\n    stroke-dasharray: 0 100;\n    transition: stroke-dasharray 0.5s ease;\n}\n\n/* Glassmorphism Navigation */\n.glass-nav {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 16px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n/* Magnetic Effect */\n.magnetic {\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n}\n\n.magnetic:hover {\n    transform: scale(1.05);\n}\n\n/* Responsive Enhancements */\n@media (max-width: 768px) {\n    .fab {\n        bottom: 1rem;\n        right: 1rem;\n        width: 50px;\n        height: 50px;\n        font-size: 1.2rem;\n    }\n    \n    .card-3d:hover {\n        transform: none;\n    }\n    \n    .morph-card::before {\n        animation: none;\n    }\n}\n\n.stagger-animation {\n    animation-delay: calc(var(--stagger-delay, 0) * 0.1s);\n}\n\n/* Enhanced Modals */\n.modal-content {\n    border: none;\n    border-radius: 16px;\n    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);\n}\n\n.modal-header {\n    border-bottom: 1px solid #e9ecef;\n    padding: 24px;\n}\n\n.modal-body {\n    padding: 24px;\n}\n\n.modal-footer {\n    border-top: 1px solid #e9ecef;\n    padding: 24px;\n}\n\n/* Focus States for Accessibility */\n.btn:focus,\n.form-control:focus,\n.nav-link:focus {\n    outline: 2px solid #007bff;\n    outline-offset: 2px;\n}\n\n/* Print Styles */\n@media print {\n    .sidebar,\n    .navbar,\n    .btn,\n    .modal {\n        display: none !important;\n    }\n    \n    .main-content {\n        margin: 0 !important;\n        padding: 0 !important;\n    }\n}","size_bytes":43406},"assets/js/admin.js":{"content":"\n/**\n * VideoHub Admin Panel Module\n * Handles admin dashboard functionality with API integration\n */\n\nclass AdminManager {\n    constructor() {\n        this.users = [];\n        this.videos = [];\n        this.stats = {};\n        this.usersTable = null;\n        this.currentUserId = null;\n        this.init();\n    }\n\n    async init() {\n        this.bindEvents();\n        \n        // Load page-specific data\n        const currentPage = window.location.pathname.split('/').pop();\n        if (currentPage === 'dashboard.html') {\n            await this.loadDashboardData();\n        } else {\n            await this.waitForAPIService();\n        }\n        \n        this.loadPageSpecificHandlers();\n    }\n\n    async waitForAPIService() {\n        let retries = 0;\n        const maxRetries = 50;\n        \n        while (retries < maxRetries && !window.apiService) {\n            await new Promise(resolve => setTimeout(resolve, 100));\n            retries++;\n        }\n\n        if (window.apiService) {\n            try {\n                const [usersResponse, videosResponse] = await Promise.all([\n                    window.apiService.get('/admin/users'),\n                    window.apiService.get('/videos')\n                ]);\n                \n                this.users = usersResponse.data || usersResponse.users || [];\n                this.videos = videosResponse.data || videosResponse.videos || [];\n            } catch (error) {\n                console.error('Failed to load data from API:', error);\n                this.users = [];\n                this.videos = [];\n            }\n        }\n    }\n\n    async loadDashboardData() {\n        // Prevent multiple concurrent loads using global state\n        if (window.VideoHubState && window.VideoHubState.isLoading('adminData')) {\n            console.log('Admin data loading already in progress, skipping...');\n            return;\n        }\n\n        try {\n            if (window.VideoHubState) {\n                window.VideoHubState.setLoading('adminData', true);\n            }\n\n            // Show section loaders\n            const metricsSection = document.querySelector('.admin-metrics');\n            const usersSection = document.querySelector('.admin-users');\n            const videosSection = document.querySelector('.admin-videos');\n\n            if (window.commonUtils) {\n                if (metricsSection) window.commonUtils.showSectionLoader(metricsSection, 'Loading admin metrics...');\n                if (usersSection) window.commonUtils.showSectionLoader(usersSection, 'Loading user data...');\n                if (videosSection) window.commonUtils.showSectionLoader(videosSection, 'Loading video data...');\n            }\n\n            // Wait for API service to be available\n            let retries = 0;\n            const maxRetries = 50;\n            \n            while (retries < maxRetries && !window.apiService) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n                retries++;\n            }\n\n            if (window.apiService) {\n                // Load admin metrics from new metrics API\n                const metricsResponse = await window.apiService.get('/metrics/admin');\n                if (metricsResponse.success) {\n                    const metrics = metricsResponse.data;\n                    this.updateDashboardMetrics(metrics);\n                }\n                \n                // Load additional data for dashboard\n                const [usersResponse, videosResponse] = await Promise.all([\n                    window.apiService.get('/admin/users'),\n                    window.apiService.get('/videos')\n                ]);\n                \n                this.users = usersResponse.data || usersResponse.users || [];\n                this.videos = videosResponse.data || videosResponse.videos || [];\n                \n                // Update sidebar badges\n                this.updateSidebarBadges();\n            }\n        } catch (error) {\n            console.error('Failed to load dashboard data:', error);\n            \n            // Handle API error with proper user feedback\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Loading admin dashboard data');\n            }\n            \n            // Set empty values on error\n            this.updateDashboardMetrics({\n                totalUsers: 0,\n                totalVideos: 0,\n                totalViews: 0,\n                pendingVideos: 0\n            });\n        } finally {\n            if (window.VideoHubState) {\n                window.VideoHubState.setLoading('adminData', false);\n            }\n\n            // Hide section loaders\n            const metricsSection = document.querySelector('.admin-metrics');\n            const usersSection = document.querySelector('.admin-users');\n            const videosSection = document.querySelector('.admin-videos');\n\n            if (window.commonUtils) {\n                if (metricsSection) window.commonUtils.hideSectionLoader(metricsSection);\n                if (usersSection) window.commonUtils.hideSectionLoader(usersSection);\n                if (videosSection) window.commonUtils.hideSectionLoader(videosSection);\n            }\n        }\n    }\n\n    updateDashboardMetrics(metrics) {\n        // Update dashboard metric displays\n        const totalUsersEl = document.getElementById('totalUsers');\n        const totalVideosEl = document.getElementById('totalVideos');\n        const totalViewsEl = document.getElementById('totalViews');\n        const pendingVideosEl = document.getElementById('pendingVideos');\n        \n        if (totalUsersEl) totalUsersEl.textContent = metrics.totalUsers || 0;\n        if (totalVideosEl) totalVideosEl.textContent = metrics.totalVideos || 0;\n        if (totalViewsEl) totalViewsEl.textContent = metrics.totalViews || 0;\n        if (pendingVideosEl) pendingVideosEl.textContent = metrics.pendingVideos || 0;\n    }\n\n    updateSidebarBadges() {\n        // Sidebar badges removed for cleaner interface\n    }\n\n    bindEvents() {\n        // Event listeners for admin functionality\n        document.addEventListener('DOMContentLoaded', () => {\n            this.loadPageSpecificHandlers();\n            this.bindModalEvents();\n        });\n    }\n\n    bindModalEvents() {\n        // Add User Modal\n        const saveUserBtn = document.getElementById('saveUser');\n        if (saveUserBtn) {\n            saveUserBtn.addEventListener('click', () => this.handleAddUser());\n        }\n\n        // Edit User Modal\n        const updateUserBtn = document.getElementById('updateUser');\n        if (updateUserBtn) {\n            updateUserBtn.addEventListener('click', () => this.handleUpdateUser());\n        }\n\n        // Confirm Delete\n        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');\n        if (confirmDeleteBtn) {\n            confirmDeleteBtn.addEventListener('click', () => this.handleConfirmDelete());\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        switch (currentPage) {\n            case 'dashboard.html':\n                this.initDashboard();\n                break;\n            case 'users.html':\n                this.initUsersPage();\n                break;\n            case 'videos.html':\n                this.initVideosPage();\n                break;\n        }\n    }\n\n    initDashboard() {\n        console.log('Admin dashboard initialized');\n    }\n\n    async initUsersPage() {\n        await this.loadUsersDataTable();\n    }\n\n    initVideosPage() {\n        this.loadVideosGrid();\n    }\n\n    async loadUsersDataTable() {\n        // Wait for jQuery and DataTables to be available\n        if (typeof $ === 'undefined' || !$.fn.DataTable) {\n            setTimeout(() => this.loadUsersDataTable(), 100);\n            return;\n        }\n\n        // Check if table element exists\n        const tableElement = $('#usersTable');\n        if (tableElement.length === 0) {\n            console.error('Users table element not found');\n            return;\n        }\n\n        // Load users data first\n        if (!this.users.length && window.apiService) {\n            try {\n                const response = await window.apiService.get('/admin/users');\n                this.users = response.data || response.users || [];\n            } catch (error) {\n                console.error('Failed to load users:', error);\n                this.users = [];\n            }\n        }\n\n        // Update total users count\n        const totalUsersCount = document.getElementById('totalUsersCount');\n        if (totalUsersCount) {\n            totalUsersCount.textContent = this.users.length;\n        }\n\n        // Properly destroy existing DataTable\n        if ($.fn.DataTable.isDataTable('#usersTable')) {\n            tableElement.DataTable().clear().destroy();\n            this.usersTable = null;\n        }\n\n        // Small delay to ensure cleanup is complete\n        await new Promise(resolve => setTimeout(resolve, 100));\n\n        // Initialize DataTable\n        this.usersTable = tableElement.DataTable({\n            data: this.users,\n            responsive: true,\n            pageLength: 25,\n            order: [[0, 'asc']],\n            columnDefs: [\n                { \n                    targets: 0,\n                    data: 'id',\n                    width: '60px',\n                    className: 'text-center'\n                },\n                { \n                    targets: 1,\n                    data: null,\n                    orderable: true,\n                    render: function(data, type, row) {\n                        const firstName = row.firstName || row.name || 'Unknown';\n                        const lastName = row.lastName || '';\n                        const fullName = `${firstName} ${lastName}`.trim();\n                        return `\n                            <div class=\"d-flex align-items-center\">\n                                <div class=\"bg-primary bg-opacity-10 rounded-circle d-flex align-items-center justify-content-center me-3\" style=\"width: 40px; height: 40px;\">\n                                    <i class=\"fas fa-user text-primary\"></i>\n                                </div>\n                                <div>\n                                    <div class=\"fw-semibold\">${fullName}</div>\n                                    <small class=\"text-muted\">ID: ${row.id}</small>\n                                </div>\n                            </div>\n                        `;\n                    }\n                },\n                { \n                    targets: 2,\n                    data: 'email',\n                    render: function(data) {\n                        return data || 'No email';\n                    }\n                },\n                { \n                    targets: 3,\n                    data: 'role',\n                    render: function(data) {\n                        const badgeClass = {\n                            'admin': 'danger',\n                            'creator': 'success', \n                            'viewer': 'primary'\n                        };\n                        const roleText = data ? data.charAt(0).toUpperCase() + data.slice(1) : 'Viewer';\n                        return `<span class=\"badge bg-${badgeClass[data] || 'secondary'}\">${roleText}</span>`;\n                    }\n                },\n                {\n                    targets: 4,\n                    data: 'status',\n                    render: function(data) {\n                        const badgeClass = {\n                            'active': 'success',\n                            'inactive': 'warning',\n                            'suspended': 'danger',\n                            'revoked': 'dark'\n                        };\n                        const statusText = data ? data.charAt(0).toUpperCase() + data.slice(1) : 'Active';\n                        return `<span class=\"badge bg-${badgeClass[data] || 'success'}\">${statusText}</span>`;\n                    }\n                },\n                {\n                    targets: 5,\n                    data: null,\n                    render: function(data, type, row) {\n                        return row.email_verified_at ? '<span class=\"badge bg-success\">Verified</span>' : '<span class=\"badge bg-warning\">Not Verified</span>';\n                    }\n                },\n                {\n                    targets: 6,\n                    data: 'joinDate',\n                    render: function(data) {\n                        if (!data) return 'Unknown';\n                        try {\n                            return new Date(data).toLocaleDateString();\n                        } catch (e) {\n                            return data;\n                        }\n                    }\n                },\n                {\n                    targets: 7,\n                    data: null,\n                    orderable: false,\n                    width: '200px',\n                    className: 'text-center',\n                    render: function(data, type, row) {\n                        return `\n                            <div class=\"btn-group\" role=\"group\">\n                                <div class=\"dropdown\">\n                                    <button class=\"btn btn-sm btn-outline-info dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\" title=\"View Options\">\n                                        <i class=\"fas fa-eye\"></i>\n                                    </button>\n                                    <ul class=\"dropdown-menu\">\n                                        <li><a class=\"dropdown-item\" href=\"#\" onclick=\"adminManager.showUserDetails(${row.id})\"><i class=\"fas fa-info-circle me-2\"></i>Quick View</a></li>\n                                        <li><a class=\"dropdown-item\" href=\"#\" onclick=\"viewUserDetailsPage(${row.id})\"><i class=\"fas fa-external-link-alt me-2\"></i>Full Details</a></li>\n                                    </ul>\n                                </div>\n                                <button class=\"btn btn-sm btn-outline-primary\" onclick=\"adminManager.editUser(${row.id})\" title=\"Edit User\">\n                                    <i class=\"fas fa-edit\"></i>\n                                </button>\n                                <button class=\"btn btn-sm btn-outline-warning\" onclick=\"adminManager.revokeUser(${row.id})\" title=\"Revoke Access\">\n                                    <i class=\"fas fa-ban\"></i>\n                                </button>\n                                <button class=\"btn btn-sm btn-outline-danger\" onclick=\"adminManager.deleteUser(${row.id})\" title=\"Delete User\">\n                                    <i class=\"fas fa-trash\"></i>\n                                </button>\n                            </div>\n                        `;\n                    }\n                }\n            ],\n            language: {\n                search: \"Search users:\",\n                lengthMenu: \"Show _MENU_ users per page\",\n                info: \"Showing _START_ to _END_ of _TOTAL_ users\",\n                infoEmpty: \"No users available\",\n                infoFiltered: \"(filtered from _MAX_ total users)\",\n                zeroRecords: \"No matching users found\",\n                paginate: {\n                    first: \"First\",\n                    last: \"Last\",\n                    next: \"Next\",\n                    previous: \"Previous\"\n                }\n            },\n            dom: '<\"row\"<\"col-sm-12 col-md-6\"l><\"col-sm-12 col-md-6\"f>>' +\n                 '<\"row\"<\"col-sm-12\"tr>>' +\n                 '<\"row\"<\"col-sm-12 col-md-5\"i><\"col-sm-12 col-md-7\"p>>',\n            searchDelay: 400,\n            processing: true\n        });\n    }\n\n    // User management methods\n    async showUserDetails(userId) {\n        try {\n            // Find user in local data first\n            let user = this.users.find(u => u.id == userId);\n            \n            // If not found locally, fetch from API\n            if (!user) {\n                const response = await fetch(`/api/admin/users?id=${userId}`);\n                const result = await response.json();\n                if (result.success) {\n                    user = result.data;\n                }\n            }\n\n            if (user) {\n                // Populate user details modal\n                document.getElementById('detailUserId').textContent = user.id;\n                document.getElementById('detailUserName').textContent = user.name || 'Unknown User';\n                document.getElementById('detailUserEmail').textContent = user.email || 'No email';\n                document.getElementById('detailUserRole').textContent = (user.role || 'viewer').charAt(0).toUpperCase() + (user.role || 'viewer').slice(1);\n                document.getElementById('detailUserRole').className = `badge bg-${this.getUserRoleBadgeClass(user.role)}`;\n                \n                // Status badge\n                const statusEl = document.getElementById('detailUserStatus');\n                statusEl.textContent = (user.status || 'active').charAt(0).toUpperCase() + (user.status || 'active').slice(1);\n                statusEl.className = `badge bg-${user.status === 'active' ? 'success' : user.status === 'suspended' ? 'danger' : user.status === 'revoked' ? 'dark' : 'warning'}`;\n                \n                document.getElementById('detailJoinDate').textContent = user.joinDate ? new Date(user.joinDate).toLocaleDateString() : (user.created_at ? new Date(user.created_at).toLocaleDateString() : 'Unknown');\n                document.getElementById('detailEmailVerified').textContent = user.email_verified_at ? 'Verified' : 'Not Verified';\n                document.getElementById('detailEmailVerified').className = `badge bg-${user.email_verified_at ? 'success' : 'warning'}`;\n                document.getElementById('detailLastLogin').textContent = 'Recently'; // Mock data for now\n                \n                // Mock additional data - in production, you'd fetch this from API\n                document.getElementById('detailVideoCount').textContent = Math.floor(Math.random() * 10);\n                document.getElementById('detailPurchaseCount').textContent = Math.floor(Math.random() * 20);\n                document.getElementById('detailTotalSpent').textContent = `$${(Math.random() * 500).toFixed(2)}`;\n                \n                // Store current user ID for editing\n                this.currentUserId = userId;\n                \n                // Show modal\n                const modal = new bootstrap.Modal(document.getElementById('userDetailsModal'));\n                modal.show();\n            } else {\n                this.showAlert('User not found', 'danger');\n            }\n        } catch (error) {\n            console.error('Error loading user details:', error);\n            this.showAlert('Failed to load user details', 'danger');\n        }\n    }\n\n    async editUser(userId) {\n        try {\n            const response = await fetch(`/api/admin/users?id=${userId}`);\n            const result = await response.json();\n            \n            if (result.success && result.data) {\n                const user = result.data;\n                \n                // Fill edit form\n                document.getElementById('editUserId').value = user.id;\n                document.getElementById('editFirstName').value = user.name?.split(' ')[0] || '';\n                document.getElementById('editLastName').value = user.name?.split(' ').slice(1).join(' ') || '';\n                document.getElementById('editEmail').value = user.email;\n                document.getElementById('editUserType').value = user.role;\n                document.getElementById('editStatus').value = user.status || 'active';\n                \n                // Show modal\n                const modal = new bootstrap.Modal(document.getElementById('editUserModal'));\n                modal.show();\n            }\n        } catch (error) {\n            console.error('Error loading user for edit:', error);\n            this.showAlert('Error loading user details', 'danger');\n        }\n    }\n\n    async revokeUser(userId) {\n        if (confirm('Are you sure you want to revoke access for this user?')) {\n            try {\n                const response = await fetch('/api/admin/users', {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id: userId,\n                        status: 'revoked'\n                    })\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    this.showAlert('User access revoked successfully', 'warning');\n                    this.refreshUsersTable();\n                } else {\n                    this.showAlert(result.message || 'Failed to revoke user access', 'danger');\n                }\n            } catch (error) {\n                console.error('Error revoking user:', error);\n                this.showAlert('Error revoking user access', 'danger');\n            }\n        }\n    }\n\n    async deleteUser(userId) {\n        if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {\n            try {\n                const response = await fetch('/api/admin/users', {\n                    method: 'DELETE',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ id: userId })\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    this.showAlert('User deleted successfully', 'success');\n                    this.refreshUsersTable();\n                } else {\n                    this.showAlert(result.message || 'Failed to delete user', 'danger');\n                }\n            } catch (error) {\n                console.error('Error deleting user:', error);\n                this.showAlert('Error deleting user', 'danger');\n            }\n        }\n    }\n\n    async createUser(userData) {\n        try {\n            const response = await fetch('/api/admin/users', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(userData)\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                this.showAlert('User created successfully', 'success');\n                this.refreshUsersTable();\n                return true;\n            } else {\n                this.showAlert(result.message || 'Failed to create user', 'danger');\n                return false;\n            }\n        } catch (error) {\n            console.error('Error creating user:', error);\n            this.showAlert('Error creating user', 'danger');\n            return false;\n        }\n    }\n\n    async updateUser(userData) {\n        try {\n            const response = await fetch('/api/admin/users', {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(userData)\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                this.showAlert('User updated successfully', 'success');\n                this.refreshUsersTable();\n                return true;\n            } else {\n                this.showAlert(result.message || 'Failed to update user', 'danger');\n                return false;\n            }\n        } catch (error) {\n            console.error('Error updating user:', error);\n            this.showAlert('Error updating user', 'danger');\n            return false;\n        }\n    }\n\n    async refreshUsersTable() {\n        if (this.usersTable && $.fn.DataTable.isDataTable('#usersTable')) {\n            // Reload data\n            try {\n                const response = await fetch('/api/admin/users');\n                const result = await response.json();\n                \n                if (result.success) {\n                    this.users = result.data || [];\n                    this.usersTable.clear();\n                    this.usersTable.rows.add(this.users);\n                    this.usersTable.draw();\n                    \n                    // Update total count\n                    const totalUsersCount = document.getElementById('totalUsersCount');\n                    if (totalUsersCount) {\n                        totalUsersCount.textContent = this.users.length;\n                    }\n                }\n            } catch (error) {\n                console.error('Error refreshing users table:', error);\n                this.showAlert('Error refreshing table', 'danger');\n            }\n        } else {\n            // If table doesn't exist, reinitialize it\n            await this.loadUsersDataTable();\n        }\n    }\n\n    showAlert(message, type) {\n        const alertDiv = document.createElement('div');\n        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;\n        alertDiv.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        const container = document.querySelector('main');\n        if (container) {\n            container.insertBefore(alertDiv, container.firstChild);\n            \n            setTimeout(() => {\n                alertDiv.remove();\n            }, 5000);\n        }\n    }\n\n    async loadVideosGrid() {\n        const videosGrid = document.getElementById('videosGrid');\n        const loadingIndicator = document.getElementById('videosLoadingIndicator');\n        const emptyState = document.getElementById('emptyState');\n        \n        if (!videosGrid) return;\n        \n        try {\n            // Show loading indicator\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'block';\n            }\n            if (emptyState) {\n                emptyState.classList.add('d-none');\n            }\n            \n            // Try to load from admin videos endpoint first, fallback to regular videos endpoint\n            let response = await fetch('/api/admin/videos');\n            let result = await response.json();\n            \n            if (!result.success) {\n                // Fallback to regular videos API\n                response = await fetch('/api/videos');\n                result = await response.json();\n                \n                if (result.success && result.data && result.data.videos) {\n                    // Transform videos data for admin display\n                    this.videos = result.data.videos.map(video => ({\n                        id: video.id,\n                        title: video.title,\n                        description: video.description,\n                        price: video.price,\n                        thumbnail: video.thumbnail,\n                        creator_name: video.creatorName,\n                        creator_email: '',\n                        upload_date: video.uploadDate,\n                        views: video.views,\n                        purchase_count: video.views,\n                        status: video.status || 'published',\n                        created_at: new Date().toISOString(),\n                        youtube_thumbnail: video.thumbnail,\n                        youtube_channel_title: video.creatorName,\n                        youtube_views: video.views\n                    }));\n                } else {\n                    throw new Error('Failed to load videos from both endpoints');\n                }\n            } else {\n                this.videos = result.data || [];\n            }\n            \n            // Update stats cards\n            this.updateVideoStats();\n            \n            // Render videos grid\n            this.renderVideosGrid();\n            \n        } catch (error) {\n            console.error('Error loading videos:', error);\n            videosGrid.innerHTML = `\n                <div class=\"col-12 text-center py-4\">\n                    <div class=\"text-danger\">\n                        <i class=\"fas fa-exclamation-triangle fa-2x mb-2\"></i>\n                        <p>Error loading videos: ${error.message}</p>\n                        <button class=\"btn btn-outline-primary btn-sm\" onclick=\"adminManager.loadVideosGrid()\">\n                            <i class=\"fas fa-refresh me-1\"></i>Retry\n                        </button>\n                    </div>\n                </div>\n            `;\n        } finally {\n            // Hide loading indicator\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'none';\n            }\n        }\n    }\n\n    renderVideosGrid() {\n        const videosGrid = document.getElementById('videosGrid');\n        const emptyState = document.getElementById('emptyState');\n        \n        if (!videosGrid) return;\n        \n        if (this.videos.length === 0) {\n            if (emptyState) {\n                emptyState.classList.remove('d-none');\n            }\n            videosGrid.innerHTML = '';\n            return;\n        }\n        \n        if (emptyState) {\n            emptyState.classList.add('d-none');\n        }\n        \n        videosGrid.innerHTML = '';\n        \n        this.videos.forEach(video => {\n            const videoCard = document.createElement('div');\n            videoCard.className = 'col-lg-4 col-md-6 mb-4';\n            \n            const statusClass = video.status === 'published' || video.status === 'active' ? 'success' : \n                              video.status === 'pending' ? 'warning' : \n                              video.status === 'flagged' ? 'danger' : 'secondary';\n            \n            const uploadDate = video.upload_date ? new Date(video.upload_date).toLocaleDateString() : \n                             video.created_at ? new Date(video.created_at).toLocaleDateString() : 'Unknown';\n            \n            videoCard.innerHTML = `\n                <div class=\"card h-100\">\n                    <div class=\"position-relative\">\n                        <img src=\"${video.thumbnail || video.youtube_thumbnail || 'https://via.placeholder.com/350x200/007bff/ffffff?text=Video+Thumbnail'}\" \n                             class=\"card-img-top\" alt=\"${video.title}\" style=\"height: 200px; object-fit: cover;\">\n                        <div class=\"position-absolute top-0 end-0 m-2\">\n                            <span class=\"badge bg-${statusClass}\">${(video.status || 'active').charAt(0).toUpperCase() + (video.status || 'active').slice(1)}</span>\n                        </div>\n                        <div class=\"position-absolute bottom-0 end-0 m-2\">\n                            <span class=\"badge bg-dark\">${video.duration || '00:00'}</span>\n                        </div>\n                        <div class=\"position-absolute top-0 start-0 m-2\">\n                            <span class=\"badge bg-success\">$${parseFloat(video.price || 0).toFixed(2)}</span>\n                        </div>\n                    </div>\n                    <div class=\"card-body\">\n                        <h6 class=\"card-title\" title=\"${video.title}\">${video.title.length > 50 ? video.title.substring(0, 47) + '...' : video.title}</h6>\n                        <div class=\"d-flex align-items-center mb-2\">\n                            <i class=\"fas fa-user me-2 text-muted\"></i>\n                            <span class=\"text-muted small\">by ${video.creator_name || video.youtube_channel_title || 'Unknown Creator'}</span>\n                        </div>\n                        <div class=\"d-flex justify-content-between align-items-center mb-3\">\n                            <div class=\"d-flex align-items-center text-muted small\">\n                                <i class=\"fas fa-eye me-1\"></i>\n                                <span>${(video.views || video.youtube_views || 0).toLocaleString()} views</span>\n                            </div>\n                            <div class=\"d-flex align-items-center text-muted small\">\n                                <i class=\"fas fa-calendar me-1\"></i>\n                                <span>${uploadDate}</span>\n                            </div>\n                        </div>\n                        <div class=\"d-flex gap-2\">\n                            <button class=\"btn btn-success btn-sm flex-fill\" onclick=\"adminManager.approveVideo(${video.id})\" title=\"Approve Video\">\n                                <i class=\"fas fa-check me-1\"></i>Approve\n                            </button>\n                            <button class=\"btn btn-danger btn-sm flex-fill\" onclick=\"adminManager.rejectVideo(${video.id})\" title=\"Reject Video\">\n                                <i class=\"fas fa-times me-1\"></i>Reject\n                            </button>\n                            <button class=\"btn btn-outline-primary btn-sm\" onclick=\"adminManager.showVideoDetails(${video.id})\" title=\"View Details\">\n                                <i class=\"fas fa-eye\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `;\n            videosGrid.appendChild(videoCard);\n        });\n    }\n\n    async loadVideosTable() {\n        const tbody = document.querySelector('#videosTableBody');\n        const loadingIndicator = document.getElementById('videosLoadingIndicator');\n        const emptyState = document.getElementById('videosEmptyState');\n        const totalCount = document.getElementById('totalVideosCount');\n        \n        if (!tbody) return;\n        \n        try {\n            // Show loading indicator\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'block';\n            }\n            if (emptyState) {\n                emptyState.classList.add('d-none');\n            }\n            \n            // Try to load from admin videos endpoint first, fallback to regular videos endpoint\n            let response = await fetch('/api/admin/videos');\n            let result = await response.json();\n            \n            if (!result.success) {\n                // Fallback to regular videos API\n                response = await fetch('/api/videos');\n                result = await response.json();\n                \n                if (result.success && result.data && result.data.videos) {\n                    // Transform videos data for admin display\n                    this.videos = result.data.videos.map(video => ({\n                        id: video.id,\n                        title: video.title,\n                        description: video.description,\n                        price: video.price,\n                        thumbnail: video.thumbnail,\n                        creator_name: video.creatorName,\n                        creator_email: '',\n                        upload_date: video.uploadDate,\n                        views: video.views,\n                        purchase_count: video.views,\n                        status: video.status || 'published',\n                        created_at: new Date().toISOString()\n                    }));\n                } else {\n                    throw new Error('Failed to load videos from both endpoints');\n                }\n            } else {\n                this.videos = result.data || [];\n            }\n            \n            // Update total count\n            if (totalCount) {\n                totalCount.textContent = this.videos.length;\n            }\n            \n            // Update stats cards\n            this.updateVideoStats();\n            \n            // Clear existing content\n            tbody.innerHTML = '';\n            \n            if (this.videos.length === 0) {\n                if (emptyState) {\n                    emptyState.classList.remove('d-none');\n                }\n            } else {\n                this.videos.forEach(video => {\n                    const row = document.createElement('tr');\n                    row.innerHTML = `\n                        <td><span class=\"fw-bold\">${video.id}</span></td>\n                        <td>\n                            <img src=\"${video.thumbnail || 'https://via.placeholder.com/60x40'}\" \n                                 alt=\"${video.title}\" class=\"rounded shadow-sm\" \n                                 style=\"width: 60px; height: 40px; object-fit: cover;\">\n                        </td>\n                        <td>\n                            <div class=\"fw-bold\">${video.title}</div>\n                            <small class=\"text-muted\">${video.description ? video.description.substring(0, 50) + '...' : 'No description'}</small>\n                        </td>\n                        <td>\n                            <div>${video.creator_name || 'Unknown'}</div>\n                            <small class=\"text-muted\">${video.creator_email || ''}</small>\n                        </td>\n                        <td><span class=\"fw-bold text-success\">$${video.price || '0.00'}</span></td>\n                        <td>\n                            <span class=\"badge bg-${this.getVideoStatusBadgeColor(video.status)}\">${video.status || 'active'}</span>\n                        </td>\n                        <td><span class=\"fw-bold\">${video.views || video.purchase_count || 0}</span></td>\n                        <td>${video.upload_date || new Date(video.created_at).toLocaleDateString()}</td>\n                        <td>\n                            <div class=\"btn-group btn-group-sm\">\n                                <button class=\"btn btn-outline-info btn-sm\" onclick=\"adminManager.viewVideo(${video.id})\" title=\"View Video\">\n                                    <i class=\"fas fa-eye\"></i>\n                                </button>\n                                <button class=\"btn btn-outline-primary btn-sm\" onclick=\"adminManager.editVideo(${video.id})\" title=\"Edit Video\">\n                                    <i class=\"fas fa-edit\"></i>\n                                </button>\n                                <button class=\"btn btn-outline-warning btn-sm\" onclick=\"adminManager.toggleVideoStatus(${video.id})\" title=\"Toggle Status\">\n                                    <i class=\"fas fa-toggle-on\"></i>\n                                </button>\n                                <button class=\"btn btn-outline-danger btn-sm\" onclick=\"adminManager.deleteVideo(${video.id})\" title=\"Delete Video\">\n                                    <i class=\"fas fa-trash\"></i>\n                                </button>\n                            </div>\n                        </td>\n                    `;\n                    tbody.appendChild(row);\n                });\n            }\n            \n        } catch (error) {\n            console.error('Error loading videos:', error);\n            tbody.innerHTML = `\n                <tr>\n                    <td colspan=\"9\" class=\"text-center py-4\">\n                        <div class=\"text-danger\">\n                            <i class=\"fas fa-exclamation-triangle fa-2x mb-2\"></i>\n                            <p>Error loading videos: ${error.message}</p>\n                            <button class=\"btn btn-outline-primary btn-sm\" onclick=\"adminManager.loadVideosTable()\">\n                                <i class=\"fas fa-refresh me-1\"></i>Retry\n                            </button>\n                        </div>\n                    </td>\n                </tr>\n            `;\n        } finally {\n            // Hide loading indicator\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'none';\n            }\n        }\n    }\n\n    updateVideoStats() {\n        const totalVideos = document.getElementById('totalVideos');\n        const publishedVideos = document.getElementById('publishedVideos');\n        const pendingVideos = document.getElementById('pendingVideos');\n        const flaggedVideos = document.getElementById('flaggedVideos');\n        \n        if (totalVideos) totalVideos.textContent = this.videos.length;\n        if (publishedVideos) publishedVideos.textContent = this.videos.filter(v => v.status === 'published' || v.status === 'active').length;\n        if (pendingVideos) pendingVideos.textContent = this.videos.filter(v => v.status === 'pending').length;\n        if (flaggedVideos) flaggedVideos.textContent = this.videos.filter(v => v.status === 'flagged').length;\n    }\n\n    getVideoStatusBadgeColor(status) {\n        switch(status) {\n            case 'published':\n            case 'active': return 'success';\n            case 'pending': return 'warning';\n            case 'flagged': return 'danger';\n            case 'draft': return 'secondary';\n            default: return 'primary';\n        }\n    }\n\n    // Video management methods\n    async viewVideo(videoId) {\n        window.open(`/video-player.html?id=${videoId}`, '_blank');\n    }\n\n    async editVideo(videoId) {\n        // Redirect to video edit page or show modal\n        this.showAlert('Video editing functionality coming soon', 'info');\n    }\n\n    async toggleVideoStatus(videoId) {\n        try {\n            const video = this.videos.find(v => v.id === videoId);\n            if (!video) return;\n            \n            const newStatus = video.status === 'active' ? 'pending' : 'active';\n            \n            // Here you would call API to update video status\n            this.showAlert(`Video status would be changed to ${newStatus}`, 'info');\n            \n        } catch (error) {\n            console.error('Error toggling video status:', error);\n            this.showAlert('Error updating video status', 'danger');\n        }\n    }\n\n    async approveVideo(videoId) {\n        try {\n            const video = this.videos.find(v => v.id === videoId);\n            if (!video) return;\n            \n            // Update video status to published\n            const response = await fetch(`/api/endpoints/videos.php/${videoId}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    ...video,\n                    status: 'published'\n                })\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                // Update local data\n                const videoIndex = this.videos.findIndex(v => v.id === videoId);\n                if (videoIndex !== -1) {\n                    this.videos[videoIndex].status = 'published';\n                }\n                \n                this.showAlert('Video approved successfully', 'success');\n                this.renderVideosGrid();\n                this.updateVideoStats();\n            } else {\n                this.showAlert('Failed to approve video', 'danger');\n            }\n        } catch (error) {\n            console.error('Error approving video:', error);\n            this.showAlert('Error approving video', 'danger');\n        }\n    }\n\n    async rejectVideo(videoId) {\n        if (confirm('Are you sure you want to reject this video?')) {\n            try {\n                const video = this.videos.find(v => v.id === videoId);\n                if (!video) return;\n                \n                // Update video status to rejected\n                const response = await fetch(`/api/endpoints/videos.php/${videoId}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        ...video,\n                        status: 'rejected'\n                    })\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    // Update local data\n                    const videoIndex = this.videos.findIndex(v => v.id === videoId);\n                    if (videoIndex !== -1) {\n                        this.videos[videoIndex].status = 'rejected';\n                    }\n                    \n                    this.showAlert('Video rejected', 'warning');\n                    this.renderVideosGrid();\n                    this.updateVideoStats();\n                } else {\n                    this.showAlert('Failed to reject video', 'danger');\n                }\n            } catch (error) {\n                console.error('Error rejecting video:', error);\n                this.showAlert('Error rejecting video', 'danger');\n            }\n        }\n    }\n\n    async showVideoDetails(videoId) {\n        try {\n            const video = this.videos.find(v => v.id === videoId);\n            if (!video) {\n                this.showAlert('Video not found', 'danger');\n                return;\n            }\n            \n            // Populate modal with video details\n            document.getElementById('modalVideoThumbnail').src = video.thumbnail || video.youtube_thumbnail || 'https://via.placeholder.com/300x200';\n            document.getElementById('modalVideoTitle').textContent = video.title;\n            document.getElementById('modalVideoCreator').textContent = video.creator_name || video.youtube_channel_title || 'Unknown Creator';\n            document.getElementById('modalVideoDuration').textContent = video.duration || '00:00';\n            document.getElementById('modalVideoDate').textContent = video.upload_date ? new Date(video.upload_date).toLocaleDateString() : 'Unknown';\n            document.getElementById('modalVideoViews').textContent = (video.views || video.youtube_views || 0).toLocaleString();\n            document.getElementById('modalVideoPrice').textContent = `$${parseFloat(video.price || 0).toFixed(2)}`;\n            document.getElementById('modalVideoStatus').textContent = (video.status || 'active').charAt(0).toUpperCase() + (video.status || 'active').slice(1);\n            document.getElementById('modalVideoStatus').className = `badge bg-${this.getVideoStatusBadgeColor(video.status)}`;\n            document.getElementById('modalVideoDescription').textContent = video.description || 'No description available';\n            \n            // Show modal\n            const modal = new bootstrap.Modal(document.getElementById('videoDetailsModal'));\n            modal.show();\n        } catch (error) {\n            console.error('Error showing video details:', error);\n            this.showAlert('Error loading video details', 'danger');\n        }\n    }\n\n    async deleteVideo(videoId) {\n        if (confirm('Are you sure you want to delete this video? This action cannot be undone.')) {\n            try {\n                const response = await fetch(`/api/endpoints/videos.php/${videoId}`, {\n                    method: 'DELETE',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n                \n                const result = await response.json();\n                \n                if (result.success) {\n                    // Remove from local data\n                    this.videos = this.videos.filter(v => v.id !== videoId);\n                    \n                    this.showAlert('Video deleted successfully', 'success');\n                    this.renderVideosGrid();\n                    this.updateVideoStats();\n                } else {\n                    this.showAlert('Failed to delete video', 'danger');\n                }\n            } catch (error) {\n                console.error('Error deleting video:', error);\n                this.showAlert('Error deleting video', 'danger');\n            }\n        }\n    }\n\n    getUserRoleBadgeClass(role) {\n        switch(role) {\n            case 'admin': return 'danger';\n            case 'creator': return 'success';\n            case 'viewer': return 'primary';\n            default: return 'secondary';\n        }\n    }\n\n    // User Management Methods\n    async showUserDetails(userId) {\n        try {\n            // Find user in local data first\n            let user = this.users.find(u => u.id === userId);\n            \n            // If not found locally, fetch from API\n            if (!user && window.apiService) {\n                const response = await window.apiService.get(`/api/users/${userId}`);\n                if (response.success) {\n                    user = response.data;\n                }\n            }\n\n            if (user) {\n                // Populate user details modal\n                document.getElementById('detailUserId').textContent = user.id;\n                document.getElementById('detailUserName').textContent = `${user.firstName || user.name || 'Unknown'} ${user.lastName || ''}`.trim();\n                document.getElementById('detailUserEmail').textContent = user.email || 'No email';\n                document.getElementById('detailUserRole').textContent = (user.role || 'viewer').charAt(0).toUpperCase() + (user.role || 'viewer').slice(1);\n                document.getElementById('detailUserRole').className = `badge bg-${this.getUserRoleBadgeClass(user.role)}`;\n                \n                // Status badge\n                const statusEl = document.getElementById('detailUserStatus');\n                statusEl.textContent = (user.status || 'active').charAt(0).toUpperCase() + (user.status || 'active').slice(1);\n                statusEl.className = `badge bg-${user.status === 'active' ? 'success' : user.status === 'suspended' ? 'danger' : user.status === 'revoked' ? 'dark' : 'warning'}`;\n                \n                document.getElementById('detailJoinDate').textContent = user.joinDate ? new Date(user.joinDate).toLocaleDateString() : 'Unknown';\n                document.getElementById('detailEmailVerified').textContent = user.email_verified_at ? 'Verified' : 'Not Verified';\n                document.getElementById('detailEmailVerified').className = `badge bg-${user.email_verified_at ? 'success' : 'warning'}`;\n                document.getElementById('detailLastLogin').textContent = 'Recently'; // Mock data\n                \n                // Mock additional data\n                document.getElementById('detailVideoCount').textContent = Math.floor(Math.random() * 10);\n                document.getElementById('detailPurchaseCount').textContent = Math.floor(Math.random() * 20);\n                document.getElementById('detailTotalSpent').textContent = `$${(Math.random() * 500).toFixed(2)}`;\n                \n                // Store current user ID\n                this.currentUserId = userId;\n                \n                // Show modal\n                const modal = new bootstrap.Modal(document.getElementById('userDetailsModal'));\n                modal.show();\n            } else {\n                window.apiService?.showErrorMessage('User not found');\n            }\n        } catch (error) {\n            console.error('Error showing user details:', error);\n            window.apiService?.showErrorMessage('Failed to load user details');\n        }\n    }\n\n    editUser(userId) {\n        try {\n            const user = this.users.find(u => u.id === userId);\n            if (!user) {\n                window.apiService?.showErrorMessage('User not found');\n                return;\n            }\n\n            // Populate edit form\n            document.getElementById('editUserId').value = user.id;\n            document.getElementById('editFirstName').value = user.firstName || user.name || '';\n            document.getElementById('editLastName').value = user.lastName || '';\n            document.getElementById('editEmail').value = user.email || '';\n            document.getElementById('editUserType').value = user.role || 'viewer';\n            document.getElementById('editStatus').value = user.status || 'active';\n\n            // Show modal\n            const modal = new bootstrap.Modal(document.getElementById('editUserModal'));\n            modal.show();\n        } catch (error) {\n            console.error('Error editing user:', error);\n            window.apiService?.showErrorMessage('Failed to load user for editing');\n        }\n    }\n\n    async revokeUser(userId) {\n        if (confirm('Are you sure you want to revoke access for this user? They will no longer be able to access their dashboard.')) {\n            try {\n                // Update user status to revoked\n                const response = await window.apiService.put(`/api/users/${userId}`, {\n                    status: 'revoked'\n                });\n\n                if (response.success) {\n                    // Update local data\n                    const userIndex = this.users.findIndex(u => u.id === userId);\n                    if (userIndex !== -1) {\n                        this.users[userIndex].status = 'revoked';\n                    }\n                    \n                    // Refresh DataTable\n                    this.usersTable.clear().rows.add(this.users).draw();\n                    \n                    window.apiService.showSuccessMessage('User access revoked successfully');\n                } else {\n                    window.apiService.handleApiError(response, 'Failed to revoke user access');\n                }\n            } catch (error) {\n                console.error('Error revoking user:', error);\n                // Demo mode - update locally\n                const userIndex = this.users.findIndex(u => u.id === userId);\n                if (userIndex !== -1) {\n                    this.users[userIndex].status = 'revoked';\n                    this.usersTable.clear().rows.add(this.users).draw();\n                    window.apiService.showSuccessMessage('User access revoked successfully (demo mode)');\n                }\n            }\n        }\n    }\n\n    deleteUser(userId) {\n        this.currentUserId = userId;\n        const modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));\n        modal.show();\n    }\n\n    async handleConfirmDelete() {\n        if (!this.currentUserId) return;\n\n        try {\n            const response = await window.apiService.delete(`/api/users/${this.currentUserId}`);\n            \n            if (response.success) {\n                // Remove from local data\n                this.users = this.users.filter(u => u.id !== this.currentUserId);\n                \n                // Refresh DataTable\n                this.usersTable.clear().rows.add(this.users).draw();\n                \n                // Update count\n                const totalUsersCount = document.getElementById('totalUsersCount');\n                if (totalUsersCount) {\n                    totalUsersCount.textContent = this.users.length;\n                }\n                \n                // Hide modal\n                const modal = bootstrap.Modal.getInstance(document.getElementById('confirmDeleteModal'));\n                modal.hide();\n                \n                window.apiService.showSuccessMessage('User deleted successfully');\n            } else {\n                window.apiService.handleApiError(response, 'Failed to delete user');\n            }\n        } catch (error) {\n            console.error('Error deleting user:', error);\n            // Demo mode - remove locally\n            this.users = this.users.filter(u => u.id !== this.currentUserId);\n            this.usersTable.clear().rows.add(this.users).draw();\n            \n            const totalUsersCount = document.getElementById('totalUsersCount');\n            if (totalUsersCount) {\n                totalUsersCount.textContent = this.users.length;\n            }\n            \n            const modal = bootstrap.Modal.getInstance(document.getElementById('confirmDeleteModal'));\n            modal.hide();\n            \n            window.apiService.showSuccessMessage('User deleted successfully (demo mode)');\n        }\n        \n        this.currentUserId = null;\n    }\n\n    async handleAddUser() {\n        const form = document.getElementById('addUserForm');\n        const formData = new FormData(form);\n        \n        const userData = {\n            name: `${formData.get('firstName')} ${formData.get('lastName')}`.trim(),\n            email: formData.get('email'),\n            role: formData.get('userType'),\n            status: formData.get('status') || 'active'\n        };\n\n        if (!userData.name || !userData.email || !userData.role) {\n            window.apiService?.showErrorMessage('Please fill in all required fields');\n            return;\n        }\n\n        try {\n            const response = await window.apiService.post('/api/users', userData);\n            \n            if (response.success) {\n                // Add to local data\n                const newUser = {\n                    id: response.data.id || Date.now(),\n                    firstName: formData.get('firstName'),\n                    lastName: formData.get('lastName'),\n                    name: userData.name,\n                    email: userData.email,\n                    role: userData.role,\n                    status: userData.status,\n                    joinDate: new Date().toISOString()\n                };\n                \n                this.users.push(newUser);\n                \n                // Refresh DataTable\n                this.usersTable.clear().rows.add(this.users).draw();\n                \n                // Update count\n                const totalUsersCount = document.getElementById('totalUsersCount');\n                if (totalUsersCount) {\n                    totalUsersCount.textContent = this.users.length;\n                }\n                \n                // Hide modal and reset form\n                const modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));\n                modal.hide();\n                form.reset();\n                \n                window.apiService.showSuccessMessage('User created successfully');\n            } else {\n                window.apiService.handleApiError(response, 'Failed to create user');\n            }\n        } catch (error) {\n            console.error('Error creating user:', error);\n            // Demo mode\n            const newUser = {\n                id: Date.now(),\n                firstName: formData.get('firstName'),\n                lastName: formData.get('lastName'),\n                name: userData.name,\n                email: userData.email,\n                role: userData.role,\n                status: userData.status,\n                joinDate: new Date().toISOString()\n            };\n            \n            this.users.push(newUser);\n            this.usersTable.clear().rows.add(this.users).draw();\n            \n            const totalUsersCount = document.getElementById('totalUsersCount');\n            if (totalUsersCount) {\n                totalUsersCount.textContent = this.users.length;\n            }\n            \n            const modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));\n            modal.hide();\n            form.reset();\n            \n            window.apiService.showSuccessMessage('User created successfully (demo mode)');\n        }\n    }\n\n    async handleUpdateUser() {\n        const form = document.getElementById('editUserForm');\n        const formData = new FormData(form);\n        const userId = parseInt(formData.get('editUserId'));\n        \n        const userData = {\n            name: `${formData.get('editFirstName')} ${formData.get('editLastName')}`.trim(),\n            email: formData.get('editEmail'),\n            role: formData.get('editUserType'),\n            status: formData.get('editStatus')\n        };\n\n        try {\n            const response = await window.apiService.put(`/api/users/${userId}`, userData);\n            \n            if (response.success) {\n                // Update local data\n                const userIndex = this.users.findIndex(u => u.id === userId);\n                if (userIndex !== -1) {\n                    this.users[userIndex] = {\n                        ...this.users[userIndex],\n                        firstName: formData.get('editFirstName'),\n                        lastName: formData.get('editLastName'),\n                        name: userData.name,\n                        email: userData.email,\n                        role: userData.role,\n                        status: userData.status\n                    };\n                }\n                \n                // Refresh DataTable\n                this.usersTable.clear().rows.add(this.users).draw();\n                \n                // Hide modal\n                const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));\n                modal.hide();\n                \n                window.apiService.showSuccessMessage('User updated successfully');\n            } else {\n                window.apiService.handleApiError(response, 'Failed to update user');\n            }\n        } catch (error) {\n            console.error('Error updating user:', error);\n            // Demo mode\n            const userIndex = this.users.findIndex(u => u.id === userId);\n            if (userIndex !== -1) {\n                this.users[userIndex] = {\n                    ...this.users[userIndex],\n                    firstName: formData.get('editFirstName'),\n                    lastName: formData.get('editLastName'),\n                    name: userData.name,\n                    email: userData.email,\n                    role: userData.role,\n                    status: userData.status\n                };\n                \n                this.usersTable.clear().rows.add(this.users).draw();\n                \n                const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));\n                modal.hide();\n                \n                window.apiService.showSuccessMessage('User updated successfully (demo mode)');\n            }\n        }\n    }\n\n    editVideo(videoId) {\n        console.log('Edit video:', videoId);\n    }\n\n    deleteVideo(videoId) {\n        if (confirm('Are you sure you want to delete this video?')) {\n            console.log('Delete video:', videoId);\n        }\n    }\n}\n\n// Global functions for user detail modal integration\nwindow.editUserFromDetails = function() {\n    if (window.adminManager && window.adminManager.currentUserId) {\n        const modal = bootstrap.Modal.getInstance(document.getElementById('userDetailsModal'));\n        modal.hide();\n        \n        setTimeout(() => {\n            window.adminManager.editUser(window.adminManager.currentUserId);\n        }, 300);\n    }\n};\n\nwindow.viewUserDetailsPage = function(userId) {\n    window.location.href = `user-detail.html?id=${userId}`;\n};\n\nwindow.exportUsers = function() {\n    if (window.adminManager.users.length === 0) {\n        window.apiService?.showErrorMessage('No users to export');\n        return;\n    }\n    \n    // Create CSV content\n    const headers = ['ID', 'Name', 'Email', 'Role', 'Status', 'Join Date'];\n    const csvContent = [\n        headers.join(','),\n        ...window.adminManager.users.map(user => [\n            user.id,\n            `\"${(user.firstName || user.name || '') + ' ' + (user.lastName || '')}\".trim()`,\n            `\"${user.email || ''}\"`,\n            user.role || 'viewer',\n            user.status || 'active',\n            user.joinDate ? new Date(user.joinDate).toLocaleDateString() : 'Unknown'\n        ].join(','))\n    ].join('\\n');\n    \n    // Download CSV\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = `videohub_users_${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n    \n    window.apiService?.showSuccessMessage('Users exported successfully');\n};\n\n// Initialize admin manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.adminManager = new AdminManager();\n});\n","size_bytes":64106},"assets/js/api.js":{"content":"/**\n * VideoHub API Service\n * Handles all backend API communications\n */\n\n// Use a more reliable approach to prevent duplicate loading\n(function() {\n    'use strict';\n\n    if (window.APIService && window.apiService) {\n        console.log('APIService already loaded');\n        return;\n    }\n\n    class APIService {\n    constructor() {\n        this.baseURL = '/api';\n        this.timeout = 10000;\n        this.useDataService = false; // Now using PHP backend\n        this.init();\n    }\n\n    init() {\n        this.defaultHeaders = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        };\n\n        // Wait for dataService to be initialized if using it\n        if (this.useDataService && !window.dataService) {\n            setTimeout(() => this.init(), 100);\n        }\n    }\n\n    // Generic HTTP methods\n    async request(method, endpoint, data = null, options = {}) {\n        const url = `${this.baseURL}${endpoint}`;\n        const config = {\n            method,\n            headers: {\n                ...this.defaultHeaders,\n                ...options.headers\n            },\n            ...options\n        };\n\n        // Add authentication token if available\n        const token = this.getAuthToken();\n        if (token) {\n            config.headers['Authorization'] = `Bearer ${token}`;\n        }\n\n        // Add body for POST, PUT, PATCH requests\n        if (data && ['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\n            config.body = JSON.stringify(data);\n        }\n\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n            config.signal = controller.signal;\n\n            const response = await fetch(url, config);\n            clearTimeout(timeoutId);\n\n            if (!response.ok) {\n                let errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n                \n                // Try to get more detailed error from response\n                try {\n                    const errorData = await response.json();\n                    if (errorData.message) {\n                        errorMessage = errorData.message;\n                    } else if (errorData.error) {\n                        errorMessage = errorData.error;\n                    }\n                } catch (e) {\n                    // If can't parse JSON, use default error message\n                }\n                \n                throw new Error(errorMessage);\n            }\n\n            const result = await response.json();\n            // Standardize response format\n            if (result.hasOwnProperty('success')) {\n                return result;\n            }\n            // Otherwise wrap it in standard format\n            return { success: true, data: result };\n        } catch (error) {\n            console.error(`API Error [${method} ${endpoint}]:`, error);\n            \n            let errorMessage = error.message;\n            let isNetworkError = false;\n            \n            if (error.name === 'AbortError') {\n                errorMessage = 'Request timed out. Please try again.';\n                isNetworkError = true;\n            } else if (error.name === 'TypeError') {\n                errorMessage = 'Network error. Please check your connection.';\n                isNetworkError = true;\n            }\n            \n            return {\n                success: false,\n                error: errorMessage,\n                isNetworkError,\n                endpoint: endpoint,\n                method: method\n            };\n        }\n    }\n\n    async get(endpoint, options = {}) {\n        return this.request('GET', endpoint, null, options);\n    }\n\n    async post(endpoint, data, options = {}) {\n        return this.request('POST', endpoint, data, options);\n    }\n\n    async put(endpoint, data, options = {}) {\n        return this.request('PUT', endpoint, data, options);\n    }\n\n    async delete(endpoint, options = {}) {\n        return this.request('DELETE', endpoint, null, options);\n    }\n\n    // Authentication\n    getAuthToken() {\n        return localStorage.getItem('authToken');\n    }\n\n    setAuthToken(token) {\n        localStorage.setItem('authToken', token);\n    }\n\n    clearAuthToken() {\n        localStorage.removeItem('authToken');\n    }\n\n    // Auth API endpoints\n    async login(credentials) {\n        return this.post('/auth/login', credentials);\n    }\n\n    async register(userData) {\n        return this.post('/auth/register', userData);\n    }\n\n    async logout() {\n        const result = await this.post('/auth/logout');\n        this.clearAuthToken();\n        return result;\n    }\n\n    async verifyToken() {\n        return this.get('/auth/verify');\n    }\n\n    // User API endpoints\n    async getUserProfile() {\n        // Check user role to determine correct endpoint\n        let userSession = null;\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n\n        if (localSession) {\n            userSession = JSON.parse(localSession);\n        } else if (sessionSession) {\n            userSession = JSON.parse(sessionSession);\n        }\n\n        if (userSession && userSession.userType === 'viewer') {\n            // For viewers, use the users/profile endpoint which is more generic\n            return this.get('/users/profile');\n        } else {\n            // For other roles (admin, creator)\n            return this.get('/users/profile');\n        }\n    }\n\n    async updateUserProfile(profileData) {\n        return this.put('/users/profile', profileData);\n    }\n\n    async getUsers(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getUsers(params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/users${queryString ? '?' + queryString : ''}`);\n    }\n\n    async updateUserRole(userId, role) {\n        return this.put(`/users/${userId}/role`, { role });\n    }\n\n    async deleteUser(userId) {\n        return this.delete(`/users/${userId}`);\n    }\n\n    // Video API endpoints\n    async getVideos(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getVideos(params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/videos${queryString ? '?' + queryString : ''}`);\n    }\n\n    async getVideo(videoId) {\n        return this.get(`/videos/${videoId}`);\n    }\n\n    async uploadVideo(videoData) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.uploadVideo(videoData);\n        }\n        // For file uploads, we need to use FormData\n        const formData = new FormData();\n        Object.keys(videoData).forEach(key => {\n            formData.append(key, videoData[key]);\n        });\n\n        return this.request('POST', '/videos', formData, {\n            headers: {} // Remove Content-Type to let browser set it for FormData\n        });\n    }\n\n    async updateVideo(videoId, videoData) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.updateVideo(videoId, videoData);\n        }\n        return this.put(`/videos/${videoId}`, videoData);\n    }\n\n    async deleteVideo(videoId) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.deleteVideo(videoId);\n        }\n        return this.delete(`/videos/${videoId}`);\n    }\n\n    async duplicateVideo(videoId) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.duplicateVideo(videoId);\n        }\n        return this.post(`/videos/${videoId}/duplicate`);\n    }\n\n    async approveVideo(videoId) {\n        return this.put(`/videos/${videoId}/approve`);\n    }\n\n    async rejectVideo(videoId, reason) {\n        return this.put(`/videos/${videoId}/reject`, { reason });\n    }\n\n    // Creator API endpoints\n    async getCreatorStats() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getCreatorStats();\n        }\n        return this.get('/creator/stats');\n    }\n\n    async getCreatorVideos(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getCreatorVideos(null, params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/creator/videos${queryString ? '?' + queryString : ''}`);\n    }\n\n    async getCreatorEarnings(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getCreatorEarnings(null, params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/creator/earnings${queryString ? '?' + queryString : ''}`);\n    }\n\n    // Viewer API endpoints\n    async purchaseVideo(videoId, paymentData) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.purchaseVideo(videoId, paymentData);\n        }\n        return this.post(`/videos/${videoId}/purchase`, paymentData);\n    }\n\n    async getViewerPurchases() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getViewerPurchases();\n        }\n        return this.get('/viewer/purchases');\n    }\n\n    async getViewerStats() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getViewerStats();\n        }\n        return this.get('/viewer/stats');\n    }\n\n    // Admin API endpoints\n    async getAdminStats() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getAdminStats();\n        }\n        return this.get('/admin/stats');\n    }\n\n    async getAdminUsers(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getUsers(params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/admin/users${queryString ? '?' + queryString : ''}`);\n    }\n\n    async getSystemHealth() {\n        return this.get('/admin/health');\n    }\n\n    async getAnalytics() {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getAnalyticsData();\n        }\n        return this.get('/admin/analytics');\n    }\n\n    async getPurchases(params = {}) {\n        if (this.useDataService && window.dataService) {\n            return window.dataService.getViewerPurchases(null, params);\n        }\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/purchases${queryString ? '?' + queryString : ''}`);\n    }\n\n    // Search API endpoints\n    async searchVideos(query, filters = {}) {\n        const params = { q: query, ...filters };\n        const queryString = new URLSearchParams(params).toString();\n        return this.get(`/search/videos?${queryString}`);\n    }\n\n    // Utility methods\n    handleApiError(error, context = '') {\n        let message = 'Something went wrong. Please try again.';\n\n        if (error.isNetworkError) {\n            message = 'Network error. Please check your connection.';\n        } else if (error.error) {\n            message = error.error;\n        }\n\n        if (context) {\n            message = `${context}: ${message}`;\n        }\n\n        // Show toast notification\n        if (window.commonUtils) {\n            window.commonUtils.showToast(message, 'danger');\n        }\n\n        return message;\n    }\n\n    showSuccessMessage(message) {\n        if (window.commonUtils) {\n            window.commonUtils.showToast(message, 'success');\n        }\n    }\n    }\n\n    // Export to global scope\n    window.APIService = APIService;\n    window.apiService = new APIService();\n    console.log('APIService initialized successfully');\n\n})(); // End of IIFE","size_bytes":11931},"assets/js/auth.js":{"content":"/**\n * VideoHub Authentication Module\n * Handles user registration, login, password reset, and email verification\n */\n\nclass AuthManager {\n    constructor() {\n        this.verificationProcessed = false;\n        this.googleClientId = '824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com';\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n    }\n\n    bindEvents() {\n        // Login form\n        const loginForm = document.getElementById('loginForm');\n        if (loginForm) {\n            loginForm.addEventListener('submit', this.handleLogin.bind(this));\n        }\n\n        // Signup form\n        const signupForm = document.getElementById('signupForm');\n        if (signupForm) {\n            signupForm.addEventListener('submit', this.handleSignup.bind(this));\n        }\n\n        // Forgot password form\n        const forgotPasswordForm = document.getElementById('forgotPasswordForm');\n        if (forgotPasswordForm) {\n            forgotPasswordForm.addEventListener('submit', this.handleForgotPassword.bind(this));\n        }\n\n        // Set password form\n        const setPasswordForm = document.getElementById('setPasswordForm');\n        if (setPasswordForm) {\n            setPasswordForm.addEventListener('submit', this.handleSetPassword.bind(this));\n        }\n\n        // Auto-verify if token is present in URL (only once)\n        if (window.location.pathname.includes('email-verification.html')) {\n            const urlParams = new URLSearchParams(window.location.search);\n            const token = urlParams.get('token');\n            if (token && !this.verificationProcessed) {\n                this.verificationProcessed = true;\n                // Auto-verify email when token is present\n                setTimeout(() => {\n                    this.handleEmailVerification();\n                }, 1000);\n            }\n        }\n\n        const resendEmail = document.getElementById('resendEmail');\n        if (resendEmail) {\n            resendEmail.addEventListener('click', this.handleResendEmail.bind(this));\n        }\n\n        // Password strength checker\n        const newPasswordInput = document.getElementById('newPassword');\n        if (newPasswordInput) {\n            newPasswordInput.addEventListener('input', this.checkPasswordStrength.bind(this));\n        }\n\n        // Password toggle\n        const togglePassword = document.getElementById('togglePassword');\n        if (togglePassword) {\n            togglePassword.addEventListener('click', this.togglePasswordVisibility.bind(this));\n        }\n\n        // Google Sign-In buttons\n        const googleSignInBtn = document.getElementById('googleSignInBtn');\n        if (googleSignInBtn) {\n            googleSignInBtn.addEventListener('click', this.handleGoogleSignIn.bind(this));\n        }\n\n        const googleSignUpBtn = document.getElementById('googleSignUpBtn');\n        if (googleSignUpBtn) {\n            googleSignUpBtn.addEventListener('click', this.handleGoogleSignUp.bind(this));\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        // Handle demo login prefill\n        this.setupDemoLogin();\n        \n        // Handle URL parameters for verification\n        this.handleUrlParameters();\n        \n        // Initialize Google Sign-In\n        this.initializeGoogleSignIn();\n    }\n\n    setupDemoLogin() {\n        const demoButtons = document.querySelectorAll('.demo-login-btn');\n        demoButtons.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const userType = e.target.dataset.userType;\n                this.prefillDemoCredentials(userType);\n            });\n        });\n    }\n\n    prefillDemoCredentials(userType) {\n        const emailInput = document.getElementById('email');\n        const passwordInput = document.getElementById('password');\n        \n        if (!emailInput || !passwordInput) return;\n\n        const credentials = {\n            admin: { email: 'admin@videohub.com', password: 'admin123' },\n            creator: { email: 'creator@videohub.com', password: 'creator123' },\n            viewer: { email: 'viewer@videohub.com', password: 'viewer123' }\n        };\n\n        if (credentials[userType]) {\n            emailInput.value = credentials[userType].email;\n            passwordInput.value = credentials[userType].password;\n        }\n    }\n\n    handleUrlParameters() {\n        const urlParams = new URLSearchParams(window.location.search);\n        const email = urlParams.get('email');\n        const token = urlParams.get('token');\n\n        if (email) {\n            const userEmailSpan = document.getElementById('userEmail');\n            if (userEmailSpan) {\n                userEmailSpan.textContent = email;\n            }\n        }\n\n        if (token) {\n            // Auto-verify if token is present\n            setTimeout(() => {\n                this.handleEmailVerification();\n            }, 1000);\n        }\n    }\n\n    async handleLogin(e) {\n        e.preventDefault();\n        \n        const submitButton = e.target.querySelector('button[type=\"submit\"]');\n        const email = document.getElementById('email').value;\n        const password = document.getElementById('password').value;\n        const rememberMe = document.getElementById('rememberMe').checked;\n\n        try {\n            // Set button loading state\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, true, 'Signing in...');\n            }\n            \n            // Wait for API service to be available\n            await this.waitForAPIService();\n            \n            // Make API call to login endpoint\n            const response = await window.apiService.post('/auth/login', {\n                email: email,\n                password: password\n            });\n            \n            if (response.success && response.data) {\n                // Store user session and token\n                const userData = response.data.user;\n                const token = response.data.token;\n                \n                this.setUserSession({\n                    email: userData.email,\n                    userType: userData.role,\n                    name: userData.name,\n                    id: userData.id,\n                    rememberMe: rememberMe\n                });\n                \n                // Store auth token\n                if (window.apiService) {\n                    window.apiService.setAuthToken(token);\n                }\n                \n                if (window.commonUtils) {\n                    window.commonUtils.showToast('Login successful! Redirecting...', 'success');\n                }\n                \n                // Redirect based on user type\n                setTimeout(() => {\n                    this.redirectToUserDashboard(userData.role);\n                }, 1000);\n            } else {\n                throw new Error(response.error || 'Login failed');\n            }\n            \n        } catch (error) {\n            console.error('Login error:', error);\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Login');\n            } else {\n                this.showError(error.message || 'Invalid email or password. Please try again.');\n            }\n        } finally {\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, false);\n            }\n        }\n    }\n\n    async handleSignup(e) {\n        e.preventDefault();\n        \n        const submitButton = e.target.querySelector('button[type=\"submit\"]');\n        const formData = {\n            firstName: document.getElementById('firstName').value,\n            lastName: document.getElementById('lastName').value,\n            email: document.getElementById('email').value,\n            userType: document.getElementById('userType').value,\n            password: document.getElementById('password').value,\n            confirmPassword: document.getElementById('confirmPassword').value,\n            agreeTerms: document.getElementById('agreeTerms').checked\n        };\n\n        try {\n            // Validate form\n            this.validateSignupForm(formData);\n            \n            // Set button loading state\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, true, 'Creating account...');\n            }\n            \n            // Wait for API service to be available\n            await this.waitForAPIService();\n            \n            // Make API call to register endpoint\n            const response = await window.apiService.post('/auth/register', formData);\n            \n            if (response.success && response.data) {\n                if (response.data.verification_required) {\n                    // Show email verification message\n                    if (window.commonUtils) {\n                        window.commonUtils.showToast(response.message || 'Account created! Please check your email to verify.', 'success');\n                    }\n                    \n                    // Store email for verification page\n                    sessionStorage.setItem('pendingVerificationEmail', formData.email);\n                    \n                    // Redirect to email verification page\n                    setTimeout(() => {\n                        window.location.href = `email-verification.html?email=${encodeURIComponent(formData.email)}`;\n                    }, 2000);\n                } else {\n                    // Traditional registration flow (if email verification is disabled)\n                    if (window.commonUtils) {\n                        window.commonUtils.showToast('Account created successfully! You can now log in.', 'success');\n                    }\n                    \n                    // Redirect to login page\n                    setTimeout(() => {\n                        window.location.href = 'login.html';\n                    }, 1500);\n                }\n            } else {\n                throw new Error(response.error || 'Registration failed');\n            }\n            \n        } catch (error) {\n            console.error('Registration error:', error);\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Registration');\n            } else {\n                this.showError(error.message || 'Registration failed. Please try again.');\n            }\n        } finally {\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(submitButton, false);\n            }\n        }\n    }\n\n    async handleForgotPassword(e) {\n        e.preventDefault();\n        \n        const email = document.getElementById('email').value;\n\n        try {\n            this.showLoading('Sending reset link...');\n            \n            // Simulate API call\n            await this.delay(1500);\n            \n            // Hide form and show success message\n            document.getElementById('emailForm').style.display = 'none';\n            document.getElementById('successMessage').classList.remove('d-none');\n            \n        } catch (error) {\n            this.showError('Failed to send reset email. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleEmailVerification() {\n        try {\n            this.showLoading('Verifying email...');\n            \n            // Get token from URL parameters\n            const urlParams = new URLSearchParams(window.location.search);\n            const token = urlParams.get('token');\n            \n            if (!token) {\n                throw new Error('No verification token provided');\n            }\n            \n            // Make direct API call without waiting for API service\n            const response = await fetch('/api/endpoints/auth.php', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ \n                    action: 'verify-email',\n                    token: token \n                })\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                // Hide pending verification and show success\n                const pendingVerification = document.getElementById('pendingVerification');\n                const verificationSuccess = document.getElementById('verificationSuccess');\n                \n                if (pendingVerification) pendingVerification.style.display = 'none';\n                if (verificationSuccess) verificationSuccess.classList.remove('d-none');\n                \n                this.showSuccess('Email verified successfully! You can now log in.');\n                \n                // Redirect to login page after success\n                setTimeout(() => {\n                    window.location.href = 'login.html';\n                }, 3000);\n            } else {\n                throw new Error(result.message || 'Verification failed');\n            }\n            \n        } catch (error) {\n            console.error('Email verification error:', error);\n            this.showError(error.message || 'Verification failed. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleResendEmail() {\n        try {\n            this.showLoading('Resending verification email...');\n            \n            // Get email from URL parameters or session storage\n            const urlParams = new URLSearchParams(window.location.search);\n            const email = urlParams.get('email') || sessionStorage.getItem('pendingVerificationEmail');\n            \n            if (!email) {\n                throw new Error('No email address available for resending');\n            }\n            \n            // Make direct API call without waiting for API service  \n            const response = await fetch('/api/endpoints/auth.php', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ \n                    action: 'resend-verification',\n                    email: email \n                })\n            });\n            \n            const result = await response.json();\n            \n            if (result.success) {\n                this.showSuccess('Verification email sent successfully!');\n            } else {\n                throw new Error(result.message || 'Failed to resend email');\n            }\n            \n        } catch (error) {\n            console.error('Resend email error:', error);\n            this.showError(error.message || 'Failed to resend email. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async handleSetPassword(e) {\n        e.preventDefault();\n        \n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n\n        try {\n            // Validate passwords\n            if (newPassword !== confirmPassword) {\n                throw new Error('Passwords do not match');\n            }\n            \n            if (!this.isPasswordStrong(newPassword)) {\n                throw new Error('Password does not meet strength requirements');\n            }\n            \n            this.showLoading('Setting password...');\n            \n            // Simulate API call\n            await this.delay(1500);\n            \n            this.showSuccess('Password set successfully! You can now log in.');\n            \n            // Redirect to login\n            setTimeout(() => {\n                window.location.href = 'login.html';\n            }, 1500);\n            \n        } catch (error) {\n            this.showError(error.message);\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    validateSignupForm(formData) {\n        if (!formData.firstName.trim()) {\n            throw new Error('First name is required');\n        }\n        \n        if (!formData.lastName.trim()) {\n            throw new Error('Last name is required');\n        }\n        \n        if (!this.isValidEmail(formData.email)) {\n            throw new Error('Please enter a valid email address');\n        }\n        \n        if (!formData.userType) {\n            throw new Error('Please select an account type');\n        }\n        \n        if (formData.password.length < 8) {\n            throw new Error('Password must be at least 8 characters long');\n        }\n        \n        if (formData.password !== formData.confirmPassword) {\n            throw new Error('Passwords do not match');\n        }\n        \n        if (!formData.agreeTerms) {\n            throw new Error('You must agree to the Terms of Service');\n        }\n    }\n\n    checkPasswordStrength(e) {\n        const password = e.target.value;\n        const strengthBars = document.querySelectorAll('.strength-bar');\n        const strengthText = document.getElementById('strengthText');\n        \n        if (!strengthBars.length || !strengthText) return;\n\n        const strength = this.calculatePasswordStrength(password);\n        \n        // Reset all bars\n        strengthBars.forEach(bar => {\n            bar.className = 'strength-bar';\n        });\n        \n        // Fill bars based on strength\n        for (let i = 0; i < strength.score; i++) {\n            strengthBars[i].classList.add(strength.class);\n        }\n        \n        strengthText.textContent = strength.text;\n        strengthText.className = `text-${strength.class}`;\n    }\n\n    calculatePasswordStrength(password) {\n        let score = 0;\n        let feedback = [];\n        \n        if (password.length >= 8) score++;\n        if (/[a-z]/.test(password)) score++;\n        if (/[A-Z]/.test(password)) score++;\n        if (/[0-9]/.test(password)) score++;\n        if (/[^A-Za-z0-9]/.test(password)) score++;\n        \n        const strengthLevels = {\n            0: { class: 'muted', text: 'Enter a password' },\n            1: { class: 'danger', text: 'Very weak' },\n            2: { class: 'warning', text: 'Weak' },\n            3: { class: 'info', text: 'Fair' },\n            4: { class: 'success', text: 'Good' },\n            5: { class: 'success', text: 'Strong' }\n        };\n        \n        return { score, ...strengthLevels[score] };\n    }\n\n    isPasswordStrong(password) {\n        return password.length >= 8 && \n               /[a-z]/.test(password) && \n               /[A-Z]/.test(password) && \n               /[0-9]/.test(password);\n    }\n\n    togglePasswordVisibility() {\n        const passwordInput = document.getElementById('newPassword');\n        const toggleButton = document.getElementById('togglePassword');\n        \n        if (passwordInput.type === 'password') {\n            passwordInput.type = 'text';\n            toggleButton.innerHTML = '<i class=\"fas fa-eye-slash\"></i>';\n        } else {\n            passwordInput.type = 'password';\n            toggleButton.innerHTML = '<i class=\"fas fa-eye\"></i>';\n        }\n    }\n\n    getUserTypeFromEmail(email) {\n        if (email.includes('admin@')) return 'admin';\n        if (email.includes('creator@')) return 'creator';\n        if (email.includes('viewer@')) return 'viewer';\n        return null;\n    }\n\n    redirectToUserDashboard(userType) {\n        const dashboardUrls = {\n            admin: '../admin/dashboard.html',\n            creator: '../creator/dashboard.html',\n            viewer: '../viewer/dashboard.html'\n        };\n        \n        window.location.href = dashboardUrls[userType];\n    }\n\n    setUserSession(userData) {\n        const sessionData = {\n            ...userData,\n            timestamp: new Date().toISOString()\n        };\n        \n        if (userData.rememberMe) {\n            localStorage.setItem('userSession', JSON.stringify(sessionData));\n        } else {\n            sessionStorage.setItem('userSession', JSON.stringify(sessionData));\n        }\n    }\n\n    getUserSession() {\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n        \n        const session = localSession || sessionSession;\n        return session ? JSON.parse(session) : null;\n    }\n\n    clearUserSession() {\n        localStorage.removeItem('userSession');\n        sessionStorage.removeItem('userSession');\n    }\n\n    isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    async waitForAPIService() {\n        let retries = 0;\n        const maxRetries = 50;\n        \n        while (retries < maxRetries && !window.apiService) {\n            await new Promise(resolve => setTimeout(resolve, 100));\n            retries++;\n        }\n        \n        if (!window.apiService) {\n            throw new Error('API service not available');\n        }\n    }\n\n    showLoading(message = 'Loading...') {\n        // Create or update loading indicator\n        let loader = document.getElementById('globalLoader');\n        if (!loader) {\n            loader = document.createElement('div');\n            loader.id = 'globalLoader';\n            loader.className = 'position-fixed top-50 start-50 translate-middle';\n            loader.style.zIndex = '9999';\n            document.body.appendChild(loader);\n        }\n        \n        loader.innerHTML = `\n            <div class=\"bg-white p-4 rounded shadow text-center\">\n                <div class=\"spinner-border text-primary mb-2\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div>${message}</div>\n            </div>\n        `;\n        loader.style.display = 'block';\n    }\n\n    hideLoading() {\n        const loader = document.getElementById('globalLoader');\n        if (loader) {\n            loader.style.display = 'none';\n        }\n    }\n\n    showSuccess(message) {\n        this.showMessage(message, 'success');\n    }\n\n    showError(message) {\n        this.showMessage(message, 'danger');\n    }\n\n    showMessage(message, type = 'info') {\n        // Create toast notification\n        const toastContainer = document.getElementById('toastContainer') || this.createToastContainer();\n        \n        const toast = document.createElement('div');\n        toast.className = `toast align-items-center text-bg-${type} border-0`;\n        toast.setAttribute('role', 'alert');\n        toast.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">${message}</div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        `;\n        \n        toastContainer.appendChild(toast);\n        \n        // Initialize and show toast\n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n        \n        // Remove toast after it's hidden\n        toast.addEventListener('hidden.bs.toast', () => {\n            toast.remove();\n        });\n    }\n\n    createToastContainer() {\n        const container = document.createElement('div');\n        container.id = 'toastContainer';\n        container.className = 'toast-container position-fixed top-0 end-0 p-3';\n        container.style.zIndex = '9999';\n        document.body.appendChild(container);\n        return container;\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    hideLoading() {\n        const loader = document.getElementById('globalLoader');\n        if (loader) {\n            loader.style.display = 'none';\n        }\n    }\n\n    showSuccess(message) {\n        this.showToast(message, 'success');\n    }\n\n    showError(message) {\n        this.showToast(message, 'danger');\n    }\n\n    showToast(message, type = 'info') {\n        // Create toast container if it doesn't exist\n        let toastContainer = document.getElementById('toastContainer');\n        if (!toastContainer) {\n            toastContainer = document.createElement('div');\n            toastContainer.id = 'toastContainer';\n            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';\n            toastContainer.style.zIndex = '9999';\n            document.body.appendChild(toastContainer);\n        }\n\n        // Create toast element\n        const toastId = 'toast-' + Date.now();\n        const toastElement = document.createElement('div');\n        toastElement.id = toastId;\n        toastElement.className = `toast align-items-center text-bg-${type} border-0`;\n        toastElement.setAttribute('role', 'alert');\n        toastElement.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">${message}</div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        `;\n\n        toastContainer.appendChild(toastElement);\n\n        // Initialize and show toast\n        const toast = new bootstrap.Toast(toastElement, {\n            autohide: true,\n            delay: 5000\n        });\n        toast.show();\n\n        // Remove toast element after it's hidden\n        toastElement.addEventListener('hidden.bs.toast', () => {\n            toastElement.remove();\n        });\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    initializeGoogleSignIn() {\n        // Wait for Google Sign-In API to load with retry limit\n        let retries = 0;\n        const maxRetries = 50;\n        \n        const checkAndInit = () => {\n            if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {\n                try {\n                    google.accounts.id.initialize({\n                        client_id: this.googleClientId,\n                        callback: this.handleGoogleCredentialResponse.bind(this),\n                        auto_select: false,\n                        cancel_on_tap_outside: true\n                    });\n                    console.log('Google Sign-In initialized successfully');\n                } catch (error) {\n                    console.error('Error initializing Google Sign-In:', error);\n                }\n            } else if (retries < maxRetries) {\n                retries++;\n                setTimeout(checkAndInit, 100);\n            } else {\n                console.error('Google Sign-In API failed to load after maximum retries');\n            }\n        };\n        \n        checkAndInit();\n    }\n\n    handleGoogleSignIn() {\n        if (typeof google !== 'undefined' && google.accounts && google.accounts.id) {\n            try {\n                // Use renderButton for more reliable sign-in\n                const buttonContainer = document.createElement('div');\n                buttonContainer.style.display = 'none';\n                document.body.appendChild(buttonContainer);\n                \n                google.accounts.id.renderButton(buttonContainer, {\n                    theme: 'outline',\n                    size: 'large',\n                    width: 250\n                });\n                \n                // Trigger click programmatically\n                setTimeout(() => {\n                    const googleButton = buttonContainer.querySelector('div[role=\"button\"]');\n                    if (googleButton) {\n                        googleButton.click();\n                    } else {\n                        // Fallback to prompt\n                        google.accounts.id.prompt();\n                    }\n                    document.body.removeChild(buttonContainer);\n                }, 100);\n                \n            } catch (error) {\n                console.error('Google Sign-In error:', error);\n                this.showError('Google Sign-In encountered an error. Please try again.');\n            }\n        } else {\n            this.showError('Google Sign-In is not available. Please refresh the page and try again.');\n        }\n    }\n\n    handleGoogleSignUp() {\n        // Same logic as sign-in, the backend will handle the difference\n        this.handleGoogleSignIn();\n    }\n\n    async handleGoogleCredentialResponse(response) {\n        try {\n            console.log('Google credential response received');\n            this.showLoading('Authenticating with Google...');\n            \n            if (!response || !response.credential) {\n                throw new Error('No credential received from Google');\n            }\n            \n            // Wait for API service to be available\n            await this.waitForAPIService();\n            \n            const isSignupPage = window.location.pathname.includes('signup.html');\n            const action = isSignupPage ? 'google-signup' : 'google-login';\n            \n            // Send Google credential to backend using action-based endpoint\n            const apiResponse = await window.apiService.post('/auth', {\n                action: action,\n                credential: response.credential\n            });\n            \n            if (apiResponse.success && apiResponse.data) {\n                const userData = apiResponse.data.user;\n                const token = apiResponse.data.token;\n                \n                this.setUserSession({\n                    email: userData.email,\n                    userType: userData.role,\n                    name: userData.name,\n                    id: userData.id,\n                    rememberMe: true\n                });\n                \n                // Store auth token\n                if (window.apiService) {\n                    window.apiService.setAuthToken(token);\n                }\n                \n                const successMessage = isSignupPage ? \n                    'Account created successfully with Google!' : \n                    'Google Sign-In successful! Redirecting...';\n                    \n                this.showSuccess(successMessage);\n                \n                // Redirect based on user type\n                setTimeout(() => {\n                    this.redirectToUserDashboard(userData.role);\n                }, 1500);\n            } else {\n                throw new Error(apiResponse.message || 'Google authentication failed');\n            }\n            \n        } catch (error) {\n            console.error('Google authentication error:', error);\n            this.showError(error.message || 'Google authentication failed. Please try again.');\n        } finally {\n            this.hideLoading();\n        }\n    }\n}\n\n// Initialize authentication manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    new AuthManager();\n});\n\n// Export for other modules\nwindow.AuthManager = AuthManager;\n","size_bytes":30641},"assets/js/common.js":{"content":"/**\n * VideoHub Common Utilities Module\n * Shared functionality and utilities used across all modules\n */\n\nclass CommonUtils {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.setupGlobalErrorHandler();\n        this.setupToastContainer();\n        this.bindCommonEvents();\n        this.checkUserSession();\n    }\n\n    setupGlobalErrorHandler() {\n        window.addEventListener('error', (event) => {\n            console.error('Global error:', event.error);\n            this.showToast('An unexpected error occurred. Please try again.', 'danger');\n        });\n\n        window.addEventListener('unhandledrejection', (event) => {\n            console.error('Unhandled promise rejection:', event.reason);\n            this.showToast('An unexpected error occurred. Please try again.', 'danger');\n        });\n    }\n\n    setupToastContainer() {\n        if (!document.getElementById('toastContainer')) {\n            const toastContainer = document.createElement('div');\n            toastContainer.id = 'toastContainer';\n            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';\n            toastContainer.style.zIndex = '9999';\n            document.body.appendChild(toastContainer);\n        }\n    }\n\n    bindCommonEvents() {\n        // Handle logout links\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('a[href*=\"login.html\"]') && e.target.textContent.includes('Logout')) {\n                e.preventDefault();\n                this.handleLogout();\n            }\n        });\n\n        // Handle demo mode notifications\n        this.showDemoModeNotification();\n    }\n\n    showDemoModeNotification() {\n        if (window.location.pathname.includes('admin/') || \n            window.location.pathname.includes('creator/') || \n            window.location.pathname.includes('viewer/')) {\n            \n            setTimeout(() => {\n                this.showToast('You are in demo mode. All data and actions are simulated.', 'info', 8000);\n            }, 2000);\n        }\n    }\n\n    checkUserSession() {\n        const session = this.getUserSession();\n        if (session && this.isSessionExpired(session)) {\n            this.clearUserSession();\n            if (!window.location.pathname.includes('auth/')) {\n                this.showToast('Your session has expired. Please log in again.', 'warning');\n                setTimeout(() => {\n                    window.location.href = '/auth/login.html';\n                }, 2000);\n            }\n        }\n    }\n\n    // Session Management\n    getUserSession() {\n        const localSession = localStorage.getItem('userSession');\n        const sessionSession = sessionStorage.getItem('userSession');\n        \n        const session = localSession || sessionSession;\n        return session ? JSON.parse(session) : null;\n    }\n\n    setUserSession(userData) {\n        const sessionData = {\n            ...userData,\n            timestamp: new Date().toISOString(),\n            expires: new Date(Date.now() + (24 * 60 * 60 * 1000)).toISOString() // 24 hours\n        };\n        \n        if (userData.rememberMe) {\n            localStorage.setItem('userSession', JSON.stringify(sessionData));\n        } else {\n            sessionStorage.setItem('userSession', JSON.stringify(sessionData));\n        }\n    }\n\n    clearUserSession() {\n        localStorage.removeItem('userSession');\n        sessionStorage.removeItem('userSession');\n    }\n\n    isSessionExpired(session) {\n        if (!session.expires) return false;\n        return new Date() > new Date(session.expires);\n    }\n\n    handleLogout() {\n        this.clearUserSession();\n        this.showToast('Logged out successfully!', 'success');\n        setTimeout(() => {\n            window.location.href = '/auth/login.html';\n        }, 1000);\n    }\n\n    // Toast Notifications\n    showToast(message, type = 'info', delay = 5000) {\n        const toastContainer = document.getElementById('toastContainer');\n        if (!toastContainer) return;\n\n        const toastId = 'toast-' + Date.now();\n        const toastElement = document.createElement('div');\n        toastElement.id = toastId;\n        toastElement.className = `toast align-items-center text-bg-${type} border-0`;\n        toastElement.setAttribute('role', 'alert');\n        \n        const iconMap = {\n            success: 'fas fa-check-circle',\n            danger: 'fas fa-exclamation-circle',\n            warning: 'fas fa-exclamation-triangle',\n            info: 'fas fa-info-circle'\n        };\n\n        toastElement.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">\n                    <i class=\"${iconMap[type] || iconMap.info} me-2\"></i>\n                    ${message}\n                </div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        `;\n\n        toastContainer.appendChild(toastElement);\n\n        const toast = new bootstrap.Toast(toastElement, {\n            autohide: true,\n            delay: delay\n        });\n        toast.show();\n\n        toastElement.addEventListener('hidden.bs.toast', () => {\n            toastElement.remove();\n        });\n    }\n\n    // Loading States\n    showLoading(message = 'Loading...', target = null) {\n        const loaderId = 'loader-' + Date.now();\n        const loader = document.createElement('div');\n        loader.id = loaderId;\n        loader.className = 'position-absolute top-50 start-50 translate-middle';\n        loader.style.zIndex = '9999';\n        loader.innerHTML = `\n            <div class=\"bg-white p-4 rounded shadow text-center\">\n                <div class=\"spinner-border text-primary mb-2\" role=\"status\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div>${message}</div>\n            </div>\n        `;\n\n        if (target) {\n            target.style.position = 'relative';\n            target.appendChild(loader);\n        } else {\n            loader.className = 'position-fixed top-50 start-50 translate-middle';\n            document.body.appendChild(loader);\n        }\n\n        return loaderId;\n    }\n\n    hideLoading(loaderId = null) {\n        if (loaderId) {\n            const loader = document.getElementById(loaderId);\n            if (loader) loader.remove();\n        } else {\n            // Remove all loaders\n            document.querySelectorAll('[id^=\"loader-\"]').forEach(loader => {\n                loader.remove();\n            });\n        }\n    }\n\n    // Button Loading States\n    setButtonLoading(button, isLoading = true, loadingText = 'Loading...') {\n        if (!button) return;\n\n        if (isLoading) {\n            // Store original content\n            button.dataset.originalContent = button.innerHTML;\n            button.dataset.originalDisabled = button.disabled;\n            \n            // Set loading state\n            button.disabled = true;\n            button.innerHTML = `\n                <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\n                ${loadingText}\n            `;\n            button.classList.add('btn-loading');\n        } else {\n            // Restore original state\n            if (button.dataset.originalContent) {\n                button.innerHTML = button.dataset.originalContent;\n                delete button.dataset.originalContent;\n            }\n            \n            button.disabled = button.dataset.originalDisabled === 'true';\n            delete button.dataset.originalDisabled;\n            button.classList.remove('btn-loading');\n        }\n    }\n\n    // Section Loading States\n    showSectionLoader(sectionElement, message = 'Loading data...') {\n        if (!sectionElement) return null;\n\n        const loaderId = 'section-loader-' + Date.now();\n        const existingLoader = sectionElement.querySelector('.section-loader');\n        \n        if (existingLoader) {\n            existingLoader.remove();\n        }\n\n        const loader = document.createElement('div');\n        loader.id = loaderId;\n        loader.className = 'section-loader d-flex justify-content-center align-items-center py-5';\n        loader.innerHTML = `\n            <div class=\"text-center\">\n                <div class=\"spinner-border text-primary mb-3\" role=\"status\" style=\"width: 3rem; height: 3rem;\">\n                    <span class=\"visually-hidden\">Loading...</span>\n                </div>\n                <div class=\"text-muted\">${message}</div>\n            </div>\n        `;\n\n        // Hide existing content\n        const content = sectionElement.children;\n        for (let i = 0; i < content.length; i++) {\n            if (!content[i].classList.contains('section-loader')) {\n                content[i].style.display = 'none';\n            }\n        }\n\n        sectionElement.appendChild(loader);\n        return loaderId;\n    }\n\n    hideSectionLoader(sectionElement) {\n        if (!sectionElement) return;\n\n        const loader = sectionElement.querySelector('.section-loader');\n        if (loader) {\n            loader.remove();\n        }\n\n        // Show hidden content\n        const content = sectionElement.children;\n        for (let i = 0; i < content.length; i++) {\n            if (!content[i].classList.contains('section-loader')) {\n                content[i].style.display = '';\n            }\n        }\n    }\n\n    // Enhanced Error Handling\n    handleAPIError(error, context = '', showToast = true) {\n        console.error(`API Error in ${context}:`, error);\n        \n        let message = 'An unexpected error occurred. Please try again.';\n        let type = 'danger';\n        \n        if (error) {\n            if (error.isNetworkError) {\n                message = 'Network error. Please check your connection and try again.';\n                type = 'warning';\n            } else if (error.error) {\n                message = error.error;\n            } else if (typeof error === 'string') {\n                message = error;\n            } else if (error.message) {\n                message = error.message;\n            }\n        }\n\n        if (showToast) {\n            this.showToast(message, type);\n        }\n\n        return { message, type };\n    }\n\n    // Retry functionality\n    async retryOperation(operation, maxRetries = 3, delay = 1000) {\n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\n            try {\n                return await operation();\n            } catch (error) {\n                if (attempt === maxRetries) {\n                    throw error;\n                }\n                console.warn(`Attempt ${attempt} failed, retrying in ${delay}ms...`, error);\n                await new Promise(resolve => setTimeout(resolve, delay));\n                delay *= 2; // Exponential backoff\n            }\n        }\n    }\n\n    // Form Validation\n    validateEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    validatePassword(password) {\n        return {\n            length: password.length >= 8,\n            uppercase: /[A-Z]/.test(password),\n            lowercase: /[a-z]/.test(password),\n            number: /[0-9]/.test(password),\n            special: /[^A-Za-z0-9]/.test(password)\n        };\n    }\n\n    sanitizeInput(input) {\n        const div = document.createElement('div');\n        div.textContent = input;\n        return div.innerHTML;\n    }\n\n    // Date and Time Utilities\n    formatDate(date, format = 'short') {\n        const d = new Date(date);\n        const options = {\n            short: { year: 'numeric', month: 'short', day: 'numeric' },\n            long: { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' },\n            time: { hour: '2-digit', minute: '2-digit' }\n        };\n        return d.toLocaleDateString('en-US', options[format] || options.short);\n    }\n\n    formatDuration(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const secs = seconds % 60;\n\n        if (hours > 0) {\n            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n        }\n        return `${minutes}:${secs.toString().padStart(2, '0')}`;\n    }\n\n    timeAgo(date) {\n        const now = new Date();\n        const past = new Date(date);\n        const diff = now - past;\n\n        const seconds = Math.floor(diff / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        const weeks = Math.floor(days / 7);\n        const months = Math.floor(days / 30);\n        const years = Math.floor(days / 365);\n\n        if (years > 0) return `${years} year${years > 1 ? 's' : ''} ago`;\n        if (months > 0) return `${months} month${months > 1 ? 's' : ''} ago`;\n        if (weeks > 0) return `${weeks} week${weeks > 1 ? 's' : ''} ago`;\n        if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;\n        if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n        if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n        return 'Just now';\n    }\n\n    // URL and Navigation Utilities\n    getQueryParam(param) {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get(param);\n    }\n\n    setQueryParam(param, value) {\n        const url = new URL(window.location);\n        url.searchParams.set(param, value);\n        window.history.pushState({}, '', url);\n    }\n\n    removeQueryParam(param) {\n        const url = new URL(window.location);\n        url.searchParams.delete(param);\n        window.history.pushState({}, '', url);\n    }\n\n    // Local Storage Utilities\n    setLocalData(key, data) {\n        try {\n            localStorage.setItem(key, JSON.stringify(data));\n            return true;\n        } catch (error) {\n            console.error('Error saving to localStorage:', error);\n            return false;\n        }\n    }\n\n    getLocalData(key) {\n        try {\n            const data = localStorage.getItem(key);\n            return data ? JSON.parse(data) : null;\n        } catch (error) {\n            console.error('Error reading from localStorage:', error);\n            return null;\n        }\n    }\n\n    removeLocalData(key) {\n        try {\n            localStorage.removeItem(key);\n            return true;\n        } catch (error) {\n            console.error('Error removing from localStorage:', error);\n            return false;\n        }\n    }\n\n    // Network Utilities\n    async makeRequest(url, options = {}) {\n        const defaultOptions = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const mergedOptions = { ...defaultOptions, ...options };\n        \n        try {\n            const response = await fetch(url, mergedOptions);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error('Request failed:', error);\n            throw error;\n        }\n    }\n\n    // File Utilities\n    formatFileSize(bytes) {\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        if (bytes === 0) return '0 Bytes';\n        const i = Math.floor(Math.log(bytes) / Math.log(1024));\n        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    }\n\n    isValidImageFile(file) {\n        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n        return validTypes.includes(file.type);\n    }\n\n    isValidVideoFile(file) {\n        const validTypes = ['video/mp4', 'video/avi', 'video/mov', 'video/wmv', 'video/webm'];\n        return validTypes.includes(file.type);\n    }\n\n    // Animation Utilities\n    fadeIn(element, duration = 300) {\n        element.style.opacity = '0';\n        element.style.display = 'block';\n        \n        let start = null;\n        const animate = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            element.style.opacity = Math.min(progress / duration, 1);\n            \n            if (progress < duration) {\n                requestAnimationFrame(animate);\n            }\n        };\n        \n        requestAnimationFrame(animate);\n    }\n\n    fadeOut(element, duration = 300) {\n        let start = null;\n        const animate = (timestamp) => {\n            if (!start) start = timestamp;\n            const progress = timestamp - start;\n            element.style.opacity = Math.max(1 - (progress / duration), 0);\n            \n            if (progress < duration) {\n                requestAnimationFrame(animate);\n            } else {\n                element.style.display = 'none';\n            }\n        };\n        \n        requestAnimationFrame(animate);\n    }\n\n    // Utility Functions\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n\n    throttle(func, limit) {\n        let inThrottle;\n        return function() {\n            const args = arguments;\n            const context = this;\n            if (!inThrottle) {\n                func.apply(context, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Currency Formatting\n    formatCurrency(amount, currency = 'USD') {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: currency\n        }).format(amount);\n    }\n\n    // Number Formatting\n    formatNumber(number) {\n        return new Intl.NumberFormat('en-US').format(number);\n    }\n\n    // Copy to Clipboard\n    async copyToClipboard(text) {\n        try {\n            await navigator.clipboard.writeText(text);\n            this.showToast('Copied to clipboard!', 'success');\n            return true;\n        } catch (error) {\n            console.error('Failed to copy:', error);\n            this.showToast('Failed to copy to clipboard', 'danger');\n            return false;\n        }\n    }\n\n    // Device Detection\n    isMobile() {\n        return window.innerWidth <= 768;\n    }\n\n    isTablet() {\n        return window.innerWidth > 768 && window.innerWidth <= 1024;\n    }\n\n    isDesktop() {\n        return window.innerWidth > 1024;\n    }\n\n    // Event Emitter\n    createEventEmitter() {\n        const events = {};\n        \n        return {\n            on(event, callback) {\n                if (!events[event]) events[event] = [];\n                events[event].push(callback);\n            },\n            \n            emit(event, data) {\n                if (events[event]) {\n                    events[event].forEach(callback => callback(data));\n                }\n            },\n            \n            off(event, callback) {\n                if (events[event]) {\n                    events[event] = events[event].filter(cb => cb !== callback);\n                }\n            }\n        };\n    }\n}\n\n// Global Toast Function\nwindow.showToast = function(message, type = 'info', delay = 5000) {\n    if (window.commonUtils) {\n        window.commonUtils.showToast(message, type, delay);\n    } else {\n        console.log(`${type.toUpperCase()}: ${message}`);\n    }\n};\n\n// Initialize common utilities when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.commonUtils = new CommonUtils();\n});\n\n// Export for other modules\nwindow.CommonUtils = CommonUtils;\n","size_bytes":19997},"assets/js/creator.js":{"content":"/**\n * VideoHub Creator Module\n * Handles creator dashboard functionality with API integration\n */\n\nclass CreatorManager {\n    constructor() {\n        this.stats = {};\n        this.videos = [];\n        this.earnings = [];\n        this.isLoading = false;\n        this.init();\n    }\n\n    async init() {\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n        \n        // Only load data if we haven't already loaded it\n        if (!this.stats || Object.keys(this.stats).length === 0) {\n            await this.loadDashboardData();\n        }\n    }\n\n    async loadDashboardData() {\n        // Prevent multiple concurrent loads using global state\n        if (window.VideoHubState && window.VideoHubState.isLoading('creatorData')) {\n            console.log('Creator data loading already in progress, skipping...');\n            return;\n        }\n        \n        this.isLoading = true;\n        if (window.VideoHubState) {\n            window.VideoHubState.setLoading('creatorData', true);\n        }\n\n        // Show section loaders\n        const dashboardSection = document.querySelector('.dashboard-stats');\n        const videosSection = document.querySelector('.recent-videos');\n        const earningsSection = document.querySelector('.recent-earnings');\n\n        if (window.commonUtils) {\n            if (dashboardSection) window.commonUtils.showSectionLoader(dashboardSection, 'Loading dashboard metrics...');\n            if (videosSection) window.commonUtils.showSectionLoader(videosSection, 'Loading recent videos...');\n            if (earningsSection) window.commonUtils.showSectionLoader(earningsSection, 'Loading earnings data...');\n        }\n        \n        try {\n            // Wait for API service to be available\n            let retries = 0;\n            const maxRetries = 50;\n            \n            while (retries < maxRetries && !window.apiService) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n                retries++;\n            }\n\n            if (window.apiService) {\n                // Get current user info from both localStorage and sessionStorage\n                const localSession = localStorage.getItem('userSession');\n                const sessionSession = sessionStorage.getItem('userSession');\n                const userSession = JSON.parse(localSession || sessionSession || '{}');\n                \n                // Get creator ID from session\n                const creatorId = userSession.id;\n                \n                if (!creatorId) {\n                    console.error('No creator ID found in session, redirecting to login');\n                    window.location.href = '../auth/login.html';\n                    return;\n                }\n                \n                console.log('Loading data for creator ID:', creatorId);\n                \n                // Check cache first\n                const cachedMetrics = window.VideoHubState?.getCached('metrics', creatorId);\n                const cachedVideos = window.VideoHubState?.getCached('videos', creatorId);\n                const cachedEarnings = window.VideoHubState?.getCached('earnings', creatorId);\n                \n                let metricsResponse, videosResponse, earningsResponse;\n                \n                if (cachedMetrics && cachedVideos && cachedEarnings) {\n                    console.log('Using cached creator data');\n                    metricsResponse = { success: true, data: cachedMetrics };\n                    videosResponse = { data: { videos: cachedVideos } };\n                    earningsResponse = { data: { earnings: cachedEarnings } };\n                } else {\n                    // Load all data in parallel but only once\n                    [metricsResponse, videosResponse, earningsResponse] = await Promise.all([\n                        window.apiService.get(`/metrics/creator?creator_id=${creatorId}`),\n                        window.apiService.get(`/creator/videos?uploader_id=${creatorId}`),\n                        window.apiService.get(`/creator/earnings?creator_id=${creatorId}`)\n                    ]);\n                    \n                    // Cache the responses\n                    if (window.VideoHubState) {\n                        if (metricsResponse.success) window.VideoHubState.setCached('metrics', metricsResponse.data, creatorId);\n                        if (videosResponse.data) window.VideoHubState.setCached('videos', videosResponse.data.videos || videosResponse.data, creatorId);\n                        if (earningsResponse.data) window.VideoHubState.setCached('earnings', earningsResponse.data.earnings || earningsResponse.data, creatorId);\n                    }\n                }\n                \n                // Process metrics\n                if (metricsResponse.success) {\n                    this.stats = metricsResponse.data;\n                }\n                \n                // Process videos \n                this.videos = Array.isArray(videosResponse.data?.videos) ? videosResponse.data.videos : \n                             Array.isArray(videosResponse.videos) ? videosResponse.videos : \n                             Array.isArray(videosResponse.data) ? videosResponse.data : [];\n                             \n                // Process earnings\n                this.earnings = Array.isArray(earningsResponse.data?.earnings) ? earningsResponse.data.earnings : \n                               Array.isArray(earningsResponse.earnings) ? earningsResponse.earnings : \n                               Array.isArray(earningsResponse.data) ? earningsResponse.data : [];\n                \n                console.log('Creator data loaded successfully:', {\n                    videosLength: this.videos.length,\n                    earningsLength: this.earnings.length,\n                    stats: this.stats\n                });\n\n                // Update UI\n                this.updateDashboardMetrics(this.stats);\n                \n                // Update page-specific content based on current page\n                if (window.location.pathname.includes('dashboard.html')) {\n                    this.updateRecentVideos();\n                    this.updateRecentEarnings();\n                } else if (window.location.pathname.includes('videos.html')) {\n                    this.loadVideosGrid();\n                    this.updateVideoPageStats();\n                }\n            }\n        } catch (error) {\n            console.error('Failed to load dashboard data:', error);\n            \n            // Handle API error with proper user feedback\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Loading creator dashboard data');\n            }\n            \n            // Set empty values on error\n            this.updateDashboardMetrics({\n                totalVideos: 0,\n                totalViews: 0,\n                totalEarnings: '0.00',\n                subscribers: 0\n            });\n        } finally {\n            this.isLoading = false;\n            if (window.VideoHubState) {\n                window.VideoHubState.setLoading('creatorData', false);\n            }\n\n            // Hide section loaders\n            const dashboardSection = document.querySelector('.dashboard-stats');\n            const videosSection = document.querySelector('.recent-videos');\n            const earningsSection = document.querySelector('.recent-earnings');\n\n            if (window.commonUtils) {\n                if (dashboardSection) window.commonUtils.hideSectionLoader(dashboardSection);\n                if (videosSection) window.commonUtils.hideSectionLoader(videosSection);\n                if (earningsSection) window.commonUtils.hideSectionLoader(earningsSection);\n            }\n        }\n    }\n\n    updateDashboardMetrics(stats) {\n        // Update dashboard metric displays\n        const totalVideosEl = document.getElementById('totalVideos');\n        const totalViewsEl = document.getElementById('totalViews');\n        const totalEarningsEl = document.getElementById('totalEarnings');\n        const subscribersEl = document.getElementById('subscribers');\n        \n        if (totalVideosEl) totalVideosEl.textContent = stats.totalVideos || 0;\n        if (totalViewsEl) totalViewsEl.textContent = stats.totalViews || 0;\n        if (totalEarningsEl) totalEarningsEl.textContent = '$' + (stats.totalEarnings || '0.00');\n        if (subscribersEl) subscribersEl.textContent = stats.subscribers || 0;\n\n        // Update earnings table\n        this.updateEarningsTable();\n    }\n\n    updateEarningsTable() {\n        const earningsTableBody = document.getElementById('earningsTable');\n        if (!earningsTableBody) return;\n\n        if (!this.earnings.length) {\n            earningsTableBody.innerHTML = '<tr><td colspan=\"4\" class=\"text-center text-muted\">No earnings data available</td></tr>';\n            return;\n        }\n\n        earningsTableBody.innerHTML = this.earnings.map(earning => `\n            <tr>\n                <td>${earning.videoTitle || 'N/A'}</td>\n                <td>${earning.viewerName || 'N/A'}</td>\n                <td>${earning.date || 'N/A'}</td>\n                <td>$${earning.amount || '0.00'}</td>\n            </tr>\n        `).join('');\n    }\n\n    bindEvents() {\n        // Upload button event\n        const uploadBtn = document.querySelector('[data-bs-target=\"#uploadModal\"]');\n        if (uploadBtn) {\n            uploadBtn.addEventListener('click', () => this.showUploadModal());\n        }\n\n        // Video management events - use more specific targeting to prevent duplicates\n        document.addEventListener('click', (e) => {\n            // Check for edit video button\n            if (e.target.classList.contains('edit-video-btn')) {\n                e.preventDefault();\n                e.stopPropagation();\n                const videoId = e.target.dataset.videoId;\n                if (videoId) {\n                    this.editVideo(videoId);\n                }\n            }\n            // Check for delete video button  \n            if (e.target.classList.contains('delete-video-btn')) {\n                e.preventDefault();\n                e.stopPropagation();\n                const videoId = e.target.dataset.videoId;\n                if (videoId && !this.isDeleting) {\n                    this.deleteVideo(videoId);\n                }\n            }\n        });\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        switch (currentPage) {\n            case 'dashboard.html':\n                this.initDashboard();\n                break;\n            case 'videos.html':\n                this.initVideosPage();\n                break;\n            case 'earnings.html':\n                this.initEarningsPage();\n                break;\n        }\n    }\n\n    initDashboard() {\n        console.log('Creator dashboard initialized');\n        this.updateRecentVideos();\n        this.updateRecentEarnings();\n    }\n\n    updateRecentVideos() {\n        const recentVideosContainer = document.getElementById('recentVideos');\n        if (!recentVideosContainer) return;\n\n        if (!this.videos || this.videos.length === 0) {\n            recentVideosContainer.innerHTML = '<p class=\"text-muted\">No videos uploaded yet.</p>';\n            return;\n        }\n\n        // Get the 3 most recent videos\n        const recentVideos = this.videos\n            .sort((a, b) => new Date(b.created_at || b.uploadDate) - new Date(a.created_at || a.uploadDate))\n            .slice(0, 3);\n\n        recentVideosContainer.innerHTML = recentVideos.map(video => {\n            const statusClass = video.status === 'published' ? 'bg-success' : \n                               video.status === 'pending' ? 'bg-warning' : 'bg-secondary';\n            const statusIcon = video.status === 'published' ? 'fa-play' : \n                              video.status === 'pending' ? 'fa-clock' : 'fa-pause';\n            \n            return `\n                <div class=\"d-flex mb-3\">\n                    <div class=\"me-3\">\n                        <div class=\"${statusClass} text-white d-flex align-items-center justify-content-center\" style=\"width: 60px; height: 40px; border-radius: 4px;\">\n                            <i class=\"fas ${statusIcon}\"></i>\n                        </div>\n                    </div>\n                    <div class=\"flex-grow-1\">\n                        <h6 class=\"mb-1\">${video.title}</h6>\n                        <small class=\"text-muted\">${(video.status || 'unknown').charAt(0).toUpperCase() + (video.status || 'unknown').slice(1)}</small>\n                    </div>\n                </div>\n            `;\n        }).join('');\n    }\n\n    updateRecentEarnings() {\n        const earningsTableBody = document.getElementById('earningsTable');\n        if (!earningsTableBody) return;\n\n        if (!this.earnings || this.earnings.length === 0) {\n            earningsTableBody.innerHTML = '<tr><td colspan=\"4\" class=\"text-center text-muted\">No earnings data available</td></tr>';\n            return;\n        }\n\n        // Get the 5 most recent earnings\n        const recentEarnings = this.earnings\n            .sort((a, b) => new Date(b.date || b.purchaseDate) - new Date(a.date || a.purchaseDate))\n            .slice(0, 5);\n\n        earningsTableBody.innerHTML = recentEarnings.map(earning => `\n            <tr>\n                <td>${earning.videoTitle || 'N/A'}</td>\n                <td>${earning.viewerName || 'Anonymous'}</td>\n                <td>${earning.date || earning.purchaseDate || 'N/A'}</td>\n                <td>$${earning.amount || '0.00'}</td>\n            </tr>\n        `).join('');\n    }\n\n    initVideosPage() {\n        this.loadVideosGrid();\n        this.updateVideoPageStats();\n    }\n\n    initEarningsPage() {\n        this.loadEarningsTable();\n    }\n\n    async loadVideosGrid() {\n        const videosGrid = document.getElementById('videosGrid');\n        if (!videosGrid) return;\n\n        if (!this.videos.length) {\n            videosGrid.innerHTML = '<div class=\"col-12 text-center text-muted\"><p>No videos found. Upload your first video to get started!</p></div>';\n            return;\n        }\n\n        videosGrid.innerHTML = this.videos.map(video => {\n            const status = video.status || 'published'; // Default to published if no status\n            const statusClass = status === 'published' ? 'bg-success' : \n                               status === 'pending' ? 'bg-warning' : 'bg-secondary';\n            \n            return `\n                <div class=\"col-lg-4 col-md-6 mb-4\">\n                    <div class=\"card\">\n                        <div class=\"video-thumbnail cursor-pointer\" style=\"background-image: url('${video.youtube_thumbnail || video.thumbnail || 'https://via.placeholder.com/300x169'}'); background-size: cover; background-position: center; height: 180px; position: relative;\" onclick=\"window.creatorManager.playVideo('${video.id}')\">\n                            <div class=\"video-overlay d-flex align-items-center justify-content-center\" style=\"position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.3); opacity: 0; transition: opacity 0.3s;\">\n                                <i class=\"fas fa-play fa-3x text-white\" style=\"text-shadow: 2px 2px 4px rgba(0,0,0,0.6);\"></i>\n                            </div>\n                        </div>\n                        <div class=\"card-body\">\n                            <h6 class=\"card-title\">${video.title}</h6>\n                            <p class=\"card-text text-muted small\">${(video.description || '').substring(0, 50)}...</p>\n                            <div class=\"d-flex justify-content-between align-items-center\">\n                                <span class=\"badge ${statusClass}\">${status.charAt(0).toUpperCase() + status.slice(1)}</span>\n                                <span class=\"text-muted small\">$${video.price || '0.00'}</span>\n                            </div>\n                            <div class=\"d-flex justify-content-between align-items-center mt-2\">\n                                <small class=\"text-muted\">${video.youtube_views || video.views || 0} views</small>\n                                <div>\n                                    <button class=\"btn btn-sm btn-outline-primary edit-video-btn\" data-video-id=\"${video.id}\">Edit</button>\n                                    <button class=\"btn btn-sm btn-outline-danger delete-video-btn\" data-video-id=\"${video.id}\">Delete</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        // Add hover effect for play overlay\n        document.querySelectorAll('.video-thumbnail').forEach(thumbnail => {\n            const overlay = thumbnail.querySelector('.video-overlay');\n            thumbnail.addEventListener('mouseenter', () => {\n                overlay.style.opacity = '1';\n            });\n            thumbnail.addEventListener('mouseleave', () => {\n                overlay.style.opacity = '0';\n            });\n        });\n    }\n\n    updateVideoPageStats() {\n        if (!this.videos) return;\n        \n        const totalVideos = this.videos.length;\n        const publishedVideos = this.videos.filter(v => (v.status || 'published') === 'published').length;\n        const pendingVideos = this.videos.filter(v => v.status === 'pending').length;\n        const totalViews = this.videos.reduce((sum, v) => sum + (parseInt(v.views) || 0), 0);\n\n        // Update stats cards on videos page\n        const totalVideosEl = document.getElementById('totalVideos');\n        const publishedVideosEl = document.getElementById('publishedVideos');\n        const pendingVideosEl = document.getElementById('pendingVideos');\n        const totalViewsEl = document.getElementById('totalViews');\n\n        if (totalVideosEl) totalVideosEl.textContent = totalVideos;\n        if (publishedVideosEl) publishedVideosEl.textContent = publishedVideos;\n        if (pendingVideosEl) pendingVideosEl.textContent = pendingVideos;\n        if (totalViewsEl) totalViewsEl.textContent = totalViews.toLocaleString();\n    }\n\n    async loadEarningsTable() {\n        const tbody = document.getElementById('earningsTableBody');\n        if (!tbody) return;\n\n        if (!this.earnings.length) {\n            tbody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center text-muted\">No earnings found</td></tr>';\n            return;\n        }\n\n        tbody.innerHTML = this.earnings.map(earning => `\n            <tr>\n                <td>${earning.date || 'N/A'}</td>\n                <td>${earning.videoTitle || 'N/A'}</td>\n                <td>${earning.viewerName || 'N/A'}</td>\n                <td>$${earning.amount || '0.00'}</td>\n                <td><span class=\"badge bg-success\">Completed</span></td>\n            </tr>\n        `).join('');\n    }\n\n    showUploadModal() {\n        console.log('Show upload modal');\n    }\n\n    playVideo(videoId) {\n        const video = this.videos.find(v => v.id == videoId);\n        if (!video) {\n            alert('Video not found');\n            return;\n        }\n\n        // Extract YouTube video ID\n        let youtubeVideoId = '';\n        if (video.youtube_id) {\n            youtubeVideoId = video.youtube_id;\n        } else if (video.youtube_thumbnail) {\n            // Extract from thumbnail URL\n            const match = video.youtube_thumbnail.match(/\\/vi\\/([^\\/]+)\\//);\n            if (match) {\n                youtubeVideoId = match[1];\n            }\n        }\n\n        if (!youtubeVideoId) {\n            alert('Video not available for playback');\n            return;\n        }\n\n        // Create video player modal\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.id = 'videoPlayerModal';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-xl\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${video.title}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body p-0\">\n                        <div class=\"ratio ratio-16x9\">\n                            <iframe src=\"https://www.youtube.com/embed/${youtubeVideoId}?autoplay=1\" \n                                    title=\"${video.title}\" \n                                    frameborder=\"0\" \n                                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n                                    allowfullscreen></iframe>\n                        </div>\n                        <div class=\"p-3\">\n                            <h6>${video.title}</h6>\n                            <p class=\"text-muted\">${video.description || 'No description available'}</p>\n                            <div class=\"d-flex justify-content-between\">\n                                <span>Views: ${video.youtube_views || video.views || 0}</span>\n                                <span>Price: $${video.price}</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n\n        // Remove modal after it's hidden\n        modal.addEventListener('hidden.bs.modal', () => {\n            modal.remove();\n        });\n    }\n\n    editVideo(videoId) {\n        console.log('Edit video called with ID:', videoId, 'Available videos:', this.videos.length);\n        \n        // Convert videoId to string for comparison since IDs may be numbers or strings\n        const video = this.videos.find(v => String(v.id) === String(videoId));\n        if (!video) {\n            console.error('Video not found. Looking for ID:', videoId, 'Available IDs:', this.videos.map(v => v.id));\n            if (window.commonUtils) {\n                window.commonUtils.showToast('Video not found', 'error');\n            } else {\n                alert('Video not found');\n            }\n            return;\n        }\n\n        // Create edit modal\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.id = 'editVideoModal';\n        modal.innerHTML = `\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">Edit Video</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <form id=\"editVideoForm\">\n                            <div class=\"mb-3\">\n                                <label for=\"editTitle\" class=\"form-label\">Title</label>\n                                <input type=\"text\" class=\"form-control\" id=\"editTitle\" value=\"${video.title}\" required>\n                            </div>\n                            <div class=\"mb-3\">\n                                <label for=\"editDescription\" class=\"form-label\">Description</label>\n                                <textarea class=\"form-control\" id=\"editDescription\" rows=\"3\">${video.description || ''}</textarea>\n                            </div>\n                            <div class=\"mb-3\">\n                                <label for=\"editPrice\" class=\"form-label\">Price ($)</label>\n                                <input type=\"number\" class=\"form-control\" id=\"editPrice\" value=\"${video.price}\" min=\"0\" step=\"0.01\" required>\n                            </div>\n                            <div class=\"mb-3\">\n                                <label for=\"editStatus\" class=\"form-label\">Status</label>\n                                <select class=\"form-select\" id=\"editStatus\">\n                                    <option value=\"published\" ${video.status === 'published' ? 'selected' : ''}>Published</option>\n                                    <option value=\"pending\" ${video.status === 'pending' ? 'selected' : ''}>Pending Review</option>\n                                    <option value=\"draft\" ${video.status === 'draft' ? 'selected' : ''}>Draft</option>\n                                </select>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                        <button type=\"button\" class=\"btn btn-primary\" onclick=\"window.creatorManager.saveVideoChanges('${videoId}')\">Save Changes</button>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n\n        // Remove modal after it's hidden\n        modal.addEventListener('hidden.bs.modal', () => {\n            modal.remove();\n        });\n    }\n\n    async saveVideoChanges(videoId) {\n        const saveButton = document.querySelector('#editVideoModal .btn-primary');\n        const title = document.getElementById('editTitle').value;\n        const description = document.getElementById('editDescription').value;\n        const price = document.getElementById('editPrice').value;\n        const status = document.getElementById('editStatus').value;\n\n        if (!title.trim()) {\n            if (window.commonUtils) {\n                window.commonUtils.showToast('Title is required', 'warning');\n            } else {\n                alert('Title is required');\n            }\n            return;\n        }\n\n        try {\n            // Set button loading state\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(saveButton, true, 'Saving...');\n            }\n            // Update video in our database first\n            const response = await window.apiService.put(`/videos/${videoId}`, {\n                title: title.trim(),\n                description: description.trim(),\n                price: parseFloat(price),\n                status: status\n            });\n\n            if (response.success) {\n                // Update local video data\n                const videoIndex = this.videos.findIndex(v => v.id == videoId);\n                if (videoIndex !== -1) {\n                    this.videos[videoIndex] = { ...this.videos[videoIndex], title, description, price, status };\n                }\n\n                // Close modal\n                const modal = bootstrap.Modal.getInstance(document.getElementById('editVideoModal'));\n                modal.hide();\n\n                // If video has YouTube ID, sync with YouTube\n                if (response.data?.youtube_id) {\n                    console.log('Syncing video update to YouTube...');\n                    this.showNotification('Video updated! Syncing with YouTube...', 'info');\n                    \n                    try {\n                        // Use the global YouTube API instance\n                        if (!window.youtubeAPI) {\n                            console.error('YouTube API client not available');\n                            throw new Error('YouTube API client not available');\n                        }\n                        \n                        // Ensure YouTube client is properly initialized\n                        await window.youtubeAPI.initialize();\n                        \n                        const youtubeResult = await window.youtubeAPI.updateVideoMetadata(response.data.youtube_id, {\n                            title: title.trim(),\n                            description: description.trim()\n                        });\n                        \n                        if (youtubeResult.success) {\n                            console.log('Video successfully updated on YouTube');\n                            this.showNotification('✓ Video updated successfully in VideoHub and YouTube!', 'success');\n                        } else {\n                            console.warn('Video updated in VideoHub but YouTube sync failed:', youtubeResult.error);\n                            if (youtubeResult.needsAuth) {\n                                this.showNotification('Video updated in VideoHub. YouTube sync requires authentication. Please connect your YouTube account.', 'warning');\n                                this.showYouTubeConnectOption();\n                            } else {\n                                this.showNotification('Video updated in VideoHub. YouTube sync failed: ' + youtubeResult.error, 'warning');\n                            }\n                        }\n                    } catch (youtubeError) {\n                        console.error('YouTube sync error:', youtubeError);\n                        this.showNotification('Video updated in VideoHub. YouTube sync failed - please check authentication.', 'warning');\n                        this.showYouTubeConnectOption();\n                    }\n                } else {\n                    this.showNotification('✓ Video updated successfully!', 'success');\n                }\n\n                // Reload videos grid\n                this.loadVideosGrid();\n                this.updateVideoPageStats();\n            } else {\n                this.showNotification('Failed to update video: ' + (response.message || 'Unknown error'), 'error');\n            }\n        } catch (error) {\n            console.error('Error updating video:', error);\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Updating video');\n            } else {\n                this.showNotification('Error updating video. Please try again.', 'error');\n            }\n        } finally {\n            // Reset button loading state\n            if (window.commonUtils) {\n                window.commonUtils.setButtonLoading(saveButton, false);\n            }\n        }\n    }\n\n    showNotification(message, type = 'info') {\n        // Create notification element\n        const notification = document.createElement('div');\n        notification.className = `alert alert-${type === 'error' ? 'danger' : type === 'warning' ? 'warning' : type === 'success' ? 'success' : 'info'} alert-dismissible fade show position-fixed`;\n        notification.style.top = '20px';\n        notification.style.right = '20px';\n        notification.style.zIndex = '9999';\n        notification.style.minWidth = '300px';\n        notification.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        document.body.appendChild(notification);\n        \n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.remove();\n            }\n        }, 5000);\n    }\n\n    showYouTubeConnectOption() {\n        // Create YouTube connect notification\n        const notification = document.createElement('div');\n        notification.className = 'alert alert-info alert-dismissible fade show position-fixed';\n        notification.style.top = '20px';\n        notification.style.right = '20px';\n        notification.style.zIndex = '9999';\n        notification.style.minWidth = '350px';\n        notification.innerHTML = `\n            <div class=\"d-flex align-items-center justify-content-between\">\n                <span>Connect YouTube to sync video changes</span>\n                <button type=\"button\" class=\"btn btn-sm btn-primary ms-2\" onclick=\"window.creatorManager.connectYouTubeFromToast()\">\n                    <i class=\"fab fa-youtube me-1\"></i>Connect\n                </button>\n            </div>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        document.body.appendChild(notification);\n        \n        // Auto-remove after 10 seconds\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.remove();\n            }\n        }, 10000);\n    }\n\n    async connectYouTubeFromToast() {\n        try {\n            if (window.youtubeAPI) {\n                const success = await window.youtubeAPI.signIn();\n                if (success) {\n                    this.showNotification('✓ YouTube account connected successfully!', 'success');\n                } else {\n                    this.showNotification('Failed to connect YouTube account.', 'error');\n                }\n            } else {\n                this.showNotification('YouTube API not available', 'error');\n            }\n        } catch (error) {\n            console.error('Connect failed:', error);\n            this.showNotification('Failed to connect YouTube account.', 'error');\n        }\n    }\n\n    async deleteVideo(videoId) {\n        // Prevent multiple confirmations by checking if one is already showing\n        if (this.isDeleting) {\n            return;\n        }\n        \n        this.isDeleting = true;\n        \n        try {\n            if (!confirm('Are you sure you want to delete this video? This action cannot be undone.')) {\n                return;\n            }\n\n            // Find and disable the delete button to prevent multiple calls\n            const deleteButton = document.querySelector(`[data-video-id=\"${videoId}\"].delete-video-btn`);\n            if (deleteButton) {\n                deleteButton.disabled = true;\n                if (window.commonUtils) {\n                    window.commonUtils.setButtonLoading(deleteButton, true, 'Deleting...');\n                }\n            }\n\n            const response = await window.apiService.delete(`/videos/${videoId}`);\n\n            if (response.success) {\n                // Remove from local videos array\n                this.videos = this.videos.filter(v => String(v.id) !== String(videoId));\n\n                // Reload videos grid\n                this.loadVideosGrid();\n                this.updateVideoPageStats();\n\n                if (window.commonUtils) {\n                    window.commonUtils.showToast('Video deleted successfully!', 'success');\n                } else {\n                    alert('Video deleted successfully!');\n                }\n            } else {\n                if (window.commonUtils) {\n                    window.commonUtils.showToast('Failed to delete video: ' + (response.message || 'Unknown error'), 'error');\n                } else {\n                    alert('Failed to delete video: ' + (response.message || 'Unknown error'));\n                }\n            }\n        } catch (error) {\n            console.error('Error deleting video:', error);\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Deleting video');\n            } else {\n                alert('Error deleting video. Please try again.');\n            }\n        } finally {\n            this.isDeleting = false;\n            // Re-enable the delete button\n            const deleteButton = document.querySelector(`[data-video-id=\"${videoId}\"].delete-video-btn`);\n            if (deleteButton && window.commonUtils) {\n                window.commonUtils.setButtonLoading(deleteButton, false);\n                deleteButton.disabled = false;\n            }\n        }\n    }\n\n    formatNumber(num) {\n        return new Intl.NumberFormat().format(num || 0);\n    }\n\n    formatCurrency(amount) {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD'\n        }).format(amount || 0);\n    }\n}\n\n// Initialize creator manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.creatorManager = new CreatorManager();\n    \n    // Initialize YouTube upload functionality if on videos page\n    if (window.location.pathname.includes('videos.html')) {\n        new YouTubeUploadManager();\n    }\n});\n\n/**\n * YouTube Upload Manager\n * Handles video uploads to YouTube and database sync\n */\nclass YouTubeUploadManager {\n    constructor() {\n        this.uploadModal = document.getElementById('uploadModal');\n        this.uploadForm = document.getElementById('uploadForm');\n        this.uploadBtn = document.getElementById('uploadBtn');\n        this.authStatus = document.getElementById('authStatus');\n        this.connectBtn = document.getElementById('connectYouTube');\n        this.progressDiv = document.getElementById('uploadProgress');\n        this.progressBar = document.getElementById('progressBar');\n        this.progressText = document.getElementById('progressText');\n        this.progressStatus = document.getElementById('progressStatus');\n        \n        this.init();\n    }\n    \n    async init() {\n        this.bindEvents();\n        this.setupCharacterCounters();\n        await this.checkAuthStatus();\n    }\n    \n    bindEvents() {\n        // Upload button click\n        if (this.uploadBtn) {\n            this.uploadBtn.addEventListener('click', (e) => this.handleUpload(e));\n        }\n        \n        // Connect YouTube button\n        if (this.connectBtn) {\n            this.connectBtn.addEventListener('click', (e) => this.connectYouTube(e));\n        }\n        \n        // Modal events\n        if (this.uploadModal) {\n            this.uploadModal.addEventListener('show.bs.modal', () => this.onModalShow());\n            this.uploadModal.addEventListener('hidden.bs.modal', () => this.onModalHide());\n        }\n    }\n    \n    setupCharacterCounters() {\n        // Title counter\n        const titleInput = document.getElementById('videoTitle');\n        const titleCount = document.getElementById('titleCount');\n        if (titleInput && titleCount) {\n            titleInput.addEventListener('input', (e) => {\n                titleCount.textContent = e.target.value.length;\n            });\n        }\n        \n        // Description counter  \n        const descInput = document.getElementById('videoDescription');\n        const descCount = document.getElementById('descCount');\n        if (descInput && descCount) {\n            descInput.addEventListener('input', (e) => {\n                descCount.textContent = e.target.value.length;\n            });\n        }\n    }\n    \n    async checkAuthStatus() {\n        try {\n            if (window.youtubeAPI) {\n                await window.youtubeAPI.initialize();\n                \n                if (window.youtubeAPI.isSignedIn()) {\n                    this.authStatus.style.display = 'none';\n                    this.uploadBtn.disabled = false;\n                } else {\n                    this.authStatus.style.display = 'block';\n                    this.uploadBtn.disabled = true;\n                }\n            }\n        } catch (error) {\n            console.error('Auth check failed:', error);\n            this.authStatus.style.display = 'block';\n            this.uploadBtn.disabled = true;\n        }\n    }\n    \n    async connectYouTube(e) {\n        e.preventDefault();\n        \n        try {\n            this.connectBtn.disabled = true;\n            this.connectBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i>Connecting...';\n            \n            if (window.youtubeAPI) {\n                const success = await window.youtubeAPI.signIn();\n                \n                if (success) {\n                    await this.checkAuthStatus();\n                    this.showSuccess('YouTube account connected successfully!');\n                } else {\n                    this.showError('Failed to connect YouTube account.');\n                }\n            } else {\n                throw new Error('YouTube API not available');\n            }\n        } catch (error) {\n            console.error('Connect failed:', error);\n            this.showError('Failed to connect YouTube account.');\n        } finally {\n            this.connectBtn.disabled = false;\n            this.connectBtn.innerHTML = '<i class=\"fab fa-youtube me-1\"></i>Connect YouTube';\n        }\n    }\n    \n    async handleUpload(e) {\n        e.preventDefault();\n        \n        try {\n            // Validate form\n            if (!this.validateForm()) {\n                return;\n            }\n            \n            // Check auth\n            if (!window.youtubeAPI || !window.youtubeAPI.isSignedIn()) {\n                this.showError('Please connect your YouTube account first.');\n                return;\n            }\n            \n            // Get form data\n            const formData = this.getFormData();\n            \n            // Show progress\n            this.showProgress();\n            \n            // Upload video\n            const result = await window.youtubeAPI.uploadVideo(\n                formData.file, \n                formData.metadata, \n                (progress) => this.updateProgress(progress)\n            );\n            \n            if (result.success) {\n                this.showSuccess('Video uploaded successfully!');\n                this.hideProgress();\n                this.resetForm();\n                \n                // Close modal and refresh videos\n                const modal = bootstrap.Modal.getInstance(this.uploadModal);\n                modal.hide();\n                \n                // Refresh videos list\n                window.location.reload();\n            } else {\n                throw new Error(result.error || 'Upload failed');\n            }\n            \n        } catch (error) {\n            console.error('Upload failed:', error);\n            this.showError(error.message);\n            this.hideProgress();\n        }\n    }\n    \n    validateForm() {\n        const fileInput = document.getElementById('videoFile');\n        const titleInput = document.getElementById('videoTitle');\n        \n        if (!fileInput.files || fileInput.files.length === 0) {\n            this.showError('Please select a video file.');\n            return false;\n        }\n        \n        if (!titleInput.value.trim()) {\n            this.showError('Please enter a video title.');\n            return false;\n        }\n        \n        const file = fileInput.files[0];\n        if (file.size > 2 * 1024 * 1024 * 1024) { // 2GB limit\n            this.showError('File size must be less than 2GB.');\n            return false;\n        }\n        \n        return true;\n    }\n    \n    getFormData() {\n        const fileInput = document.getElementById('videoFile');\n        const titleInput = document.getElementById('videoTitle');\n        const descInput = document.getElementById('videoDescription');\n        const priceInput = document.getElementById('videoPrice');\n        const privacyInput = document.getElementById('videoPrivacy');\n        const tagsInput = document.getElementById('videoTags');\n        \n        const tags = tagsInput.value ? tagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag) : [];\n        \n        return {\n            file: fileInput.files[0],\n            metadata: {\n                title: titleInput.value.trim(),\n                description: descInput.value.trim(),\n                price: parseFloat(priceInput.value) || 0,\n                privacy: privacyInput.value,\n                tags: tags,\n                categoryId: '22' // Education category\n            }\n        };\n    }\n    \n    showProgress() {\n        this.uploadForm.style.display = 'none';\n        this.progressDiv.style.display = 'block';\n        this.uploadBtn.disabled = true;\n    }\n    \n    hideProgress() {\n        this.uploadForm.style.display = 'block';\n        this.progressDiv.style.display = 'none';\n        this.uploadBtn.disabled = false;\n    }\n    \n    updateProgress(progress) {\n        this.progressBar.style.width = progress + '%';\n        this.progressText.textContent = progress + '%';\n        \n        if (progress < 30) {\n            this.progressStatus.textContent = 'Preparing upload...';\n        } else if (progress < 75) {\n            this.progressStatus.textContent = 'Converting video...';\n        } else if (progress < 90) {\n            this.progressStatus.textContent = 'Uploading to YouTube...';\n        } else {\n            this.progressStatus.textContent = 'Finalizing...';\n        }\n    }\n    \n    resetForm() {\n        this.uploadForm.reset();\n        document.getElementById('titleCount').textContent = '0';\n        document.getElementById('descCount').textContent = '0';\n    }\n    \n    onModalShow() {\n        this.checkAuthStatus();\n    }\n    \n    onModalHide() {\n        this.resetForm();\n        this.hideProgress();\n    }\n    \n    showSuccess(message) {\n        this.showAlert(message, 'success');\n    }\n    \n    showError(message) {\n        this.showAlert(message, 'danger');\n    }\n    \n    showAlert(message, type) {\n        // Remove existing alerts\n        const existingAlert = this.uploadModal.querySelector('.alert-dismissible');\n        if (existingAlert) {\n            existingAlert.remove();\n        }\n        \n        // Create new alert\n        const alert = document.createElement('div');\n        alert.className = `alert alert-${type} alert-dismissible fade show`;\n        alert.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        // Insert at top of modal body\n        const modalBody = this.uploadModal.querySelector('.modal-body');\n        modalBody.insertBefore(alert, modalBody.firstChild);\n        \n        // Auto remove after 5 seconds\n        setTimeout(() => {\n            if (alert.parentNode) {\n                alert.remove();\n            }\n        }, 5000);\n    }\n}\n\n// Initialize creator manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.creatorManager = new CreatorManager();\n});","size_bytes":45747},"assets/js/global-state.js":{"content":"/**\n * Global State Management for VideoHub\n * Prevents duplicate API calls and manages shared data\n */\nwindow.VideoHubState = {\n    // Cache for API responses\n    cache: {\n        creators: new Map(),\n        videos: new Map(),\n        earnings: new Map(),\n        metrics: new Map(),\n        users: new Map()\n    },\n    \n    // Loading states to prevent duplicate calls\n    loading: {\n        creatorData: false,\n        videos: false,\n        earnings: false,\n        metrics: false\n    },\n    \n    // Cache TTL (5 minutes)\n    TTL: 5 * 60 * 1000,\n    \n    // Get cached data if it's still valid\n    getCached: function(key, userId = null) {\n        const cacheKey = userId ? `${key}_${userId}` : key;\n        const cached = this.cache[key]?.get(cacheKey);\n        \n        if (cached && (Date.now() - cached.timestamp) < this.TTL) {\n            return cached.data;\n        }\n        return null;\n    },\n    \n    // Set cached data\n    setCached: function(key, data, userId = null) {\n        const cacheKey = userId ? `${key}_${userId}` : key;\n        if (!this.cache[key]) this.cache[key] = new Map();\n        \n        this.cache[key].set(cacheKey, {\n            data: data,\n            timestamp: Date.now()\n        });\n    },\n    \n    // Check if currently loading\n    isLoading: function(key) {\n        return this.loading[key];\n    },\n    \n    // Set loading state\n    setLoading: function(key, state) {\n        this.loading[key] = state;\n    },\n    \n    // Clear cache\n    clearCache: function() {\n        Object.keys(this.cache).forEach(key => {\n            this.cache[key].clear();\n        });\n    }\n};","size_bytes":1613},"assets/js/payment.js":{"content":"/**\n * VideoHub Payment Module\n * Handles payment processing, validation, and transaction management\n */\n\nclass PaymentManager {\n    constructor() {\n        this.currentTransaction = null;\n        this.paymentMethods = [];\n        this.init();\n    }\n\n    init() {\n        this.loadPaymentMethods();\n        this.bindEvents();\n        this.setupDemoMode();\n    }\n\n    loadPaymentMethods() {\n        // Mock payment methods\n        this.paymentMethods = [\n            {\n                id: 'card',\n                name: 'Credit/Debit Card',\n                icon: 'fas fa-credit-card',\n                enabled: true,\n                processingFee: 0.99\n            },\n            {\n                id: 'paypal',\n                name: 'PayPal',\n                icon: 'fab fa-paypal',\n                enabled: true,\n                processingFee: 0.50\n            },\n            {\n                id: 'apple_pay',\n                name: 'Apple Pay',\n                icon: 'fab fa-apple',\n                enabled: false,\n                processingFee: 0.30\n            },\n            {\n                id: 'google_pay',\n                name: 'Google Pay',\n                icon: 'fab fa-google',\n                enabled: false,\n                processingFee: 0.30\n            }\n        ];\n    }\n\n    bindEvents() {\n        // Payment method selection\n        document.addEventListener('change', (e) => {\n            if (e.target.name === 'paymentMethod') {\n                this.handlePaymentMethodChange(e.target.value);\n            }\n        });\n\n        // Payment form submission\n        document.addEventListener('submit', (e) => {\n            if (e.target.id === 'paymentForm') {\n                e.preventDefault();\n                this.processPayment();\n            }\n        });\n\n        // Card input formatting\n        document.addEventListener('input', (e) => {\n            if (e.target.id === 'cardNumber') {\n                this.formatCardNumber(e.target);\n            }\n            if (e.target.id === 'expiryDate') {\n                this.formatExpiryDate(e.target);\n            }\n            if (e.target.id === 'cvv') {\n                this.formatCVV(e.target);\n            }\n        });\n\n        // Real-time validation\n        document.addEventListener('blur', (e) => {\n            if (e.target.classList.contains('payment-input')) {\n                this.validateField(e.target);\n            }\n        });\n    }\n\n    setupDemoMode() {\n        // Add demo mode notification to payment forms\n        const paymentForms = document.querySelectorAll('.payment-form, #paymentForm');\n        paymentForms.forEach(form => {\n            if (!form.querySelector('.demo-notice')) {\n                const demoNotice = document.createElement('div');\n                demoNotice.className = 'alert alert-info demo-notice';\n                demoNotice.innerHTML = `\n                    <i class=\"fas fa-info-circle me-2\"></i>\n                    <strong>Demo Mode:</strong> No real payments will be processed. Use test card: 4242 4242 4242 4242\n                `;\n                form.insertBefore(demoNotice, form.firstChild);\n            }\n        });\n    }\n\n    // Payment Processing Methods\n    async processPayment() {\n        const paymentData = this.collectPaymentData();\n        \n        if (!this.validatePaymentData(paymentData)) {\n            return;\n        }\n\n        try {\n            this.showPaymentProcessing();\n            \n            // Simulate payment processing\n            const result = await this.simulatePaymentProcessing(paymentData);\n            \n            if (result.success) {\n                this.handlePaymentSuccess(result);\n            } else {\n                this.handlePaymentError(result.error);\n            }\n            \n        } catch (error) {\n            this.handlePaymentError('Payment processing failed. Please try again.');\n        } finally {\n            this.hidePaymentProcessing();\n        }\n    }\n\n    async simulatePaymentProcessing(paymentData) {\n        // Simulate API call delay\n        await this.delay(2000 + Math.random() * 2000);\n        \n        // Simulate different payment outcomes\n        const random = Math.random();\n        \n        if (random < 0.85) {\n            // Success (85% chance)\n            return {\n                success: true,\n                transactionId: this.generateTransactionId(),\n                amount: paymentData.amount,\n                currency: paymentData.currency,\n                paymentMethod: paymentData.paymentMethod,\n                timestamp: new Date().toISOString()\n            };\n        } else if (random < 0.95) {\n            // Decline (10% chance)\n            return {\n                success: false,\n                error: 'Payment declined. Please check your payment details or try a different payment method.'\n            };\n        } else {\n            // Error (5% chance)\n            return {\n                success: false,\n                error: 'Payment processing error. Please try again later.'\n            };\n        }\n    }\n\n    collectPaymentData() {\n        const form = document.getElementById('paymentForm') || document.querySelector('.payment-form');\n        if (!form) return null;\n\n        const paymentMethod = form.querySelector('input[name=\"paymentMethod\"]:checked')?.value || 'card';\n        const amount = parseFloat(form.querySelector('#amount')?.value || document.getElementById('purchasePrice')?.textContent || 0);\n        \n        const data = {\n            paymentMethod: paymentMethod,\n            amount: amount,\n            currency: 'USD',\n            processingFee: this.getProcessingFee(paymentMethod),\n            total: amount + this.getProcessingFee(paymentMethod)\n        };\n\n        // Collect payment method specific data\n        if (paymentMethod === 'card') {\n            data.card = {\n                number: form.querySelector('#cardNumber')?.value?.replace(/\\s/g, '') || '',\n                expiryDate: form.querySelector('#expiryDate')?.value || '',\n                cvv: form.querySelector('#cvv')?.value || '',\n                holderName: form.querySelector('#cardHolderName')?.value || ''\n            };\n        } else if (paymentMethod === 'paypal') {\n            data.paypal = {\n                email: form.querySelector('#paypalEmail')?.value || ''\n            };\n        }\n\n        return data;\n    }\n\n    validatePaymentData(data) {\n        if (!data) {\n            this.showPaymentError('Please fill in all required fields.');\n            return false;\n        }\n\n        if (!data.amount || data.amount <= 0) {\n            this.showPaymentError('Invalid payment amount.');\n            return false;\n        }\n\n        if (data.paymentMethod === 'card') {\n            return this.validateCardData(data.card);\n        } else if (data.paymentMethod === 'paypal') {\n            return this.validatePayPalData(data.paypal);\n        }\n\n        return true;\n    }\n\n    validateCardData(card) {\n        if (!this.validateCardNumber(card.number)) {\n            this.showPaymentError('Please enter a valid card number.');\n            return false;\n        }\n\n        if (!this.validateExpiryDate(card.expiryDate)) {\n            this.showPaymentError('Please enter a valid expiry date.');\n            return false;\n        }\n\n        if (!this.validateCVV(card.cvv)) {\n            this.showPaymentError('Please enter a valid CVV.');\n            return false;\n        }\n\n        if (!card.holderName.trim()) {\n            this.showPaymentError('Please enter the cardholder name.');\n            return false;\n        }\n\n        return true;\n    }\n\n    validatePayPalData(paypal) {\n        if (!this.validateEmail(paypal.email)) {\n            this.showPaymentError('Please enter a valid PayPal email address.');\n            return false;\n        }\n        return true;\n    }\n\n    // Card Validation Methods\n    validateCardNumber(cardNumber) {\n        // Remove spaces and check if it's numeric\n        const cleaned = cardNumber.replace(/\\s/g, '');\n        \n        if (!/^\\d+$/.test(cleaned) || cleaned.length < 13 || cleaned.length > 19) {\n            return false;\n        }\n\n        // Luhn algorithm\n        return this.luhnCheck(cleaned);\n    }\n\n    luhnCheck(cardNumber) {\n        let sum = 0;\n        let isEven = false;\n        \n        for (let i = cardNumber.length - 1; i >= 0; i--) {\n            let digit = parseInt(cardNumber.charAt(i));\n            \n            if (isEven) {\n                digit *= 2;\n                if (digit > 9) {\n                    digit -= 9;\n                }\n            }\n            \n            sum += digit;\n            isEven = !isEven;\n        }\n        \n        return sum % 10 === 0;\n    }\n\n    validateExpiryDate(expiryDate) {\n        if (!/^\\d{2}\\/\\d{2}$/.test(expiryDate)) {\n            return false;\n        }\n\n        const [month, year] = expiryDate.split('/').map(num => parseInt(num, 10));\n        const currentDate = new Date();\n        const currentYear = currentDate.getFullYear() % 100;\n        const currentMonth = currentDate.getMonth() + 1;\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (year < currentYear || (year === currentYear && month < currentMonth)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    validateCVV(cvv) {\n        return /^\\d{3,4}$/.test(cvv);\n    }\n\n    validateEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n\n    // Card Type Detection\n    detectCardType(cardNumber) {\n        const cleaned = cardNumber.replace(/\\s/g, '');\n        \n        const cardTypes = {\n            visa: /^4/,\n            mastercard: /^5[1-5]/,\n            amex: /^3[47]/,\n            discover: /^6(?:011|5)/,\n            dinersclub: /^3[0689]/,\n            jcb: /^35/\n        };\n\n        for (const [type, pattern] of Object.entries(cardTypes)) {\n            if (pattern.test(cleaned)) {\n                return type;\n            }\n        }\n\n        return 'unknown';\n    }\n\n    // Input Formatting Methods\n    formatCardNumber(input) {\n        let value = input.value.replace(/\\s/g, '').replace(/[^0-9]/gi, '');\n        const matches = value.match(/\\d{4,16}/g);\n        const match = matches && matches[0] || '';\n        const parts = [];\n\n        for (let i = 0, len = match.length; i < len; i += 4) {\n            parts.push(match.substring(i, i + 4));\n        }\n\n        if (parts.length) {\n            input.value = parts.join(' ');\n        } else {\n            input.value = value;\n        }\n\n        // Update card type icon\n        this.updateCardTypeIcon(input, value);\n    }\n\n    formatExpiryDate(input) {\n        let value = input.value.replace(/\\D/g, '');\n        \n        if (value.length >= 2) {\n            value = value.substring(0, 2) + '/' + value.substring(2, 4);\n        }\n        \n        input.value = value;\n    }\n\n    formatCVV(input) {\n        input.value = input.value.replace(/\\D/g, '').substring(0, 4);\n    }\n\n    updateCardTypeIcon(input, cardNumber) {\n        const cardType = this.detectCardType(cardNumber);\n        const iconElement = input.parentNode.querySelector('.card-type-icon');\n        \n        if (iconElement) {\n            const icons = {\n                visa: 'fab fa-cc-visa',\n                mastercard: 'fab fa-cc-mastercard',\n                amex: 'fab fa-cc-amex',\n                discover: 'fab fa-cc-discover',\n                dinersclub: 'fab fa-cc-diners-club',\n                jcb: 'fab fa-cc-jcb',\n                unknown: 'fas fa-credit-card'\n            };\n            \n            iconElement.className = `card-type-icon ${icons[cardType] || icons.unknown}`;\n        }\n    }\n\n    // Payment Method Management\n    handlePaymentMethodChange(method) {\n        this.showPaymentMethodForm(method);\n        this.updatePaymentSummary(method);\n    }\n\n    showPaymentMethodForm(method) {\n        // Hide all payment forms\n        const forms = document.querySelectorAll('.payment-method-form');\n        forms.forEach(form => form.style.display = 'none');\n\n        // Show selected payment method form\n        const selectedForm = document.getElementById(`${method}Form`);\n        if (selectedForm) {\n            selectedForm.style.display = 'block';\n        }\n    }\n\n    updatePaymentSummary(method) {\n        const processingFee = this.getProcessingFee(method);\n        const amount = parseFloat(document.getElementById('purchasePrice')?.textContent || 0);\n        const total = amount + processingFee;\n\n        const processingFeeElement = document.querySelector('.processing-fee');\n        const totalElement = document.querySelector('.total-amount');\n\n        if (processingFeeElement) {\n            processingFeeElement.textContent = `$${processingFee.toFixed(2)}`;\n        }\n\n        if (totalElement) {\n            totalElement.textContent = `$${total.toFixed(2)}`;\n        }\n    }\n\n    getProcessingFee(method) {\n        const paymentMethod = this.paymentMethods.find(pm => pm.id === method);\n        return paymentMethod ? paymentMethod.processingFee : 0.99;\n    }\n\n    // UI State Management\n    showPaymentProcessing() {\n        const submitButton = document.querySelector('#paymentForm button[type=\"submit\"], .payment-submit');\n        if (submitButton) {\n            submitButton.disabled = true;\n            submitButton.innerHTML = `\n                <span class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\n                Processing...\n            `;\n        }\n\n        // Show processing overlay\n        this.showProcessingOverlay();\n    }\n\n    hidePaymentProcessing() {\n        const submitButton = document.querySelector('#paymentForm button[type=\"submit\"], .payment-submit');\n        if (submitButton) {\n            submitButton.disabled = false;\n            submitButton.innerHTML = `\n                <i class=\"fas fa-credit-card me-2\"></i>Complete Payment\n            `;\n        }\n\n        this.hideProcessingOverlay();\n    }\n\n    showProcessingOverlay() {\n        const overlay = document.createElement('div');\n        overlay.id = 'paymentProcessingOverlay';\n        overlay.className = 'payment-processing-overlay';\n        overlay.innerHTML = `\n            <div class=\"processing-content\">\n                <div class=\"spinner-border text-primary mb-3\" role=\"status\">\n                    <span class=\"visually-hidden\">Processing...</span>\n                </div>\n                <h5>Processing Payment</h5>\n                <p class=\"text-muted\">Please do not refresh or close this page</p>\n            </div>\n        `;\n        document.body.appendChild(overlay);\n    }\n\n    hideProcessingOverlay() {\n        const overlay = document.getElementById('paymentProcessingOverlay');\n        if (overlay) {\n            overlay.remove();\n        }\n    }\n\n    // Payment Result Handling\n    handlePaymentSuccess(result) {\n        this.currentTransaction = result;\n        \n        // Store transaction for receipt\n        this.storeTransaction(result);\n        \n        // Show success message\n        this.showPaymentSuccess(result);\n        \n        // Trigger success callback if available\n        if (window.onPaymentSuccess) {\n            window.onPaymentSuccess(result);\n        }\n        \n        // Redirect or update UI\n        setTimeout(() => {\n            this.redirectAfterPayment(result);\n        }, 3000);\n    }\n\n    handlePaymentError(error) {\n        this.showPaymentError(error);\n        \n        // Trigger error callback if available\n        if (window.onPaymentError) {\n            window.onPaymentError(error);\n        }\n    }\n\n    showPaymentSuccess(result) {\n        window.commonUtils?.showToast(`Payment successful! Transaction ID: ${result.transactionId}`, 'success', 8000);\n        \n        // Update modal content if in modal\n        const modal = document.querySelector('.modal.show');\n        if (modal) {\n            this.showSuccessInModal(modal, result);\n        }\n    }\n\n    showSuccessInModal(modal, result) {\n        const modalBody = modal.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.innerHTML = `\n                <div class=\"text-center\">\n                    <i class=\"fas fa-check-circle fa-5x text-success mb-4\"></i>\n                    <h4 class=\"text-success\">Payment Successful!</h4>\n                    <p class=\"text-muted mb-4\">Your purchase has been completed successfully.</p>\n                    <div class=\"card bg-light\">\n                        <div class=\"card-body\">\n                            <div class=\"row text-start\">\n                                <div class=\"col-6\"><strong>Transaction ID:</strong></div>\n                                <div class=\"col-6\">${result.transactionId}</div>\n                                <div class=\"col-6\"><strong>Amount:</strong></div>\n                                <div class=\"col-6\">$${result.amount.toFixed(2)}</div>\n                                <div class=\"col-6\"><strong>Date:</strong></div>\n                                <div class=\"col-6\">${new Date(result.timestamp).toLocaleDateString()}</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }\n\n        const modalFooter = modal.querySelector('.modal-footer');\n        if (modalFooter) {\n            modalFooter.innerHTML = `\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"window.location.reload()\">\n                    Continue\n                </button>\n            `;\n        }\n    }\n\n    showPaymentError(error) {\n        window.commonUtils?.showToast(error, 'danger', 8000);\n    }\n\n    // Transaction Management\n    storeTransaction(transaction) {\n        const transactions = this.getStoredTransactions();\n        transactions.push(transaction);\n        localStorage.setItem('videohub_transactions', JSON.stringify(transactions));\n    }\n\n    getStoredTransactions() {\n        const stored = localStorage.getItem('videohub_transactions');\n        return stored ? JSON.parse(stored) : [];\n    }\n\n    getTransaction(transactionId) {\n        const transactions = this.getStoredTransactions();\n        return transactions.find(t => t.transactionId === transactionId);\n    }\n\n    redirectAfterPayment(result) {\n        // Default redirect logic\n        const currentPage = window.location.pathname;\n        \n        if (currentPage.includes('browse.html')) {\n            // Refresh browse page to update purchased status\n            window.location.reload();\n        } else if (currentPage.includes('purchases.html')) {\n            // Refresh purchases page\n            window.location.reload();\n        } else {\n            // Go to purchases page\n            window.location.href = 'purchases.html';\n        }\n    }\n\n    // Field Validation\n    validateField(field) {\n        const fieldType = field.id || field.name;\n        let isValid = true;\n        let errorMessage = '';\n\n        switch (fieldType) {\n            case 'cardNumber':\n                isValid = this.validateCardNumber(field.value);\n                errorMessage = 'Please enter a valid card number';\n                break;\n            case 'expiryDate':\n                isValid = this.validateExpiryDate(field.value);\n                errorMessage = 'Please enter a valid expiry date (MM/YY)';\n                break;\n            case 'cvv':\n                isValid = this.validateCVV(field.value);\n                errorMessage = 'Please enter a valid CVV';\n                break;\n            case 'cardHolderName':\n                isValid = field.value.trim().length >= 2;\n                errorMessage = 'Please enter the cardholder name';\n                break;\n            case 'paypalEmail':\n                isValid = this.validateEmail(field.value);\n                errorMessage = 'Please enter a valid email address';\n                break;\n        }\n\n        this.updateFieldValidation(field, isValid, errorMessage);\n        return isValid;\n    }\n\n    updateFieldValidation(field, isValid, errorMessage) {\n        field.classList.remove('is-valid', 'is-invalid');\n        \n        // Remove existing feedback\n        const existingFeedback = field.parentNode.querySelector('.invalid-feedback');\n        if (existingFeedback) {\n            existingFeedback.remove();\n        }\n\n        if (field.value.trim() === '') {\n            // Don't show validation for empty fields unless they've been focused\n            return;\n        }\n\n        if (isValid) {\n            field.classList.add('is-valid');\n        } else {\n            field.classList.add('is-invalid');\n            \n            // Add error feedback\n            const feedback = document.createElement('div');\n            feedback.className = 'invalid-feedback';\n            feedback.textContent = errorMessage;\n            field.parentNode.appendChild(feedback);\n        }\n    }\n\n    // Utility Methods\n    generateTransactionId() {\n        const timestamp = Date.now().toString();\n        const random = Math.random().toString(36).substr(2, 5).toUpperCase();\n        return `TXN_${timestamp}_${random}`;\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Public API Methods\n    initializePayment(options = {}) {\n        this.currentTransaction = null;\n        \n        // Set up payment form with options\n        if (options.amount) {\n            const amountElement = document.getElementById('amount');\n            if (amountElement) {\n                amountElement.value = options.amount;\n            }\n        }\n\n        if (options.currency) {\n            this.currency = options.currency;\n        }\n\n        // Initialize default payment method\n        const defaultMethod = options.defaultMethod || 'card';\n        const methodRadio = document.querySelector(`input[name=\"paymentMethod\"][value=\"${defaultMethod}\"]`);\n        if (methodRadio) {\n            methodRadio.checked = true;\n            this.handlePaymentMethodChange(defaultMethod);\n        }\n    }\n\n    getPaymentMethods() {\n        return this.paymentMethods.filter(method => method.enabled);\n    }\n\n    setPaymentCallback(onSuccess, onError) {\n        window.onPaymentSuccess = onSuccess;\n        window.onPaymentError = onError;\n    }\n}\n\n// CSS for payment processing overlay\nconst paymentStyles = `\n    .payment-processing-overlay {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: 9999;\n    }\n\n    .processing-content {\n        background: white;\n        padding: 2rem;\n        border-radius: 0.5rem;\n        text-align: center;\n        max-width: 300px;\n    }\n\n    .card-type-icon {\n        position: absolute;\n        right: 10px;\n        top: 50%;\n        transform: translateY(-50%);\n        font-size: 1.2rem;\n        color: #6c757d;\n    }\n\n    .payment-method-form {\n        display: none;\n        margin-top: 1rem;\n    }\n\n    .payment-method-form.active {\n        display: block;\n    }\n\n    .payment-input {\n        position: relative;\n    }\n`;\n\n// Inject styles\nconst styleSheet = document.createElement('style');\nstyleSheet.textContent = paymentStyles;\ndocument.head.appendChild(styleSheet);\n\n// Initialize payment manager when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.paymentManager = new PaymentManager();\n});\n\n// Export for other modules\nwindow.PaymentManager = PaymentManager;\n","size_bytes":23524},"assets/js/profile.js":{"content":"/**\n * VideoHub Profile Settings Module\n * Handles profile updates and password changes\n */\n\nclass ProfileManager {\n    constructor() {\n        this.currentUser = {};\n        this.init();\n    }\n\n    async init() {\n        await this.loadUserProfile();\n        this.bindEvents();\n        this.setupPasswordStrengthChecker();\n    }\n\n    async loadUserProfile() {\n        try {\n            // Check for user session first\n            let userSession = null;\n\n            // Try to get session from both localStorage and sessionStorage\n            const localSession = localStorage.getItem('userSession');\n            const sessionSession = sessionStorage.getItem('userSession');\n\n            if (localSession) {\n                userSession = JSON.parse(localSession);\n            } else if (sessionSession) {\n                userSession = JSON.parse(sessionSession);\n            }\n\n            if (!userSession || !userSession.email) {\n                console.log('No user session found');\n                return;\n            }\n\n            // Wait for API service to be available\n            let retries = 0;\n            const maxRetries = 50;\n\n            while (retries < maxRetries && !window.apiService) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n                retries++;\n            }\n\n            if (window.apiService) {\n                try {\n                    const result = await window.apiService.getUserProfile();\n                    if (result.success) {\n                        this.currentUser = result.data;\n                        this.populateProfileForm();\n                        console.log('Profile loaded:', this.currentUser);\n\n                        // Also load admin metrics and update sidebar badges\n                        if (this.currentUser.role === 'admin') {\n                            await this.loadAdminMetrics();\n                        }\n                    } else {\n                        throw new Error(result.message || 'Failed to load profile');\n                    }\n                } catch (apiError) {\n                    console.error('API error loading profile:', apiError);\n                    \n                    // Handle 401 authentication errors by redirecting to login\n                    if (apiError.message && (apiError.message.includes('401') || apiError.message.includes('not authenticated'))) {\n                        console.log('User not authenticated, redirecting to login');\n                        window.location.href = '../auth/login.html';\n                        return;\n                    }\n                    \n                    // For other errors, fallback to session data\n                    console.log('Using session data as fallback');\n                    this.currentUser = {\n                        name: userSession.name || '',\n                        email: userSession.email || '',\n                        role: userSession.userType || 'viewer'\n                    };\n                    this.populateProfileForm();\n                }\n            } else {\n                // Use session data as fallback\n                this.currentUser = {\n                    name: userSession.name || '',\n                    email: userSession.email || '',\n                    role: userSession.userType || 'viewer'\n                };\n                this.populateProfileForm();\n            }\n        } catch (error) {\n            console.error('Error loading profile:', error);\n            \n            // Handle authentication errors gracefully\n            if (error.message && (error.message.includes('401') || error.message.includes('not authenticated'))) {\n                console.log('User not authenticated, redirecting to login');\n                window.location.href = '../auth/login.html';\n                return;\n            }\n            \n            // Try to use session data as fallback for other errors\n            let userSession = null;\n            const localSession = localStorage.getItem('userSession');\n            const sessionSession = sessionStorage.getItem('userSession');\n\n            if (localSession) {\n                userSession = JSON.parse(localSession);\n            } else if (sessionSession) {\n                userSession = JSON.parse(sessionSession);\n            }\n\n            if (userSession && userSession.email) {\n                this.currentUser = {\n                    name: userSession.name || '',\n                    email: userSession.email || '',\n                    role: userSession.userType || 'viewer'\n                };\n                this.populateProfileForm();\n            }\n        }\n    }\n\n    populateProfileForm() {\n        // Safely update form fields if they exist\n        const firstNameEl = document.getElementById('firstName');\n        const lastNameEl = document.getElementById('lastName');\n        const emailEl = document.getElementById('email');\n        const channelNameEl = document.getElementById('channelName');\n        const channelDescriptionEl = document.getElementById('channelDescription');\n\n        if (firstNameEl) firstNameEl.value = this.currentUser.firstName || this.currentUser.name?.split(' ')[0] || '';\n        if (lastNameEl) lastNameEl.value = this.currentUser.lastName || this.currentUser.name?.split(' ')[1] || '';\n        if (emailEl) emailEl.value = this.currentUser.email || '';\n        if (channelNameEl) channelNameEl.value = this.currentUser.channelName || this.currentUser.name || '';\n        if (channelDescriptionEl) channelDescriptionEl.value = this.currentUser.channelDescription || '';\n\n        // Update last login time\n        const lastLoginElement = document.getElementById('lastLoginTime');\n        if (lastLoginElement) {\n            const now = new Date();\n            lastLoginElement.textContent = `${now.toLocaleDateString()}, ${now.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;\n        }\n\n        // Update role field\n        const roleEl = document.getElementById('role');\n        if (roleEl && this.currentUser.role) {\n            const roleMap = {\n                'admin': 'Administrator',\n                'creator': 'Content Creator',\n                'viewer': 'Viewer'\n            };\n            roleEl.value = roleMap[this.currentUser.role] || this.currentUser.role;\n        }\n    }\n\n    bindEvents() {\n        // Profile form submission\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', (e) => this.handleProfileUpdate(e));\n        }\n\n        // Password form submission\n        const passwordForm = document.getElementById('changePasswordForm');\n        if (passwordForm) {\n            passwordForm.addEventListener('submit', (e) => this.handlePasswordChange(e));\n        }\n\n        // Real-time validation\n        this.setupFormValidation();\n    }\n\n    setupFormValidation() {\n        // First name validation\n        const firstNameInput = document.getElementById('firstName');\n        if (firstNameInput) {\n            firstNameInput.addEventListener('input', (e) => {\n                this.validateName(e.target);\n            });\n        }\n\n        // Last name validation\n        const lastNameInput = document.getElementById('lastName');\n        if (lastNameInput) {\n            lastNameInput.addEventListener('input', (e) => {\n                this.validateName(e.target);\n            });\n        }\n\n        // Password confirmation validation\n        const confirmPasswordInput = document.getElementById('confirmPassword');\n        const newPasswordInput = document.getElementById('newPassword');\n\n        if (confirmPasswordInput && newPasswordInput) {\n            [confirmPasswordInput, newPasswordInput].forEach(input => {\n                input.addEventListener('input', () => {\n                    this.validatePasswordMatch();\n                });\n            });\n        }\n    }\n\n    validateName(input) {\n        const name = input.value.trim();\n        const isValid = name.length >= 2 && /^[a-zA-Z\\s'-]+$/.test(name);\n\n        if (isValid) {\n            input.classList.remove('is-invalid');\n            input.classList.add('is-valid');\n        } else {\n            input.classList.remove('is-valid');\n            input.classList.add('is-invalid');\n        }\n\n        return isValid;\n    }\n\n    validatePasswordMatch() {\n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n        const confirmPasswordInput = document.getElementById('confirmPassword');\n\n        if (confirmPassword && newPassword !== confirmPassword) {\n            confirmPasswordInput.classList.add('is-invalid');\n            confirmPasswordInput.classList.remove('is-valid');\n            return false;\n        } else if (confirmPassword) {\n            confirmPasswordInput.classList.remove('is-invalid');\n            confirmPasswordInput.classList.add('is-valid');\n            return true;\n        }\n        return false;\n    }\n\n    setupPasswordStrengthChecker() {\n        const newPasswordInput = document.getElementById('newPassword');\n        if (newPasswordInput) {\n            newPasswordInput.addEventListener('input', (e) => {\n                this.updatePasswordStrength(e.target.value);\n            });\n        }\n    }\n\n    updatePasswordStrength(password) {\n        const strengthBar = document.getElementById('strengthBar');\n        const strengthText = document.getElementById('strengthText');\n\n        if (!strengthBar || !strengthText) return;\n\n        const strength = this.calculatePasswordStrength(password);\n\n        // Update progress bar\n        strengthBar.style.width = `${strength.percentage}%`;\n        strengthBar.className = `progress-bar bg-${strength.color}`;\n\n        // Update text\n        strengthText.textContent = strength.text;\n        strengthText.className = `text-sm text-${strength.color}`;\n    }\n\n    calculatePasswordStrength(password) {\n        if (!password) return { percentage: 0, color: 'secondary', text: 'Enter password' };\n\n        let score = 0;\n        const checks = [\n            { test: /.{8,}/, points: 25 }, // Length >= 8\n            { test: /[a-z]/, points: 15 }, // Lowercase\n            { test: /[A-Z]/, points: 15 }, // Uppercase\n            { test: /[0-9]/, points: 20 }, // Numbers\n            { test: /[^A-Za-z0-9]/, points: 25 } // Special characters\n        ];\n\n        checks.forEach(check => {\n            if (check.test.test(password)) {\n                score += check.points;\n            }\n        });\n\n        if (score < 40) return { percentage: score, color: 'danger', text: 'Weak' };\n        if (score < 70) return { percentage: score, color: 'warning', text: 'Fair' };\n        if (score < 90) return { percentage: score, color: 'info', text: 'Good' };\n        return { percentage: score, color: 'success', text: 'Strong' };\n    }\n\n    async handleProfileUpdate(e) {\n        e.preventDefault();\n\n        const form = e.target;\n        const formData = new FormData(form);\n        const profileData = {\n            firstName: formData.get('firstName').trim(),\n            lastName: formData.get('lastName').trim()\n        };\n\n        // Validate form\n        const isValid = this.validateProfileForm(form);\n        if (!isValid) {\n            return;\n        }\n\n        // Show loading state\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> Saving...';\n        submitBtn.disabled = true;\n\n        try {\n            const result = await window.apiService.updateUserProfile(profileData);\n\n            if (result.success) {\n                // Update local data\n                this.currentUser.firstName = profileData.firstName;\n                this.currentUser.lastName = profileData.lastName;\n\n                // Add success class to form\n                form.classList.add('was-validated');\n\n                window.apiService.showSuccessMessage('Profile updated successfully');\n            } else {\n                window.apiService.handleApiError(result, 'Failed to update profile');\n            }\n        } catch (error) {\n            // Demo mode\n            this.currentUser.firstName = profileData.firstName;\n            this.currentUser.lastName = profileData.lastName;\n            window.apiService.showSuccessMessage('Profile updated successfully (demo mode)');\n        } finally {\n            // Reset button\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    }\n\n    validateProfileForm(form) {\n        const firstName = form.querySelector('#firstName');\n        const lastName = form.querySelector('#lastName');\n\n        let isValid = true;\n\n        if (!this.validateName(firstName)) {\n            isValid = false;\n        }\n\n        if (!this.validateName(lastName)) {\n            isValid = false;\n        }\n\n        form.classList.add('was-validated');\n        return isValid;\n    }\n\n    async handlePasswordChange(e) {\n        e.preventDefault();\n\n        const form = e.target;\n        const formData = new FormData(form);\n        const passwordData = {\n            currentPassword: formData.get('currentPassword'),\n            newPassword: formData.get('newPassword'),\n            confirmPassword: formData.get('confirmPassword')\n        };\n\n        // Validate form\n        const isValid = this.validatePasswordForm(form, passwordData);\n        if (!isValid) {\n            return;\n        }\n\n        // Show loading state\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\n        const originalText = submitBtn.innerHTML;\n        submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-1\"></i> Updating...';\n        submitBtn.disabled = true;\n\n        try {\n            const result = await window.apiService.put('/users/change-password', {\n                currentPassword: passwordData.currentPassword,\n                newPassword: passwordData.newPassword\n            });\n\n            if (result.success) {\n                // Close modal\n                const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));\n                modal.hide();\n\n                // Reset form\n                form.reset();\n                form.classList.remove('was-validated');\n\n                // Reset password strength indicator\n                this.updatePasswordStrength('');\n\n                window.apiService.showSuccessMessage('Password updated successfully');\n            } else {\n                window.apiService.handleApiError(result, 'Failed to update password');\n            }\n        } catch (error) {\n            // Demo mode\n            const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));\n            modal.hide();\n            form.reset();\n            form.classList.remove('was-validated');\n            this.updatePasswordStrength('');\n            window.apiService.showSuccessMessage('Password updated successfully (demo mode)');\n        } finally {\n            // Reset button\n            submitBtn.innerHTML = originalText;\n            submitBtn.disabled = false;\n        }\n    }\n\n    validatePasswordForm(form, data) {\n        let isValid = true;\n\n        // Current password validation\n        const currentPasswordInput = form.querySelector('#currentPassword');\n        if (!data.currentPassword || data.currentPassword.length < 6) {\n            currentPasswordInput.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            currentPasswordInput.classList.remove('is-invalid');\n            currentPasswordInput.classList.add('is-valid');\n        }\n\n        // New password validation\n        const newPasswordInput = form.querySelector('#newPassword');\n        const strength = this.calculatePasswordStrength(data.newPassword);\n        if (strength.percentage < 40) {\n            newPasswordInput.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            newPasswordInput.classList.remove('is-invalid');\n            newPasswordInput.classList.add('is-valid');\n        }\n\n        // Confirm password validation\n        if (data.newPassword !== data.confirmPassword) {\n            form.querySelector('#confirmPassword').classList.add('is-invalid');\n            isValid = false;\n        }\n\n        form.classList.add('was-validated');\n        return isValid;\n    }\n\n    async loadAdminMetrics() {\n        try {\n            // Load admin data for sidebar badges\n            const [usersResponse, videosResponse] = await Promise.all([\n                window.apiService.get('/admin/users'),\n                window.apiService.get('/videos')\n            ]);\n\n            const users = usersResponse.data || usersResponse.users || [];\n            const videos = videosResponse.data || videosResponse.videos || [];\n\n            // Sidebar badges removed for cleaner interface\n\n        } catch (error) {\n            console.error('Failed to load admin metrics:', error);\n        }\n    }\n}\n\n// Global functions\nwindow.resetProfileForm = function() {\n    const form = document.getElementById('profileForm');\n    if (form) {\n        form.reset();\n        form.classList.remove('was-validated');\n\n        // Remove validation classes\n        form.querySelectorAll('.form-control').forEach(input => {\n            input.classList.remove('is-valid', 'is-invalid');\n        });\n\n        // Reload original data\n        window.profileManager.populateProfileForm();\n    }\n};\n\nwindow.togglePasswordVisibility = function(inputId, button) {\n    const input = document.getElementById(inputId);\n    const icon = button.querySelector('i');\n\n    if (input.type === 'password') {\n        input.type = 'text';\n        icon.classList.remove('fa-eye');\n        icon.classList.add('fa-eye-slash');\n    } else {\n        input.type = 'password';\n        icon.classList.remove('fa-eye-slash');\n        icon.classList.add('fa-eye');\n    }\n};\n\n// Initialize profile manager\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.profileManager = new ProfileManager();\n});","size_bytes":18224},"assets/js/simple-profile.js":{"content":"/**\n * Simple Profile Management System for VideoHub\n * Streamlined approach without complex logic\n */\n\nclass SimpleProfileManager {\n    constructor() {\n        this.init();\n    }\n\n    async init() {\n        await this.loadUserData();\n        this.bindFormEvents();\n    }\n\n    async loadUserData() {\n        try {\n            // Get user session\n            const userSession = this.getUserSession();\n            if (!userSession) {\n                window.location.href = '../auth/login.html';\n                return;\n            }\n\n            // Try API first, fallback to session data\n            let userData = null;\n            if (window.apiService) {\n                try {\n                    const result = await window.apiService.getUserProfile();\n                    if (result.success) {\n                        userData = result.data;\n                    }\n                } catch (error) {\n                    console.warn('API unavailable, using session data');\n                }\n            }\n\n            // Use session data as fallback\n            if (!userData) {\n                userData = {\n                    firstName: userSession.name?.split(' ')[0] || '',\n                    lastName: userSession.name?.split(' ').slice(1).join(' ') || '',\n                    email: userSession.email || '',\n                    role: userSession.userType || 'viewer',\n                    name: userSession.name || ''\n                };\n            }\n\n            this.populateForm(userData);\n            \n        } catch (error) {\n            console.error('Error loading profile:', error);\n            this.showAlert('Error loading profile data', 'danger');\n        }\n    }\n\n    getUserSession() {\n        const sessionData = sessionStorage.getItem('userSession') || localStorage.getItem('userSession');\n        return sessionData ? JSON.parse(sessionData) : null;\n    }\n\n    populateForm(userData) {\n        // Safely populate form fields\n        this.setFieldValue('firstName', userData.firstName);\n        this.setFieldValue('lastName', userData.lastName);\n        this.setFieldValue('email', userData.email);\n        this.setFieldValue('channelName', userData.channelName || userData.name);\n        this.setFieldValue('channelDescription', userData.channelDescription);\n        \n        // Set role display\n        const roleEl = document.getElementById('role');\n        if (roleEl) {\n            const roleMap = {\n                'admin': 'Administrator',\n                'creator': 'Content Creator',\n                'viewer': 'Viewer'\n            };\n            roleEl.value = roleMap[userData.role] || userData.role;\n        }\n\n        // Update additional profile elements (viewer/admin specific)\n        this.setFieldValue('userDisplayName', userData.name);\n        this.setFieldValue('userMembershipType', this.getMembershipType(userData.role));\n        this.setFieldValue('memberSince', userData.joinDate || 'Recent');\n        this.setFieldValue('lastLogin', 'Today');\n\n        // Update user badges based on role\n        this.updateUserBadges(userData.role);\n    }\n\n    getMembershipType(role) {\n        const membershipTypes = {\n            'admin': 'Administrator',\n            'creator': 'Creator',\n            'viewer': 'Premium Member'\n        };\n        return membershipTypes[role] || 'Member';\n    }\n\n    updateUserBadges(role) {\n        const badgesEl = document.getElementById('userBadges');\n        if (badgesEl) {\n            let badges = '';\n            if (role === 'admin') {\n                badges = '<span class=\"badge bg-danger\">Admin</span>';\n            } else if (role === 'creator') {\n                badges = '<span class=\"badge bg-success\">Creator</span>';\n            } else {\n                badges = '<span class=\"badge bg-success\">Verified</span><span class=\"badge bg-primary\">Premium</span>';\n            }\n            badgesEl.innerHTML = badges;\n        }\n    }\n\n    setFieldValue(fieldId, value) {\n        const field = document.getElementById(fieldId);\n        if (field) {\n            field.value = value || '';\n        }\n    }\n\n    bindFormEvents() {\n        // Profile form submission\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', (e) => this.handleProfileUpdate(e));\n        }\n\n        // Password form submission\n        const passwordForm = document.getElementById('changePasswordForm');\n        if (passwordForm) {\n            passwordForm.addEventListener('submit', (e) => this.handlePasswordChange(e));\n        }\n    }\n\n    async handleProfileUpdate(e) {\n        e.preventDefault();\n        \n        try {\n            const formData = this.getFormData();\n            const userSession = this.getUserSession();\n            \n            if (!userSession?.id) {\n                this.showAlert('Session expired. Please login again.', 'danger');\n                return;\n            }\n\n            // Simple API call\n            const response = await fetch(`/api/users/${userSession.id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(formData)\n            });\n\n            if (response.ok) {\n                // Update session with new data\n                const updatedSession = { ...userSession, ...formData };\n                sessionStorage.setItem('userSession', JSON.stringify(updatedSession));\n                \n                this.showAlert('Profile updated successfully!', 'success');\n            } else {\n                this.showAlert('Failed to update profile', 'danger');\n            }\n            \n        } catch (error) {\n            console.error('Error updating profile:', error);\n            this.showAlert('Error updating profile', 'danger');\n        }\n    }\n\n    async handlePasswordChange(e) {\n        e.preventDefault();\n        \n        const currentPassword = document.getElementById('currentPassword')?.value;\n        const newPassword = document.getElementById('newPassword')?.value;\n        const confirmPassword = document.getElementById('confirmPassword')?.value;\n\n        if (newPassword !== confirmPassword) {\n            this.showAlert('Passwords do not match', 'danger');\n            return;\n        }\n\n        try {\n            const userSession = this.getUserSession();\n            const response = await fetch('/api/auth/change-password', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    user_id: userSession.id,\n                    current_password: currentPassword,\n                    new_password: newPassword\n                })\n            });\n\n            if (response.ok) {\n                document.getElementById('changePasswordForm').reset();\n                this.showAlert('Password updated successfully!', 'success');\n            } else {\n                this.showAlert('Failed to update password', 'danger');\n            }\n            \n        } catch (error) {\n            console.error('Error updating password:', error);\n            this.showAlert('Error updating password', 'danger');\n        }\n    }\n\n    getFormData() {\n        const firstName = document.getElementById('firstName')?.value || '';\n        const lastName = document.getElementById('lastName')?.value || '';\n        \n        return {\n            name: `${firstName} ${lastName}`.trim(),\n            channel_name: document.getElementById('channelName')?.value || '',\n            channel_description: document.getElementById('channelDescription')?.value || ''\n        };\n    }\n\n    showAlert(message, type) {\n        const alertDiv = document.createElement('div');\n        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;\n        alertDiv.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        const container = document.querySelector('main');\n        if (container) {\n            container.insertBefore(alertDiv, container.firstChild);\n            \n            setTimeout(() => {\n                alertDiv.remove();\n            }, 5000);\n        }\n    }\n}\n\n// Initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.simpleProfileManager = new SimpleProfileManager();\n});","size_bytes":8479},"assets/js/viewer.js":{"content":"/**\n * VideoHub Viewer Module\n * Handles viewer functionality including browsing, purchasing, and watching videos\n */\n\nclass ViewerManager {\n    constructor() {\n        this.videos = [];\n        this.purchases = [];\n        this.favorites = [];\n        this.currentVideo = null;\n        this.player = null;\n        this.filteredVideos = [];\n        this.currentViewerId = null; // Will be set from session\n        this.favorites = []; // Will be loaded from API\n        this.init();\n    }\n\n    async init() {\n        await this.loadDataFromAPI();\n        this.bindEvents();\n        this.loadPageSpecificHandlers();\n        this.initializePlayer();\n    }\n\n    async loadDataFromAPI() {\n        // Show section loaders\n        const dashboardSection = document.querySelector('.dashboard-stats');\n        const videosSection = document.querySelector('.videos-grid');\n        const purchasesSection = document.querySelector('.purchases-section');\n\n        if (window.commonUtils) {\n            if (dashboardSection) window.commonUtils.showSectionLoader(dashboardSection, 'Loading dashboard...');\n            if (videosSection) window.commonUtils.showSectionLoader(videosSection, 'Loading videos...');\n            if (purchasesSection) window.commonUtils.showSectionLoader(purchasesSection, 'Loading purchases...');\n        }\n\n        try {\n            // Wait for API service to be available and load data\n            let retries = 0;\n            const maxRetries = 50;\n            \n            while (retries < maxRetries && !window.apiService) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n                retries++;\n            }\n            \n            if (window.apiService) {\n                // Get current user info from session\n                const userSession = JSON.parse(localStorage.getItem('userSession') || sessionStorage.getItem('userSession') || '{}');\n                const userId = userSession.id || userSession.userId;\n                this.currentViewerId = userId;\n                \n                if (!userId) {\n                    console.error('No viewer ID found in session, redirecting to login');\n                    window.location.href = '../auth/login.html';\n                    return;\n                }\n                \n                // Load general platform metrics (with optional user data)\n                const metricsResponse = await window.apiService.get(`/metrics/viewer?user_id=${userId}`);\n                if (metricsResponse.success) {\n                    this.updateDashboardMetrics(metricsResponse.data);\n                }\n                \n                // Load videos data (needed for all pages)\n                const videosResponse = await window.apiService.get('/videos');\n                \n                // Handle API response format properly\n                this.videos = Array.isArray(videosResponse.videos) ? videosResponse.videos : \n                             Array.isArray(videosResponse.data?.videos) ? videosResponse.data.videos : \n                             Array.isArray(videosResponse.data) ? videosResponse.data : [];\n                             \n                // Initialize purchases as empty - will be loaded on purchases page only\n                this.purchases = [];\n                \n                console.log('Viewer data loaded:', {\n                    videosLength: this.videos.length,\n                    purchasesLength: this.purchases.length\n                });\n            } else {\n                console.error('API service not available');\n                this.videos = [];\n                this.purchases = [];\n            }\n        } catch (error) {\n            console.error('Failed to load viewer data:', error);\n            \n            // Handle API error with proper user feedback\n            if (window.commonUtils) {\n                window.commonUtils.handleAPIError(error, 'Loading viewer data');\n            }\n            \n            // Set empty values on error\n            this.updateDashboardMetrics({\n                totalVideosCount: 0,\n                purchasedVideosCount: 0,\n                totalSpentAmount: '0.00',\n                favoritesCount: 0\n            });\n        } finally {\n            // Hide section loaders\n            const dashboardSection = document.querySelector('.dashboard-stats');\n            const videosSection = document.querySelector('.videos-grid');\n            const purchasesSection = document.querySelector('.purchases-section');\n\n            if (window.commonUtils) {\n                if (dashboardSection) window.commonUtils.hideSectionLoader(dashboardSection);\n                if (videosSection) window.commonUtils.hideSectionLoader(videosSection);\n                if (purchasesSection) window.commonUtils.hideSectionLoader(purchasesSection);\n            }\n        }\n    }\n\n    updateDashboardMetrics(metrics) {\n        // Update dashboard with general platform metrics\n        const totalVideosCountEl = document.getElementById('totalVideosCount');\n        const totalPurchasesCountEl = document.getElementById('totalPurchasesCount');\n        const platformRevenueEl = document.getElementById('platformRevenue');\n        const totalCreatorsEl = document.getElementById('totalCreators');\n        \n        // Update purchase page metrics\n        const purchasedVideosCountEl = document.getElementById('purchasedVideosCount');\n        const totalSpentAmountEl = document.getElementById('totalSpentAmount');\n        const totalPurchasesEl = document.getElementById('totalPurchases');\n        const totalSpentEl = document.getElementById('totalSpent');\n        \n        // Dashboard metrics (general platform stats)\n        if (totalVideosCountEl) totalVideosCountEl.textContent = metrics.totalVideosCount || 0;\n        if (totalPurchasesCountEl) totalPurchasesCountEl.textContent = metrics.totalPurchases || 0;\n        if (platformRevenueEl) platformRevenueEl.textContent = '$' + (metrics.platformRevenue || '0.00');\n        if (totalCreatorsEl) totalCreatorsEl.textContent = metrics.totalCreators || 0;\n        \n        // Purchase page metrics (user-specific)\n        if (purchasedVideosCountEl) purchasedVideosCountEl.textContent = metrics.userPurchases || 0;\n        if (totalSpentAmountEl) totalSpentAmountEl.textContent = '$' + (metrics.userSpent || '0.00');\n        if (totalPurchasesEl) totalPurchasesEl.textContent = metrics.userPurchases || 0;\n        if (totalSpentEl) totalSpentEl.textContent = '$' + (metrics.userSpent || '0.00');\n    }\n\n    async loadRemainingData() {\n        try {\n            // Filter purchases for current viewer (if needed)\n            // this.purchases = this.purchases.filter(p => p.viewerId === this.currentViewerId);\n            \n            // Enrich purchases with video data\n            this.purchases = this.purchases.map(purchase => {\n                const video = this.videos.find(v => v.id === purchase.videoId);\n                return {\n                    ...purchase,\n                    video: video ? {\n                        ...video,\n                        creator: video.creatorName || 'Unknown Creator',\n                        thumbnail: video.thumbnail || 'https://via.placeholder.com/400x225/666/fff?text=Video',\n                        rating: 4.5 // Default rating\n                    } : null\n                };\n            }).filter(p => p.video); // Remove purchases without video data\n            \n            console.log('Viewer data loaded:', { videos: this.videos.length, purchases: this.purchases.length });\n        } catch (error) {\n            console.error('Error loading viewer data:', error);\n            this.videos = [];\n            this.purchases = [];\n        }\n    }\n\n    bindEvents() {\n        // Filter and search events\n        const categoryFilter = document.getElementById('categoryFilter');\n        const statusFilter = document.getElementById('statusFilter');\n        const searchInput = document.getElementById('searchInput');\n        const applyFilters = document.getElementById('applyFilters');\n        \n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', () => this.applyFilters());\n        }\n        if (statusFilter) {\n            statusFilter.addEventListener('change', () => this.applyFilters());\n        }\n        if (searchInput) {\n            searchInput.addEventListener('input', () => this.applyFilters());\n        }\n        if (applyFilters) {\n            applyFilters.addEventListener('click', () => this.applyFilters());\n        }\n\n        // View mode toggle\n        const gridView = document.getElementById('gridView');\n        const listView = document.getElementById('listView');\n        \n        if (gridView) {\n            gridView.addEventListener('click', () => this.switchViewMode('grid'));\n        }\n        if (listView) {\n            listView.addEventListener('click', () => this.switchViewMode('list'));\n        }\n\n        // Purchase modal events\n        const purchaseFromPreviewBtn = document.getElementById('purchaseFromPreview');\n        const confirmPurchaseBtn = document.getElementById('confirmPurchase');\n        if (purchaseFromPreviewBtn) {\n            purchaseFromPreviewBtn.addEventListener('click', this.handlePurchaseFromPreview.bind(this));\n        }\n        if (confirmPurchaseBtn) {\n            confirmPurchaseBtn.addEventListener('click', this.handleConfirmPurchase.bind(this));\n        }\n\n        // Profile form events\n        const profileForm = document.getElementById('profileForm');\n        if (profileForm) {\n            profileForm.addEventListener('submit', this.handleProfileUpdate.bind(this));\n        }\n\n        const passwordForm = document.getElementById('passwordForm');\n        if (passwordForm) {\n            passwordForm.addEventListener('submit', this.handlePasswordChange.bind(this));\n        }\n    }\n\n    loadPageSpecificHandlers() {\n        const currentPage = window.location.pathname.split('/').pop();\n        \n        switch (currentPage) {\n            case 'dashboard.html':\n                this.loadDashboardPage();\n                break;\n            case 'purchases.html':\n                this.loadPurchasesPage();\n                break;\n            case 'profile.html':\n                this.loadProfilePage();\n                break;\n        }\n    }\n\n    async loadDashboardPage() {\n        console.log('Loading dashboard page...');\n        \n        // Load user purchases for proper card display\n        const userSession = JSON.parse(localStorage.getItem('userSession') || sessionStorage.getItem('userSession') || '{}');\n        const userId = userSession.id || userSession.userId;\n        \n        if (!userId) {\n            console.error('No user ID found for purchases');\n            this.purchases = [];\n            return;\n        }\n        \n        try {\n            // Get user-specific purchases for card display\n            const purchasesResponse = await window.apiService.get(`/purchases?user_id=${userId}`);\n            \n            if (purchasesResponse.success) {\n                this.purchases = Array.isArray(purchasesResponse.purchases) ? purchasesResponse.purchases : \n                                Array.isArray(purchasesResponse.data?.purchases) ? purchasesResponse.data.purchases : \n                                Array.isArray(purchasesResponse.data) ? purchasesResponse.data : [];\n                \n                console.log('Dashboard user purchases loaded:', this.purchases);\n            }\n        } catch (error) {\n            console.error('Failed to load user purchases for dashboard:', error);\n            this.purchases = [];\n        }\n        \n        this.renderAllVideos();\n        this.bindAllVideosEvents();\n    }\n\n    async loadPurchasesPage() {\n        console.log('Loading purchases page data...');\n        \n        // Load user's purchase data from API\n        const userSession = JSON.parse(localStorage.getItem('userSession') || sessionStorage.getItem('userSession') || '{}');\n        const userId = userSession.id || userSession.userId;\n        \n        if (!userId) {\n            console.error('No user ID found for purchases page');\n            this.purchases = [];\n            this.updatePurchaseStats();\n            this.renderPurchasedVideos();\n            return;\n        }\n        \n        try {\n            // Get user-specific purchases ONLY on purchases page\n            const purchasesResponse = await window.apiService.get(`/purchases?user_id=${userId}`);\n            console.log('Purchases API response:', purchasesResponse);\n            \n            if (purchasesResponse.success) {\n                // Update purchases with proper data structure\n                this.purchases = Array.isArray(purchasesResponse.purchases) ? purchasesResponse.purchases : \n                                Array.isArray(purchasesResponse.data?.purchases) ? purchasesResponse.data.purchases : \n                                Array.isArray(purchasesResponse.data) ? purchasesResponse.data : [];\n                \n                console.log('User purchases loaded:', this.purchases);\n                \n                // Enrich purchases with video data\n                this.purchases = this.purchases.map(purchase => {\n                    const video = this.videos.find(v => v.id === purchase.video_id);\n                    return {\n                        ...purchase,\n                        video: video ? {\n                            ...video,\n                            creator: video.creatorName || video.creator_name || purchase.creator_name || 'Unknown Creator',\n                            thumbnail: video.thumbnail || purchase.thumbnail || 'https://via.placeholder.com/400x225/666/fff?text=Video'\n                        } : null\n                    };\n                }).filter(p => p.video); // Remove purchases without video data\n            }\n            \n            // Update purchase stats in UI\n            this.updatePurchaseStats();\n            this.renderPurchasedVideos();\n            \n        } catch (error) {\n            console.error('Failed to load purchases:', error);\n            this.purchases = [];\n            this.updatePurchaseStats();\n            this.renderPurchasedVideos();\n        }\n    }\n    \n    updatePurchaseStats() {\n        const totalPurchasesEl = document.getElementById('totalPurchases');\n        const totalSpentEl = document.getElementById('totalSpent');\n        const thisMonthEl = document.getElementById('thisMonth');\n        \n        if (totalPurchasesEl) {\n            totalPurchasesEl.textContent = this.purchases.length;\n        }\n        \n        if (totalSpentEl) {\n            const totalSpent = this.purchases.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\n            totalSpentEl.textContent = '$' + totalSpent.toFixed(2);\n        }\n        \n        if (thisMonthEl) {\n            const currentMonth = new Date().getMonth();\n            const currentYear = new Date().getFullYear();\n            const thisMonthPurchases = this.purchases.filter(p => {\n                const purchaseDate = new Date(p.purchase_date || p.created_at);\n                return purchaseDate.getMonth() === currentMonth && purchaseDate.getFullYear() === currentYear;\n            });\n            thisMonthEl.textContent = thisMonthPurchases.length;\n        }\n    }\n\n    loadProfilePage() {\n        this.loadProfileData();\n    }\n\n    renderAllVideos() {\n        const container = document.getElementById('allVideos');\n        if (!container) return;\n\n        this.filteredVideos = this.videos;\n        this.displayVideos();\n    }\n\n    displayVideos() {\n        const container = document.getElementById('allVideos');\n        if (!container) return;\n\n        container.innerHTML = '';\n\n        this.filteredVideos.forEach(video => {\n            const col = document.createElement('div');\n            col.className = 'col-lg-3 col-md-4 col-sm-6 mb-4';\n            col.innerHTML = this.createVideoCard(video);\n            container.appendChild(col);\n        });\n    }\n\n    bindAllVideosEvents() {\n        // Search functionality\n        const searchInput = document.getElementById('videoSearch');\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                this.filterVideos();\n            });\n        }\n\n        // Category filter\n        const categoryFilter = document.getElementById('categoryFilter');\n        if (categoryFilter) {\n            categoryFilter.addEventListener('change', () => {\n                this.filterVideos();\n            });\n        }\n\n        // Sort functionality\n        const sortBy = document.getElementById('sortBy');\n        if (sortBy) {\n            sortBy.addEventListener('change', () => {\n                this.sortVideos();\n            });\n        }\n\n        // View mode toggle\n        const gridView = document.getElementById('gridView');\n        const listView = document.getElementById('listView');\n        \n        if (gridView) {\n            gridView.addEventListener('change', () => {\n                if (gridView.checked) {\n                    this.switchViewMode('grid');\n                }\n            });\n        }\n        \n        if (listView) {\n            listView.addEventListener('change', () => {\n                if (listView.checked) {\n                    this.switchViewMode('list');\n                }\n            });\n        }\n    }\n\n    filterVideos() {\n        const searchTerm = document.getElementById('videoSearch')?.value.toLowerCase() || '';\n        const selectedCategory = document.getElementById('categoryFilter')?.value || '';\n\n        this.filteredVideos = this.videos.filter(video => {\n            const matchesSearch = video.title.toLowerCase().includes(searchTerm) ||\n                                video.description.toLowerCase().includes(searchTerm) ||\n                                video.creatorName.toLowerCase().includes(searchTerm);\n            \n            const matchesCategory = !selectedCategory || video.category === selectedCategory;\n\n            return matchesSearch && matchesCategory;\n        });\n\n        this.sortVideos();\n    }\n\n    sortVideos() {\n        const sortBy = document.getElementById('sortBy')?.value || 'newest';\n\n        switch (sortBy) {\n            case 'newest':\n                this.filteredVideos.sort((a, b) => new Date(b.uploadDate) - new Date(a.uploadDate));\n                break;\n            case 'oldest':\n                this.filteredVideos.sort((a, b) => new Date(a.uploadDate) - new Date(b.uploadDate));\n                break;\n            case 'price-low':\n                this.filteredVideos.sort((a, b) => a.price - b.price);\n                break;\n            case 'price-high':\n                this.filteredVideos.sort((a, b) => b.price - a.price);\n                break;\n            case 'rating':\n                this.filteredVideos.sort((a, b) => (b.rating || 4.5) - (a.rating || 4.5));\n                break;\n        }\n\n        this.displayVideos();\n    }\n\n    switchViewMode(mode) {\n        const container = document.getElementById('allVideos');\n        if (!container) return;\n\n        if (mode === 'list') {\n            // Create table view\n            container.innerHTML = `\n                <div class=\"table-responsive\">\n                    <table class=\"table table-hover\">\n                        <thead>\n                            <tr>\n                                <th>Video</th>\n                                <th>Creator</th>\n                                <th>Duration</th>\n                                <th>Price</th>\n                                <th>Category</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"videosTableBody\">\n                        </tbody>\n                    </table>\n                </div>\n            `;\n            \n            const tbody = document.getElementById('videosTableBody');\n            this.filteredVideos.forEach(video => {\n                const isPurchased = this.purchases.some(p => p.videoId === video.id);\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>\n                        <div class=\"d-flex align-items-center\">\n                            <img src=\"${video.thumbnail}\" width=\"60\" height=\"34\" class=\"rounded me-3\" alt=\"${video.title}\">\n                            <div>\n                                <strong>${video.title}</strong><br>\n                                <small class=\"text-muted\">${video.category}</small>\n                            </div>\n                        </div>\n                    </td>\n                    <td>${video.creatorName}</td>\n                    <td>${video.duration}</td>\n                    <td>${isPurchased ? 'Owned' : '$' + video.price.toFixed(2)}</td>\n                    <td><span class=\"badge bg-secondary\">${video.category}</span></td>\n                    <td>\n                        <div class=\"btn-group btn-group-sm\">\n                            <button class=\"btn btn-outline-primary\" onclick=\"viewerManager.${isPurchased ? 'playVideo' : 'showVideoPreview'}(${video.id})\">\n                                <i class=\"fas fa-${isPurchased ? 'play' : 'eye'}\"></i>\n                            </button>\n                            ${!isPurchased ? `\n                                <button class=\"btn btn-outline-success\" onclick=\"viewerManager.showPurchaseModal(${video.id})\">\n                                    <i class=\"fas fa-shopping-cart\"></i>\n                                </button>\n                            ` : ''}\n                        </div>\n                    </td>\n                `;\n                tbody.appendChild(row);\n            });\n        } else {\n            // Grid view is the default\n            this.displayVideos();\n        }\n    }\n\n    createVideoCard(video) {\n        const isPurchased = this.purchases.some(p => p.video_id == video.id);\n        const isFavorite = this.favorites.includes(video.id);\n        const price = parseFloat(video.price || 0);\n        \n        return `\n            <div class=\"card h-100 shadow-sm border-0 video-card\">\n                <div class=\"position-relative video-thumbnail-container\" style=\"height: 180px; background-color: #e9ecef; cursor: pointer;\" \n                     onclick=\"viewerManager.${isPurchased ? `playVideo(${video.id})` : `showPurchaseModal(${video.id})`}\">\n                    ${video.thumbnail ? `\n                        <img src=\"${video.thumbnail}\" \n                             class=\"card-img-top w-100 h-100\" alt=\"${video.title}\" style=\"object-fit: cover;\">\n                    ` : `\n                        <div class=\"d-flex align-items-center justify-content-center h-100\">\n                            <i class=\"fas fa-play fa-3x text-muted\"></i>\n                        </div>\n                    `}\n                    \n                    <!-- Play Button Overlay -->\n                    <div class=\"position-absolute top-50 start-50 translate-middle\">\n                        <div class=\"play-button-overlay d-flex align-items-center justify-content-center\" \n                             style=\"width: 60px; height: 60px; background: rgba(0,0,0,0.7); border-radius: 50%; transition: all 0.3s ease;\">\n                            <i class=\"fas fa-play text-white\" style=\"font-size: 24px; margin-left: 3px;\"></i>\n                        </div>\n                    </div>\n                    \n                    ${isPurchased ? `\n                        <div class=\"position-absolute top-0 end-0 m-2\">\n                            <span class=\"badge bg-success\"><i class=\"fas fa-check\"></i></span>\n                        </div>\n                    ` : ''}\n                </div>\n                \n                <div class=\"card-body p-3\">\n                    <h6 class=\"card-title mb-2 fw-bold\" style=\"line-height: 1.3;\">${video.title}</h6>\n                    <p class=\"card-text text-muted small mb-3\" style=\"display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; line-height: 1.4;\">\n                        ${video.description || 'No description available'}\n                    </p>\n                    \n                    <div class=\"d-flex justify-content-between align-items-center\">\n                        ${isPurchased ? `\n                            <span class=\"text-success fw-bold\">Purchased</span>\n                        ` : `\n                            <span class=\"text-primary fw-bold\">${price > 0 ? `$${price.toFixed(2)}` : 'Free'}</span>\n                        `}\n                        <small class=\"text-muted\">by ${video.creatorName || 'Unknown Creator'}</small>\n                    </div>\n                    \n                    <div class=\"d-flex justify-content-between align-items-center mt-2\">\n                        <small class=\"text-muted\">${video.views || 0} views</small>\n                        <button class=\"btn btn-sm ${isPurchased ? 'btn-success' : 'btn-primary'}\" \n                                onclick=\"viewerManager.${isPurchased ? `playVideo(${video.id})` : `showPurchaseModal(${video.id})`}\">\n                            ${isPurchased ? 'Watch' : 'Purchase'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderPurchaseStats() {\n        const totalVideosCount = document.getElementById('totalVideosCount');\n        const purchasedVideosCount = document.getElementById('purchasedVideosCount');\n        const totalSpentAmount = document.getElementById('totalSpentAmount');\n        const favoritesCount = document.getElementById('favoritesCount');\n\n        // Total videos available in platform\n        if (totalVideosCount) totalVideosCount.textContent = this.videos.length;\n        \n        // Purchased videos count\n        if (purchasedVideosCount) purchasedVideosCount.textContent = this.purchases.length;\n        \n        // Total spent by current viewer\n        if (totalSpentAmount) {\n            const total = this.purchases.reduce((sum, p) => sum + p.price, 0);\n            totalSpentAmount.textContent = '$' + total.toFixed(2);\n        }\n        \n        // Favorites count\n        if (favoritesCount) {\n            favoritesCount.textContent = this.favorites.length;\n        }\n    }\n\n    renderPurchasedVideos() {\n        const gridContainer = document.getElementById('purchasesGrid');\n        \n        if (!gridContainer) {\n            console.warn('Purchase grid container not found');\n            return;\n        }\n\n        console.log('Rendering purchases:', this.purchases);\n\n        if (this.purchases.length === 0) {\n            gridContainer.innerHTML = `\n                <div class=\"col-12 text-center py-5\">\n                    <i class=\"fas fa-video fa-3x text-muted mb-3\"></i>\n                    <h5 class=\"text-muted\">No purchased videos yet</h5>\n                    <p class=\"text-muted\">Browse and purchase videos to watch them here</p>\n                    <a href=\"dashboard.html\" class=\"btn btn-primary\">Browse Videos</a>\n                </div>\n            `;\n            return;\n        }\n\n        gridContainer.innerHTML = '';\n        this.purchases.forEach(purchase => {\n            if (purchase.video) {\n                const col = document.createElement('div');\n                col.className = 'col-lg-4 col-md-6 mb-4';\n                col.innerHTML = this.createPurchasedVideoCard(purchase);\n                gridContainer.appendChild(col);\n            }\n        });\n\n        // Grid view only - no list view needed for purchases page\n    }\n\n    createPurchasedVideoCard(purchase) {\n        const purchaseDate = new Date(purchase.purchase_date || purchase.created_at).toLocaleDateString();\n        const videoId = purchase.video_id || purchase.video.id;\n        const amount = parseFloat(purchase.amount || 0);\n\n        return `\n            <div class=\"card h-100 shadow-sm border-0\">\n                <div class=\"position-relative\" style=\"cursor: pointer;\" onclick=\"viewerManager.playVideo(${videoId})\">\n                    <img src=\"${purchase.video.thumbnail}\" class=\"card-img-top\" alt=\"${purchase.video.title}\" style=\"height: 200px; object-fit: cover;\">\n                    \n                    <!-- Play Button Overlay -->\n                    <div class=\"position-absolute top-50 start-50 translate-middle\">\n                        <div class=\"play-button-overlay d-flex align-items-center justify-content-center\" \n                             style=\"width: 60px; height: 60px; background: rgba(0,0,0,0.7); border-radius: 50%; transition: all 0.3s ease;\">\n                            <i class=\"fas fa-play text-white\" style=\"font-size: 24px; margin-left: 3px;\"></i>\n                        </div>\n                    </div>\n                    \n                    <div class=\"position-absolute top-0 end-0 m-2\">\n                        <span class=\"badge bg-success\">Purchased</span>\n                    </div>\n                    <div class=\"position-absolute bottom-0 start-0 end-0 p-3\" style=\"background: linear-gradient(transparent, rgba(0,0,0,0.7));\">\n                        <div class=\"d-flex justify-content-between align-items-end\">\n                            <span class=\"badge bg-dark\">${purchase.video.duration || '0:00'}</span>\n                            <button class=\"btn btn-success btn-sm\" onclick=\"event.stopPropagation(); viewerManager.playVideo(${videoId})\">\n                                <i class=\"fas fa-play me-1\"></i>Watch Now\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    <h6 class=\"card-title mb-2\">${purchase.video.title || 'Untitled Video'}</h6>\n                    <p class=\"card-text text-muted small mb-2\">${purchase.video.description || purchase.description || 'No description available'}</p>\n                    <div class=\"d-flex justify-content-between align-items-center\">\n                        <span class=\"text-success fw-bold\">$${amount.toFixed(2)}</span>\n                        <small class=\"text-muted\">by ${purchase.video.creator || purchase.creator_name || 'Unknown Creator'}</small>\n                    </div>\n                    <div class=\"mt-2\">\n                        <small class=\"text-muted\">Purchased: ${purchaseDate}</small>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    applyFilters() {\n        const category = document.getElementById('categoryFilter')?.value || '';\n        const status = document.getElementById('statusFilter')?.value || '';\n        const search = document.getElementById('searchInput')?.value.toLowerCase() || '';\n\n        let filtered = this.purchases;\n\n        if (category) {\n            filtered = filtered.filter(p => p.video.category === category);\n        }\n\n        if (status) {\n            if (status === 'watched') {\n                filtered = filtered.filter(p => p.watchProgress > 80);\n            } else if (status === 'unwatched') {\n                filtered = filtered.filter(p => p.watchProgress < 20);\n            } else if (status === 'favorite') {\n                filtered = filtered.filter(p => this.favorites.includes(p.videoId));\n            }\n        }\n\n        if (search) {\n            filtered = filtered.filter(p => \n                p.video.title.toLowerCase().includes(search) ||\n                p.video.creatorName.toLowerCase().includes(search)\n            );\n        }\n\n        // Update display with filtered results\n        this.renderFilteredPurchases(filtered);\n    }\n\n    renderFilteredPurchases(purchases) {\n        const gridContainer = document.getElementById('videosGrid');\n        if (gridContainer) {\n            gridContainer.innerHTML = '';\n            purchases.forEach(purchase => {\n                const col = document.createElement('div');\n                col.className = 'col-lg-4 col-md-6 mb-4';\n                col.innerHTML = this.createPurchasedVideoCard(purchase);\n                gridContainer.appendChild(col);\n            });\n        }\n    }\n\n    // Utility methods\n    parseDuration(duration) {\n        const parts = duration.split(':');\n        return parseInt(parts[0]) * 60 + parseInt(parts[1]);\n    }\n\n    initializePlayer() {\n        // Initialize YouTube API if not already loaded\n        if (!window.YT) {\n            const tag = document.createElement('script');\n            tag.src = 'https://www.youtube.com/iframe_api';\n            const firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            \n            window.onYouTubeIframeAPIReady = () => {\n                console.log('YouTube API ready');\n            };\n        }\n    }\n\n    async playVideo(videoId) {\n        try {\n            // Find the video\n            const video = this.videos.find(v => v.id == videoId);\n            if (!video) {\n                alert('Video not found');\n                return;\n            }\n            \n            // Check if user has purchased this video\n            const isPurchased = this.purchases.some(p => p.video_id == videoId);\n            if (!isPurchased) {\n                alert('You need to purchase this video first');\n                this.showPurchaseModal(videoId);\n                return;\n            }\n            \n            // Extract YouTube video ID from thumbnail URL\n            let youtubeVideoId = '';\n            if (video.thumbnail) {\n                // Try different YouTube URL patterns\n                const patterns = [\n                    /\\/vi\\/([^\\/]+)\\//,  // Standard thumbnail format\n                    /watch\\?v=([^&]+)/,  // Watch URL format\n                    /youtu\\.be\\/([^?]+)/, // Short URL format\n                    /embed\\/([^?]+)/     // Embed URL format\n                ];\n                \n                for (const pattern of patterns) {\n                    const match = video.thumbnail.match(pattern);\n                    if (match) {\n                        youtubeVideoId = match[1];\n                        break;\n                    }\n                }\n            }\n            \n            if (!youtubeVideoId) {\n                alert('Video not available for playback');\n                return;\n            }\n            \n            // Create video player modal\n            this.showVideoPlayer(youtubeVideoId, video.title);\n            \n        } catch (error) {\n            console.error('Error playing video:', error);\n            alert('Error loading video');\n        }\n    }\n\n    showVideoPlayer(youtubeVideoId, title) {\n        // Create modal with YouTube player\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.id = 'videoPlayerModal';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-xl\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${title}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" onclick=\"viewerManager.stopVideo()\"></button>\n                    </div>\n                    <div class=\"modal-body p-0\">\n                        <div id=\"youtubePlayer\" style=\"width: 100%; height: 500px;\"></div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(modal);\n        \n        // Show modal\n        const bsModal = new bootstrap.Modal(modal);\n        bsModal.show();\n        \n        // Initialize YouTube player\n        if (window.YT && window.YT.Player) {\n            this.ytPlayer = new window.YT.Player('youtubePlayer', {\n                height: '500',\n                width: '100%',\n                videoId: youtubeVideoId,\n                playerVars: {\n                    autoplay: 1,\n                    controls: 1,\n                    modestbranding: 1,\n                    rel: 0\n                }\n            });\n        } else {\n            // Fallback to iframe embed\n            document.getElementById('youtubePlayer').innerHTML = `\n                <iframe width=\"100%\" height=\"500\" \n                        src=\"https://www.youtube.com/embed/${youtubeVideoId}?autoplay=1&controls=1\" \n                        frameborder=\"0\" allowfullscreen>\n                </iframe>\n            `;\n        }\n        \n        // Clean up on modal close\n        modal.addEventListener('hidden.bs.modal', () => {\n            this.stopVideo();\n            modal.remove();\n        });\n    }\n\n    stopVideo() {\n        if (this.ytPlayer && this.ytPlayer.destroy) {\n            this.ytPlayer.destroy();\n            this.ytPlayer = null;\n        }\n    }\n\n    toggleFavorite(videoId) {\n        const index = this.favorites.indexOf(videoId);\n        if (index > -1) {\n            this.favorites.splice(index, 1);\n            console.log(`Removed video ${videoId} from favorites`);\n        } else {\n            this.favorites.push(videoId);\n            console.log(`Added video ${videoId} to favorites`);\n        }\n        \n        // Re-render the current view to update favorite icons\n        if (window.location.href.includes('purchases.html')) {\n            this.renderPurchasedVideos();\n        } else {\n            this.displayVideos();\n        }\n    }\n\n    shareVideo(videoId) {\n        const video = this.videos.find(v => v.id == videoId);\n        if (video) {\n            // Simple share functionality\n            if (navigator.share) {\n                navigator.share({\n                    title: video.title,\n                    text: `Check out this video: ${video.title}`,\n                    url: window.location.href\n                });\n            } else {\n                // Fallback to copying to clipboard\n                const shareText = `Check out this video: ${video.title} - ${window.location.href}`;\n                navigator.clipboard.writeText(shareText).then(() => {\n                    alert('Video link copied to clipboard!');\n                }).catch(() => {\n                    alert('Share link: ' + shareText);\n                });\n            }\n        }\n    }\n\n    // Event handlers\n    showVideoPreview(videoId) {\n        console.log('Showing preview for video:', videoId);\n    }\n\n    async purchaseVideo(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (!video) {\n            alert('Video not found');\n            return;\n        }\n        \n        // Check if already purchased\n        const userSession = JSON.parse(localStorage.getItem('userSession') || '{}');\n        const userId = userSession.userId || 8;\n        const alreadyPurchased = this.purchases.some(p => p.video_id === videoId);\n        \n        if (alreadyPurchased) {\n            alert('You have already purchased this video');\n            return;\n        }\n        \n        // Show purchase modal\n        this.showPurchaseModal(video, userId);\n    }\n\n    showPurchaseModal(videoId) {\n        const video = this.videos.find(v => v.id == videoId);\n        if (!video) {\n            alert('Video not found');\n            return;\n        }\n        \n        // Get current user ID\n        const userSession = JSON.parse(localStorage.getItem('userSession') || '{}');\n        const userId = userSession.userId || 8;\n        \n        // Create payment modal\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.id = 'purchaseModal';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-lg\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">Purchase Video</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"row\">\n                            <div class=\"col-md-4\">\n                                <img src=\"${video.thumbnail || 'https://via.placeholder.com/400x225/666/fff?text=Video'}\" class=\"img-fluid rounded\" alt=\"${video.title}\">\n                            </div>\n                            <div class=\"col-md-8\">\n                                <h5>${video.title}</h5>\n                                <p class=\"text-muted\">By ${video.creatorName || video.creator_name || 'Unknown Creator'}</p>\n                                <p>${video.description || 'No description available'}</p>\n                                <div class=\"alert alert-info\">\n                                    <strong>Price: $${video.price ? parseFloat(video.price).toFixed(2) : '0.00'}</strong>\n                                    <br><small>One-time purchase - lifetime access</small>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        <hr>\n                        \n                        <form id=\"paymentForm\">\n                            <div class=\"row\">\n                                <div class=\"col-md-6\">\n                                    <h6>Payment Method</h6>\n                                    <div class=\"mb-3\">\n                                        <div class=\"form-check\">\n                                            <input class=\"form-check-input\" type=\"radio\" name=\"paymentMethod\" value=\"card\" id=\"cardPayment\" checked>\n                                            <label class=\"form-check-label\" for=\"cardPayment\">\n                                                <i class=\"fas fa-credit-card me-2\"></i>Credit/Debit Card\n                                            </label>\n                                        </div>\n                                        <div class=\"form-check\">\n                                            <input class=\"form-check-input\" type=\"radio\" name=\"paymentMethod\" value=\"paypal\" id=\"paypalPayment\">\n                                            <label class=\"form-check-label\" for=\"paypalPayment\">\n                                                <i class=\"fab fa-paypal me-2\"></i>PayPal\n                                            </label>\n                                        </div>\n                                        <div class=\"form-check\">\n                                            <input class=\"form-check-input\" type=\"radio\" name=\"paymentMethod\" value=\"crypto\" id=\"cryptoPayment\">\n                                            <label class=\"form-check-label\" for=\"cryptoPayment\">\n                                                <i class=\"fab fa-bitcoin me-2\"></i>Cryptocurrency\n                                            </label>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-6\">\n                                    <div id=\"cardDetails\">\n                                        <h6>Card Details</h6>\n                                        <div class=\"mb-2\">\n                                            <input type=\"text\" class=\"form-control\" placeholder=\"Card Number\" name=\"cardNumber\" value=\"4242 4242 4242 4242\">\n                                        </div>\n                                        <div class=\"row\">\n                                            <div class=\"col-6\">\n                                                <input type=\"text\" class=\"form-control\" placeholder=\"MM/YY\" name=\"expiry\" value=\"12/26\">\n                                            </div>\n                                            <div class=\"col-6\">\n                                                <input type=\"text\" class=\"form-control\" placeholder=\"CVV\" name=\"cvv\" value=\"123\">\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div id=\"paypalDetails\" style=\"display: none;\">\n                                        <h6>PayPal Details</h6>\n                                        <input type=\"email\" class=\"form-control\" placeholder=\"PayPal Email\" name=\"paypalEmail\" value=\"demo@example.com\">\n                                    </div>\n                                    <div id=\"cryptoDetails\" style=\"display: none;\">\n                                        <h6>Crypto Wallet</h6>\n                                        <input type=\"text\" class=\"form-control\" placeholder=\"Wallet Address\" name=\"walletAddress\" value=\"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\">\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                        \n                        <div class=\"alert alert-warning mt-3\">\n                            <i class=\"fas fa-info-circle me-2\"></i>\n                            This is a demo payment system. No real charges will be made.\n                        </div>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                        <button type=\"button\" class=\"btn btn-success\" onclick=\"viewerManager.processPayment(${video.id}, ${userId})\">\n                            <i class=\"fas fa-shopping-cart me-2\"></i>Purchase for $${video.price ? parseFloat(video.price).toFixed(2) : '0.00'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n        \n        // Handle payment method change\n        modal.querySelectorAll('input[name=\"paymentMethod\"]').forEach(radio => {\n            radio.addEventListener('change', function() {\n                modal.querySelectorAll('#cardDetails, #paypalDetails, #cryptoDetails').forEach(detail => {\n                    detail.style.display = 'none';\n                });\n                modal.querySelector('#' + this.value + 'Details').style.display = 'block';\n            });\n        });\n        \n        // Clean up when closed\n        modal.addEventListener('hidden.bs.modal', () => {\n            document.body.removeChild(modal);\n        });\n    }\n\n    async processPayment(videoId, userId) {\n        const modal = document.querySelector('.modal.show');\n        const form = modal.querySelector('#paymentForm');\n        const paymentMethod = form.querySelector('input[name=\"paymentMethod\"]:checked').value;\n        \n        // Get payment details based on method\n        let paymentDetails = {};\n        switch (paymentMethod) {\n            case 'card':\n                paymentDetails = {\n                    card_number: form.querySelector('input[name=\"cardNumber\"]').value,\n                    expiry: form.querySelector('input[name=\"expiry\"]').value,\n                    cvv: form.querySelector('input[name=\"cvv\"]').value\n                };\n                break;\n            case 'paypal':\n                paymentDetails = {\n                    paypal_email: form.querySelector('input[name=\"paypalEmail\"]').value\n                };\n                break;\n            case 'crypto':\n                paymentDetails = {\n                    wallet_address: form.querySelector('input[name=\"walletAddress\"]').value\n                };\n                break;\n        }\n        \n        try {\n            // Show loading\n            const purchaseBtn = modal.querySelector('button[onclick*=\"processPayment\"]');\n            purchaseBtn.disabled = true;\n            purchaseBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Processing...';\n            \n            const response = await window.apiService.post('/payments/purchase', {\n                video_id: videoId,\n                user_id: userId,\n                payment_method: paymentMethod,\n                payment_details: paymentDetails\n            });\n            \n            if (response.success) {\n                // Close modal\n                bootstrap.Modal.getInstance(modal).hide();\n                \n                // Show success message\n                alert(`Purchase successful! You now have access to \"${response.data.video_title}\"`);\n                \n                // Refresh data to show purchased video\n                await this.loadDataFromAPI();\n                this.loadPageSpecificHandlers();\n                \n            } else {\n                alert('Payment failed: ' + response.message);\n            }\n            \n        } catch (error) {\n            console.error('Payment error:', error);\n            alert('Payment failed. Please try again.');\n        } finally {\n            const purchaseBtn = modal.querySelector('button[onclick*=\"processPayment\"]');\n            if (purchaseBtn) {\n                purchaseBtn.disabled = false;\n                purchaseBtn.innerHTML = '<i class=\"fas fa-shopping-cart me-2\"></i>Purchase for $' + (this.videos.find(v => v.id === videoId)?.price || '0.00');\n            }\n        }\n    }\n\n    async playVideo(videoId) {\n        const userSession = JSON.parse(localStorage.getItem('userSession') || '{}');\n        const userId = userSession.userId || 8;\n        \n        try {\n            // Check if user has access to this video\n            const accessResponse = await window.apiService.get(`/payments/check-access?video_id=${videoId}&user_id=${userId}`);\n            \n            if (accessResponse.success && accessResponse.has_access) {\n                // User has access, play the video\n                this.openVideoPlayer(videoId);\n            } else {\n                // User doesn't have access, show purchase option\n                alert('You need to purchase this video to watch it.');\n                this.purchaseVideo(videoId);\n            }\n        } catch (error) {\n            console.error('Access check error:', error);\n            alert('Error checking video access. Please try again.');\n        }\n    }\n    \n    openVideoPlayer(videoId) {\n        const video = this.videos.find(v => v.id === videoId);\n        if (!video) {\n            alert('Video not found');\n            return;\n        }\n        \n        // Create video player modal\n        const modal = document.createElement('div');\n        modal.className = 'modal fade';\n        modal.innerHTML = `\n            <div class=\"modal-dialog modal-xl\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${video.title}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body p-0\">\n                        <div class=\"ratio ratio-16x9\">\n                            <video controls class=\"w-100\">\n                                <source src=\"${video.video_url || 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'}\" type=\"video/mp4\">\n                                Your browser does not support the video tag.\n                            </video>\n                        </div>\n                        <div class=\"p-3\">\n                            <h6>${video.title}</h6>\n                            <p class=\"text-muted\">By ${video.creatorName || video.creator_name || 'Unknown Creator'}</p>\n                            <p>${video.description || 'No description available'}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(modal);\n        const bootstrapModal = new bootstrap.Modal(modal);\n        bootstrapModal.show();\n        \n        // Clean up when closed\n        modal.addEventListener('hidden.bs.modal', () => {\n            document.body.removeChild(modal);\n        });\n    }\n\n    toggleFavorite(videoId) {\n        const index = this.favorites.indexOf(videoId);\n        if (index > -1) {\n            this.favorites.splice(index, 1);\n        } else {\n            this.favorites.push(videoId);\n        }\n        // Refresh display\n        this.loadPageSpecificHandlers();\n    }\n\n    showVideoOptions(videoId) {\n        console.log('Showing options for video:', videoId);\n    }\n\n    handlePurchaseFromPreview() {\n        console.log('Handling purchase from preview');\n    }\n\n    handleConfirmPurchase() {\n        console.log('Handling confirm purchase');\n    }\n\n    handleProfileUpdate(event) {\n        event.preventDefault();\n        console.log('Handling profile update');\n    }\n\n    handlePasswordChange(event) {\n        event.preventDefault();\n        console.log('Handling password change');\n    }\n\n    loadProfileData() {\n        console.log('Loading profile data');\n    }\n}","size_bytes":52979},"assets/js/youtube-api.js":{"content":"/**\n * YouTube Data API v3 Client for VideoHub\n * Handles authentication, token management, video upload, and metadata sync\n */\nclass YouTubeAPIClient {\n    constructor() {\n        this.accessToken = null;\n        this.refreshToken = null;\n        this.tokenExpiry = null;\n        this.clientId =\n            \"824425517340-c4g9ilvg3i7cddl75hvq1a8gromuc95n.apps.googleusercontent.com\";\n        // Client secret handled server-side for security\n        this.scope =\n            \"https://www.googleapis.com/auth/youtube.upload https://www.googleapis.com/auth/youtube.readonly\";\n        this.isInitialized = false;\n\n        // Initialize tokens from server\n        this.initialize();\n    }\n\n    /**\n     * Initialize the YouTube API client\n     */\n    async initialize() {\n        if (this.isInitialized) {\n            return true;\n        }\n\n        try {\n            await this.initializeTokens();\n            this.isInitialized = true;\n            return true;\n        } catch (error) {\n            console.error(\"Failed to initialize YouTube API client:\", error);\n            this.isInitialized = false;\n            return false;\n        }\n    }\n\n    /**\n     * Initialize tokens from database\n     */\n    async initializeTokens() {\n        // Prevent multiple simultaneous calls\n        if (this.initializingTokens) {\n            // Wait for existing initialization to complete\n            while (this.initializingTokens) {\n                await new Promise((resolve) => setTimeout(resolve, 100));\n            }\n            return;\n        }\n\n        this.initializingTokens = true;\n\n        try {\n            const response = await fetch(\n                \"/api/youtube_tokens.php?action=get_tokens\",\n                {\n                    credentials: \"include\",\n                },\n            );\n\n            if (!response.ok) {\n                throw new Error(\n                    `HTTP ${response.status}: ${response.statusText}`,\n                );\n            }\n\n            const data = await response.json();\n\n            if (data.success) {\n                this.accessToken = data.tokens.access_token;\n                this.refreshToken = data.tokens.refresh_token;\n                this.tokenExpiry = new Date(data.tokens.expires_at);\n                console.log(\"YouTube tokens initialized successfully\", {\n                    hasAccessToken: !!this.accessToken,\n                    tokenExpiry: this.tokenExpiry\n                });\n            } else if (data.expired && data.refresh_token) {\n                // Token expired, try to refresh\n                console.log(\"Token expired, attempting refresh...\");\n                this.refreshToken = data.refresh_token;\n                await this.refreshAccessToken(data.refresh_token);\n            } else {\n                console.log(\"No valid tokens found - user needs to authenticate\");\n                this.accessToken = null;\n                this.refreshToken = null;\n                this.tokenExpiry = null;\n            }\n        } catch (error) {\n            console.error(\"Failed to initialize tokens:\", error);\n        } finally {\n            this.initializingTokens = false;\n        }\n    }\n\n    /**\n     * Check if user is signed in\n     */\n    isSignedIn() {\n        return (\n            this.accessToken &&\n            this.tokenExpiry &&\n            new Date() < this.tokenExpiry\n        );\n    }\n\n    /**\n     * Sign in to YouTube\n     */\n    async signIn() {\n        return new Promise((resolve) => {\n            const redirectUri = encodeURIComponent(\n                window.location.origin + \"/api/oauth/youtube.php\",\n            );\n            const authUrl =\n                `https://accounts.google.com/o/oauth2/v2/auth?` +\n                `client_id=${this.clientId}&` +\n                `redirect_uri=${redirectUri}&` +\n                `scope=${encodeURIComponent(this.scope)}&` +\n                `response_type=code&` +\n                `access_type=offline&` +\n                `prompt=consent`;\n\n            const popup = window.open(\n                authUrl,\n                \"youtube-auth\",\n                \"width=500,height=600\",\n            );\n\n            const messageHandler = (event) => {\n                if (event.data.type === \"YOUTUBE_AUTH_SUCCESS\") {\n                    window.removeEventListener(\"message\", messageHandler);\n                    popup.close();\n                    this.initializeTokens().then(() => resolve(true));\n                } else if (event.data.type === \"YOUTUBE_AUTH_ERROR\") {\n                    window.removeEventListener(\"message\", messageHandler);\n                    popup.close();\n                    console.error(\"YouTube auth error:\", event.data.error);\n                    resolve(false);\n                }\n            };\n\n            window.addEventListener(\"message\", messageHandler);\n\n            // Check if popup was closed manually\n            const checkClosed = setInterval(() => {\n                if (popup.closed) {\n                    clearInterval(checkClosed);\n                    window.removeEventListener(\"message\", messageHandler);\n                    resolve(false);\n                }\n            }, 1000);\n        });\n    }\n\n    /**\n     * Refresh access token using refresh token\n     */\n    async refreshAccessToken(refreshToken) {\n        try {\n            const response = await fetch(\"/api/youtube_tokens.php\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                credentials: \"include\",\n                body: JSON.stringify({\n                    action: \"refresh_token\",\n                    refresh_token: refreshToken,\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n\n            if (data.success && data.tokens) {\n                this.accessToken = data.tokens.access_token;\n                this.refreshToken = data.tokens.refresh_token || refreshToken;\n                this.tokenExpiry = new Date(Date.now() + (data.tokens.expires_in || 3600) * 1000);\n                console.log(\"Token refreshed successfully\");\n                return true;\n            }\n\n            console.error(\"Token refresh failed:\", data.error || \"Unknown error\");\n            return false;\n        } catch (error) {\n            console.error(\"Token refresh failed:\", error);\n            // Clear tokens on refresh failure\n            this.accessToken = null;\n            this.refreshToken = null;\n            this.tokenExpiry = null;\n            return false;\n        }\n    }\n\n    /**\n     * Ensure we have a valid access token\n     */\n    async ensureValidToken() {\n        if (!this.accessToken) {\n            throw new Error(\"No access token available. Please sign in first.\");\n        }\n\n        if (this.tokenExpiry && new Date() >= this.tokenExpiry) {\n            if (this.refreshToken) {\n                const refreshed = await this.refreshAccessToken(\n                    this.refreshToken,\n                );\n                if (!refreshed) {\n                    throw new Error(\n                        \"Token expired and refresh failed. Please sign in again.\",\n                    );\n                }\n            } else {\n                throw new Error(\n                    \"Token expired and no refresh token available. Please sign in again.\",\n                );\n            }\n        }\n    }\n\n    /**\n     * Update YouTube video metadata\n     * @param {string} videoId - YouTube video ID\n     * @param {Object} metadata - Updated metadata (title, description)\n     * @returns {Promise<Object>} Update result\n     */\n    async updateVideoMetadata(videoId, metadata) {\n        try {\n            console.log('YouTube API updateVideoMetadata called with:', { videoId, metadata });\n            console.log('Current accessToken:', this.accessToken);\n            \n            // Ensure we're initialized first\n            if (!this.isInitialized) {\n                console.log('YouTube client not initialized, initializing now...');\n                await this.initialize();\n            }\n            \n            if (!this.accessToken) {\n                console.error('No YouTube access token available');\n                return {\n                    success: false,\n                    error: 'Not authenticated with YouTube. Please connect your YouTube account first.',\n                    needsAuth: true\n                };\n            }\n\n            await this.ensureValidToken();\n\n            const updateData = {\n                id: videoId,\n                snippet: {\n                    title: metadata.title,\n                    description: metadata.description,\n                    categoryId: \"22\" // People & Blogs category\n                }\n            };\n\n            const response = await fetch(\n                `https://www.googleapis.com/youtube/v3/videos?part=snippet`,\n                {\n                    method: 'PUT',\n                    headers: {\n                        'Authorization': `Bearer ${this.accessToken}`,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(updateData)\n                }\n            );\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(`YouTube API error: ${errorData.error?.message || response.statusText}`);\n            }\n\n            const result = await response.json();\n            console.log('YouTube video updated successfully:', result);\n\n            return {\n                success: true,\n                videoId: result.id,\n                title: result.snippet.title,\n                description: result.snippet.description\n            };\n\n        } catch (error) {\n            console.error('Error updating YouTube video:', error);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n\n    /**\n     * Make authenticated request to YouTube API\n     */\n    async makeYouTubeAPIRequest(url, options = {}) {\n        await this.ensureValidToken();\n\n        const headers = {\n            Authorization: `Bearer ${this.accessToken}`,\n            \"Content-Type\": \"application/json\",\n            ...options.headers,\n        };\n\n        return fetch(url, {\n            ...options,\n            headers,\n        });\n    }\n\n    /**\n     * Upload video to YouTube with progress tracking using multipart upload\n     */\n    async uploadVideo(videoFile, metadata, progressCallback = null) {\n        try {\n            console.log(\"Starting video upload to YouTube...\");\n            await this.ensureValidToken();\n\n            if (!videoFile || !videoFile.type.startsWith(\"video/\")) {\n                throw new Error(\"Invalid video file\");\n            }\n\n            if (progressCallback) progressCallback(10);\n\n            // Prepare metadata for upload\n            const uploadMetadata = {\n                snippet: {\n                    title: metadata.title || \"Untitled Video\",\n                    description: metadata.description || \"\",\n                    tags: metadata.tags || [],\n                    categoryId: metadata.categoryId || \"22\",\n                },\n                status: {\n                    privacyStatus: metadata.privacy || \"unlisted\",\n                    embeddable: true,\n                    license: \"youtube\",\n                },\n            };\n\n            if (progressCallback) progressCallback(20);\n\n            // Create multipart request body\n            const boundary = \"-------314159265358979323846\";\n            const delimiter = `\\r\\n--${boundary}\\r\\n`;\n            const closeDelim = `\\r\\n--${boundary}--`;\n\n            if (progressCallback) progressCallback(30);\n\n            // Convert file to base64\n            const base64Data = await this.fileToBase64(\n                videoFile,\n                (progress) => {\n                    // Map file conversion progress to 30-70% of total progress\n                    const mappedProgress =\n                        30 + Math.round((progress / 100) * 40);\n                    if (progressCallback) progressCallback(mappedProgress);\n                },\n            );\n\n            if (progressCallback) progressCallback(75);\n\n            // Build multipart request body\n            const multipartRequestBody =\n                delimiter +\n                \"Content-Type: application/json\\r\\n\\r\\n\" +\n                JSON.stringify(uploadMetadata) +\n                delimiter +\n                \"Content-Type: video/*\\r\\n\" +\n                \"Content-Transfer-Encoding: base64\\r\\n\\r\\n\" +\n                base64Data +\n                closeDelim;\n\n            if (progressCallback) progressCallback(80);\n\n            // Upload to YouTube\n            const response = await fetch(\n                \"https://www.googleapis.com/upload/youtube/v3/videos?uploadType=multipart&part=snippet,status\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        Authorization: `Bearer ${this.accessToken}`,\n                        \"Content-Type\": `multipart/related; boundary=\"${boundary}\"`,\n                    },\n                    body: multipartRequestBody,\n                },\n            );\n\n            if (progressCallback) progressCallback(90);\n           \n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"Upload response error:\", errorText);\n                throw new Error(\n                    `Upload failed: ${response.status} ${response.statusText}`,\n                );\n            }\n\n            const result = await response.json();\n            console.log(\"Upload success:\", result);\n\n            if (result.id) {\n                // Step 3: Sync with our database\n                const syncSuccess = await this.syncVideoToDatabase(\n                    result,\n                    metadata.price,\n                );\n\n                if (progressCallback) progressCallback(100);\n\n                return {\n                    success: true,\n                    video: result,\n                    synced: syncSuccess,\n                };\n            } else {\n                throw new Error(\"Upload failed - no video ID returned\");\n            }\n        } catch (error) {\n            console.error(\"Video upload failed:\", error);\n            return {\n                success: false,\n                error: error.message,\n            };\n        }\n    }\n\n    /**\n     * Convert file to base64 with progress tracking\n     */\n    async fileToBase64(file, progressCallback = null) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onprogress = (event) => {\n                if (event.lengthComputable && progressCallback) {\n                    const progress = Math.round(\n                        (event.loaded / event.total) * 100,\n                    );\n                    progressCallback(progress);\n                }\n            };\n\n            reader.onload = function () {\n                try {\n                    const base64Data = btoa(\n                        new Uint8Array(reader.result).reduce(\n                            (data, byte) => data + String.fromCharCode(byte),\n                            \"\",\n                        ),\n                    );\n                    resolve(base64Data);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            reader.onerror = () => reject(new Error(\"Failed to read file\"));\n            reader.readAsArrayBuffer(file);\n        });\n    }\n\n    /**\n     * Sync uploaded video metadata with our database\n     */\n    async syncVideoToDatabase(youtubeVideo, price = 0) {\n        try {\n            // Get current user from session\n            const localSession = localStorage.getItem(\"userSession\");\n            const sessionSession = sessionStorage.getItem(\"userSession\");\n            const userSession = JSON.parse(\n                localSession || sessionSession || \"{}\",\n            );\n            const uploaderId = userSession.id;\n\n            if (!uploaderId) {\n                throw new Error(\"No user session found\");\n            }\n\n            // Get detailed statistics for the video\n            const videoDetails = await this.getVideoDetails([youtubeVideo.id]);\n            const detailedVideo = videoDetails[0] || {};\n\n            const videoData = {\n                title: youtubeVideo.snippet?.title || \"Untitled\",\n                description: youtubeVideo.snippet?.description || \"\",\n                youtube_id: youtubeVideo.id,\n                youtube_thumbnail:\n                    youtubeVideo.snippet?.thumbnails?.medium?.url ||\n                    youtubeVideo.snippet?.thumbnails?.default?.url,\n                youtube_channel_id: youtubeVideo.snippet?.channelId,\n                youtube_channel_title: youtubeVideo.snippet?.channelTitle,\n                youtube_views: detailedVideo.views || 0,\n                youtube_likes: detailedVideo.likes || 0,\n                youtube_comments: detailedVideo.comments || 0,\n                is_youtube_synced: true,\n                price: parseFloat(price) || 0,\n                category: \"youtube\",\n                file_path: \"\",\n                uploader_id: uploaderId,\n            };\n\n            const response = await fetch(\"/api/endpoints/videos.php\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                credentials: \"include\",\n                body: JSON.stringify(videoData),\n            });\n\n            const result = await response.json();\n\n            if (!result.success) {\n                console.error(\n                    \"Failed to sync video to database:\",\n                    result.message,\n                );\n            }\n\n            return result.success;\n        } catch (error) {\n            console.error(\"Database sync failed:\", error);\n            return false;\n        }\n    }\n\n    /**\n     * Get detailed video information\n     */\n    async getVideoDetails(videoIds) {\n        try {\n            const ids = Array.isArray(videoIds) ? videoIds.join(\",\") : videoIds;\n            const response = await this.makeYouTubeAPIRequest(\n                `https://www.googleapis.com/youtube/v3/videos?part=snippet,statistics&id=${ids}`,\n            );\n\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch video details\");\n            }\n\n            const data = await response.json();\n            return data.items.map((video) => ({\n                youtube_id: video.id,\n                title: video.snippet.title,\n                description: video.snippet.description,\n                thumbnail:\n                    video.snippet.thumbnails?.medium?.url ||\n                    video.snippet.thumbnails?.default?.url,\n                channel_id: video.snippet.channelId,\n                channel_title: video.snippet.channelTitle,\n                views: parseInt(video.statistics?.viewCount || 0),\n                likes: parseInt(video.statistics?.likeCount || 0),\n                comments: parseInt(video.statistics?.commentCount || 0),\n            }));\n        } catch (error) {\n            console.error(\"Failed to get video details:\", error);\n            return [];\n        }\n    }\n}\n\n// Initialize YouTube API client (singleton pattern)\nif (!window.youtubeAPI) {\n    window.youtubeAPI = new YouTubeAPIClient();\n}\n","size_bytes":19670}}}