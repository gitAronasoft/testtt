{"file_contents":{"replit.md":{"content":"# VideoShare Platform\n\n## Overview\n\nVideoShare is a premium video-sharing platform that operates on a pay-per-view model. The platform allows content creators to upload and monetize their videos while viewers can discover and purchase access to premium content. The system features separate dashboards for creators and viewers, with built-in analytics, earnings tracking, and wallet functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (Code Structure Improved - August 8, 2025)\n\n✓ **Migration Status**: Successfully migrated from Replit Agent to Replit environment\n✓ **Runtime Environment**: Installed Python 3.11 for static server functionality  \n✓ **Navigation System**: Fixed authentication redirects to proper directory structure\n✓ **Asset Management**: Added SVG favicon and proper linking across all HTML files\n✓ **Static Server**: Configured and running on port 5000 with proper file serving\n✓ **Client Security**: Maintained proper client/server separation with CDN dependencies\n✓ **Dashboard Navigation**: Fixed menu links with proper data-section attributes\n✓ **JavaScript Functions**: Added missing handleRating and handleBookmark functions\n✓ **Logout System**: Updated logout functionality to work from dashboard subdirectories\n✓ **Code Structure**: Created centralized config.js for better maintainability\n✓ **Dashboard Sections**: Added all missing content sections for proper navigation\n✓ **Developer Experience**: Added comprehensive README.md and clear code organization\n✓ **Configuration Management**: Centralized all constants, routes, and settings\n\n## System Architecture\n\n### Frontend Architecture\nThe application uses a **multi-page HTML architecture** with shared JavaScript modules for common functionality. Each major user flow (authentication, creator dashboard, viewer dashboard) has dedicated HTML pages with corresponding JavaScript files for specialized functionality.\n\n**Key Design Decisions:**\n- **Bootstrap 5 Framework**: Chosen for responsive design and rapid UI development\n- **Vanilla JavaScript**: Used instead of heavy frameworks for better performance and simplicity\n- **Modular JavaScript Structure**: Separate files for authentication (`auth.js`), dashboard functionality (`dashboard.js`), and global features (`main.js`)\n- **CDN-Based Dependencies**: External libraries (Bootstrap, Font Awesome, Chart.js) loaded via CDN for faster initial development\n\n### Authentication System\nThe platform implements a **client-side authentication simulation** for development purposes, with demo accounts for testing different user roles.\n\n**Authentication Features:**\n- Role-based access (Creator vs Viewer)\n- Form validation with Bootstrap styling\n- Password recovery functionality\n- Session management simulation\n- Remember me functionality\n\n### Dashboard Architecture\nThe system provides **dual dashboard experiences** based on user roles:\n\n**Creator Dashboard:**\n- Video upload and management interface\n- Analytics charts using Chart.js\n- Earnings tracking and monetization metrics\n- Content performance analytics\n\n**Viewer Dashboard:**\n- Video discovery and browsing\n- Personal library management\n- Watch history tracking\n- Wallet and payment management\n\n### Data Management\nCurrently implements **client-side data simulation** for development, designed to be easily replaceable with backend API calls.\n\n**Data Structures:**\n- User profiles with role-based permissions\n- Video metadata and content management\n- Transaction and earnings tracking\n- View analytics and engagement metrics\n\n### User Experience Design\nThe platform prioritizes **responsive design** and **intuitive navigation** across all device types.\n\n**UI/UX Decisions:**\n- Consistent navigation pattern across all pages\n- Card-based layouts for content organization\n- Interactive charts for data visualization\n- Form validation with immediate feedback\n- Mobile-first responsive design approach\n\n## External Dependencies\n\n### Frontend Libraries\n- **Bootstrap 5.3.0**: UI framework for responsive design and components\n- **Font Awesome 6.0.0**: Icon library for consistent iconography\n- **Chart.js**: JavaScript charting library for analytics visualization\n\n### Development Tools\n- **CDN Delivery**: All external libraries loaded via CDN for rapid prototyping\n- **Vanilla JavaScript**: No additional build tools or transpilation required\n\n### Future Backend Integration Points\nThe frontend is structured to easily integrate with:\n- RESTful API endpoints for user authentication\n- File upload services for video content\n- Payment processing systems for monetization\n- Database systems for data persistence\n- Video streaming and transcoding services\n\n### Browser Compatibility\n- Modern browsers with ES6+ support\n- Mobile browsers for responsive functionality\n- Progressive enhancement for older browser fallbacks","size_bytes":4897},"assets/css/styles.css":{"content":"/* Custom Styles for VideoShare Platform */\n\n:root {\n    --primary-color: #0d6efd;\n    --secondary-color: #6c757d;\n    --success-color: #198754;\n    --warning-color: #ffc107;\n    --danger-color: #dc3545;\n    --info-color: #0dcaf0;\n    --light-color: #f8f9fa;\n    --dark-color: #212529;\n    --border-radius: 0.5rem;\n    --box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n    --box-shadow-lg: 0 1rem 3rem rgba(0, 0, 0, 0.175);\n}\n\n/* Global Styles */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    line-height: 1.6;\n}\n\n.btn {\n    border-radius: var(--border-radius);\n    font-weight: 500;\n    transition: all 0.3s ease;\n}\n\n.btn:hover {\n    transform: translateY(-1px);\n}\n\n.card {\n    border-radius: var(--border-radius);\n    border: none;\n    box-shadow: var(--box-shadow);\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--box-shadow-lg);\n}\n\n/* Navigation Styles */\n.navbar-brand {\n    font-size: 1.5rem;\n    font-weight: 700;\n}\n\n.navbar-nav .nav-link {\n    font-weight: 500;\n    transition: color 0.3s ease;\n}\n\n/* Hero Section */\n.hero-section {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #0056b3 100%);\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    padding-top: 80px;\n}\n\n.hero-video-placeholder {\n    position: relative;\n}\n\n.hero-video-placeholder::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 60px;\n    height: 60px;\n    background: rgba(255, 255, 255, 0.9);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 24px;\n    color: var(--primary-color);\n}\n\n/* Feature Icons */\n.feature-icon {\n    width: 60px;\n    height: 60px;\n    background: rgba(13, 110, 253, 0.1);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto;\n    font-size: 1.5rem;\n}\n\n/* Auth Pages */\n.auth-page {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n}\n\n.auth-section {\n    min-height: calc(100vh - 80px);\n    display: flex;\n    align-items: center;\n    padding: 2rem 0;\n}\n\n.auth-page .card {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.95);\n}\n\n/* Dashboard Styles */\n.dashboard-page {\n    background-color: #f8f9fa;\n}\n\n.sidebar {\n    min-height: calc(100vh - 56px);\n    box-shadow: 2px 0 4px rgba(0, 0, 0, 0.1);\n}\n\n.sidebar .nav-link {\n    color: var(--dark-color);\n    padding: 0.75rem 1rem;\n    border-radius: var(--border-radius);\n    margin-bottom: 0.25rem;\n    transition: all 0.3s ease;\n}\n\n.sidebar .nav-link:hover,\n.sidebar .nav-link.active {\n    background-color: var(--primary-color);\n    color: white;\n}\n\n.main-content {\n    padding: 0;\n    background: white;\n    min-height: calc(100vh - 56px);\n}\n\n.content-section {\n    min-height: calc(100vh - 56px);\n}\n\n/* Video Cards */\n.video-card {\n    overflow: hidden;\n    cursor: pointer;\n}\n\n.video-thumbnail {\n    position: relative;\n    overflow: hidden;\n}\n\n.video-thumbnail img {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    transition: transform 0.3s ease;\n}\n\n.video-card:hover .video-thumbnail img {\n    transform: scale(1.05);\n}\n\n.video-duration {\n    position: absolute;\n    bottom: 8px;\n    right: 8px;\n    background: rgba(0, 0, 0, 0.8);\n    color: white;\n    padding: 2px 6px;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    font-weight: 500;\n}\n\n.video-price {\n    position: absolute;\n    top: 8px;\n    right: 8px;\n    background: var(--warning-color);\n    color: var(--dark-color);\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    font-weight: 700;\n}\n\n.video-status {\n    position: absolute;\n    top: 8px;\n    left: 8px;\n    padding: 2px 6px;\n    border-radius: 4px;\n    font-size: 0.7rem;\n    font-weight: 600;\n    text-transform: uppercase;\n}\n\n.video-status.published {\n    background: var(--success-color);\n    color: white;\n}\n\n.video-status.draft {\n    background: var(--warning-color);\n    color: var(--dark-color);\n}\n\n.play-overlay {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 50px;\n    height: 50px;\n    background: rgba(255, 255, 255, 0.9);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.25rem;\n    color: var(--primary-color);\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n.video-card:hover .play-overlay {\n    opacity: 1;\n}\n\n/* Upload Area */\n.upload-area {\n    background: rgba(13, 110, 253, 0.05);\n    border-color: var(--primary-color) !important;\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.upload-area:hover {\n    background: rgba(13, 110, 253, 0.1);\n}\n\n.upload-area.dragover {\n    background: rgba(13, 110, 253, 0.15);\n    border-color: var(--primary-color) !important;\n}\n\n/* Timeline Styles */\n.timeline {\n    position: relative;\n    padding-left: 30px;\n}\n\n.timeline::before {\n    content: '';\n    position: absolute;\n    left: 10px;\n    top: 0;\n    bottom: 0;\n    width: 2px;\n    background: #e9ecef;\n}\n\n.timeline-item {\n    position: relative;\n    margin-bottom: 2rem;\n}\n\n.timeline-marker {\n    position: absolute;\n    left: -25px;\n    top: 5px;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    border: 3px solid white;\n    box-shadow: 0 0 0 2px #e9ecef;\n}\n\n.timeline-content {\n    background: white;\n    padding: 1rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n}\n\n/* Category Cards */\n.category-card {\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.category-card:hover {\n    background: var(--primary-color) !important;\n    color: white !important;\n    transform: translateY(-2px);\n}\n\n.category-card:hover i {\n    color: white !important;\n}\n\n/* Ratings */\n.rating .fas.fa-star {\n    color: #ffc107;\n}\n\n.rating .far.fa-star {\n    color: #dee2e6;\n}\n\n/* Video Thumbnails */\n.video-thumb-small {\n    width: 80px;\n    height: 60px;\n    overflow: hidden;\n    border-radius: 4px;\n    position: relative;\n}\n\n.video-thumb-small img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n\n.play-overlay-small {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 24px;\n    height: 24px;\n    background: rgba(255, 255, 255, 0.9);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 0.75rem;\n    color: var(--primary-color);\n}\n\n/* Transaction Items */\n.transaction-icon {\n    width: 40px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.transaction-item {\n    border-bottom: 1px solid #f8f9fa;\n}\n\n.transaction-item:last-child {\n    border-bottom: none;\n}\n\n/* Payment Methods */\n.payment-method {\n    transition: all 0.3s ease;\n}\n\n.payment-method:hover {\n    background: rgba(13, 110, 253, 0.05) !important;\n}\n\n/* Form Enhancements */\n.form-control:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);\n}\n\n.btn-check:checked + .btn-outline-primary {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n/* Responsive Adjustments */\n@media (max-width: 768px) {\n    .hero-section {\n        padding-top: 100px;\n        text-align: center;\n    }\n    \n    .sidebar {\n        min-height: auto;\n    }\n    \n    .main-content {\n        padding-top: 1rem;\n    }\n    \n    .video-thumbnail img {\n        height: 150px;\n    }\n    \n    .timeline {\n        padding-left: 20px;\n    }\n    \n    .timeline-marker {\n        left: -15px;\n        width: 15px;\n        height: 15px;\n    }\n}\n\n@media (max-width: 576px) {\n    .hero-section h1 {\n        font-size: 2rem;\n    }\n    \n    .auth-section {\n        padding: 1rem 0;\n    }\n    \n    .feature-icon {\n        width: 50px;\n        height: 50px;\n        font-size: 1.25rem;\n    }\n    \n    .video-card .card-body {\n        padding: 1rem 0.75rem;\n    }\n}\n\n/* Animation Classes */\n.fade-in {\n    animation: fadeIn 0.5s ease-in;\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Loading States */\n.loading {\n    position: relative;\n    overflow: hidden;\n}\n\n.loading::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);\n    animation: loading 1.5s infinite;\n}\n\n@keyframes loading {\n    0% {\n        left: -100%;\n    }\n    100% {\n        left: 100%;\n    }\n}\n\n/* Utility Classes */\n.text-shadow {\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\n}\n\n.bg-gradient-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #0056b3 100%);\n}\n\n.border-primary-light {\n    border-color: rgba(13, 110, 253, 0.3) !important;\n}\n\n.hover-shadow {\n    transition: box-shadow 0.3s ease;\n}\n\n.hover-shadow:hover {\n    box-shadow: var(--box-shadow-lg);\n}\n","size_bytes":9128},"assets/js/auth.js":{"content":"/**\n * Authentication JavaScript for VideoShare platform\n * Handles login, signup, forgot password, and form validation\n */\n\n// Authentication state\nlet authState = {\n    isLoading: false,\n    rememberMe: false,\n    currentForm: null\n};\n\n// Note: Demo accounts are now defined in config.js\n\n// Initialize authentication functionality\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeAuth();\n    setupFormValidation();\n    setupEventListeners();\n});\n\n/**\n * Initialize authentication system\n */\nfunction initializeAuth() {\n    console.log('Auth system initialized');\n    \n    // Check if user is already logged in\n    checkExistingSession();\n    \n    // Setup password visibility toggles\n    setupPasswordToggles();\n    \n    // Setup form submissions\n    setupFormSubmissions();\n    \n    // Load saved email if remember me was checked\n    loadSavedCredentials();\n}\n\n/**\n * Setup form validation\n */\nfunction setupFormValidation() {\n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach(form => {\n        // Add real-time validation\n        const inputs = form.querySelectorAll('input');\n        inputs.forEach(input => {\n            input.addEventListener('blur', () => validateField(input));\n            input.addEventListener('input', () => clearFieldError(input));\n        });\n    });\n}\n\n/**\n * Setup event listeners\n */\nfunction setupEventListeners() {\n    // Handle social login buttons\n    const socialButtons = document.querySelectorAll('.btn[onclick], .btn[data-provider]');\n    socialButtons.forEach(button => {\n        button.addEventListener('click', handleSocialLogin);\n    });\n    \n    // Handle role selection\n    const roleInputs = document.querySelectorAll('input[name=\"userRole\"]');\n    roleInputs.forEach(input => {\n        input.addEventListener('change', handleRoleSelection);\n    });\n    \n    // Handle terms and conditions\n    const termsCheckbox = document.getElementById('agreeTerms');\n    if (termsCheckbox) {\n        termsCheckbox.addEventListener('change', handleTermsChange);\n    }\n    \n    // Handle remember me\n    const rememberCheckbox = document.getElementById('rememberMe');\n    if (rememberCheckbox) {\n        rememberCheckbox.addEventListener('change', (e) => {\n            authState.rememberMe = e.target.checked;\n        });\n    }\n}\n\n/**\n * Setup password visibility toggles\n */\nfunction setupPasswordToggles() {\n    const toggleButtons = document.querySelectorAll('#togglePassword, #toggleLoginPassword');\n    \n    toggleButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const targetId = this.id === 'togglePassword' ? 'password' : 'loginPassword';\n            const passwordInput = document.getElementById(targetId);\n            const icon = this.querySelector('i');\n            \n            if (passwordInput.type === 'password') {\n                passwordInput.type = 'text';\n                icon.classList.remove('fa-eye');\n                icon.classList.add('fa-eye-slash');\n            } else {\n                passwordInput.type = 'password';\n                icon.classList.remove('fa-eye-slash');\n                icon.classList.add('fa-eye');\n            }\n        });\n    });\n}\n\n/**\n * Setup form submissions\n */\nfunction setupFormSubmissions() {\n    // Signup form\n    const signupForm = document.getElementById('signupForm');\n    if (signupForm) {\n        signupForm.addEventListener('submit', handleSignup);\n    }\n    \n    // Login form\n    const loginForm = document.getElementById('loginForm');\n    if (loginForm) {\n        loginForm.addEventListener('submit', handleLogin);\n    }\n    \n    // Forgot password form\n    const forgotPasswordForm = document.getElementById('forgotPasswordForm');\n    if (forgotPasswordForm) {\n        forgotPasswordForm.addEventListener('submit', handleForgotPassword);\n    }\n}\n\n/**\n * Handle signup form submission\n */\nasync function handleSignup(e) {\n    e.preventDefault();\n    \n    if (authState.isLoading) return;\n    \n    const form = e.target;\n    authState.currentForm = form;\n    \n    // Validate form\n    if (!validateSignupForm(form)) {\n        return;\n    }\n    \n    // Get form data\n    const formData = getFormData(form);\n    \n    // Show loading state\n    setLoadingState(true);\n    \n    try {\n        // Simulate API call\n        await simulateSignup(formData);\n        \n        // Show success message\n        showAlert('Account created successfully! Redirecting to dashboard...', 'success');\n        \n        // Redirect to appropriate dashboard\n        setTimeout(() => {\n            window.location.href = getDashboardUrl(formData.userRole);\n        }, CONFIG.UI.LOADING_TIMEOUT);\n        \n    } catch (error) {\n        showAlert(error.message, 'danger');\n    } finally {\n        setLoadingState(false);\n    }\n}\n\n/**\n * Handle login form submission\n */\nasync function handleLogin(e) {\n    e.preventDefault();\n    \n    if (authState.isLoading) return;\n    \n    const form = e.target;\n    authState.currentForm = form;\n    \n    // Validate form\n    if (!validateLoginForm(form)) {\n        return;\n    }\n    \n    // Get form data\n    const email = document.getElementById('loginEmail').value;\n    const password = document.getElementById('loginPassword').value;\n    \n    // Show loading state\n    setLoadingState(true);\n    \n    try {\n        // Simulate API call\n        const user = await simulateLogin(email, password);\n        \n        // Save session\n        saveSession(user);\n        \n        // Show success message\n        showAlert('Login successful! Redirecting...', 'success');\n        \n        // Redirect to appropriate dashboard  \n        setTimeout(() => {\n            window.location.href = getDashboardUrl(user.role);\n        }, CONFIG.UI.REDIRECT_DELAY);\n        \n    } catch (error) {\n        showLoginError(error.message);\n    } finally {\n        setLoadingState(false);\n    }\n}\n\n/**\n * Handle forgot password form submission\n */\nasync function handleForgotPassword(e) {\n    e.preventDefault();\n    \n    if (authState.isLoading) return;\n    \n    const form = e.target;\n    const email = document.getElementById('resetEmail').value;\n    \n    // Validate email\n    if (!isValidEmail(email)) {\n        showError('Please enter a valid email address.');\n        return;\n    }\n    \n    // Show loading state\n    setLoadingState(true);\n    \n    try {\n        // Simulate API call\n        await simulateForgotPassword(email);\n        \n        // Show success message\n        showSuccess('Password reset link has been sent to your email address.');\n        \n        // Hide form and show success state\n        form.style.display = 'none';\n        \n    } catch (error) {\n        showError(error.message);\n    } finally {\n        setLoadingState(false);\n    }\n}\n\n/**\n * Validate signup form\n */\nfunction validateSignupForm(form) {\n    let isValid = true;\n    \n    // Get form elements\n    const fullName = document.getElementById('fullName');\n    const email = document.getElementById('email');\n    const password = document.getElementById('password');\n    const confirmPassword = document.getElementById('confirmPassword');\n    const userRole = document.querySelector('input[name=\"userRole\"]:checked');\n    const agreeTerms = document.getElementById('agreeTerms');\n    \n    // Validate full name\n    if (!fullName.value.trim()) {\n        setFieldError(fullName, 'Please enter your full name.');\n        isValid = false;\n    } else if (fullName.value.trim().length < 2) {\n        setFieldError(fullName, 'Name must be at least 2 characters long.');\n        isValid = false;\n    }\n    \n    // Validate email\n    if (!email.value.trim()) {\n        setFieldError(email, 'Please enter your email address.');\n        isValid = false;\n    } else if (!isValidEmail(email.value)) {\n        setFieldError(email, 'Please enter a valid email address.');\n        isValid = false;\n    }\n    \n    // Validate password\n    if (!password.value) {\n        setFieldError(password, 'Please enter a password.');\n        isValid = false;\n    } else if (!isValidPassword(password.value)) {\n        setFieldError(password, 'Password must be at least 8 characters with numbers and special characters.');\n        isValid = false;\n    }\n    \n    // Validate confirm password\n    if (!confirmPassword.value) {\n        setFieldError(confirmPassword, 'Please confirm your password.');\n        isValid = false;\n    } else if (password.value !== confirmPassword.value) {\n        setFieldError(confirmPassword, 'Passwords do not match.');\n        isValid = false;\n    }\n    \n    // Validate user role\n    if (!userRole) {\n        const roleContainer = document.querySelector('.row.g-2');\n        showFieldError(roleContainer, 'Please select your role.');\n        isValid = false;\n    }\n    \n    // Validate terms agreement\n    if (!agreeTerms.checked) {\n        setFieldError(agreeTerms, 'You must agree to the terms and conditions.');\n        isValid = false;\n    }\n    \n    return isValid;\n}\n\n/**\n * Validate login form\n */\nfunction validateLoginForm(form) {\n    let isValid = true;\n    \n    const email = document.getElementById('loginEmail');\n    const password = document.getElementById('loginPassword');\n    \n    // Validate email\n    if (!email.value.trim()) {\n        setFieldError(email, 'Please enter your email address.');\n        isValid = false;\n    } else if (!isValidEmail(email.value)) {\n        setFieldError(email, 'Please enter a valid email address.');\n        isValid = false;\n    }\n    \n    // Validate password\n    if (!password.value) {\n        setFieldError(password, 'Please enter your password.');\n        isValid = false;\n    }\n    \n    return isValid;\n}\n\n/**\n * Validate individual field\n */\nfunction validateField(field) {\n    const value = field.value.trim();\n    const type = field.type;\n    const id = field.id;\n    \n    clearFieldError(field);\n    \n    switch (id) {\n        case 'fullName':\n            if (!value) {\n                setFieldError(field, 'Please enter your full name.');\n            } else if (value.length < 2) {\n                setFieldError(field, 'Name must be at least 2 characters long.');\n            }\n            break;\n            \n        case 'email':\n        case 'loginEmail':\n        case 'resetEmail':\n            if (!value) {\n                setFieldError(field, 'Please enter your email address.');\n            } else if (!isValidEmail(value)) {\n                setFieldError(field, 'Please enter a valid email address.');\n            }\n            break;\n            \n        case 'password':\n        case 'loginPassword':\n            if (!value) {\n                setFieldError(field, 'Please enter a password.');\n            } else if (id === 'password' && !isValidPassword(value)) {\n                setFieldError(field, 'Password must be at least 8 characters with numbers and special characters.');\n            }\n            break;\n            \n        case 'confirmPassword':\n            const password = document.getElementById('password').value;\n            if (!value) {\n                setFieldError(field, 'Please confirm your password.');\n            } else if (value !== password) {\n                setFieldError(field, 'Passwords do not match.');\n            }\n            break;\n    }\n}\n\n/**\n * Set field error\n */\nfunction setFieldError(field, message) {\n    field.classList.add('is-invalid');\n    field.classList.remove('is-valid');\n    \n    let feedback = field.parentElement.querySelector('.invalid-feedback');\n    if (feedback) {\n        feedback.textContent = message;\n    }\n}\n\n/**\n * Clear field error\n */\nfunction clearFieldError(field) {\n    field.classList.remove('is-invalid');\n    \n    if (field.value.trim()) {\n        field.classList.add('is-valid');\n    } else {\n        field.classList.remove('is-valid');\n    }\n}\n\n/**\n * Show field error for custom elements\n */\nfunction showFieldError(element, message) {\n    let feedback = element.querySelector('.invalid-feedback') || \n                  element.parentElement.querySelector('.invalid-feedback');\n    \n    if (feedback) {\n        feedback.textContent = message;\n        feedback.style.display = 'block';\n    }\n}\n\n/**\n * Get form data\n */\nfunction getFormData(form) {\n    const formData = new FormData(form);\n    const data = {};\n    \n    for (let [key, value] of formData.entries()) {\n        data[key] = value;\n    }\n    \n    return data;\n}\n\n/**\n * Simulate signup API call\n */\nasync function simulateSignup(userData) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            // Check if email already exists\n            if (CONFIG.DEMO_ACCOUNTS[userData.email]) {\n                reject(new Error('An account with this email already exists.'));\n                return;\n            }\n            \n            // Create new user\n            const newUser = {\n                id: 'user_' + Date.now(),\n                name: userData.fullName,\n                email: userData.email,\n                role: userData.userRole,\n                createdAt: new Date().toISOString()\n            };\n            \n            resolve(newUser);\n        }, 1500);\n    });\n}\n\n/**\n * Simulate login API call\n */\nasync function simulateLogin(email, password) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const account = CONFIG.DEMO_ACCOUNTS[email];\n            \n            if (!account) {\n                reject(new Error('No account found with this email address.'));\n                return;\n            }\n            \n            if (account.password !== password) {\n                reject(new Error('Incorrect password. Please try again.'));\n                return;\n            }\n            \n            // Return user data\n            resolve({\n                id: account.id,\n                name: account.name,\n                email: email,\n                role: account.role,\n                loginTime: new Date().toISOString()\n            });\n        }, 1000);\n    });\n}\n\n/**\n * Simulate forgot password API call\n */\nasync function simulateForgotPassword(email) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            if (!isValidEmail(email)) {\n                reject(new Error('Please enter a valid email address.'));\n                return;\n            }\n            \n            // Simulate successful reset request\n            resolve({ message: 'Password reset email sent successfully.' });\n        }, 1500);\n    });\n}\n\n/**\n * Handle social login\n */\nfunction handleSocialLogin(e) {\n    e.preventDefault();\n    \n    const provider = e.target.textContent.includes('Google') ? 'google' : 'unknown';\n    \n    showAlert(`${provider} login will be implemented when backend is ready.`, 'info');\n}\n\n/**\n * Handle role selection\n */\nfunction handleRoleSelection(e) {\n    const selectedRole = e.target.value;\n    \n    // Clear any previous role errors\n    const roleContainer = document.querySelector('.row.g-2');\n    const feedback = roleContainer.querySelector('.invalid-feedback');\n    if (feedback) {\n        feedback.style.display = 'none';\n    }\n    \n    // Update UI based on selected role\n    updateRoleUI(selectedRole);\n}\n\n/**\n * Update UI based on selected role\n */\nfunction updateRoleUI(role) {\n    const creatorInfo = document.querySelector('.creator-info');\n    const viewerInfo = document.querySelector('.viewer-info');\n    \n    if (creatorInfo) {\n        creatorInfo.style.display = role === 'creator' ? 'block' : 'none';\n    }\n    \n    if (viewerInfo) {\n        viewerInfo.style.display = role === 'viewer' ? 'block' : 'none';\n    }\n}\n\n/**\n * Handle terms change\n */\nfunction handleTermsChange(e) {\n    const submitButton = document.querySelector('button[type=\"submit\"]');\n    if (submitButton) {\n        submitButton.disabled = !e.target.checked;\n    }\n}\n\n/**\n * Save user session\n */\nfunction saveSession(user) {\n    const sessionData = {\n        user: user,\n        token: 'demo_token_' + Date.now(),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 hours\n    };\n    \n    localStorage.setItem(CONFIG.STORAGE.USER, JSON.stringify(user));\n    localStorage.setItem(CONFIG.STORAGE.TOKEN, sessionData.token);\n    localStorage.setItem(CONFIG.STORAGE.SESSION, JSON.stringify(sessionData));\n    \n    // Save email if remember me is checked\n    if (authState.rememberMe) {\n        localStorage.setItem('videoShareEmail', user.email);\n    }\n}\n\n/**\n * Check existing session\n */\nfunction checkExistingSession() {\n    const sessionData = localStorage.getItem(CONFIG.STORAGE.SESSION);\n    \n    if (sessionData) {\n        try {\n            const session = JSON.parse(sessionData);\n            const now = new Date();\n            const expiresAt = new Date(session.expiresAt);\n            \n            if (now < expiresAt) {\n                // Session is still valid, redirect to dashboard\n                const user = JSON.parse(localStorage.getItem(CONFIG.STORAGE.USER));\n                if (user) {\n                    const dashboardUrl = getDashboardUrl(user.role);\n                    \n                    // Only redirect if not already on a dashboard page\n                    if (!window.location.pathname.includes('dashboard')) {\n                        window.location.href = dashboardUrl;\n                    }\n                }\n            } else {\n                // Session expired, clear data\n                clearSession();\n            }\n        } catch (error) {\n            console.error('Error parsing session data:', error);\n            clearSession();\n        }\n    }\n}\n\n/**\n * Load saved credentials\n */\nfunction loadSavedCredentials() {\n    const savedEmail = localStorage.getItem('videoShareEmail');\n    const emailInput = document.getElementById('loginEmail');\n    const rememberCheckbox = document.getElementById('rememberMe');\n    \n    if (savedEmail && emailInput) {\n        emailInput.value = savedEmail;\n        if (rememberCheckbox) {\n            rememberCheckbox.checked = true;\n            authState.rememberMe = true;\n        }\n    }\n}\n\n/**\n * Clear session data\n */\nfunction clearSession() {\n    localStorage.removeItem(CONFIG.STORAGE.USER);\n    localStorage.removeItem(CONFIG.STORAGE.TOKEN);\n    localStorage.removeItem(CONFIG.STORAGE.SESSION);\n}\n\n/**\n * Set loading state\n */\nfunction setLoadingState(isLoading) {\n    authState.isLoading = isLoading;\n    \n    if (!authState.currentForm) return;\n    \n    const submitButton = authState.currentForm.querySelector('button[type=\"submit\"]');\n    if (!submitButton) return;\n    \n    if (isLoading) {\n        submitButton.disabled = true;\n        submitButton.dataset.originalText = submitButton.textContent;\n        submitButton.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Please wait...';\n    } else {\n        submitButton.disabled = false;\n        submitButton.textContent = submitButton.dataset.originalText || 'Submit';\n    }\n}\n\n/**\n * Show login error\n */\nfunction showLoginError(message) {\n    const alertElement = document.getElementById('loginAlert');\n    const messageElement = document.getElementById('loginAlertMessage');\n    \n    if (alertElement && messageElement) {\n        messageElement.textContent = message;\n        alertElement.classList.remove('d-none');\n        \n        // Auto hide after 5 seconds\n        setTimeout(() => {\n            alertElement.classList.add('d-none');\n        }, 5000);\n    } else {\n        showAlert(message, 'danger');\n    }\n}\n\n/**\n * Show success message\n */\nfunction showSuccess(message) {\n    const successElement = document.getElementById('successMessage');\n    if (successElement) {\n        successElement.textContent = message;\n        successElement.classList.remove('d-none');\n    } else {\n        showAlert(message, 'success');\n    }\n}\n\n/**\n * Show error message\n */\nfunction showError(message) {\n    const errorElement = document.getElementById('errorMessage');\n    const errorText = document.getElementById('errorText');\n    \n    if (errorElement && errorText) {\n        errorText.textContent = message;\n        errorElement.classList.remove('d-none');\n    } else {\n        showAlert(message, 'danger');\n    }\n}\n\n/**\n * Show alert message\n */\nfunction showAlert(message, type = 'info') {\n    const alertElement = document.createElement('div');\n    alertElement.className = `alert alert-${type} alert-dismissible fade show position-fixed`;\n    alertElement.style.cssText = `\n        top: 20px;\n        right: 20px;\n        z-index: 9999;\n        min-width: 300px;\n        max-width: 400px;\n    `;\n    \n    alertElement.innerHTML = `\n        <i class=\"fas fa-${getAlertIcon(type)} me-2\"></i>\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    document.body.appendChild(alertElement);\n    \n    // Auto dismiss after 5 seconds\n    setTimeout(() => {\n        if (alertElement.parentElement) {\n            alertElement.remove();\n        }\n    }, 5000);\n}\n\n/**\n * Get alert icon based on type\n */\nfunction getAlertIcon(type) {\n    const icons = {\n        success: 'check-circle',\n        danger: 'exclamation-circle',\n        warning: 'exclamation-triangle',\n        info: 'info-circle'\n    };\n    return icons[type] || 'info-circle';\n}\n\n/**\n * Validate email format\n */\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\n/**\n * Validate password strength\n */\nfunction isValidPassword(password) {\n    // At least 8 characters, contains numbers and special characters\n    const minLength = password.length >= 8;\n    const hasNumbers = /\\d/.test(password);\n    const hasSpecialChars = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n    \n    return minLength && hasNumbers && hasSpecialChars;\n}\n\n// Export functions for testing\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = {\n        isValidEmail,\n        isValidPassword,\n        validateSignupForm,\n        validateLoginForm\n    };\n}\n","size_bytes":21938},"assets/js/dashboard.js":{"content":"/**\n * Dashboard JavaScript for VideoShare platform\n * Handles both creator and viewer dashboard functionality\n */\n\n// Dashboard state\nlet dashboardState = {\n    currentSection: 'dashboard',\n    currentUser: null,\n    isCreator: false,\n    charts: {},\n    videos: [],\n    transactions: []\n};\n\n// Initialize dashboard\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeDashboard();\n    setupNavigation();\n    setupEventListeners();\n    loadDashboardData();\n});\n\n/**\n * Initialize dashboard functionality\n */\nfunction initializeDashboard() {\n    console.log('Dashboard initialized');\n    \n    // Get current user\n    getCurrentUser();\n    \n    // Determine dashboard type\n    const isCreatorDashboard = window.location.pathname.includes('creator-dashboard');\n    dashboardState.isCreator = isCreatorDashboard;\n    \n    // Initialize charts if on creator dashboard\n    if (isCreatorDashboard && typeof Chart !== 'undefined') {\n        initializeCharts();\n    }\n    \n    // Setup file upload if present\n    setupFileUpload();\n    \n    // Setup video interactions\n    setupVideoInteractions();\n    \n    // Setup wallet functionality\n    setupWalletFunctionality();\n}\n\n/**\n * Get current user from session\n */\nfunction getCurrentUser() {\n    try {\n        const userData = localStorage.getItem('videoShareUser');\n        if (userData) {\n            dashboardState.currentUser = JSON.parse(userData);\n        } else {\n            // Redirect to login if no user found\n            window.location.href = '../login.html';\n        }\n    } catch (error) {\n        console.error('Error getting user data:', error);\n        window.location.href = '../login.html';\n    }\n}\n\n/**\n * Setup navigation between dashboard sections\n */\nfunction setupNavigation() {\n    const navLinks = document.querySelectorAll('[data-section]');\n    \n    navLinks.forEach(link => {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            \n            const targetSection = this.getAttribute('data-section');\n            switchSection(targetSection);\n            \n            // Update active states\n            updateActiveNavigation(this);\n        });\n    });\n    \n    // Handle hash navigation\n    window.addEventListener('hashchange', handleHashChange);\n    \n    // Check initial hash\n    if (window.location.hash) {\n        handleHashChange();\n    }\n}\n\n/**\n * Switch dashboard sections\n */\nfunction switchSection(sectionName) {\n    // Hide all sections\n    const sections = document.querySelectorAll('.content-section');\n    sections.forEach(section => {\n        section.classList.add('d-none');\n    });\n    \n    // Show target section\n    const targetSection = document.getElementById(`${sectionName}-section`);\n    if (targetSection) {\n        targetSection.classList.remove('d-none');\n        dashboardState.currentSection = sectionName;\n        \n        // Update URL hash\n        window.location.hash = sectionName;\n        \n        // Load section-specific data\n        loadSectionData(sectionName);\n    }\n}\n\n/**\n * Update active navigation\n */\nfunction updateActiveNavigation(activeLink) {\n    // Remove active class from all nav links\n    const navLinks = document.querySelectorAll('.nav-link, .navbar-nav .nav-link');\n    navLinks.forEach(link => {\n        link.classList.remove('active');\n    });\n    \n    // Add active class to clicked link and corresponding sidebar link\n    activeLink.classList.add('active');\n    \n    const sectionName = activeLink.getAttribute('data-section');\n    const sidebarLink = document.querySelector(`.sidebar [data-section=\"${sectionName}\"]`);\n    if (sidebarLink) {\n        sidebarLink.classList.add('active');\n    }\n}\n\n/**\n * Handle hash change navigation\n */\nfunction handleHashChange() {\n    const hash = window.location.hash.substring(1);\n    if (hash) {\n        switchSection(hash);\n        \n        // Update navigation\n        const navLink = document.querySelector(`[data-section=\"${hash}\"]`);\n        if (navLink) {\n            updateActiveNavigation(navLink);\n        }\n    }\n}\n\n/**\n * Setup event listeners\n */\nfunction setupEventListeners() {\n    // Handle logout\n    const logoutLinks = document.querySelectorAll('.logout-link');\n    logoutLinks.forEach(link => {\n        link.addEventListener('click', handleLogout);\n    });\n    \n    // Handle video card clicks\n    const videoCards = document.querySelectorAll('.video-card');\n    videoCards.forEach(card => {\n        card.addEventListener('click', handleVideoCardClick);\n    });\n    \n    // Handle category clicks\n    const categoryCards = document.querySelectorAll('.category-card');\n    categoryCards.forEach(card => {\n        card.addEventListener('click', handleCategoryClick);\n    });\n    \n    // Handle search\n    const searchForm = document.querySelector('form.d-flex');\n    if (searchForm) {\n        searchForm.addEventListener('submit', handleSearch);\n    }\n    \n    // Handle wallet actions\n    const walletButtons = document.querySelectorAll('.btn[data-amount]');\n    walletButtons.forEach(button => {\n        button.addEventListener('click', handleWalletTopup);\n    });\n    \n    // Handle filter dropdowns\n    const filterDropdowns = document.querySelectorAll('.dropdown-menu a');\n    filterDropdowns.forEach(item => {\n        item.addEventListener('click', handleFilterChange);\n    });\n}\n\n/**\n * Initialize charts for creator dashboard\n */\nfunction initializeCharts() {\n    // Views Chart\n    const viewsChartCanvas = document.getElementById('viewsChart');\n    if (viewsChartCanvas) {\n        dashboardState.charts.views = new Chart(viewsChartCanvas, {\n            type: 'line',\n            data: {\n                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                datasets: [{\n                    label: 'Views',\n                    data: [1200, 1900, 3000, 2500, 4200, 3800],\n                    borderColor: '#0d6efd',\n                    backgroundColor: 'rgba(13, 110, 253, 0.1)',\n                    fill: true,\n                    tension: 0.4\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        grid: {\n                            color: 'rgba(0, 0, 0, 0.05)'\n                        }\n                    },\n                    x: {\n                        grid: {\n                            display: false\n                        }\n                    }\n                }\n            }\n        });\n    }\n    \n    // Categories Chart\n    const categoriesChartCanvas = document.getElementById('categoriesChart');\n    if (categoriesChartCanvas) {\n        dashboardState.charts.categories = new Chart(categoriesChartCanvas, {\n            type: 'doughnut',\n            data: {\n                labels: ['Education', 'Entertainment', 'Technology', 'Sports'],\n                datasets: [{\n                    data: [45, 25, 20, 10],\n                    backgroundColor: [\n                        '#0d6efd',\n                        '#198754',\n                        '#ffc107',\n                        '#dc3545'\n                    ],\n                    borderWidth: 0\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom',\n                        labels: {\n                            padding: 20,\n                            usePointStyle: true\n                        }\n                    }\n                }\n            }\n        });\n    }\n}\n\n/**\n * Setup file upload functionality\n */\nfunction setupFileUpload() {\n    const uploadArea = document.getElementById('uploadArea');\n    const fileInput = document.getElementById('videoFile');\n    const uploadForm = document.getElementById('uploadForm');\n    \n    if (!uploadArea || !fileInput) return;\n    \n    // Handle drag and drop\n    uploadArea.addEventListener('dragover', function(e) {\n        e.preventDefault();\n        this.classList.add('dragover');\n    });\n    \n    uploadArea.addEventListener('dragleave', function(e) {\n        e.preventDefault();\n        this.classList.remove('dragover');\n    });\n    \n    uploadArea.addEventListener('drop', function(e) {\n        e.preventDefault();\n        this.classList.remove('dragover');\n        \n        const files = e.dataTransfer.files;\n        if (files.length > 0 && files[0].type.startsWith('video/')) {\n            fileInput.files = files;\n            handleFileSelection(files[0]);\n        }\n    });\n    \n    // Handle file input change\n    fileInput.addEventListener('change', function(e) {\n        if (e.target.files.length > 0) {\n            handleFileSelection(e.target.files[0]);\n        }\n    });\n    \n    // Handle form submission\n    if (uploadForm) {\n        uploadForm.addEventListener('submit', handleVideoUpload);\n    }\n}\n\n/**\n * Handle file selection\n */\nfunction handleFileSelection(file) {\n    const uploadArea = document.getElementById('uploadArea');\n    const progressContainer = document.getElementById('uploadProgress');\n    \n    // Validate file\n    if (!file.type.startsWith('video/')) {\n        showAlert('Please select a valid video file.', 'danger');\n        return;\n    }\n    \n    if (file.size > 2 * 1024 * 1024 * 1024) { // 2GB\n        showAlert('File size must be less than 2GB.', 'danger');\n        return;\n    }\n    \n    // Update UI\n    uploadArea.innerHTML = `\n        <div class=\"d-flex align-items-center\">\n            <i class=\"fas fa-video fa-2x text-primary me-3\"></i>\n            <div>\n                <h6 class=\"mb-1\">${file.name}</h6>\n                <small class=\"text-muted\">${formatFileSize(file.size)}</small>\n            </div>\n        </div>\n    `;\n    \n    // Show progress container\n    if (progressContainer) {\n        progressContainer.classList.remove('d-none');\n        simulateUploadProgress();\n    }\n}\n\n/**\n * Simulate upload progress\n */\nfunction simulateUploadProgress() {\n    const progressBar = document.querySelector('#uploadProgress .progress-bar');\n    if (!progressBar) return;\n    \n    let progress = 0;\n    const interval = setInterval(() => {\n        progress += Math.random() * 10;\n        if (progress > 100) progress = 100;\n        \n        progressBar.style.width = `${progress}%`;\n        progressBar.textContent = `${Math.round(progress)}%`;\n        \n        if (progress >= 100) {\n            clearInterval(interval);\n            setTimeout(() => {\n                document.getElementById('uploadProgress').classList.add('d-none');\n                showAlert('Video uploaded successfully!', 'success');\n            }, 500);\n        }\n    }, 200);\n}\n\n/**\n * Handle video upload\n */\nfunction handleVideoUpload(e) {\n    e.preventDefault();\n    \n    const form = e.target;\n    const formData = new FormData(form);\n    \n    // Validate form\n    if (!validateUploadForm(form)) {\n        return;\n    }\n    \n    // Show loading state\n    const submitButton = form.querySelector('button[type=\"submit\"]');\n    addLoadingState(submitButton, 'Uploading...');\n    \n    // Simulate upload process\n    setTimeout(() => {\n        showAlert('Video uploaded and is being processed!', 'success');\n        removeLoadingState(submitButton);\n        \n        // Reset form\n        form.reset();\n        resetUploadArea();\n        \n        // Switch to videos section\n        switchSection('videos');\n    }, 3000);\n}\n\n/**\n * Validate upload form\n */\nfunction validateUploadForm(form) {\n    const fileInput = document.getElementById('videoFile');\n    const title = document.getElementById('videoTitle');\n    const category = document.getElementById('videoCategory');\n    const price = document.getElementById('videoPrice');\n    \n    let isValid = true;\n    \n    if (!fileInput.files.length) {\n        showAlert('Please select a video file to upload.', 'danger');\n        isValid = false;\n    }\n    \n    if (!title.value.trim()) {\n        setFieldError(title, 'Please enter a video title.');\n        isValid = false;\n    }\n    \n    if (!category.value) {\n        setFieldError(category, 'Please select a category.');\n        isValid = false;\n    }\n    \n    if (!price.value || parseFloat(price.value) <= 0) {\n        setFieldError(price, 'Please enter a valid price.');\n        isValid = false;\n    }\n    \n    return isValid;\n}\n\n/**\n * Reset upload area\n */\nfunction resetUploadArea() {\n    const uploadArea = document.getElementById('uploadArea');\n    if (uploadArea) {\n        uploadArea.innerHTML = `\n            <i class=\"fas fa-cloud-upload-alt text-muted fa-3x mb-3\"></i>\n            <p class=\"mb-2\">Drag and drop your video file here, or click to browse</p>\n            <p class=\"text-muted small mb-3\">Supported formats: MP4, AVI, MOV (Max: 2GB)</p>\n            <button type=\"button\" class=\"btn btn-outline-primary\" onclick=\"document.getElementById('videoFile').click()\">\n                Choose File\n            </button>\n        `;\n    }\n}\n\n/**\n * Setup video interactions\n */\nfunction setupVideoInteractions() {\n    // Handle video play buttons\n    const playButtons = document.querySelectorAll('.btn[data-bs-target=\"#videoModal\"]');\n    playButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const videoTitle = this.closest('.card').querySelector('.card-title').textContent;\n            openVideoModal(videoTitle);\n        });\n    });\n    \n    // Handle bookmark buttons\n    const bookmarkButtons = document.querySelectorAll('.btn-bookmark');\n    bookmarkButtons.forEach(button => {\n        button.addEventListener('click', handleBookmark);\n    });\n    \n    // Handle rating interactions\n    const ratingStars = document.querySelectorAll('.rating .fa-star');\n    ratingStars.forEach(star => {\n        star.addEventListener('click', handleRating);\n    });\n}\n\n/**\n * Handle video card clicks\n */\nfunction handleVideoCardClick(e) {\n    // Don't trigger if clicking on buttons\n    if (e.target.closest('button') || e.target.closest('.btn')) {\n        return;\n    }\n    \n    const card = e.currentTarget;\n    const title = card.querySelector('.card-title').textContent;\n    const price = card.querySelector('.video-price')?.textContent || 'Free';\n    \n    // For viewer dashboard, show purchase modal\n    if (!dashboardState.isCreator) {\n        showPurchaseModal(title, price);\n    } else {\n        // For creator dashboard, show video details\n        showVideoDetails(title);\n    }\n}\n\n/**\n * Show purchase modal\n */\nfunction showPurchaseModal(title, price) {\n    const modalHTML = `\n        <div class=\"modal fade\" id=\"purchaseModal\" tabindex=\"-1\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">Purchase Video</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <h6>${title}</h6>\n                        <p class=\"text-muted\">Price: ${price}</p>\n                        <p>Are you sure you want to purchase this video?</p>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                        <button type=\"button\" class=\"btn btn-primary\" onclick=\"processPurchase('${title}', '${price}')\">\n                            Purchase Now\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    // Remove existing modal\n    const existingModal = document.getElementById('purchaseModal');\n    if (existingModal) {\n        existingModal.remove();\n    }\n    \n    // Add new modal\n    document.body.insertAdjacentHTML('beforeend', modalHTML);\n    \n    // Show modal\n    const modal = new bootstrap.Modal(document.getElementById('purchaseModal'));\n    modal.show();\n}\n\n/**\n * Process video purchase\n */\nfunction processPurchase(title, price) {\n    // Close modal\n    const modal = bootstrap.Modal.getInstance(document.getElementById('purchaseModal'));\n    modal.hide();\n    \n    // Show loading\n    showAlert('Processing purchase...', 'info');\n    \n    // Simulate purchase process\n    setTimeout(() => {\n        showAlert(`Successfully purchased \"${title}\" for ${price}!`, 'success');\n        \n        // Open video modal\n        setTimeout(() => {\n            openVideoModal(title);\n        }, 1000);\n    }, 2000);\n}\n\n/**\n * Open video modal\n */\nfunction openVideoModal(title) {\n    const videoModal = document.getElementById('videoModal');\n    if (videoModal) {\n        const modalTitle = videoModal.querySelector('.modal-title');\n        if (modalTitle) {\n            modalTitle.textContent = title;\n        }\n        \n        const modal = new bootstrap.Modal(videoModal);\n        modal.show();\n    }\n}\n\n/**\n * Handle category clicks\n */\nfunction handleCategoryClick(e) {\n    const category = e.currentTarget;\n    const categoryName = category.querySelector('h6').textContent;\n    \n    showAlert(`Browsing ${categoryName} videos...`, 'info');\n    \n    // Here you would typically filter videos by category\n    // For now, just show a message\n}\n\n/**\n * Handle search\n */\nfunction handleSearch(e) {\n    e.preventDefault();\n    \n    const searchInput = e.target.querySelector('input[type=\"search\"]');\n    const query = searchInput.value.trim();\n    \n    if (query) {\n        showAlert(`Searching for \"${query}\"...`, 'info');\n        // Here you would typically perform the search\n    }\n}\n\n/**\n * Setup wallet functionality\n */\nfunction setupWalletFunctionality() {\n    // Handle add funds buttons\n    const addFundsButtons = document.querySelectorAll('.btn[data-amount]');\n    addFundsButtons.forEach(button => {\n        if (button.textContent.includes('Add $')) {\n            button.addEventListener('click', function() {\n                const amount = this.textContent.match(/\\$(\\d+)/)?.[1] || '25';\n                handleWalletTopup({ target: { dataset: { amount } } });\n            });\n        }\n    });\n}\n\n/**\n * Handle wallet top-up\n */\nfunction handleWalletTopup(e) {\n    const amount = e.target.dataset.amount || '25';\n    \n    showAlert(`Processing $${amount} top-up...`, 'info');\n    \n    // Simulate payment processing\n    setTimeout(() => {\n        showAlert(`Successfully added $${amount} to your wallet!`, 'success');\n        \n        // Update wallet balance (for demo)\n        updateWalletBalance(amount);\n    }, 2000);\n}\n\n/**\n * Update wallet balance\n */\nfunction updateWalletBalance(addedAmount) {\n    const balanceElements = document.querySelectorAll('h2, h5, .wallet-balance');\n    balanceElements.forEach(element => {\n        if (element.textContent.includes('$')) {\n            const currentBalance = parseFloat(element.textContent.replace('$', '')) || 0;\n            const newBalance = currentBalance + parseFloat(addedAmount);\n            element.textContent = `$${newBalance.toFixed(2)}`;\n        }\n    });\n}\n\n/**\n * Handle filter changes\n */\nfunction handleFilterChange(e) {\n    e.preventDefault();\n    \n    const filterValue = e.target.textContent;\n    showAlert(`Filtering by: ${filterValue}`, 'info');\n    \n    // Here you would typically apply the filter\n}\n\n/**\n * Handle logout\n */\nfunction handleLogout(e) {\n    e.preventDefault();\n    \n    // Clear session data using CONFIG\n    localStorage.removeItem(CONFIG.STORAGE.USER);\n    localStorage.removeItem(CONFIG.STORAGE.TOKEN);\n    localStorage.removeItem(CONFIG.STORAGE.SESSION);\n    \n    // Show message and redirect\n    showAlert('Logged out successfully!', 'success');\n    \n    setTimeout(() => {\n        window.location.href = getRelativePathToRoot() + CONFIG.ROUTES.HOME;\n    }, 1000);\n}\n\n/**\n * Handle rating interactions\n */\nfunction handleRating(e) {\n    e.preventDefault();\n    \n    const starElement = e.currentTarget;\n    const rating = parseInt(starElement.dataset.rating) || 1;\n    const videoId = starElement.closest('.video-card')?.dataset.videoId || 'demo';\n    \n    // Update star display\n    const allStars = starElement.parentElement.querySelectorAll('.fa-star');\n    allStars.forEach((star, index) => {\n        if (index < rating) {\n            star.classList.add('text-warning');\n            star.classList.remove('text-muted');\n        } else {\n            star.classList.add('text-muted');\n            star.classList.remove('text-warning');\n        }\n    });\n    \n    // Save rating (simulate API call)\n    console.log(`Video ${videoId} rated ${rating} stars`);\n    showAlert(`Rated ${rating} stars!`, 'success', 2000);\n}\n\n/**\n * Handle bookmark functionality\n */\nfunction handleBookmark(e) {\n    e.preventDefault();\n    \n    const button = e.currentTarget;\n    const videoId = button.closest('.video-card')?.dataset.videoId || 'demo';\n    const icon = button.querySelector('i');\n    \n    if (icon.classList.contains('far')) {\n        // Add to bookmarks\n        icon.classList.remove('far');\n        icon.classList.add('fas');\n        button.classList.add('btn-warning');\n        button.classList.remove('btn-outline-secondary');\n        showAlert('Added to library!', 'success', 2000);\n    } else {\n        // Remove from bookmarks\n        icon.classList.add('far');\n        icon.classList.remove('fas');\n        button.classList.remove('btn-warning');\n        button.classList.add('btn-outline-secondary');\n        showAlert('Removed from library!', 'info', 2000);\n    }\n    \n    console.log(`Video ${videoId} bookmark toggled`);\n}\n\n/**\n * Load dashboard data\n */\nfunction loadDashboardData() {\n    // Load user-specific data\n    loadUserStats();\n    \n    // Load videos\n    loadVideos();\n    \n    // Load transactions\n    loadTransactions();\n}\n\n/**\n * Load section-specific data\n */\nfunction loadSectionData(sectionName) {\n    switch (sectionName) {\n        case 'videos':\n            loadVideos();\n            break;\n        case 'analytics':\n            loadAnalytics();\n            break;\n        case 'earnings':\n            loadEarnings();\n            break;\n        case 'wallet':\n            loadWalletData();\n            break;\n        case 'library':\n            loadLibrary();\n            break;\n        case 'history':\n            loadHistory();\n            break;\n    }\n}\n\n/**\n * Load user statistics\n */\nfunction loadUserStats() {\n    // This would typically fetch real data from an API\n    console.log('Loading user stats...');\n}\n\n/**\n * Load videos\n */\nfunction loadVideos() {\n    console.log('Loading videos...');\n    // This would typically fetch videos from an API\n}\n\n/**\n * Load analytics\n */\nfunction loadAnalytics() {\n    console.log('Loading analytics...');\n    // This would typically fetch analytics data\n}\n\n/**\n * Load earnings\n */\nfunction loadEarnings() {\n    console.log('Loading earnings...');\n    // This would typically fetch earnings data\n}\n\n/**\n * Load wallet data\n */\nfunction loadWalletData() {\n    console.log('Loading wallet data...');\n    // This would typically fetch wallet transactions\n}\n\n/**\n * Load library\n */\nfunction loadLibrary() {\n    console.log('Loading library...');\n    // This would typically fetch purchased videos\n}\n\n/**\n * Load history\n */\nfunction loadHistory() {\n    console.log('Loading watch history...');\n    // This would typically fetch watch history\n}\n\n/**\n * Load transactions\n */\nfunction loadTransactions() {\n    console.log('Loading transactions...');\n    // This would typically fetch transaction history\n}\n\n/**\n * Utility functions\n */\n\n/**\n * Format file size\n */\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    \n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Set field error\n */\nfunction setFieldError(field, message) {\n    field.classList.add('is-invalid');\n    \n    let feedback = field.parentElement.querySelector('.invalid-feedback');\n    if (!feedback) {\n        feedback = document.createElement('div');\n        feedback.className = 'invalid-feedback';\n        field.parentElement.appendChild(feedback);\n    }\n    feedback.textContent = message;\n}\n\n/**\n * Add loading state to element\n */\nfunction addLoadingState(element, text = 'Loading...') {\n    element.disabled = true;\n    element.dataset.originalText = element.textContent;\n    element.innerHTML = `<i class=\"fas fa-spinner fa-spin me-2\"></i>${text}`;\n}\n\n/**\n * Remove loading state from element\n */\nfunction removeLoadingState(element) {\n    element.disabled = false;\n    element.textContent = element.dataset.originalText || 'Submit';\n    delete element.dataset.originalText;\n}\n\n/**\n * Show alert message\n */\nfunction showAlert(message, type = 'info') {\n    const alertElement = document.createElement('div');\n    alertElement.className = `alert alert-${type} alert-dismissible fade show position-fixed`;\n    alertElement.style.cssText = `\n        top: 20px;\n        right: 20px;\n        z-index: 9999;\n        min-width: 300px;\n        max-width: 400px;\n    `;\n    \n    alertElement.innerHTML = `\n        <i class=\"fas fa-${getAlertIcon(type)} me-2\"></i>\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    document.body.appendChild(alertElement);\n    \n    // Auto dismiss after 5 seconds\n    setTimeout(() => {\n        if (alertElement.parentElement) {\n            alertElement.remove();\n        }\n    }, 5000);\n}\n\n/**\n * Get alert icon based on type\n */\nfunction getAlertIcon(type) {\n    const icons = {\n        success: 'check-circle',\n        danger: 'exclamation-circle',\n        warning: 'exclamation-triangle',\n        info: 'info-circle'\n    };\n    return icons[type] || 'info-circle';\n}\n\n// Global functions for inline handlers\nwindow.processPurchase = processPurchase;\nwindow.openVideoModal = openVideoModal;\n\n// Export for testing\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = {\n        switchSection,\n        handleVideoUpload,\n        formatFileSize\n    };\n}\n","size_bytes":26398},"assets/js/main.js":{"content":"/**\n * Main JavaScript file for VideoShare platform\n * Handles global functionality and navigation\n */\n\n// Global variables\nlet currentUser = null;\nlet isLoggedIn = false;\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeApp();\n    setupEventListeners();\n    checkAuthStatus();\n});\n\n/**\n * Initialize the application\n */\nfunction initializeApp() {\n    console.log('VideoShare platform initialized');\n    \n    // Set up smooth scrolling for anchor links\n    setupSmoothScrolling();\n    \n    // Initialize tooltips and popovers\n    initializeBootstrapComponents();\n    \n    // Setup theme management\n    initializeTheme();\n}\n\n/**\n * Setup global event listeners\n */\nfunction setupEventListeners() {\n    // Handle navbar toggle on mobile\n    const navbarToggler = document.querySelector('.navbar-toggler');\n    if (navbarToggler) {\n        navbarToggler.addEventListener('click', function() {\n            const navbar = document.querySelector('.navbar-collapse');\n            navbar.classList.toggle('show');\n        });\n    }\n    \n    // Handle form submissions\n    const forms = document.querySelectorAll('form');\n    forms.forEach(form => {\n        form.addEventListener('submit', handleFormSubmission);\n    });\n    \n    // Handle external links\n    const externalLinks = document.querySelectorAll('a[href^=\"http\"]');\n    externalLinks.forEach(link => {\n        link.setAttribute('target', '_blank');\n        link.setAttribute('rel', 'noopener noreferrer');\n    });\n}\n\n/**\n * Setup smooth scrolling for anchor links\n */\nfunction setupSmoothScrolling() {\n    const anchors = document.querySelectorAll('a[href^=\"#\"]');\n    anchors.forEach(anchor => {\n        anchor.addEventListener('click', function(e) {\n            const targetId = this.getAttribute('href');\n            const targetElement = document.querySelector(targetId);\n            \n            if (targetElement) {\n                e.preventDefault();\n                targetElement.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start'\n                });\n            }\n        });\n    });\n}\n\n/**\n * Initialize Bootstrap components\n */\nfunction initializeBootstrapComponents() {\n    // Initialize tooltips\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => \n        new bootstrap.Tooltip(tooltipTriggerEl)\n    );\n    \n    // Initialize popovers\n    const popoverTriggerList = document.querySelectorAll('[data-bs-toggle=\"popover\"]');\n    const popoverList = [...popoverTriggerList].map(popoverTriggerEl => \n        new bootstrap.Popover(popoverTriggerEl)\n    );\n}\n\n/**\n * Initialize theme management\n */\nfunction initializeTheme() {\n    const savedTheme = localStorage.getItem('videoShareTheme') || 'light';\n    document.documentElement.setAttribute('data-theme', savedTheme);\n}\n\n/**\n * Check authentication status\n */\nfunction checkAuthStatus() {\n    const token = localStorage.getItem('videoShareToken');\n    const userData = localStorage.getItem('videoShareUser');\n    \n    if (token && userData) {\n        try {\n            currentUser = JSON.parse(userData);\n            isLoggedIn = true;\n            updateNavigation();\n        } catch (error) {\n            console.error('Error parsing user data:', error);\n            clearAuthData();\n        }\n    }\n}\n\n/**\n * Update navigation based on auth status\n */\nfunction updateNavigation() {\n    const loginLinks = document.querySelectorAll('.nav-login');\n    const userLinks = document.querySelectorAll('.nav-user');\n    \n    if (isLoggedIn) {\n        loginLinks.forEach(link => link.style.display = 'none');\n        userLinks.forEach(link => link.style.display = 'block');\n    } else {\n        loginLinks.forEach(link => link.style.display = 'block');\n        userLinks.forEach(link => link.style.display = 'none');\n    }\n}\n\n/**\n * Handle form submission\n */\nfunction handleFormSubmission(e) {\n    const form = e.target;\n    const formId = form.id;\n    \n    // Prevent default submission for demo purposes\n    e.preventDefault();\n    \n    // Add form validation\n    if (!form.checkValidity()) {\n        form.classList.add('was-validated');\n        return;\n    }\n    \n    // Handle specific forms\n    switch (formId) {\n        case 'contactForm':\n            handleContactForm(form);\n            break;\n        case 'newsletterForm':\n            handleNewsletterForm(form);\n            break;\n        default:\n            console.log('Form submitted:', formId);\n    }\n}\n\n/**\n * Handle contact form submission\n */\nfunction handleContactForm(form) {\n    const formData = new FormData(form);\n    \n    // Show loading state\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\n    const originalText = submitBtn.textContent;\n    submitBtn.disabled = true;\n    submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Sending...';\n    \n    // Simulate form submission\n    setTimeout(() => {\n        showAlert('Thank you for your message! We\\'ll get back to you soon.', 'success');\n        form.reset();\n        form.classList.remove('was-validated');\n        \n        // Reset button\n        submitBtn.disabled = false;\n        submitBtn.textContent = originalText;\n    }, 2000);\n}\n\n/**\n * Handle newsletter form submission\n */\nfunction handleNewsletterForm(form) {\n    const email = form.querySelector('input[type=\"email\"]').value;\n    \n    if (isValidEmail(email)) {\n        showAlert('Thank you for subscribing to our newsletter!', 'success');\n        form.reset();\n    } else {\n        showAlert('Please enter a valid email address.', 'danger');\n    }\n}\n\n/**\n * Clear authentication data\n */\nfunction clearAuthData() {\n    localStorage.removeItem('videoShareToken');\n    localStorage.removeItem('videoShareUser');\n    currentUser = null;\n    isLoggedIn = false;\n    updateNavigation();\n}\n\n/**\n * Show alert message\n */\nfunction showAlert(message, type = 'info') {\n    const alertContainer = document.querySelector('.alert-container') || document.body;\n    \n    const alertElement = document.createElement('div');\n    alertElement.className = `alert alert-${type} alert-dismissible fade show position-fixed`;\n    alertElement.style.top = '20px';\n    alertElement.style.right = '20px';\n    alertElement.style.zIndex = '9999';\n    alertElement.style.minWidth = '300px';\n    \n    alertElement.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    alertContainer.appendChild(alertElement);\n    \n    // Auto dismiss after 5 seconds\n    setTimeout(() => {\n        if (alertElement.parentElement) {\n            alertElement.remove();\n        }\n    }, 5000);\n}\n\n/**\n * Utility function to validate email\n */\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\n/**\n * Utility function to format currency\n */\nfunction formatCurrency(amount, currency = 'USD') {\n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency\n    }).format(amount);\n}\n\n/**\n * Utility function to format date\n */\nfunction formatDate(date, options = {}) {\n    const defaultOptions = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    };\n    \n    return new Intl.DateTimeFormat('en-US', { ...defaultOptions, ...options })\n        .format(new Date(date));\n}\n\n/**\n * Utility function to truncate text\n */\nfunction truncateText(text, maxLength) {\n    if (text.length <= maxLength) {\n        return text;\n    }\n    return text.substr(0, maxLength) + '...';\n}\n\n/**\n * Utility function to debounce function calls\n */\nfunction debounce(func, wait, immediate) {\n    let timeout;\n    return function executedFunction() {\n        const context = this;\n        const args = arguments;\n        \n        const later = function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        \n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        \n        if (callNow) func.apply(context, args);\n    };\n}\n\n/**\n * Add loading state to element\n */\nfunction addLoadingState(element, text = 'Loading...') {\n    element.disabled = true;\n    element.dataset.originalText = element.textContent;\n    element.innerHTML = `<i class=\"fas fa-spinner fa-spin me-2\"></i>${text}`;\n}\n\n/**\n * Remove loading state from element\n */\nfunction removeLoadingState(element) {\n    element.disabled = false;\n    element.textContent = element.dataset.originalText || 'Submit';\n    delete element.dataset.originalText;\n}\n\n/**\n * Handle window resize events\n */\nwindow.addEventListener('resize', debounce(function() {\n    // Handle responsive adjustments\n    updateLayout();\n}, 250));\n\n/**\n * Update layout for responsive design\n */\nfunction updateLayout() {\n    const isMobile = window.innerWidth < 768;\n    document.body.classList.toggle('mobile-view', isMobile);\n}\n\n/**\n * Handle keyboard navigation\n */\ndocument.addEventListener('keydown', function(e) {\n    // Handle escape key to close modals/dropdowns\n    if (e.key === 'Escape') {\n        const openModal = document.querySelector('.modal.show');\n        if (openModal) {\n            bootstrap.Modal.getInstance(openModal)?.hide();\n        }\n        \n        const openDropdown = document.querySelector('.dropdown-menu.show');\n        if (openDropdown) {\n            openDropdown.classList.remove('show');\n        }\n    }\n});\n\n// Export functions for use in other files\nwindow.VideoShare = {\n    showAlert,\n    formatCurrency,\n    formatDate,\n    truncateText,\n    debounce,\n    addLoadingState,\n    removeLoadingState,\n    isValidEmail,\n    clearAuthData,\n    checkAuthStatus\n};\n","size_bytes":9820},"assets/js/config.js":{"content":"/**\n * Configuration file for VideoShare platform\n * Contains constants, routes, and configuration settings\n * \n * @version 1.0.0\n * @author VideoShare Development Team\n */\n\n// ========================\n// APPLICATION CONFIGURATION\n// ========================\n\nconst CONFIG = {\n    // Application settings\n    APP: {\n        NAME: 'VideoShare',\n        VERSION: '1.0.0',\n        ENVIRONMENT: 'development'\n    },\n\n    // Routes for navigation\n    ROUTES: {\n        HOME: 'index.html',\n        LOGIN: 'login.html',\n        SIGNUP: 'signup.html',\n        FORGOT_PASSWORD: 'forgot-password.html',\n        CREATOR_DASHBOARD: 'creator/creator-dashboard.html',\n        VIEWER_DASHBOARD: 'viewer/viewer-dashboard.html'\n    },\n\n    // Dashboard sections\n    SECTIONS: {\n        CREATOR: ['dashboard', 'videos', 'upload', 'analytics', 'earnings', 'settings'],\n        VIEWER: ['discover', 'library', 'history', 'trending', 'categories', 'subscriptions', 'wallet']\n    },\n\n    // Demo accounts for testing\n    DEMO_ACCOUNTS: {\n        'creator@demo.com': {\n            password: 'password123',\n            role: 'creator',\n            name: 'Demo Creator',\n            id: 'creator_001'\n        },\n        'viewer@demo.com': {\n            password: 'password123',\n            role: 'viewer',\n            name: 'Demo Viewer',\n            id: 'viewer_001'\n        }\n    },\n\n    // UI settings\n    UI: {\n        ALERT_TIMEOUT: 5000,\n        REDIRECT_DELAY: 1500,\n        LOADING_TIMEOUT: 2000\n    },\n\n    // Local storage keys\n    STORAGE: {\n        USER: 'videoShareUser',\n        TOKEN: 'videoShareToken',\n        SESSION: 'videoShareSession'\n    }\n};\n\n// ========================\n// UTILITY FUNCTIONS\n// ========================\n\n/**\n * Get dashboard URL based on user role\n * @param {string} role - User role ('creator' or 'viewer')\n * @returns {string} Dashboard URL\n */\nfunction getDashboardUrl(role) {\n    return role === 'creator' ? CONFIG.ROUTES.CREATOR_DASHBOARD : CONFIG.ROUTES.VIEWER_DASHBOARD;\n}\n\n/**\n * Get sections for user role\n * @param {string} role - User role\n * @returns {Array} Array of available sections\n */\nfunction getSectionsForRole(role) {\n    return role === 'creator' ? CONFIG.SECTIONS.CREATOR : CONFIG.SECTIONS.VIEWER;\n}\n\n/**\n * Check if current page is a dashboard\n * @returns {boolean} True if on dashboard page\n */\nfunction isDashboardPage() {\n    return window.location.pathname.includes('dashboard');\n}\n\n/**\n * Get relative path from dashboard to root\n * @returns {string} Relative path\n */\nfunction getRelativePathToRoot() {\n    return isDashboardPage() ? '../' : '';\n}\n\n// Export configuration (for ES6 modules compatibility)\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = CONFIG;\n}","size_bytes":2735}}}